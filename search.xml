<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-0xGame-week1-wp-crypto</title>
    <url>/post/6a80d23a.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-1-What’s-CBC"><a href="#Week-1-What’s-CBC" class="headerlink" title="[Week 1] What’s CBC?"></a>[Week 1] What’s CBC?</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典的加密预处理？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">	a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(text)%<span class="number">8</span>:</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		pad = <span class="number">8</span>-(<span class="built_in">len</span>(text)%<span class="number">8</span>)</span><br><span class="line">		text += pad.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)*pad</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	text = pad(text)</span><br><span class="line">	block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">		tmp = bytes_xor(iv,i)</span><br><span class="line">		iv = encrypt(tmp,key)</span><br><span class="line">		result += iv</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">		result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">enc = (Encrypt_CBC(flag,iv,key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enc = b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目比较简单，就不梳理流程了，主要漏洞在于encrypt函数中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到，key只用了最低的一个字节来进行加密，因此有两种思路：</p>
<ul>
<li>爆破256种可能的key，均进行解密，在解密出来的文本中，有0xGame的flag头即为正确解密</li>
<li>用已知的0xGame这个flag头直接确定key，再进行解密</li>
</ul>
<p>不管用哪个思路，最终发现key的最低字节是 b’\x8f’</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">	a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">key = <span class="number">8</span>*<span class="string">b&#x27;\x8f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">str</span>(bytes_xor(bytes_xor(enc[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],iv),key))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">	iv = enc[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;098f6bcd4621d373cade4e832627b4f6&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-密码，觅码，先有-再密"><a href="#Week-1-密码，觅码，先有-再密" class="headerlink" title="[Week 1] 密码，觅码，先有*再密"></a>[Week 1] 密码，觅码，先有*再密</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开始挑战BOSS前，先来通关新手村吧</span><br></pre></td></tr></table></figure>
<p>hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: Test your python</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag <span class="comment">#从中导入秘密的flag，这是我们要破解的信息</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="comment">#从函数库导入一些编码函数</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line">lent = <span class="built_in">len</span>(flag)</span><br><span class="line">flag = [flag[i*(lent//<span class="number">4</span>):(i+<span class="number">1</span>)*(lent//<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">c1 = bytes_to_long(flag[<span class="number">0</span>])</span><br><span class="line">c2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">1</span>]])</span><br><span class="line">c3 = b64encode(flag[<span class="number">2</span>])</span><br><span class="line">c4 = flag[<span class="number">3</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1?= <span class="subst">&#123;<span class="built_in">pow</span>(c1,<span class="number">5</span>)&#125;</span>\nc2 = <span class="subst">&#123;c2&#125;</span>\nc3 = <span class="subst">&#123;c3&#125;</span>\nc4 = <span class="subst">&#123;c4&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1?= 2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line"><span class="string">c2 = 10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100</span></span><br><span class="line"><span class="string">c3 = b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line"><span class="string">c4 = e4bbace79a8443727970746fe68c91e68898e590a72121217d</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#全是乱码，那咋办嘛？</span></span><br></pre></td></tr></table></figure>
<p>可以看到flag被分为四份，进行不同的编码，那么首先要对应解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;0xGame&#123; \xe6\x81\xad\xe5\x96\x9c\xe4\xbd\xa0,\xe5\xb7\xb2\xe7\xbb\x8f\xe7&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x90\x86\xe8\xa7\xa3\xe4\xba\x86\xe4\xbf\xa1\xe6\x81\xaf\xe6\x98\xaf\xe5\xa6\x82\xe4\xbd\x95\xe7\xbc&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x96\xe7\xa0\x81\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xbc\x80\xe5\xa7\x8b\xe6\x88\x91&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xbb\xac\xe7\x9a\x84Crypto\xe6\x8c\x91\xe6\x88\x98\xe5\x90\xa7!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>解出来后，发现解密内容除了flag头尾，剩下的仍然是字节流，猜测可能是汉字编码，解码即可</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line">c1 = iroot(c1,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line">c2 = <span class="string">&quot;10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100&quot;</span></span><br><span class="line">c3 = <span class="string">b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line">c4 = <span class="string">&quot;e4bbace79a8443727970746fe68c91e68898e590a72121217d&quot;</span></span><br><span class="line"></span><br><span class="line">t1 = long_to_bytes(c1)</span><br><span class="line">t2 = long_to_bytes(<span class="built_in">int</span>(c2,<span class="number">2</span>))</span><br><span class="line">t3 = b64decode(c3)</span><br><span class="line">t4 = long_to_bytes(<span class="built_in">int</span>(c4,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">t = t1+t2+t3+t4</span><br><span class="line"><span class="built_in">print</span>(t.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123; 恭喜你,已经理解了信息是如何编码的，那么开始我们的Crypto挑战吧!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-Take-my-bag"><a href="#Week-1-Take-my-bag" class="headerlink" title="[Week 1] Take my bag!"></a>[Week 1] Take my bag!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我包呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">	m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">	enc = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">		enc += init[i] * <span class="built_in">int</span>(m[i]) % n</span><br><span class="line">	<span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">n = getPrime(<span class="number">512</span>)</span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w=<span class="subst">&#123;w&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w=16221818045491479713</span></span><br><span class="line"><span class="string">n=9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line"><span class="string">c=4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个背包加密，需要注意到的是这里的 pow(3, i) 是一个超递增序列，因此有两种方法：</p>
<ul>
<li>直接当作普通背包加密，用格基规约做</li>
<li>如果flag长度较短，那么很可能前面的背包加密根本没有取模，可以直接当作超递增序列解密</li>
</ul>
<p>无论哪个方法都不麻烦，当然因为是新生赛所以推荐先学会第二种方法</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">w=<span class="number">16221818045491479713</span></span><br><span class="line">n=<span class="number">9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line">c=<span class="number">4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"></span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(init)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = init[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line"></span><br><span class="line">m = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">m = <span class="string">&quot;&quot;</span>.join(m)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Welc0me_2_Crypt0_G@me!#$&amp;%&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-BabyRSA"><a href="#Week-1-BabyRSA" class="headerlink" title="[Week 1] BabyRSA"></a>[Week 1] BabyRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典的数学，经典的算法</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getN</span>():</span><br><span class="line">	N = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">		tmp = getPrime(<span class="number">32</span>)</span><br><span class="line">		N *= tmp</span><br><span class="line">	<span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line">mask = getrandbits(<span class="number">256</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = getN()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m*mask,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"><span class="string">mask = 54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多素数的RSA，factordb分解后直接解密即可，最后还需乘上mask的逆元</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line">mask = <span class="number">54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"></span><br><span class="line">plist = [<span class="number">2329990801</span>, <span class="number">2436711469</span>, <span class="number">2732757047</span>, <span class="number">2770441151</span>, <span class="number">2821163021</span>, <span class="number">2864469667</span>, <span class="number">2995527113</span>, <span class="number">3111632101</span>, <span class="number">3162958289</span>, <span class="number">3267547559</span>, <span class="number">3281340371</span>, <span class="number">3479527847</span>, <span class="number">3561068417</span>, <span class="number">3978177241</span>, <span class="number">4134768233</span>, <span class="number">4160088337</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi *= (i-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">mmask = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = mmask // mask</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Magic_M@th_Make_Crypt0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-猜谜"><a href="#Week-1-猜谜" class="headerlink" title="[Week 1] 猜谜"></a>[Week 1] 猜谜</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么情况，密钥不见了？(flag格式: 0xGame&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">text</span>):</span><br><span class="line">	code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">	text = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])</span><br><span class="line">	length = <span class="built_in">len</span>(text)</span><br><span class="line">	pad = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> length%<span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">		text += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">		pad = <span class="string">b&#x27;==&#x27;</span></span><br><span class="line">	<span class="keyword">elif</span> length%<span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">		text += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">		pad = <span class="string">b&#x27;=&#x27;</span></span><br><span class="line">	result = [code[<span class="built_in">int</span>(text[<span class="number">3</span>*i:<span class="number">3</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text)//<span class="number">3</span>)]</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result).encode()+pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">		result += (key[i%<span class="number">7</span>]^(flag[i]+i)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = enc(encrypt(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>加密流程如下：</p>
<ul>
<li>flag 是一个字节流，记其长度为 l</li>
<li>将 flag[i] + i 与 key[i%7] 异或，并转为一个字节后，得到 encrypt(flag)</li>
<li>将 encrypt(flag) 进行 enc 加密</li>
</ul>
<p>其中，enc加密过程为：</p>
<ul>
<li>将 encrypt(flag) 的每个字节转化为二进制，并补齐 8 位</li>
<li>把每个字节的二进制再拼接在一起，得到一个01串</li>
<li>将01串每三位转化为十进制数，作为当前需添加的密文字符在 code 中的下标</li>
<li>添加完所有密文后，填充上对应补充字节，作为密文给出</li>
</ul>
<p>那么解密流程就是：先恢复 enc，再恢复 encrypt</p>
<p>enc的恢复是容易的，简单逆向回去就行，当然需要注意一下解填充：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx&#x27;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    t = code.index(i)</span><br><span class="line">    temp += <span class="built_in">str</span>(<span class="built_in">bin</span>(t)[<span class="number">2</span>:].zfill(<span class="number">3</span>))</span><br><span class="line">temp = temp[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)//<span class="number">8</span>):</span><br><span class="line">    enc.append(<span class="built_in">int</span>(temp[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>然后就是恢复encrypt，注意到我们拥有flag头0xGame{，刚好七个，因此可以直接恢复密钥，然后对应解密</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx&#x27;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    t = code.index(i)</span><br><span class="line">    temp += <span class="built_in">str</span>(<span class="built_in">bin</span>(t)[<span class="number">2</span>:].zfill(<span class="number">3</span>))</span><br><span class="line">temp = temp[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)//<span class="number">8</span>):</span><br><span class="line">    enc.append(<span class="built_in">int</span>(temp[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">&quot;0xGame&#123;&quot;</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    key.append((enc[i])^(<span class="built_in">ord</span>(prefix[i])+i))</span><br><span class="line"></span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    result += ((key[i%<span class="number">7</span>]^((enc[i])))-i).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Kn0wn_pl@intext_Att@ck!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-Vigenere"><a href="#Week-1-Vigenere" class="headerlink" title="[Week 1] Vigenere"></a>[Week 1] Vigenere</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：0dGmqk&#123;79ap4i0522g0a67m6i196he52357q60f&#125; 古老而神秘的加密方式？</span><br></pre></td></tr></table></figure>
<p>没有附件，那么结合题目内容就知道用的是Vigenere加密，上cyberchef，直接用flag头就能看出密钥是game：</p>
<p><img src="/post/6a80d23a/image-20231001192856742.png" alt="image-20231001192856742"></p>
<p>那么用game解密就好：</p>
<p><img src="/post/6a80d23a/image-20231001192949166.png" alt="image-20231001192949166"></p>
<p>flag:</p>
<p><strong>0xGame{79ad4e0522a0a67a6e196be52357e60b}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-0xGame-week2-wp-crypto</title>
    <url>/post/aba42241.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-2-Fault-Fault"><a href="#Week-2-Fault-Fault" class="headerlink" title="[Week 2] Fault!Fault!"></a>[Week 2] Fault!Fault!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">机缘巧合之下，小Z意外获得了一张用于身份认证的加密芯片，这块芯片可以输入一定的信息，并输出签名后的结果。经过一段时间的逆向工作之后，小Z得到了其中的签名逻辑。</span><br><span class="line"></span><br><span class="line">小Z转念一想，如果私钥是存储在芯片中的，那么我是否能够通过某种办法读取到其中的私钥？是否意味着我可以任意伪造签名？</span><br><span class="line"></span><br><span class="line">于是小Z重金买下工具，，，那么在拥有干涉加解密的能力前提下，这个攻击要如何实施呢……</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,d,n,index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;something go wrong&quot;&quot;&quot;</span></span><br><span class="line">    d_ = d^(<span class="number">1</span>&lt;&lt;(index))</span><br><span class="line">    m_ = <span class="built_in">pow</span>(c,d_,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(m_)</span><br><span class="line"></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Welc0me_2_0xGame2023!</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| [S]ign                     |</span></span><br><span class="line"><span class="string">| [F]ault injection          |</span></span><br><span class="line"><span class="string">| [C]heck answer             |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;验证函数&#x27;&#x27;&#x27;</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;以上是交互部分&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;题干&#x27;&#x27;&#x27;</span></span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        self.send(MEMU)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        e = <span class="number">65537</span></span><br><span class="line">        n = q*p</span><br><span class="line">        phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e,phi)</span><br><span class="line"></span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;S&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;What you want to sign?:&#x27;</span>)</span><br><span class="line">                m = bytes_to_long(self.recv())</span><br><span class="line">                c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">                self.send(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>\n<span class="subst">&#123;e&#125;</span>\n<span class="subst">&#123;c&#125;</span>&#x27;</span>.encode())</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;F&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Give me the Signatrue:&#x27;</span>)</span><br><span class="line">                Signatrue = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                self.send(<span class="string">b&#x27;Where you want to interfere?&#x27;</span>)</span><br><span class="line">                index = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                self.send(<span class="string">b&#x27;The decrypt text:&#x27;</span>)</span><br><span class="line">                self.send(decrypt(Signatrue,d,n,index).encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;C&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Give me the private key:&#x27;</span>)</span><br><span class="line">                ans = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                <span class="keyword">if</span> ans == d:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Here is your flag:&#x27;</span>)</span><br><span class="line">                    self.send(flag)</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10005</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>梳理一下题目加密流程：</p>
<ul>
<li>连接上靶机后，计时开始，限时300s(这么长的限时就暗示可能需要不断交互)</li>
<li>先通过一个proof_of_work，具体为通过哈希值，爆破四位十六进制串</li>
<li>通过proof后，生成RSA加密所需的p，q，e，n，phi，d等参数，然后可以有如下选项：</li>
<li><ul>
<li>输入”S”，可以对任意明文m进行加密，并返回密文c及公钥对(n，e)</li>
<li>输入”F”，可以对任意密文进行故障解密，故障解密具体是什么意思一会儿讲</li>
<li>输入”C”，可以输入一个值，如果该值与d相等，则获得flag</li>
</ul>
</li>
</ul>
<p>其中，故障解密的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,d,n,index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;something go wrong&quot;&quot;&quot;</span></span><br><span class="line">    d_ = d^(<span class="number">1</span>&lt;&lt;(index))</span><br><span class="line">    m_ = <span class="built_in">pow</span>(c,d_,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(m_)</span><br></pre></td></tr></table></figure>
<p>可以看到，相比于常规的RSA解密指数，用在故障解密中的指数d的index这一比特位发生了翻转，也就是第index比特位的0变成1，或1变成0。而这种翻转其实可以写成如下简单形式：</p>
<p>0变成1：</p>
<script type="math/tex; mode=display">
d' = d + 2^{index}</script><p>1变成0：</p>
<script type="math/tex; mode=display">
d' = d - 2^{index}</script><p>我们用这个指数对RSA解密，就得到：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv c^{d \pm 2^{index}} \equiv c^d *c^{\pm 2^{index}} \quad (mod\;n)</script><p>而具体是加号还是减号，就取决于d的那一bit原本是0还是1，因此，我们就有了判别d的某一比特位的方法：</p>
<p>如果d的第index比特位是0，则：</p>
<script type="math/tex; mode=display">
d' = d + 2^{index}</script><script type="math/tex; mode=display">
c^{d'} \equiv c^{d + 2^{index}} \equiv c^d *c^{ 2^{index}}\equiv m*c^{2^{index}} \quad (mod\;n)</script><p>也就是：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv m*c^{2^{index}} \quad (mod\;n)</script><p>而如果d的第index比特位为1，则正好相反，以下式子成立：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv m*c^{-2^{index}} \quad (mod\;n)</script><p>因此，通过反复更改index并令其解密，我们就能得到d的所有比特位，然后就可以还原出d并上交得到flag。但是对于我的电脑来说，300s限制有点紧张，所以要不断掐掉proof过的慢的交互，不然很难完整复原d的所有比特位。不过之后发现，其实该容器的p，q，n，e都不会变，因此d也不会变，所以完全可以分两次攻击得到不同比特位，然后组合一下就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>,<span class="number">10005</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">proof_of_work()</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;-----/&quot;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">r.sendline(<span class="string">b&quot;S&quot;</span>)</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;What you want to sign?:&quot;</span>)</span><br><span class="line">r.sendline(long_to_bytes(m))</span><br><span class="line">r.recvline()</span><br><span class="line">n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">c = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">d = <span class="string">&quot;&quot;</span>	</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1024</span>)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;F&quot;</span>)	</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;Give me the Signatrue:&quot;</span>)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(c).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;Where you want to interfere?&quot;</span>)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;The decrypt text:&quot;</span>)</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        m_ = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">        t1 = (powmod(c,<span class="number">2</span>**index,n) * m) % n</span><br><span class="line">        t2 = (powmod(c,-<span class="number">2</span>**index,n) * m) % n</span><br><span class="line">        <span class="keyword">if</span>(t1 == m_):</span><br><span class="line">            d += <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="keyword">elif</span>(t2 == m_):</span><br><span class="line">            d += <span class="string">&quot;1&quot;</span>	</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">int</span>(d[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;C&quot;</span>)</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;Give me the private key:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(d).encode())</span><br><span class="line">temp = r.recvall()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;F@ult_Milest0ne!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-EzLFSR"><a href="#Week-2-EzLFSR" class="headerlink" title="[Week 2] EzLFSR"></a>[Week 2] EzLFSR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;0xGame&#123;&#x27;</span>+secret+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_mask</span>(<span class="params">m</span>):</span><br><span class="line">    tmp = <span class="built_in">str</span>(<span class="built_in">bin</span>(bytes_to_long(m)))[<span class="number">2</span>:].zfill(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2bits</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits2string</span>(<span class="params">bs</span>):</span><br><span class="line">    s = [<span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bs]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">state, mask</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(state) == <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(mask)  == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        output = output ^ (state[i] &amp; mask[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    initState = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    secret = make_mask(secret)</span><br><span class="line">    mask = string2bits(secret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> secret: <span class="keyword">assert</span>(b == <span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> b == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(secret) == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        state = initState[i:]</span><br><span class="line">        output = lfsr(state, mask)</span><br><span class="line">        initState += [output]</span><br><span class="line"></span><br><span class="line">    outputState = bits2string(initState[<span class="number">128</span>:])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outputState =&#x27;</span>, outputState)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outputState = 1101111111011101100001000011111101001000111000110100010011110111010011100110100100111001101010110110101110000011110101000110010010000011111111001111000110111001100111101110010100100001101001111110001010000100111101011011100010000000100000100000100111010110</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>老样子，先梳理题目加密流程：</p>
<ul>
<li>题目把secret变为二进制列表后，作为掩码mask，flag由固定flag头尾及secret组成</li>
<li>给定LFSR的初始序列initState，与mask一样是一个长度为128的二进制列表</li>
<li>用LFSR生成256比特的流密码，并给出。要求我们反推出mask列表，从而求出secret</li>
</ul>
<p>其中，LFSR的生成逻辑如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">state, mask</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(state) == <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(mask)  == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        output = output ^ (state[i] &amp; mask[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p>乍一看可能觉得不太好想，但是再一看，这不就是个GF(2)下的线性方程吗！这是因为：</p>
<ul>
<li>state[i] &amp; mask[i]，可以写成 state[i] * mask[i]</li>
<li>output = output ^ (state[i] &amp; mask[i]) ，其实就是把128个乘积在GF(2)下求和</li>
</ul>
<p>那么这样一来就好做了，把mask当作128个变量组成的列向量，取128个output，就能求解一个满秩的矩阵方程如下：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,128}\\
   m_{2,1} & m_{2,2} &... &m_{2,128} \\
   & &...\\
   m_{127,1} & m_{127,2} &... &m_{127,128} \\
   m_{128,1} & m_{128,2} &... &m_{128,128}  \\
  \end{matrix}
  \right)*
  \left(
 \begin{matrix}
   mask_1\\
   mask_2 \\
   ...\\
   mask_{127} \\
   mask_{128}  \\
  \end{matrix}
  \right)
  =
  \left(
 \begin{matrix}
   output_1\\
   output_2 \\
   ...\\
   output_{127} \\
   output_{128}  \\
  \end{matrix}
  \right)
  \quad(mod\;2)</script><p>求完后转回字符串，再套上flag头尾即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits2string</span>(<span class="params">bs</span>):</span><br><span class="line">    s = [<span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bs]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2bits</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line">outputState = <span class="string">&quot;1101111111011101100001000011111101001000111000110100010011110111010011100110100100111001101010110110101110000011110101000110010010000011111111001111000110111001100111101110010100100001101001111110001010000100111101011011100010000000100000100000100111010110&quot;</span></span><br><span class="line">initState = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">c = string2bits(outputState[:<span class="number">128</span>])</span><br><span class="line">M = [initState[i:] + c[:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">c = vector(GF(<span class="number">2</span>),c)</span><br><span class="line">m = matrix(GF(<span class="number">2</span>),<span class="number">128</span>,<span class="number">128</span>,M)</span><br><span class="line">secret = m.solve_left(c)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(bits2string(secret),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Rec0ver_the_M@sk&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-What’s-CRT"><a href="#Week-2-What’s-CRT" class="headerlink" title="[Week 2] What’s CRT?"></a>[Week 2] What’s CRT?</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先穿袜子后穿鞋，先当**后当爷</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">260792700</span></span><br><span class="line">q,p,q_,p_ = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">gift = [q+p,q_+p_]</span><br><span class="line">n,n_ = q*p,q_*p_</span><br><span class="line">mq_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,q_)</span><br><span class="line">mp_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,p_)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mygift=<span class="subst">&#123;gift&#125;</span>\nmq_=<span class="subst">&#123;mq_&#125;</span>\nmp_=<span class="subst">&#123;mp_&#125;</span>\nn=<span class="subst">&#123;n&#125;</span>\nn_=<span class="subst">&#123;n_&#125;</span>\nc=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mygift=[15925416640901708561793293991573474917595642805739825596593339102414328214313430010166125066639132916608736569443045051644173933089503934675628814467277922, 18342424676996843423829480445042578097182127446865571536445030052846412665700132683433441858073625594933132038175200824257774638419166516796318527302903098]</span></span><br><span class="line"><span class="string">mq_=6229615098788722664392369146712291169948485951371133086154028832805750551655072946170332335458186479565263371985534601035559229403357396564568667218817197</span></span><br><span class="line"><span class="string">mp_=7514598449361191486799480225087938913945061715845128006069296876457814528347371315493644046029376830166983645570092100320566196227210502897068206073043718</span></span><br><span class="line"><span class="string">n=63329068473206068067147844002844348796575899624395867391964805451897110448983910133293450006821779608031734813916287079551030950968978400757306879502402868643716591624454744334316879241573399993026873598478532467624301968439714860262264449471888606538913071413634346381428901358109273203087030763779091664797</span></span><br><span class="line"><span class="string">n_=84078907800136966150486965612788894868587998005459927216462899940718213455112139441858657865215211843183780436155474431592540465189966648565764225210091190218976417210291521208716206733270743675534820816685370480170120230334766919110311980614082807421812749491464201740954627794429460268010183163151688591417</span></span><br><span class="line"><span class="string">c=12623780002384219022772693100787925315981488689172490837413686188416255911213044332780064192900824150269364486747430892667624289724721692959334462348218416297309304391635919115701692314532111050955120844126517392040880404049818026059951326039894605004852370344012563287210613795011783419126458214779488303552</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>不管是题目标题CRT，还是题目描述暗示孙子定理，都是告诉我们这题要用中国剩余定理。</p>
<p>首先，根据题目给的条件，能够很轻松的求出p、q、p‘、q’几个参数。那么由于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mq_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,q_)</span><br><span class="line">mp_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,p_)</span><br></pre></td></tr></table></figure>
<p>可以先用中国剩余定理试一试。但是不行，那应该flag超长了，所以必须把p、q也用上。</p>
<p>而这个e是个偶数，是肯定和p-1,q-1都不互素的，又因为e比较小，所以扔上facrotdb上分解一下：</p>
<p><img src="/post/aba42241/image-20231008171144165.png" alt="image-20231008171144165"></p>
<p>正好，他与phi的公因数也是4，因此把e拆开：</p>
<script type="math/tex; mode=display">
(m^4)^{\frac{e}{4}} \equiv c \quad(mod\;n)</script><p>然后求e/4对phi的逆元d，正常RSA解密就能得到：</p>
<script type="math/tex; mode=display">
m^4 \equiv c^d \quad (mod\;n)</script><p>此时，我们就拥有了关于m^4的三个等式：</p>
<script type="math/tex; mode=display">
m^4 \equiv c^d \quad (mod\;n)</script><script type="math/tex; mode=display">
m^4 \equiv mp' \quad (mod\;p')</script><script type="math/tex; mode=display">
m^4 \equiv mq' \quad (mod\;q')</script><p>中国剩余定理组合，开四次根就能得到flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">e = <span class="number">260792700</span></span><br><span class="line">gift=[<span class="number">15925416640901708561793293991573474917595642805739825596593339102414328214313430010166125066639132916608736569443045051644173933089503934675628814467277922</span>, <span class="number">18342424676996843423829480445042578097182127446865571536445030052846412665700132683433441858073625594933132038175200824257774638419166516796318527302903098</span>]</span><br><span class="line">mq_=<span class="number">6229615098788722664392369146712291169948485951371133086154028832805750551655072946170332335458186479565263371985534601035559229403357396564568667218817197</span></span><br><span class="line">mp_=<span class="number">7514598449361191486799480225087938913945061715845128006069296876457814528347371315493644046029376830166983645570092100320566196227210502897068206073043718</span></span><br><span class="line">n=<span class="number">63329068473206068067147844002844348796575899624395867391964805451897110448983910133293450006821779608031734813916287079551030950968978400757306879502402868643716591624454744334316879241573399993026873598478532467624301968439714860262264449471888606538913071413634346381428901358109273203087030763779091664797</span></span><br><span class="line">n_=<span class="number">84078907800136966150486965612788894868587998005459927216462899940718213455112139441858657865215211843183780436155474431592540465189966648565764225210091190218976417210291521208716206733270743675534820816685370480170120230334766919110311980614082807421812749491464201740954627794429460268010183163151688591417</span></span><br><span class="line">c=<span class="number">12623780002384219022772693100787925315981488689172490837413686188416255911213044332780064192900824150269364486747430892667624289724721692959334462348218416297309304391635919115701692314532111050955120844126517392040880404049818026059951326039894605004852370344012563287210613795011783419126458214779488303552</span></span><br><span class="line"></span><br><span class="line">p = (iroot((gift[<span class="number">0</span>]**<span class="number">2</span> - <span class="number">4</span>*n),<span class="number">2</span>)[<span class="number">0</span>] + gift[<span class="number">0</span>])//<span class="number">2</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">q_ = (iroot((gift[<span class="number">1</span>]**<span class="number">2</span> - <span class="number">4</span>*n_),<span class="number">2</span>)[<span class="number">0</span>] + gift[<span class="number">1</span>])//<span class="number">2</span></span><br><span class="line">p_ = n_ // q_</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">4</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">N = [n,p_,q_]</span><br><span class="line">C = [m,mp_,mq_]</span><br><span class="line">M = crt(N,C)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(M,<span class="number">4</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;7881ed67088e9f72b860f8c376599785&#125;</span></span><br></pre></td></tr></table></figure>
<p>有一个小细节需要注意，如果你按这个方式一直出不来，那么可以检查一下p’、q’是否求反了，是有这个可能性的。</p>
<p><br></p>
<p><br></p>
<h3 id="Week-2-中间的那个人"><a href="#Week-2-中间的那个人" class="headerlink" title="[Week 2] 中间的那个人"></a>[Week 2] 中间的那个人</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小爱(Alice)和小爆(Bob)现在在神秘的幻想乡中需要进行远程通话，但是他们又不希望中间传递的信息被心怀不轨的人窃取——很显然，他们的通话需要加密。但是在双方并未事先沟通好的情况下，他们要如何协商好密钥呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">A = getrandbits(<span class="number">32</span>)</span><br><span class="line">B = getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">Alice = <span class="built_in">pow</span>(g,A,p)</span><br><span class="line">Bob = <span class="built_in">pow</span>(g,B,p)</span><br><span class="line">key = <span class="built_in">pow</span>(Alice,B,p)</span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&quot;0xGame0xGameGAME&quot;</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;g=<span class="subst">&#123;g&#125;</span>\np=<span class="subst">&#123;p&#125;</span>&#x27;</span>)  <span class="comment">#we tell</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bob=<span class="subst">&#123;Bob&#125;</span>&#x27;</span>)     <span class="comment">#Bob tell</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Alice=<span class="subst">&#123;Alice&#125;</span>&#x27;</span>) <span class="comment">#Alice tell</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)<span class="comment">#Here is they secret</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">g=2</span></span><br><span class="line"><span class="string">p=250858685680234165065801734515633434653</span></span><br><span class="line"><span class="string">Bob=33067794433420687511728239091450927373</span></span><br><span class="line"><span class="string">Alice=235866450680721760403251513646370485539</span></span><br><span class="line"><span class="string">enc=b&#x27;s\x04\xbc\x8bT6\x846\xd9\xd6\x83 y\xaah\xde@\xc9\x17\xdc\x04v\x18\xef\xcf\xef\xc5\xfd|\x0e\xca\n\xbd#\x94&#123;\x8e[.\xe8\xe1GU\xfa?\xda\x11w&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个典型的Diffie-Hellman密钥交换协议，其困难性依赖于离散对数在某些有限域下难以求解。但是观察题目生成有限域用的p较小而且较光滑，因此可以直接求解出离散对数，进而得到公用密钥key，然后AES解密即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">g=<span class="number">2</span></span><br><span class="line">p=<span class="number">250858685680234165065801734515633434653</span></span><br><span class="line">Bob=<span class="number">33067794433420687511728239091450927373</span></span><br><span class="line">Alice=<span class="number">235866450680721760403251513646370485539</span></span><br><span class="line">enc=<span class="string">b&#x27;s\x04\xbc\x8bT6\x846\xd9\xd6\x83 y\xaah\xde@\xc9\x17\xdc\x04v\x18\xef\xcf\xef\xc5\xfd|\x0e\xca\n\xbd#\x94&#123;\x8e[.\xe8\xe1GU\xfa?\xda\x11w&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A=discrete_log(mod(Alice,p),mod(g,p))</span></span><br><span class="line"><span class="string">print(A)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">A = <span class="number">3992780394</span></span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&quot;0xGame0xGameGAME&quot;</span></span><br><span class="line">key = <span class="built_in">int</span>(<span class="built_in">pow</span>(Bob,A,p))</span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = aes.decrypt(enc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;51393fe1fd5fc2df1bf018d06f0fa11d&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-EzRSA"><a href="#Week-2-EzRSA" class="headerlink" title="[Week 2] EzRSA"></a>[Week 2] EzRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个小问题。一个定理、一个常见的分解方式、一个不太常见的连分数分解（啥事连分数？）</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> challenges.challenge1 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge1</span><br><span class="line"><span class="keyword">from</span> challenges.challenge2 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge2</span><br><span class="line"><span class="keyword">from</span> challenges.challenge3 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge3</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SCORE = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ____  ____    _    </span></span><br><span class="line"><span class="string">|  _ \/ ___|  / \   </span></span><br><span class="line"><span class="string">| |_) \___ \ / _ \  </span></span><br><span class="line"><span class="string">|  _ &lt; ___) / ___ \ </span></span><br><span class="line"><span class="string">|_| \_\____/_/   \_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Here are four challenges(1, 2, 3), solve them all then you can get flag.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| 1. get public key          |</span></span><br><span class="line"><span class="string">| 2. get cipher text         |</span></span><br><span class="line"><span class="string">| 3. check                   |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;验证函数&#x27;&#x27;&#x27;</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Serve</span>(<span class="params">self, S</span>):</span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            option = self.recv()</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                pubkey = S.pubkey()</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> pubkey:</span><br><span class="line">                    self.send(<span class="built_in">str</span>(s).encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                c = S.encrypt()</span><br><span class="line">                self.send(c.encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                usr_answer = self.recv(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> S.check(usr_answer)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;invaild option&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.send(BANNER.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">f&#x27;your score <span class="subst">&#123;<span class="built_in">sum</span>(SCORE)&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(SCORE) == <span class="number">3</span>:</span><br><span class="line">                self.send(<span class="string">f&quot;here are flag:<span class="subst">&#123;flag&#125;</span>&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.send(<span class="string">b&#x27;select challange&#123;1,2,3&#125;&#x27;</span>)<span class="comment">#</span></span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                S = challenge1()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                S = challenge2()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                S = challenge3()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10006</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一个交互题，要实现的目标就是分别通过他的三个challenge，就可以拿到flag。</p>
<p>那么接下来就一个一个challenge分析。</p>
<h4 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h4><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag1</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.p = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.n = self.q*self.p</span><br><span class="line">        self.g, self.r1 = [random.randint(<span class="number">1</span>, self.q*self.p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        self.gift = <span class="built_in">pow</span>(self.g, self.r1 * (self.p - <span class="number">1</span>), self.n)</span><br><span class="line">        self.m = flag1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure>
<p>题目会给出一个gift，如下：</p>
<script type="math/tex; mode=display">
gift \equiv g^{r_1*(p-1)} \quad(mod\;n)</script><p>那么先同余性质转到模p下，然后费马小定理即可：</p>
<script type="math/tex; mode=display">
gift \equiv g^{r_1*(p-1)} \equiv 1 \quad(mod\;p)</script><p>所以求gcd(gift-1,n)就能得到p，分解n后解密即可。</p>
<h4 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h4><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = flag2</span><br><span class="line">        self.p = self.GetMyPrime(<span class="number">1024</span>)</span><br><span class="line">        self.q = self.GetMyPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetMyPrime</span>(<span class="params">self,bits</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            n = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">                a = choice(sieve_base)</span><br><span class="line">                n *= a</span><br><span class="line">            <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure>
<p>可以看出是p-1光滑，不多说了。</p>
<h4 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag3</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = flag3</span><br><span class="line">        self.p = getPrime(<span class="number">896</span>)</span><br><span class="line">        self.n1 = self.getN()</span><br><span class="line">        self.n2 = self.getN()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getN</span>(<span class="params">self</span>):</span><br><span class="line">        q = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.p = nextprime(self.p)</span><br><span class="line">        <span class="keyword">return</span> q*self.p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.n2)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.n1, self.n2 , self.e</span><br></pre></td></tr></table></figure>
<p>可以发现，题目的两个公钥n1、n2是按如下方式生成的：</p>
<script type="math/tex; mode=display">
n1 = q1 * p1</script><script type="math/tex; mode=display">
n2 = q2 * nextprime(p1)</script><p>可以看到，n1、n2有一个因数非常相近，几乎相等。那么我们把上面两式写成分式形式：</p>
<script type="math/tex; mode=display">
\frac{n1}{n2} = \frac{q1}{q2} * \frac{p1}{nextprime(p1)}</script><p>所以有：</p>
<script type="math/tex; mode=display">
\frac{n1}{n2} \approx \frac{q1}{q2}</script><p>因此将n1/n2进行连分数展开，就很有可能找到q1/q2这个收敛子。</p>
<h4 id="完整交互"><a href="#完整交互" class="headerlink" title="完整交互"></a>完整交互</h4><p>最后还需要把以上求解步骤全部写作交互下的(当然手动也行)，exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>,<span class="number">10006</span>)</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line"><span class="comment">#chall1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    gift = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    p = GCD((gift - <span class="number">1</span>),n)</span><br><span class="line">    q = n // p</span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall1 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#chall2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    m = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, m, n)</span><br><span class="line">        p = GCD(a-<span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p != <span class="number">1</span> <span class="keyword">and</span> p != n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall2 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#chall3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#展开为连分数列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">        cF = []</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            cF += [x // y]</span><br><span class="line">            x, y = y, x % y</span><br><span class="line">        <span class="keyword">return</span> cF</span><br><span class="line">    <span class="comment">#将当前连分数列表计算成有理分数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Simplify</span>(<span class="params">ctnf</span>):</span><br><span class="line">        numerator = <span class="number">0</span></span><br><span class="line">        denominator = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]:</span><br><span class="line">            numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">        <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line">    <span class="comment">#将连分数列表变成不同的有理数逼近列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getit</span>(<span class="params">c</span>):</span><br><span class="line">        cf=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">            cf.append(Simplify(c[:i]))</span><br><span class="line">        <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n1 = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    n2 = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    q1 = continuedFra(n1,n2)</span><br><span class="line">    q1 = getit(q1)</span><br><span class="line">    <span class="keyword">for</span> a,b <span class="keyword">in</span> q1[<span class="number">4</span>:]:</span><br><span class="line">        <span class="keyword">if</span>(n2 % a == <span class="number">0</span> <span class="keyword">and</span> isPrime(a) <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(a)) &gt; <span class="number">126</span>):</span><br><span class="line">            q2 = a</span><br><span class="line">            p__ = n2 // q2</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    d = inverse(e,(p__-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n2)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall3 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;a1425c9ce44989ffd64968130ee2f9fd&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-0xGame-week3-wp-crypto</title>
    <url>/post/6a2afd81.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-3-EzECC"><a href="#Week-3-EzECC" class="headerlink" title="[Week 3] EzECC"></a>[Week 3] EzECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还在偷听小爱和小爆的通讯！</span><br><span class="line"></span><br><span class="line">Hint 1: 也许SageMath能给你想要的东西</span><br><span class="line"></span><br><span class="line">Hint 2: 预期解法时间估计可能一两分钟左右，可能更短</span><br><span class="line"></span><br><span class="line">Hint 3: 阿贝尔群上的加加减减能随便写吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> msg</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;0xGame&#123;&#x27;</span> + msg + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">80</span>)</span><br><span class="line">a,b= [random.randrange(<span class="number">1</span>,q-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">	<span class="keyword">if</span> P[<span class="number">0</span>] != Q[<span class="number">0</span>] <span class="keyword">and</span> P[<span class="number">1</span>] != Q[<span class="number">1</span>]:</span><br><span class="line">		t = ((Q[<span class="number">1</span>]-P[<span class="number">1</span>]) * inverse(Q[<span class="number">0</span>]-P[<span class="number">0</span>],q)) %q</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		t = ((<span class="number">3</span>*P[<span class="number">0</span>]*P[<span class="number">0</span>]+a) * inverse(<span class="number">2</span>*P[<span class="number">1</span>],q))%q</span><br><span class="line"></span><br><span class="line">	x3 = t*t - P[<span class="number">0</span>] - Q[<span class="number">0</span>]</span><br><span class="line">	y3 = t*(P[<span class="number">0</span>] - x3) - P[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> (x3%q, y3%q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">t, A, B=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t: <span class="keyword">return</span> B</span><br><span class="line">    <span class="keyword">return</span> mul(t//<span class="number">2</span>, add(A,A), B <span class="keyword">if</span> <span class="keyword">not</span> t&amp;<span class="number">1</span> <span class="keyword">else</span> add(B,A) <span class="keyword">if</span> B <span class="keyword">else</span> A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(msg)%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line">m1=bytes_to_long(msg[:<span class="built_in">len</span>(msg)//<span class="number">2</span>])</span><br><span class="line">m2=bytes_to_long(msg[<span class="built_in">len</span>(msg)//<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">k = random.getrandbits(<span class="number">64</span>)</span><br><span class="line">G = (<span class="number">641322496020493855620384</span> , <span class="number">437819621961768591577606</span>)</span><br><span class="line">K = mul(k,G)</span><br><span class="line"></span><br><span class="line">M = (m1,m2)</span><br><span class="line">r = random.getrandbits(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">C_1 = add(M,mul(r,K))</span><br><span class="line">C_2 = mul(r,G)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q=<span class="subst">&#123;q&#125;</span>\na=<span class="subst">&#123;a&#125;</span>\nb=<span class="subst">&#123;b&#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;G = <span class="subst">&#123;G&#125;</span>\nK = <span class="subst">&#123;K&#125;</span>\nC_1=<span class="subst">&#123;C_1&#125;</span>\nC_2=<span class="subst">&#123;C_2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">q=1139075593950729137191297</span></span><br><span class="line"><span class="string">a=930515656721155210883162</span></span><br><span class="line"><span class="string">b=631258792856205568553568</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">G = (641322496020493855620384, 437819621961768591577606)</span></span><br><span class="line"><span class="string">K = (781988559490437792081406, 76709224526706154630278)</span></span><br><span class="line"><span class="string">C_1=(55568609433135042994738, 626496338010773913984218)</span></span><br><span class="line"><span class="string">C_2=(508425841918584868754821, 816040882076938893064041)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目基于椭圆曲线加密方案。用给定的q、a、b三个参数，建立如下常见形式的椭圆曲线：</p>
<script type="math/tex; mode=display">
y^2 = x^3+ax+b \quad(mod\;q)</script><p>同时给出椭圆曲线上加法与倍点的计算实现。</p>
<p>题目加密过程如下：</p>
<ul>
<li>将flag串拆成两半，分别转成整数后，作为M点的横纵坐标(需要注意的是M点并不是椭圆曲线上的点)</li>
<li>给出椭圆曲线上的点G，计算其k倍点K，给出G、K坐标</li>
<li>给出C1、C2点的坐标。两个点生成方式分别如下：</li>
</ul>
<script type="math/tex; mode=display">
C1 = M + rK</script><script type="math/tex; mode=display">
C2 = rG</script><p>而注意到，r是一个16比特的数字，数量级很小。因此我们可以根据2式直接爆破出正确的r，然后计算C1-rK即可得到M点。</p>
<p>这里有一个细节需要注意，由于M不在椭圆曲线上，因此C1也不在椭圆曲线上，故无法直接用sagemath内置的椭圆曲线相关操作直接进行加减。因此可以通过计算出椭圆曲线的阶，从而计算出rK点逆元，然后用题目给定的加法函数计算出M。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">	<span class="keyword">if</span> P[<span class="number">0</span>] != Q[<span class="number">0</span>] <span class="keyword">and</span> P[<span class="number">1</span>] != Q[<span class="number">1</span>]:</span><br><span class="line">		t = ((Q[<span class="number">1</span>]-P[<span class="number">1</span>]) * inverse(Q[<span class="number">0</span>]-P[<span class="number">0</span>],q)) %q</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		t = ((<span class="number">3</span>*P[<span class="number">0</span>]*P[<span class="number">0</span>]+a) * inverse(<span class="number">2</span>*P[<span class="number">1</span>],q))%q</span><br><span class="line"></span><br><span class="line">	x3 = t*t - P[<span class="number">0</span>] - Q[<span class="number">0</span>]</span><br><span class="line">	y3 = t*(P[<span class="number">0</span>] - x3) - P[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> (x3%q, y3%q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">t, A, B=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t: <span class="keyword">return</span> B</span><br><span class="line">    <span class="keyword">return</span> mul(t//<span class="number">2</span>, add(A,A), B <span class="keyword">if</span> <span class="keyword">not</span> t&amp;<span class="number">1</span> <span class="keyword">else</span> add(B,A) <span class="keyword">if</span> B <span class="keyword">else</span> A)</span><br><span class="line"></span><br><span class="line">q=<span class="number">1139075593950729137191297</span></span><br><span class="line">a=<span class="number">930515656721155210883162</span></span><br><span class="line">b=<span class="number">631258792856205568553568</span></span><br><span class="line"></span><br><span class="line">G = (<span class="number">641322496020493855620384</span>, <span class="number">437819621961768591577606</span>)</span><br><span class="line">K = (<span class="number">781988559490437792081406</span>, <span class="number">76709224526706154630278</span>)</span><br><span class="line">C_1 = (<span class="number">55568609433135042994738</span>, <span class="number">626496338010773913984218</span>)</span><br><span class="line">C_2 = (<span class="number">508425841918584868754821</span>, <span class="number">816040882076938893064041</span>)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(q), [a, b])</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>(mul(r,G) == C_2):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">M = add(C_1,mul(E.order()-r,K))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0xGame&#123;&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(M[<span class="number">0</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(M[<span class="number">1</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Al1ce_L0ve_B0b&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-LLL-FirstBlood"><a href="#Week-3-LLL-FirstBlood" class="headerlink" title="[Week 3] LLL-FirstBlood"></a>[Week 3] LLL-FirstBlood</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: SageMath中的LLL算法该怎么用……？为啥这算法能解出想要的东西</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(flag)//<span class="number">4</span></span><br><span class="line">m = [bytes_to_long(flag[i*length:(i+<span class="number">1</span>)*length]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">p = getPrime(<span class="built_in">int</span>(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MakeMask</span>(<span class="params">n,p</span>):</span><br><span class="line">    upper = identity_matrix(n)</span><br><span class="line">    low = identity_matrix(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):    </span><br><span class="line">            upper[i, j] = randrange(<span class="number">1</span>, p)</span><br><span class="line">            low[j, i] = randrange(<span class="number">1</span>, p)</span><br><span class="line">    result = upper * low</span><br><span class="line">    <span class="keyword">assert</span> det(result) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Matrix2List</span>(<span class="params">x</span>):<span class="keyword">return</span> [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">noise = [[randrange(<span class="number">1</span>, p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">noise[<span class="number">0</span>] = m</span><br><span class="line">M = matrix(noise)</span><br><span class="line">A = MakeMask(<span class="number">4</span>,p)</span><br><span class="line">C = A*M</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p=<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;C=<span class="subst">&#123;Matrix2List(C)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p=198880159035681668071031460916089145469</span></span><br><span class="line"><span class="string">C=[[1528140902799730745476264672501768332416990282355490479242339131918301176698899635154781328839496210200676497333428, 2081687444435007467807250373278513114045272585243815458840083487459795021302180077490134099644993120009567147202772, 3080873409460299046339495750746632185307246572817534784703936044874106809413620470006445984962733721029566440253675, 3491734341995174183626991907292607070252197520631412767989879432598743851171175369180080355977574296558734415823458], [2359409535809048127331244699867147546817134802610067329431135227991488324148374065940238308147500809599395748756798, 3191196199160821446351036460385791985682645040446022512790815348810555748825420237291839170774872264097466183208742, 4665346530155386457242345394284286198347336281451530670818113876767736288089400119492317775648206643242839430899283, 5369350746042850276067380638571565496087948799720968959426256192923852197959381101839484196445995828389461004495917], [1641407111066265429602929560264443103285908072677065498760570514577412905392260182334706635555256537745902283191251, 2190536173399177167068153351271988931232272884028569669242062395087922275021628334797729266560930040116807133977244, 3127556759140845426132305699421707182108351516931881411928719802847628408656887897596425133523782526561471050447359, 3707239956529200159380870618471703921011276020439315706352183576289925263316580408968092016782483770373121972835410], [9883814543195849013523934427451407019514807606993414569626142656857168165339, 13190422499129347541373922929251088892868361241120937213742340947017395215646, 18832738552342488056498211782604832513006649329982003661701684946590064734701, 22323329751908690611034666068697427811613727429398087082295754189068333861152]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>完成本题需要对格密码有最基础的了解。首先还是梳理一下加密过程：</p>
<ul>
<li>将flag拆成四组并分别转为整数，作为一个4x4矩阵M的第一行</li>
<li>生成12个(1,p)之间的随机数，作为M的后三行</li>
<li>生成一个行列式为1的矩阵A，并计算C=AM</li>
<li>给出C矩阵以及生成有限域的素数p</li>
</ul>
<p>其实只需要明白一点：格是对一些向量进行整系数线性组合得到的产物。而在本题中，明文flag与剩下三行noise分别是四组行向量，左乘A矩阵，实质上就是对四个行向量进行线性组合，而C就是这四个行向量组合后张成的格，对应的，四个行向量均为C的格基。</p>
<p>而很显然，flag组成的第一行行向量均较短，因此可以对格C用LLL算法解决SVP问题，得到的第一行向量就是flag的四部分。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=<span class="number">198880159035681668071031460916089145469</span></span><br><span class="line">C=[[<span class="number">1528140902799730745476264672501768332416990282355490479242339131918301176698899635154781328839496210200676497333428</span>, <span class="number">2081687444435007467807250373278513114045272585243815458840083487459795021302180077490134099644993120009567147202772</span>, <span class="number">3080873409460299046339495750746632185307246572817534784703936044874106809413620470006445984962733721029566440253675</span>, <span class="number">3491734341995174183626991907292607070252197520631412767989879432598743851171175369180080355977574296558734415823458</span>], [<span class="number">2359409535809048127331244699867147546817134802610067329431135227991488324148374065940238308147500809599395748756798</span>, <span class="number">3191196199160821446351036460385791985682645040446022512790815348810555748825420237291839170774872264097466183208742</span>, <span class="number">4665346530155386457242345394284286198347336281451530670818113876767736288089400119492317775648206643242839430899283</span>, <span class="number">5369350746042850276067380638571565496087948799720968959426256192923852197959381101839484196445995828389461004495917</span>], [<span class="number">1641407111066265429602929560264443103285908072677065498760570514577412905392260182334706635555256537745902283191251</span>, <span class="number">2190536173399177167068153351271988931232272884028569669242062395087922275021628334797729266560930040116807133977244</span>, <span class="number">3127556759140845426132305699421707182108351516931881411928719802847628408656887897596425133523782526561471050447359</span>, <span class="number">3707239956529200159380870618471703921011276020439315706352183576289925263316580408968092016782483770373121972835410</span>], [<span class="number">9883814543195849013523934427451407019514807606993414569626142656857168165339</span>, <span class="number">13190422499129347541373922929251088892868361241120937213742340947017395215646</span>, <span class="number">18832738552342488056498211782604832513006649329982003661701684946590064734701</span>, <span class="number">22323329751908690611034666068697427811613727429398087082295754189068333861152</span>]]</span><br><span class="line">L = Matrix(ZZ, C)</span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(i)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;8e4d5924dc4cd78f11c1eeb99e991ab3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-LLL-SecondBlood"><a href="#Week-3-LLL-SecondBlood" class="headerlink" title="[Week 3] LLL-SecondBlood"></a>[Week 3] LLL-SecondBlood</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面的学习已经很累了！所以这道题的flag就直接送了！奇怪……怎么发送的时候受到了一些信号干扰，，</span><br><span class="line"></span><br><span class="line">Hint 1: 当然也可以直接应用SageMath中的Coppersmith定理去直接梭哈，前提是得学会多元Coppersmith该如何使用、构造。</span><br><span class="line"></span><br><span class="line">Hint 2: HNP问题是什么？CVP问题是什么？SVP问题又是什么？这些问题的求解矩阵又该如何构造？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() == <span class="number">318</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">	mask,noise = getPrime(<span class="number">511</span>),getPrime(<span class="number">50</span>)</span><br><span class="line">	mask_.append(mask)</span><br><span class="line">	noise_.append(noise)</span><br><span class="line">	c = (mask*m + noise)%q</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">noise_,mask_  =[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">c_ = [encrypt(m) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>\nmask = <span class="subst">&#123;mask_&#125;</span>\nc_ = <span class="subst">&#123;c_&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">q = 9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line"><span class="string">mask = [6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747, 6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841, 5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443, 6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667]</span></span><br><span class="line"><span class="string">c_ = [3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492, 1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425, 668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896, 497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个LWE问题，其一般会提供多组如下形式的等式：</p>
<script type="math/tex; mode=display">
c_i = a_ix + b_i \quad (mod\;q)</script><p>其中，ai、ci均为已知，而bi是未知的量且较小，要求我们通过这些等式还原x。</p>
<p>这个问题一般写成矩阵形式：</p>
<script type="math/tex; mode=display">
C_{m*1} = A_{m*n}x_{n*1} + e_{m*1} \quad (mod\;q)</script><p>那么如何用格进行求解呢？这里介绍两种方法：</p>
<h4 id="方法一：CVP"><a href="#方法一：CVP" class="headerlink" title="方法一：CVP"></a>方法一：CVP</h4><p>把问题转化成一个CVP问题：</p>
<p>首先由模等式：</p>
<script type="math/tex; mode=display">
c_i = a_ix + b_i \quad (mod\;q)</script><p>转化为等式如下：</p>
<script type="math/tex; mode=display">
c_i-b_i = a_ix  + k_iq</script><p>所以可以构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   a_{1} &p &  &    & \\
   a_{2} &  &p &    & \\
   ...   &  &  &... & \\
   a_{m} &  &  &    &p  \\
  \end{matrix}
  \right)</script><p>该格满足：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   a_{1} &p &  &    & \\
   a_{2} &  &p &    & \\
   ...   &  &  &... & \\
   a_{m} &  &  &    &p  \\
  \end{matrix}
  \right)*
  \left(
 \begin{matrix}
   x  \\
   k_{1} \\
   ...  \\
   k_{n}  \\
  \end{matrix}
  \right) = 
  \left(
 \begin{matrix}
   c_1-b_1  \\
   c_2-b_2 \\
   ...  \\
   c_m-b_m  \\
  \end{matrix}
  \right)</script><p>观察到由于b_i较小，所以右侧向量近似为：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   c_1  \\
   c_2 \\
   ...  \\
   c_m  \\
  \end{matrix}
  \right)</script><p>因此可以求解CVP问题可以得到c_i-b_i组成的向量，进而还原flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line">mask_ = [<span class="number">6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747</span>, <span class="number">6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841</span>, <span class="number">5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443</span>, <span class="number">6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667</span>]</span><br><span class="line">c_ = [<span class="number">3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492</span>, <span class="number">1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425</span>, <span class="number">668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896</span>, <span class="number">497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066</span>]</span><br><span class="line">p = q</span><br><span class="line">rs = mask_</span><br><span class="line">cs = c_</span><br><span class="line"></span><br><span class="line">G=GF(p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Babai_closest_vector</span>(<span class="params">M, G, target</span>):</span><br><span class="line">  small = target</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(M.nrows())):</span><br><span class="line">      c = ((small * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">      small -= M[i] * c</span><br><span class="line">  <span class="keyword">return</span> target - small</span><br><span class="line"></span><br><span class="line">m = <span class="number">4</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">A = matrix(ZZ, m+n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = p</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[m , x] = rs[x]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, cs)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line"><span class="comment">#print(&quot;Closest Vector: &#123;&#125;&quot;.format(res))</span></span><br><span class="line"> </span><br><span class="line">R = IntegerModRing(p)</span><br><span class="line">M = Matrix(R, rs)</span><br><span class="line">res=vector(R, res)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(cs,res):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i-j))-<span class="number">2</span>==<span class="number">50</span></span><br><span class="line">x=((res[<span class="number">0</span>])*inverse(rs[<span class="number">0</span>],p)) %p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line"><span class="comment">#0xGame&#123;19255b5c7b19c790e28d87c8a8bb1d33&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二：SVP"><a href="#方法二：SVP" class="headerlink" title="方法二：SVP"></a>方法二：SVP</h4><p>我们构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   q      &      &      &      &  &  \\
          &q     &      &      &  &  \\
          &      &q     &      &  &  \\
          &      &      &q     &  &  \\
  mask1   &mask2 &mask3 &mask4 &1 &  \\
  c1      &c2    &c3    &c4    &  &1  \\
  \end{matrix}
  \right)</script><p>那么由等式：</p>
<script type="math/tex; mode=display">
c_i = mask_ix  + k_iq +noise_i</script><script type="math/tex; mode=display">
noise_i = c_i-mask_ix  - k_iq</script><p>所以有如下线性关系：</p>
<script type="math/tex; mode=display">
(k1,k2,k3,k4,m,-1)*
\left(
 \begin{matrix}
   q      &      &      &      &  &  \\
          &q     &      &      &  &  \\
          &      &q     &      &  &  \\
          &      &      &q     &  &  \\
  mask1   &mask2 &mask3 &mask4 &1 &  \\
  c1      &c2    &c3    &c4    &  &1  \\
  \end{matrix}
  \right)
  =
  (-noise1,-noise2,-noise3,-noise4,x,-1)</script><p>然后配一下系数使得格最后规约出的数量级相当，即可还原m</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line">mask_ = [<span class="number">6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747</span>, <span class="number">6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841</span>, <span class="number">5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443</span>, <span class="number">6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667</span>]</span><br><span class="line">c_ = [<span class="number">3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492</span>, <span class="number">1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425</span>, <span class="number">668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896</span>, <span class="number">497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066</span>]</span><br><span class="line"></span><br><span class="line">L = matrix(ZZ, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">K = <span class="number">2</span>**(<span class="number">318</span>-<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    L[i,i] = q * K</span><br><span class="line">    L[<span class="number">4</span>,i] = mask_[i] * K</span><br><span class="line">    L[-<span class="number">1</span>,i] = c_[i] * K</span><br><span class="line">L[<span class="number">4</span>,<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span>**<span class="number">318</span></span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">abs</span>(res[<span class="number">0</span>][-<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;19255b5c7b19c790e28d87c8a8bb1d33&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-EzMatrix"><a href="#Week-3-EzMatrix" class="headerlink" title="[Week 3] EzMatrix"></a>[Week 3] EzMatrix</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: 相似矩阵相似吗？相似矩阵相似吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> secert,flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(n).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> secert &lt; <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">64</span>)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;0xGame&#123;&#x27;</span>+n2b(secert)+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Martix2list</span>(<span class="params">Martix</span>):</span><br><span class="line">    result = []</span><br><span class="line">    Martix = <span class="built_in">list</span>(Martix)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Martix:</span><br><span class="line">        result.append(<span class="built_in">list</span>(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">A=[[<span class="number">12143520799533590286</span>, <span class="number">1517884368</span>, <span class="number">12143520745929978443</span>, <span class="number">796545089340</span>, <span class="number">12143514553710344843</span>, <span class="number">28963398496032</span>, <span class="number">12143436449354407235</span>, <span class="number">158437186324560</span>, <span class="number">12143329129091084963</span>, <span class="number">144214939188320</span>, <span class="number">12143459416553205779</span>, <span class="number">11289521392968</span>],[<span class="number">12143520799533124067</span>, <span class="number">1552775781</span>, <span class="number">12143520745442171123</span>, <span class="number">796372987410</span>, <span class="number">12143514596803995443</span>, <span class="number">28617862048776</span>, <span class="number">12143437786643111987</span>, <span class="number">155426784993480</span>, <span class="number">12143333265382547123</span>, <span class="number">140792203111560</span>, <span class="number">12143460985399172467</span>, <span class="number">10983300063372</span>],[<span class="number">12143520799533026603</span>, <span class="number">1545759072</span>, <span class="number">12143520746151921286</span>, <span class="number">781222462020</span>, <span class="number">12143514741528175043</span>, <span class="number">27856210942560</span>, <span class="number">12143440210529480891</span>, <span class="number">150563969013744</span>, <span class="number">12143339455702534403</span>, <span class="number">135941365971840</span>, <span class="number">12143463119774571623</span>, <span class="number">10579745342712</span>],[<span class="number">4857408319806885466</span>, <span class="number">2428704161425648657</span>, <span class="number">12143520747462241175</span>, <span class="number">758851601758</span>, <span class="number">12143514933292307603</span>, <span class="number">7286139389566980165</span>, <span class="number">9714738936567334300</span>, <span class="number">144947557513044</span>, <span class="number">12143346444338047691</span>, <span class="number">130561054163540</span>, <span class="number">4857352974113333366</span>, <span class="number">2428714303424782417</span>],[<span class="number">12143520799533339320</span>, <span class="number">1476842796</span>, <span class="number">12143520749060275613</span>, <span class="number">733281428880</span>, <span class="number">12143515144091549812</span>, <span class="number">25896324662208</span>, <span class="number">12143446129977471347</span>, <span class="number">139126289668080</span>, <span class="number">12143353609086952433</span>, <span class="number">125093278125816</span>, <span class="number">12143467808884068695</span>, <span class="number">9705993135696</span>],[<span class="number">3469577371288079926</span>, <span class="number">5204366058378782250</span>, <span class="number">12143520750775862343</span>, <span class="number">706665985740</span>, <span class="number">12143515359139397843</span>, <span class="number">24876891455539</span>, <span class="number">12143449149385190675</span>, <span class="number">5204499435641729607</span>, <span class="number">1734628523990131469</span>, <span class="number">119757210113970</span>, <span class="number">12143470097256549947</span>, <span class="number">9282407958928</span>],[<span class="number">10986995009101166671</span>, <span class="number">1734788687033207505</span>, <span class="number">12143520752514668698</span>, <span class="number">680173911560</span>, <span class="number">12143515570582515443</span>, <span class="number">23883386182656</span>, <span class="number">12143452072344092516</span>, <span class="number">10408859957710764174</span>, <span class="number">8673790006740000925</span>, <span class="number">4047954924507284041</span>, <span class="number">12143472277719610437</span>, <span class="number">8879790035168</span>],[<span class="number">12143520799534210329</span>, <span class="number">8095680534365818753</span>, <span class="number">12143520754224346525</span>, <span class="number">6071761054204856029</span>, <span class="number">12143515774342357443</span>, <span class="number">22931775530664</span>, <span class="number">12143454859049102627</span>, <span class="number">122586336122081</span>, <span class="number">12143373761302849103</span>, <span class="number">109840689548590</span>, <span class="number">8095634066844843878</span>, <span class="number">8500892291801</span>],[<span class="number">2428704159899526175</span>, <span class="number">7286112481016467893</span>, <span class="number">12143520755876491019</span>, <span class="number">629765964828</span>, <span class="number">12143515968446948123</span>, <span class="number">9714838668887734012</span>, <span class="number">4857345013259425502</span>, <span class="number">117630592711632</span>, <span class="number">12143379764863568374</span>, <span class="number">105318302849760</span>, <span class="number">2428659620509049335</span>, <span class="number">7286120625945355053</span>],[<span class="number">7286112479717322389</span>, <span class="number">7286112480971640825</span>, <span class="number">12143520757456628435</span>, <span class="number">606320684970</span>, <span class="number">12143516152115449139</span>, <span class="number">4857429497934652454</span>, <span class="number">4857347490735050126</span>, <span class="number">112978994964264</span>, <span class="number">12143385390297217523</span>, <span class="number">101086824360217</span>, <span class="number">7286069740980100293</span>, <span class="number">7286120294834973633</span>],[<span class="number">7727695054246476847</span>, <span class="number">1202487728</span>, <span class="number">12143520758958480293</span>, <span class="number">584144077140</span>, <span class="number">12143516325240923843</span>, <span class="number">20377952745696</span>, <span class="number">12143462294760579275</span>, <span class="number">108622249048560</span>, <span class="number">12143390651947217363</span>, <span class="number">97133513961120</span>, <span class="number">12143479741445599772</span>, <span class="number">8831658996900830432</span>],[<span class="number">12143520799535388887</span>, <span class="number">1161628182</span>, <span class="number">12143520760380594623</span>, <span class="number">563225247585</span>, <span class="number">12143516488091679443</span>, <span class="number">19626876325056</span>, <span class="number">12143464472820678035</span>, <span class="number">104545135017180</span>, <span class="number">12143395570399006523</span>, <span class="number">93441517429260</span>, <span class="number">12143481309754543787</span>, <span class="number">7218375794633</span>]]<span class="comment"># 12*12</span></span><br><span class="line">p = <span class="number">12143520799543738643</span></span><br><span class="line">A = Matrix(GF(p),A)</span><br><span class="line">enc = A**secert</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Martix2list</span>(<span class="params">Martix</span>):</span><br><span class="line">    result = []</span><br><span class="line">    Martix = <span class="built_in">list</span>(Martix)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Martix:</span><br><span class="line">        result.append(<span class="built_in">list</span>(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(Martix2list(enc)))</span><br></pre></td></tr></table></figure>
<p>enc.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[11285847990515095003, 7585413350741918021, 11658254512436412666, 477577914899276103, 2941386515764607825, 11283325421744133699, 4096971712575507616, 8118672870538606033, 2377937081025778041, 6576171711896495163, 6152554374963853172, 5022013484610428974], [8354008012616001452, 7787447107046065118, 9504997911333967278, 1082773427768571094, 6015520658629219637, 11244285744740006951, 4493944053220750368, 3504246247470690014, 1738582001618280397, 2330057776906622572, 3043456814665571080, 2981613454022714952], [2508674373714509177, 3544963739532775937, 7952732753025175616, 11161786730565526285, 3397123486689639675, 6454135592624912854, 6613201018024296927, 9748485344986779929, 1819761609989340766, 1259944825407465767, 1596049024644778041, 7769939905324967788], [4200851163596876950, 11960539098651202761, 3303721151143544462, 2532304102428121556, 11083895221097319129, 1171933471304558017, 1549099593543874478, 6088238862927163233, 6459553630361959801, 947358195425767572, 2090533922210134578, 9023030120605201052], [2271102089902208138, 1614812525306266829, 1546249462332047661, 3168333397191737100, 7678980468150522028, 3128939172985153696, 1146041044751755224, 11870173227065140617, 8351303466095252790, 694704483676649448, 7944218023016968278, 583421745603756386], [10309472503110333289, 1100598261990718822, 10235859400888405310, 910925705831020921, 10771855884237562064, 9970830255165655653, 11678899608458971536, 4368822164222204233, 3104861419162339779, 4540709628196554222, 7851809145727500968, 12086896840826708824], [10973051751637593366, 5039073157846327641, 4855314857834773443, 4416954195828423951, 8243966437000815560, 8250554263390748131, 8093181066366682440, 1145520354143718292, 294729013023637045, 10115389386419597159, 2767140395261835843, 6724257139233017485], [6878768250003631244, 10834164422364241529, 6946589221005878489, 539734218479521833, 2691724062063066048, 3989403041446358401, 815244541494093987, 11168528286389981272, 2021358468726921955, 1123433019094267521, 524639025046508882, 5720273332497702547], [6688451244183880831, 10892730373179989558, 6987453292894341174, 5572212176769878684, 11332149024403380575, 3944612864568504791, 6768594304071589280, 10526434024562201079, 10241323610053039912, 1120473558410865753, 306153635148226248, 3606666063074222104], [7556871914690327290, 11353594909211427742, 747771112781361153, 1245068803956910299, 2831489557155431404, 1800035620948876551, 1050411779595241927, 5665981688041778089, 2028968510484240787, 4386552235402890530, 10334391443650474796, 3883841302951550608], [4485787817401669404, 184501191500952934, 3690661645276970957, 6263309802498749034, 6484490370652685031, 9743108369653588026, 3045941510087387269, 5870433915209047275, 4679598273992216016, 11839352681285251516, 4957980185504231911, 7925596893607015470], [1000449712878466719, 7022601702937838844, 1095849907482791166, 11989051568709522226, 6768031250066783733, 185945517026191241, 4280928696740160411, 5633542561098902406, 10176177574499086410, 5782837249861240943, 7406530879613861823, 1971858224839520916]]</span><br></pre></td></tr></table></figure>
<p>题目基于一个矩阵上的离散对数问题，已知矩阵A和M，满足：</p>
<script type="math/tex; mode=display">
A^{secret} = M</script><p>要求求出secret。</p>
<p>矩阵乘法是很复杂的，因此直接做难以求解离散对数，要想办法转化成数域上的离散对数问题才行。因此需要用相似矩阵将矩阵对角化。</p>
<p>首先，可以用sage内置函数<code>is_diagonalizable()</code>判断一个矩阵是否可以对角化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.is_diagonalizable())</span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>而A可以对角化，就代表A可以写成下面的形式：</p>
<script type="math/tex; mode=display">
A = P^{-1}BP</script><p>其中，B是一个对角矩阵。而由于可逆矩阵可以两两相消，由此可以简化A的幂次的计算：</p>
<script type="math/tex; mode=display">
A^{secret} = (P^{-1}BP)^{secret} = P^{-1}B^{secret}P = C</script><p>所以：</p>
<script type="math/tex; mode=display">
B^{secret} = PCP^{-1}</script><p>而由于B是一个对角矩阵的缘故，所以B的幂次其实就是对角线上各个元素的幂次，因此可以将矩阵的离散对数问题转化为对角线上某个元素的离散对数问题，问题得解。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(n).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">A=[[<span class="number">12143520799533590286</span>, <span class="number">1517884368</span>, <span class="number">12143520745929978443</span>, <span class="number">796545089340</span>, <span class="number">12143514553710344843</span>, <span class="number">28963398496032</span>, <span class="number">12143436449354407235</span>, <span class="number">158437186324560</span>, <span class="number">12143329129091084963</span>, <span class="number">144214939188320</span>, <span class="number">12143459416553205779</span>, <span class="number">11289521392968</span>],[<span class="number">12143520799533124067</span>, <span class="number">1552775781</span>, <span class="number">12143520745442171123</span>, <span class="number">796372987410</span>, <span class="number">12143514596803995443</span>, <span class="number">28617862048776</span>, <span class="number">12143437786643111987</span>, <span class="number">155426784993480</span>, <span class="number">12143333265382547123</span>, <span class="number">140792203111560</span>, <span class="number">12143460985399172467</span>, <span class="number">10983300063372</span>],[<span class="number">12143520799533026603</span>, <span class="number">1545759072</span>, <span class="number">12143520746151921286</span>, <span class="number">781222462020</span>, <span class="number">12143514741528175043</span>, <span class="number">27856210942560</span>, <span class="number">12143440210529480891</span>, <span class="number">150563969013744</span>, <span class="number">12143339455702534403</span>, <span class="number">135941365971840</span>, <span class="number">12143463119774571623</span>, <span class="number">10579745342712</span>],[<span class="number">4857408319806885466</span>, <span class="number">2428704161425648657</span>, <span class="number">12143520747462241175</span>, <span class="number">758851601758</span>, <span class="number">12143514933292307603</span>, <span class="number">7286139389566980165</span>, <span class="number">9714738936567334300</span>, <span class="number">144947557513044</span>, <span class="number">12143346444338047691</span>, <span class="number">130561054163540</span>, <span class="number">4857352974113333366</span>, <span class="number">2428714303424782417</span>],[<span class="number">12143520799533339320</span>, <span class="number">1476842796</span>, <span class="number">12143520749060275613</span>, <span class="number">733281428880</span>, <span class="number">12143515144091549812</span>, <span class="number">25896324662208</span>, <span class="number">12143446129977471347</span>, <span class="number">139126289668080</span>, <span class="number">12143353609086952433</span>, <span class="number">125093278125816</span>, <span class="number">12143467808884068695</span>, <span class="number">9705993135696</span>],[<span class="number">3469577371288079926</span>, <span class="number">5204366058378782250</span>, <span class="number">12143520750775862343</span>, <span class="number">706665985740</span>, <span class="number">12143515359139397843</span>, <span class="number">24876891455539</span>, <span class="number">12143449149385190675</span>, <span class="number">5204499435641729607</span>, <span class="number">1734628523990131469</span>, <span class="number">119757210113970</span>, <span class="number">12143470097256549947</span>, <span class="number">9282407958928</span>],[<span class="number">10986995009101166671</span>, <span class="number">1734788687033207505</span>, <span class="number">12143520752514668698</span>, <span class="number">680173911560</span>, <span class="number">12143515570582515443</span>, <span class="number">23883386182656</span>, <span class="number">12143452072344092516</span>, <span class="number">10408859957710764174</span>, <span class="number">8673790006740000925</span>, <span class="number">4047954924507284041</span>, <span class="number">12143472277719610437</span>, <span class="number">8879790035168</span>],[<span class="number">12143520799534210329</span>, <span class="number">8095680534365818753</span>, <span class="number">12143520754224346525</span>, <span class="number">6071761054204856029</span>, <span class="number">12143515774342357443</span>, <span class="number">22931775530664</span>, <span class="number">12143454859049102627</span>, <span class="number">122586336122081</span>, <span class="number">12143373761302849103</span>, <span class="number">109840689548590</span>, <span class="number">8095634066844843878</span>, <span class="number">8500892291801</span>],[<span class="number">2428704159899526175</span>, <span class="number">7286112481016467893</span>, <span class="number">12143520755876491019</span>, <span class="number">629765964828</span>, <span class="number">12143515968446948123</span>, <span class="number">9714838668887734012</span>, <span class="number">4857345013259425502</span>, <span class="number">117630592711632</span>, <span class="number">12143379764863568374</span>, <span class="number">105318302849760</span>, <span class="number">2428659620509049335</span>, <span class="number">7286120625945355053</span>],[<span class="number">7286112479717322389</span>, <span class="number">7286112480971640825</span>, <span class="number">12143520757456628435</span>, <span class="number">606320684970</span>, <span class="number">12143516152115449139</span>, <span class="number">4857429497934652454</span>, <span class="number">4857347490735050126</span>, <span class="number">112978994964264</span>, <span class="number">12143385390297217523</span>, <span class="number">101086824360217</span>, <span class="number">7286069740980100293</span>, <span class="number">7286120294834973633</span>],[<span class="number">7727695054246476847</span>, <span class="number">1202487728</span>, <span class="number">12143520758958480293</span>, <span class="number">584144077140</span>, <span class="number">12143516325240923843</span>, <span class="number">20377952745696</span>, <span class="number">12143462294760579275</span>, <span class="number">108622249048560</span>, <span class="number">12143390651947217363</span>, <span class="number">97133513961120</span>, <span class="number">12143479741445599772</span>, <span class="number">8831658996900830432</span>],[<span class="number">12143520799535388887</span>, <span class="number">1161628182</span>, <span class="number">12143520760380594623</span>, <span class="number">563225247585</span>, <span class="number">12143516488091679443</span>, <span class="number">19626876325056</span>, <span class="number">12143464472820678035</span>, <span class="number">104545135017180</span>, <span class="number">12143395570399006523</span>, <span class="number">93441517429260</span>, <span class="number">12143481309754543787</span>, <span class="number">7218375794633</span>]]<span class="comment"># 12*12</span></span><br><span class="line">p = <span class="number">12143520799543738643</span></span><br><span class="line">c = [[<span class="number">11285847990515095003</span>, <span class="number">7585413350741918021</span>, <span class="number">11658254512436412666</span>, <span class="number">477577914899276103</span>, <span class="number">2941386515764607825</span>, <span class="number">11283325421744133699</span>, <span class="number">4096971712575507616</span>, <span class="number">8118672870538606033</span>, <span class="number">2377937081025778041</span>, <span class="number">6576171711896495163</span>, <span class="number">6152554374963853172</span>, <span class="number">5022013484610428974</span>], [<span class="number">8354008012616001452</span>, <span class="number">7787447107046065118</span>, <span class="number">9504997911333967278</span>, <span class="number">1082773427768571094</span>, <span class="number">6015520658629219637</span>, <span class="number">11244285744740006951</span>, <span class="number">4493944053220750368</span>, <span class="number">3504246247470690014</span>, <span class="number">1738582001618280397</span>, <span class="number">2330057776906622572</span>, <span class="number">3043456814665571080</span>, <span class="number">2981613454022714952</span>], [<span class="number">2508674373714509177</span>, <span class="number">3544963739532775937</span>, <span class="number">7952732753025175616</span>, <span class="number">11161786730565526285</span>, <span class="number">3397123486689639675</span>, <span class="number">6454135592624912854</span>, <span class="number">6613201018024296927</span>, <span class="number">9748485344986779929</span>, <span class="number">1819761609989340766</span>, <span class="number">1259944825407465767</span>, <span class="number">1596049024644778041</span>, <span class="number">7769939905324967788</span>], [<span class="number">4200851163596876950</span>, <span class="number">11960539098651202761</span>, <span class="number">3303721151143544462</span>, <span class="number">2532304102428121556</span>, <span class="number">11083895221097319129</span>, <span class="number">1171933471304558017</span>, <span class="number">1549099593543874478</span>, <span class="number">6088238862927163233</span>, <span class="number">6459553630361959801</span>, <span class="number">947358195425767572</span>, <span class="number">2090533922210134578</span>, <span class="number">9023030120605201052</span>], [<span class="number">2271102089902208138</span>, <span class="number">1614812525306266829</span>, <span class="number">1546249462332047661</span>, <span class="number">3168333397191737100</span>, <span class="number">7678980468150522028</span>, <span class="number">3128939172985153696</span>, <span class="number">1146041044751755224</span>, <span class="number">11870173227065140617</span>, <span class="number">8351303466095252790</span>, <span class="number">694704483676649448</span>, <span class="number">7944218023016968278</span>, <span class="number">583421745603756386</span>], [<span class="number">10309472503110333289</span>, <span class="number">1100598261990718822</span>, <span class="number">10235859400888405310</span>, <span class="number">910925705831020921</span>, <span class="number">10771855884237562064</span>, <span class="number">9970830255165655653</span>, <span class="number">11678899608458971536</span>, <span class="number">4368822164222204233</span>, <span class="number">3104861419162339779</span>, <span class="number">4540709628196554222</span>, <span class="number">7851809145727500968</span>, <span class="number">12086896840826708824</span>], [<span class="number">10973051751637593366</span>, <span class="number">5039073157846327641</span>, <span class="number">4855314857834773443</span>, <span class="number">4416954195828423951</span>, <span class="number">8243966437000815560</span>, <span class="number">8250554263390748131</span>, <span class="number">8093181066366682440</span>, <span class="number">1145520354143718292</span>, <span class="number">294729013023637045</span>, <span class="number">10115389386419597159</span>, <span class="number">2767140395261835843</span>, <span class="number">6724257139233017485</span>], [<span class="number">6878768250003631244</span>, <span class="number">10834164422364241529</span>, <span class="number">6946589221005878489</span>, <span class="number">539734218479521833</span>, <span class="number">2691724062063066048</span>, <span class="number">3989403041446358401</span>, <span class="number">815244541494093987</span>, <span class="number">11168528286389981272</span>, <span class="number">2021358468726921955</span>, <span class="number">1123433019094267521</span>, <span class="number">524639025046508882</span>, <span class="number">5720273332497702547</span>], [<span class="number">6688451244183880831</span>, <span class="number">10892730373179989558</span>, <span class="number">6987453292894341174</span>, <span class="number">5572212176769878684</span>, <span class="number">11332149024403380575</span>, <span class="number">3944612864568504791</span>, <span class="number">6768594304071589280</span>, <span class="number">10526434024562201079</span>, <span class="number">10241323610053039912</span>, <span class="number">1120473558410865753</span>, <span class="number">306153635148226248</span>, <span class="number">3606666063074222104</span>], [<span class="number">7556871914690327290</span>, <span class="number">11353594909211427742</span>, <span class="number">747771112781361153</span>, <span class="number">1245068803956910299</span>, <span class="number">2831489557155431404</span>, <span class="number">1800035620948876551</span>, <span class="number">1050411779595241927</span>, <span class="number">5665981688041778089</span>, <span class="number">2028968510484240787</span>, <span class="number">4386552235402890530</span>, <span class="number">10334391443650474796</span>, <span class="number">3883841302951550608</span>], [<span class="number">4485787817401669404</span>, <span class="number">184501191500952934</span>, <span class="number">3690661645276970957</span>, <span class="number">6263309802498749034</span>, <span class="number">6484490370652685031</span>, <span class="number">9743108369653588026</span>, <span class="number">3045941510087387269</span>, <span class="number">5870433915209047275</span>, <span class="number">4679598273992216016</span>, <span class="number">11839352681285251516</span>, <span class="number">4957980185504231911</span>, <span class="number">7925596893607015470</span>], [<span class="number">1000449712878466719</span>, <span class="number">7022601702937838844</span>, <span class="number">1095849907482791166</span>, <span class="number">11989051568709522226</span>, <span class="number">6768031250066783733</span>, <span class="number">185945517026191241</span>, <span class="number">4280928696740160411</span>, <span class="number">5633542561098902406</span>, <span class="number">10176177574499086410</span>, <span class="number">5782837249861240943</span>, <span class="number">7406530879613861823</span>, <span class="number">1971858224839520916</span>]]</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line">A = Matrix(GF(p), n, n, A)</span><br><span class="line">C = Matrix(GF(p), n, n, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(A.is_diagonalizable())</span></span><br><span class="line">A, P = A.diagonalization()</span><br><span class="line">C = P.inverse()*C*P</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(A[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">b = <span class="built_in">int</span>(C[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">x=discrete_log(mod(b,p),mod(a,p))</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0xGame&#123;&quot;</span> + n2b(x) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;06450201eb6171d40151563d967e59ea&#125;</span></span><br></pre></td></tr></table></figure>
<p>当然，如果你取的元素的阶小于secret，就得不到正确结果，不过多试几组就行了，并且本题中第一个元素就能满足要求。</p>
<p><br></p>
<p><br></p>
<h3 id="Week-3-EzOverflow"><a href="#Week-3-EzOverflow" class="headerlink" title="[Week 3] EzOverflow"></a>[Week 3] EzOverflow</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真正意义上的签“到”题 </span><br><span class="line"></span><br><span class="line">Hint 1: 密码当然也要做代码审计！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>Elgamal.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,GCD,inverse,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    g = getPrime(bits//<span class="number">2</span>)</span><br><span class="line">    d = random.randint(<span class="number">1</span>,p-<span class="number">2</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g,d,p)</span><br><span class="line">    public,private = (p,g,y),d</span><br><span class="line">    <span class="keyword">return</span> public,private</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,public,private</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p,g,y = public</span><br><span class="line">    d = private</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        k = random.randint(<span class="number">1</span>,p-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> GCD(k,p-<span class="number">1</span>)==<span class="number">1</span>:<span class="keyword">break</span></span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p)</span><br><span class="line">    s = ((m-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (r,s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verity</span>(<span class="params">m,sign,public</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p,g,y = public</span><br><span class="line">    r,s = sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g,m,p) == (<span class="built_in">pow</span>(y,r,p)*<span class="built_in">pow</span>(r,s,p)) % p:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ElGamal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> flag</span><br><span class="line">pub,pri = getKey(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&#x27;Here are your public key:&#x27;</span>)</span><br><span class="line">        self.send(<span class="built_in">str</span>(pub).encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment">#sign</span></span><br><span class="line">            self.send(<span class="string">b&#x27;Pz tell me what you want to sign?&#x27;</span>)</span><br><span class="line">            message = self.recv()</span><br><span class="line">            <span class="keyword">if</span> message == <span class="string">b&#x27;0xGame&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;Permission denied!&quot;</span>)</span><br><span class="line">                quit()</span><br><span class="line">            self.send(<span class="string">b&#x27;Here are your sign:&#x27;</span>)</span><br><span class="line">            r,s = sign(message,pub,pri)</span><br><span class="line">            self.send(<span class="string">f&#x27;r=<span class="subst">&#123;r&#125;</span>\ns=<span class="subst">&#123;s&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="comment">#ver</span></span><br><span class="line">            self.send(<span class="string">b&#x27;Tell me your signature,if you want to get the flag.&#x27;</span>)</span><br><span class="line">            r = <span class="built_in">int</span>(self.recv())</span><br><span class="line">            s = <span class="built_in">int</span>(self.recv())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> verity(<span class="string">b&#x27;0xGame&#x27;</span>,(r,s),pub):</span><br><span class="line">                self.send(<span class="string">b&#x27;Here you are:&#x27;</span>+flag)</span><br><span class="line">                self.send(<span class="string">b&#x27;bye~&#x27;</span>)</span><br><span class="line">                quit()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;sorry~you can&#x27;t get it.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10007</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>其实是一个考察细心程度的题目。题目要求：</p>
<ul>
<li>传入一个msg，并且msg不能是”0xGame”，靶机会返回对msg的Elgamal签名。</li>
<li>传入一个签名对，要求验签结果与”0xGame”相等。</li>
</ul>
<p>而观察他的Elgamal，可以发现他省略了对msg取哈希的步骤，而直接用了m本身，也就是本身应该取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = ((H(m)-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而他却直接取了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = (m-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而m最终会模p-1，因此我们直接求p倍的”0xGame”转成的整数值，再转回字节串发送给靶机，然后直接将靶机返回的签名再传回去就能得到flag了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>, <span class="number">10007</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;public key:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">p,g,y = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line">m = long_to_bytes(bytes_to_long(<span class="string">b&quot;0xGame&quot;</span>)*p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;to sign?&quot;</span>)</span><br><span class="line">r.sendline(m)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;your sign:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">R = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">s = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">r.recvuntil(<span class="string">b&quot;the flag.&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(R).encode())</span><br><span class="line">r.sendline(<span class="built_in">str</span>(s).encode())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;24b6edfdc07d71311774ed15248f434e&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-crypto</title>
    <url>/post/795314c1.html</url>
    <content><![CDATA[<p>要给自己学校的招新赛出题了，于是混进CNSS招新赛前的夏令营找找出题灵感，不得不说，很多题目都出的很不错，难度与知识点控制的很好，于是在此记录一下。</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/795314c1/image-20230916080626025.png" alt="image-20230916080626025"></p>
<h2 id="Crypto-Guideline"><a href="#Crypto-Guideline" class="headerlink" title="Crypto Guideline"></a>Crypto Guideline</h2><p>签到题，标志着crypto方向题目的开始，直接提交flag即可。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Welcome to the world of cryptography!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cyclic-group"><a href="#cyclic-group" class="headerlink" title="cyclic group"></a>cyclic group</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以找到我藏在循环群中的flag吗？</span><br></pre></td></tr></table></figure>
<p>题目内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  <span class="comment">## secret is a local file, flag is unknown to you</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = getPrime(<span class="number">512</span>)</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    c *= m   </span><br><span class="line">    c %= p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line"><span class="string">e = 12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line"><span class="string">c = 46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，实际上就是：</p>
<script type="math/tex; mode=display">
m^e\equiv c\quad (mod\;p)</script><p>因此直接幂乘e关于p-1的逆元即可。而本题的题目名字cyclic group指代的是循环群，在这里即是在说，由于模数p为素数，那么群Z*(p)的阶就为p-1，因此其中任意一个元素满足：</p>
<script type="math/tex; mode=display">
a^{p-1} \equiv 1 \quad (mod\;p)</script><p>因此可以直接求指数关于p-1的逆元求解题目。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line">e = <span class="number">12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line">c = <span class="number">46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Unbelievable! You know the key of cyclic group!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码Ⅰ"><a href="#cnss娘的代码Ⅰ" class="headerlink" title="cnss娘的代码Ⅰ"></a>cnss娘的代码Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘写了一段感觉意义不明的代码，你能帮她找到flag吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key.append(getPrime(<span class="number">128</span>))</span><br><span class="line">    </span><br><span class="line">secret = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    secret.append(m % key[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key =&#x27;</span>, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret =&#x27;</span>, secret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key = [179283057970236760812385016853348861313, 243730152305882610684268424505624182831, 276375013783217805474364273321195364813, 338363147025326331069698214354955107607]</span></span><br><span class="line"><span class="string">secret = [42312333420922777926503668120694248887, 188911830445106862831548334980052602782, 202272400826094059912187609891368651300, 16939666639933430404336668949000187621]</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>简洁明了地考察中国剩余定理。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line">key = [<span class="number">179283057970236760812385016853348861313</span>, <span class="number">243730152305882610684268424505624182831</span>, <span class="number">276375013783217805474364273321195364813</span>, <span class="number">338363147025326331069698214354955107607</span>]</span><br><span class="line">secret = [<span class="number">42312333420922777926503668120694248887</span>, <span class="number">188911830445106862831548334980052602782</span>, <span class="number">202272400826094059912187609891368651300</span>, <span class="number">16939666639933430404336668949000187621</span>]</span><br><span class="line"></span><br><span class="line">M = crt(key,secret)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Wow!Chinese remainder theorem is so interseting!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅰ"><a href="#RSA-Ⅰ" class="headerlink" title="RSA Ⅰ"></a>RSA Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can you factorize n ?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p|mask)</span><br><span class="line"><span class="built_in">print</span>(p&amp;mask)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = 64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line"><span class="comment">#n = 106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line"><span class="comment">#mask = 12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line"><span class="comment">#13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line"><span class="comment">#11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br></pre></td></tr></table></figure>
<p>题目给了n的一个素因子p与mask的&amp;及|位运算结果，那么对于每一位，可以简单枚举一下所有可能性：</p>
<ul>
<li>&amp;运算为1，则p该位为1</li>
<li>&amp;运算为0，|运算为1，则当mask该位为1时，p该位为0；当mask该位为0时，p该位为1</li>
<li>&amp;运算为0，|运算为0，则p该位为0</li>
</ul>
<p>因此可以还原p的所有比特位，进而解密RSA。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line">n = <span class="number">106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line">mask = <span class="number">12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line">gift1 = <span class="number">13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line">gift2 = <span class="number">11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">strmask = <span class="built_in">bin</span>(mask)[<span class="number">2</span>:]</span><br><span class="line">strgift1 = <span class="built_in">bin</span>(gift1)[<span class="number">2</span>:]</span><br><span class="line">strgift2 = <span class="built_in">bin</span>(gift2)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">strp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strmask)):</span><br><span class="line">    <span class="keyword">if</span>(strgift2[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">        strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(strp),<span class="number">2</span>)</span><br><span class="line">q= n//p       </span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{1t_s33ms_bit_is_useful}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅱ"><a href="#cnss娘的代码-Ⅱ" class="headerlink" title="cnss娘的代码 Ⅱ"></a>cnss娘的代码 Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在研究一类数论中的难题，你可以帮助她吗？</span><br><span class="line">Hint: SageMath的使用可以让你事半功倍</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, m, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br></pre></td></tr></table></figure>
<p>直接用sage求解离散对数即可。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="number">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br><span class="line"></span><br><span class="line">m=discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Congratulation! You crack the DLP problem!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅲ"><a href="#cnss娘的代码-Ⅲ" class="headerlink" title="cnss娘的代码 Ⅲ"></a>cnss娘的代码 Ⅲ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在学习线性代数，你可以帮她解出这道题吗？</span><br><span class="line">Hint:Sage 中自带有 Matrix 和 Vector 类。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">40</span></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">u = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">40</span>, <span class="number">5</span>):</span><br><span class="line">    u.append(bytes_to_long(flag[i:i+<span class="number">5</span>]))</span><br><span class="line">u = vector(u)</span><br><span class="line">A = random_matrix(Zmod(p), <span class="number">8</span>)</span><br><span class="line">v = u * A</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A =&#x27;</span>, A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;v =&#x27;</span>, v)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A = [7907672172473958392 4938237561047760432 5072996306459844921  800347085054263333 2241217299487989740 5452520396763079026 7354205761061650589 5632270298193588206]</span></span><br><span class="line"><span class="string">[6856262700627435223 7218982369550725117 3069216736555490147 9043167152368671477 6651431740452419751 2904199636400840775 1984801523985180355 9424612078019686546]</span></span><br><span class="line"><span class="string">[ 190015986177831045  594687507332748466 2546708346651205091 3864956414971412519 2586812319675472372 2541554633306459284 2840981234492698127  400426130440806923]</span></span><br><span class="line"><span class="string">[ 354930743948767363  374079227033274174 7821379197355217415 4073976921774664952 8974661879090783904 8725597754431417139 1723115467249027682  914056616366301410]</span></span><br><span class="line"><span class="string">[9032929938905307703  569436029465728354 3230536280479973685 9499318835507740454  460664783708095350 3815328100857956310 6866516203996475375 9142528333783640721]</span></span><br><span class="line"><span class="string">[6647724854667560614 1564543033588842443  980081446425820918 4482664640152609224 9361385831487208956 5729265277086036438 8521779175294512538 7872078731489374461]</span></span><br><span class="line"><span class="string">[2426759667632064565 2564361116290067541 5109836057988930695 3948680632682199428 8561341181219447072 5099840518920477627 9347277712921710222 4364598388067284951]</span></span><br><span class="line"><span class="string">[2143804620259054744 4318231909289693782 6284698432978577252 5529804751795288609 7903556036971407808 3730126758887833322 8782120630459581951 9050476736532525999]</span></span><br><span class="line"><span class="string">v = (4088048241727106122, 258857328202723850, 7303598013681209756, 3446975206276714926, 176458751236949790, 8151363680348349027, 8771366063042882128, 9003511237633705064)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直接在sage中求解逆矩阵即可</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">A = [[<span class="number">7907672172473958392</span>,<span class="number">4938237561047760432</span>,<span class="number">5072996306459844921</span>,<span class="number">800347085054263333</span>,<span class="number">2241217299487989740</span>,<span class="number">5452520396763079026</span>,<span class="number">7354205761061650589</span>,<span class="number">5632270298193588206</span>],</span><br><span class="line">[<span class="number">6856262700627435223</span>,<span class="number">7218982369550725117</span>,<span class="number">3069216736555490147</span>,<span class="number">9043167152368671477</span>,<span class="number">6651431740452419751</span>,<span class="number">2904199636400840775</span>,<span class="number">1984801523985180355</span>,<span class="number">9424612078019686546</span>],</span><br><span class="line">[<span class="number">190015986177831045</span>,<span class="number">594687507332748466</span>,<span class="number">2546708346651205091</span>,<span class="number">3864956414971412519</span>,<span class="number">2586812319675472372</span>,<span class="number">2541554633306459284</span>,<span class="number">2840981234492698127</span>,<span class="number">400426130440806923</span>],</span><br><span class="line">[<span class="number">354930743948767363</span>,<span class="number">374079227033274174</span>,<span class="number">7821379197355217415</span>,<span class="number">4073976921774664952</span>,<span class="number">8974661879090783904</span>,<span class="number">8725597754431417139</span>,<span class="number">1723115467249027682</span>,<span class="number">914056616366301410</span>],</span><br><span class="line">[<span class="number">9032929938905307703</span>,<span class="number">569436029465728354</span>,<span class="number">3230536280479973685</span>,<span class="number">9499318835507740454</span>,<span class="number">460664783708095350</span>,<span class="number">3815328100857956310</span>,<span class="number">6866516203996475375</span>,<span class="number">9142528333783640721</span>],</span><br><span class="line">[<span class="number">6647724854667560614</span>,<span class="number">1564543033588842443</span>,<span class="number">980081446425820918</span>,<span class="number">4482664640152609224</span>,<span class="number">9361385831487208956</span>,<span class="number">5729265277086036438</span>,<span class="number">8521779175294512538</span>,<span class="number">7872078731489374461</span>],</span><br><span class="line">[<span class="number">2426759667632064565</span>,<span class="number">2564361116290067541</span>,<span class="number">5109836057988930695</span>,<span class="number">3948680632682199428</span>,<span class="number">8561341181219447072</span>,<span class="number">5099840518920477627</span>,<span class="number">9347277712921710222</span>,<span class="number">4364598388067284951</span>],</span><br><span class="line">[<span class="number">2143804620259054744</span>,<span class="number">4318231909289693782</span>,<span class="number">6284698432978577252</span>,<span class="number">5529804751795288609</span>,<span class="number">7903556036971407808</span>,<span class="number">3730126758887833322</span>,<span class="number">8782120630459581951</span>,<span class="number">9050476736532525999</span>]]</span><br><span class="line"></span><br><span class="line">ans = [<span class="number">4088048241727106122</span>, <span class="number">258857328202723850</span>, <span class="number">7303598013681209756</span>, <span class="number">3446975206276714926</span>, <span class="number">176458751236949790</span>, <span class="number">8151363680348349027</span>, <span class="number">8771366063042882128</span>, <span class="number">9003511237633705064</span>]</span><br><span class="line">A = matrix(A)</span><br><span class="line">ans = matrix(ans)</span><br><span class="line"></span><br><span class="line">flag = ans * A.inverse()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到flag后转化为字符串</span></span><br><span class="line">flag = [<span class="number">256128467098287645152364579619033136532012336082411188262170716121111141373910417997647279385874168289963422098883372524388175789168151018039664118938</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">275157020682273200260243873388370073035487413746791277567209773631463468440360425377838149581773104213153845176881963804588249058534505227929576082442</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">205418055261423253440834873996888852743735400527184165431288083430874722579052114104669136088527642186595043026543683492544648632576976821633919688987</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,<span class="number">18887682222057954947813918789359532063827948125435329591909175563625225112660734620218938715145807440112704581336669611824654566923603748916776016972</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,-<span class="number">25792447761509638420556125881168126603544490324749544374648563355312526747005861915100426458158515036632551136815312658182069136958880193280291853604</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">263743295233022646271965564265774549530140797857736570979958721892220519418537528753856004044323800915867363751008926223858363297878551362225736657993</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">839256526384408301445325525932265486477039492555936647496320730347707472223889935476141937534810747723549651396954028900430020396698162916210131940419</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">165200370960939593750718733159922760922513289005013438437371715048231002848101266223391623531454692435044072426966916629687643829467166749676754679429</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(i % p)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Line8ar alg3ebra 1s 50 i0mportant!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="HomoBlock"><a href="#HomoBlock" class="headerlink" title="HomoBlock"></a>HomoBlock</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个，一个一个一个Homo啊啊啊啊啊啊啊</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;cnss&#123;I_a&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)%<span class="number">8</span>==<span class="number">0</span></span><br><span class="line">MASK1 = getRandomNBitInteger(<span class="number">32</span>)|(<span class="number">0xffffffff00000000</span>)</span><br><span class="line">MASK2 = getRandomNBitInteger(<span class="number">32</span>)&lt;&lt;<span class="number">32</span></span><br><span class="line">ROUND = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>():</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        tmp.append(getRandomNBitInteger(<span class="number">64</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NotHomoFunction</span>(<span class="params">x,iv,key</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x&lt;&lt;iv)&amp;MASK1)^((x&gt;&gt;iv)|MASK2)^key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,iv,key</span>):</span><br><span class="line">    cipher = bytes_to_long(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        cipher = NotHomoFunction(cipher,iv,key)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">cipher = []</span><br><span class="line">iv = <span class="number">32</span></span><br><span class="line">key = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">8</span>):</span><br><span class="line">    cipher.append(encrypt(flag[i:i+<span class="number">8</span>],iv,key))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(MASK2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">[4840951631397558164, 5492303526413306583, 6271460196030786735, 6127905759336302986, 601209385465514967]</span></span><br><span class="line"><span class="string">32</span></span><br><span class="line"><span class="string">16500653344889503744</span></span><br></pre></td></tr></table></figure>
<p>观察加密方式，发现具有以下特点:</p>
<ul>
<li>明文按长度为8分组，分别加密</li>
<li>每一轮交换上一轮得到结果的高低32位，然后异或 MASK2 ，异或key。</li>
</ul>
<p>可以发现，这样交换4次后就会恢复初值，所以实际交换5次后，就能得到初始值异或 MASK2 并异或key的结果。又因为明文的第一部分已经给出，所以可以根据这个明文恢复key，后续逐步恢复即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;cnss&#123;I_a&#x27;</span></span><br><span class="line">f0 = bytes_to_long(flag)</span><br><span class="line">p = [<span class="number">4840951631397558164</span>, <span class="number">5492303526413306583</span>, <span class="number">6271460196030786735</span>, <span class="number">6127905759336302986</span>, <span class="number">601209385465514967</span>]</span><br><span class="line">MASK2 = <span class="number">16500653344889503744</span></span><br><span class="line">f1 = p[<span class="number">0</span>]</span><br><span class="line">hf0, lf0 = (f0 &gt;&gt; <span class="number">32</span>, f0 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hf1, lf1 = (f1 &gt;&gt; <span class="number">32</span>, f1 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hk = hf1 ^ lf0 ^ (MASK2 &gt;&gt; <span class="number">32</span>)</span><br><span class="line">lk = lf1 ^ hf0</span><br><span class="line">key = (hk &lt;&lt; <span class="number">32</span>) + lk</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">	l, h = ((i ^ MASK2 ^ key) &gt;&gt; <span class="number">32</span>, (i ^ MASK2 ^ key) % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">	flag += long_to_bytes((h &lt;&lt; <span class="number">32</span>) | l).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{I_am_n0t_HHHHHHoooommmmmmmoooo0000}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezLFSR"><a href="#ezLFSR" class="headerlink" title="ezLFSR"></a>ezLFSR</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do you know LFSR?</span><br><span class="line">Hint1:考点： LFSR流密码</span><br><span class="line">Hint2:可以使用 z3solver 。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> mask,seed</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cipher, ipath, opath</span>):</span><br><span class="line">    ifile=<span class="built_in">open</span>(ipath,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    ofile=<span class="built_in">open</span>(opath,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    plaintext=ifile.read()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:</span><br><span class="line">        c=ch^cipher.getrandbit(<span class="number">8</span>)</span><br><span class="line">        ofile.write(long_to_bytes(c))</span><br><span class="line">    ifile.close()</span><br><span class="line">    ofile.close()</span><br><span class="line"></span><br><span class="line">lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">encrypt(lfsr,<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;cipher.enc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;seed = <span class="subst">&#123;seed&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># seed = 37285</span></span><br></pre></td></tr></table></figure>
<p>cipher.enc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5</span><br></pre></td></tr></table></figure>
<p>注意到mask也仅取了低16位，那么爆破的范围也仅有65536，因此直接爆破出符合要求的明文串即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">seed = <span class="number">37285</span></span><br><span class="line">hex_string = <span class="string">&quot;E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5&quot;</span></span><br><span class="line"><span class="comment"># 每两个字符一组拆分</span></span><br><span class="line">split_hex = [hex_string[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_string), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> split_hex:</span><br><span class="line">    c.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    mask = i</span><br><span class="line">    lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">    clist = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> c:</span><br><span class="line">        temp=ch^lfsr.getrandbit(<span class="number">8</span>)</span><br><span class="line">        clist.append(<span class="built_in">chr</span>(temp))</span><br><span class="line">    str1 = <span class="string">&quot;&quot;</span>.join(clist)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;cnss&quot;</span> <span class="keyword">in</span> str1):</span><br><span class="line">        <span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>
<p>运行时间大概需要不到1分钟。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Y0u_can_brust_0r_F1nd_seed}</font>

<p>从flag串以及hint可以看出，本题应该是可以通过LFSR的方式恢复明文的，但是数量级太小，没必要。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅱ"><a href="#RSA-Ⅱ" class="headerlink" title="RSA Ⅱ"></a>RSA Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It&#x27;s more difficult than RSA Ⅰ,right? Can you factorize n ?</span><br><span class="line">Hint:查找有关RSA攻击的资料是一个很重要的技能。</span><br></pre></td></tr></table></figure>
<p>并提供了一篇论文链接：<a href="https://eprint.iacr.org/2020/1506.pdf">1506.pdf (iacr.org)</a></p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask1 = getPrime(<span class="number">512</span>)</span><br><span class="line">mask2 = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask1 = <span class="subst">&#123;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask2 = <span class="subst">&#123;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h1 = <span class="subst">&#123;p&amp;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h2 = <span class="subst">&#123;q&amp;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line"><span class="string">n = 87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line"><span class="string">mask1 = 8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line"><span class="string">mask2 = 10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"><span class="string">h1 = 6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line"><span class="string">h2 = 6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br></pre></td></tr></table></figure>
<p>相较于RSA1，这一次不能根据位运算结果完全确定出p、q的比特位了，不过仍然可以利用以下线索还原：</p>
<ul>
<li>&amp;运算为1，则p该位必为1</li>
<li>&amp;运算为0，mask该位为1，则p该位必为0</li>
</ul>
<p>而当&amp;运算为0，mask也为0时，p的该比特位就存在两种结果，无法完全确定。可是这题不仅给了p，还给了q的位运算结果，因此我们可以利用下面这一点信息，从高位向低位进行深度优先搜索，显著降低复杂度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将p、q当前确定的二进制位后方全部填充0，直至填满512位，此时p、q乘积应小于n。</span><br><span class="line">2、将p、q当前确定的二进制位后方全部填充1，直至填满512位，此时p、q乘积应大于n。</span><br></pre></td></tr></table></figure>
<p>如此就能在极短时间内还原出p、q。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line">n = <span class="number">87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line">h1 = <span class="number">6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line">h2 = <span class="number">6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br><span class="line">mask1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask1)[<span class="number">2</span>:])</span><br><span class="line">mask2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask2)[<span class="number">2</span>:])</span><br><span class="line">h1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h1)[<span class="number">2</span>:])</span><br><span class="line">h2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h2)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">512</span>):</span><br><span class="line">        <span class="comment">#print(tmp0)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmq0,<span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find(tempp,tempq)</span></span><br><span class="line">P = <span class="number">10172774442863868719013872884099170294615753094066736187886125116462340120031133533430755779832487215255546434139069419394249074006281284289077492708469893</span></span><br><span class="line">Q = <span class="number">8580050824978592226795441601299432164577158891190171233964440597982925469924083252289609500726234367555160732119333211934059529993446003001925910065317613</span></span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{A1g0r1thm_1s_5o_hard_for_Me!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="BabyLattice"><a href="#BabyLattice" class="headerlink" title="BabyLattice"></a>BabyLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Do you know SVP and LLL?</span><br><span class="line">Hint:在解决本题的过程中你会接触到格(Lattice)的一些基本概念,以及LLL算法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line">flagArg = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>,<span class="number">8</span>):</span><br><span class="line">    flag_tmp = bytes_to_long(flag[i:i+<span class="number">8</span>])</span><br><span class="line">    <span class="keyword">assert</span> flag_tmp &lt; <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    flagArg.append(flag_tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Equation</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,arg</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(arg)==<span class="number">4</span></span><br><span class="line">        self.arg = arg</span><br><span class="line">        self.modulus = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the modulus is <span class="subst">&#123;self.modulus&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;The number of the <span class="subst">&#123;i&#125;</span> round is <span class="subst">&#123;tmp&#125;</span>&#x27;</span>)</span><br><span class="line">            ans+=self.arg[i]*tmp</span><br><span class="line">        ans = ans%self.modulus</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The result is <span class="subst">&#123;ans&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">EzLineModulus = Equation(flagArg)</span><br><span class="line">EzLineModulus.output()</span><br><span class="line"></span><br><span class="line"><span class="comment">#the modulus is 4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line"><span class="comment">#The number of the 0 round is 7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line"><span class="comment">#The number of the 1 round is 13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line"><span class="comment">#The number of the 2 round is 8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line"><span class="comment">#The number of the 3 round is 798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line"><span class="comment">#The result is 58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br></pre></td></tr></table></figure>
<p>招新赛前的夏令营就出Lattice的题目了。。确实狠</p>
<p>不过确实是最基础的Lattice题目了，大致思路就是列出线性关系式，转化为矩阵形式，并保证较短向量都在等式右侧，即可对构造出来的格进行规约得到短向量。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line">a1 = <span class="number">7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line">a2 = <span class="number">13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line">a3 = <span class="number">8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line">a4 = <span class="number">798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line">ans = <span class="number">58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br><span class="line">inv = inverse(a1,n)</span><br><span class="line">L = Matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,-ans*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,a2*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,a3*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,a4*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,n]])</span><br><span class="line"></span><br><span class="line">v = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[<span class="number">4</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(v)-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[i])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{W0w!Y0u_know_WhatisL4ttice}</font>

<p>（有关格的问题本篇不会展开讲，因为它需要对一些基本原理的了解，想要明白此类问题需要先自行查阅一些格相关的基本概念）</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezSignature"><a href="#ezSignature" class="headerlink" title="ezSignature"></a>ezSignature</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这样使用数字签名是否安全呢？</span><br><span class="line">nc 43.156.14.141 6943</span><br><span class="line"></span><br><span class="line">Hint1:推荐使用pwntools进行交互。</span><br><span class="line">Hint2:建议先了解 DSA 数字签名流程。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalSignatureAlgorithm</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.p = key.p</span><br><span class="line">        self.q = key.q</span><br><span class="line">        self.g = key.g</span><br><span class="line">        self.y = key.y</span><br><span class="line">        self.x = key.x</span><br><span class="line">        self.k = randint(<span class="number">1</span>, self.q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, m</span>):</span><br><span class="line">        k = self.k</span><br><span class="line">        h = bytes_to_long(sha256(m).digest())</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = inverse(k, self.q) * (h + self.x * r) % self.q</span><br><span class="line">        <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, m, signature</span>):</span><br><span class="line">        r, s = signature</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= r &lt;= self.q - <span class="number">1</span>)) <span class="keyword">or</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= s &lt;= self.q - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        z = bytes_to_long(sha256(m).digest())</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (z * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = (<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p % self.q</span><br><span class="line">        <span class="keyword">return</span> r == v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myDSA = DigitalSignatureAlgorithm(DSA.generate(<span class="number">1024</span>))</span><br><span class="line">MENU = <span class="string">br&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1] Sign.</span></span><br><span class="line"><span class="string">[2] Verify.</span></span><br><span class="line"><span class="string">[3] Get_public_key.</span></span><br><span class="line"><span class="string">[4] Exit.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        proof = (<span class="string">&#x27;&#x27;</span>.join([choice(table) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])).encode()</span><br><span class="line">        sha = sha256(proof).hexdigest().encode()</span><br><span class="line">        self.send(<span class="string">b&quot;[+] sha256(XXXX+&quot;</span> + proof[<span class="number">4</span>:] + <span class="string">b&quot;) == &quot;</span> + sha)</span><br><span class="line">        XXXX = self.recv(prompt=<span class="string">b&#x27;[+] Plz Tell Me XXXX :&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(XXXX) != <span class="number">4</span> <span class="keyword">or</span> sha256(XXXX + proof[<span class="number">4</span>:]).hexdigest().encode() != sha:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self</span>):</span><br><span class="line">        m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">        m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">        signature1 = myDSA.sign(m1)</span><br><span class="line">        signature2 = myDSA.sign(m2)</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature1 is:&#x27;</span> + <span class="built_in">str</span>(signature1).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature2 is:&#x27;</span> + <span class="built_in">str</span>(signature2).encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self</span>):</span><br><span class="line">        m = self.recv(<span class="string">b&#x27;message:&#x27;</span>)</span><br><span class="line">        r = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;r:&#x27;</span>))</span><br><span class="line">        s = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;s:&#x27;</span>))</span><br><span class="line">        signature = (r, s)</span><br><span class="line">        <span class="keyword">if</span> m == <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> myDSA.verify(m, signature):</span><br><span class="line">                self.send(<span class="string">b&#x27;Hello there.This is what you want.&#x27;</span>)</span><br><span class="line">                self.send(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        self.send(<span class="string">b&#x27;p = &#x27;</span> + <span class="built_in">str</span>(myDSA.p).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;q = &#x27;</span> + <span class="built_in">str</span>(myDSA.q).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;g = &#x27;</span> + <span class="built_in">str</span>(myDSA.g).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;y = &#x27;</span> + <span class="built_in">str</span>(myDSA.y).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;You must pass the P0W!!!&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.send(MENU)</span><br><span class="line">            option = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;Give me your option:&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">                self.sign()</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">                self.verify()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">                self.get_public_key()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HOST:POST &quot;</span> + HOST + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT))</span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一道靶机交互题，代码较长，但是其实大部分是交互相关的函数，细读发现是很正常的DSA，需要用给定明文通过他的验签操作。（如果不熟悉DSA签名流程，一定要自行查阅了解一下）</p>
<p>检查代码发现漏洞出在sign，由于交互开始时，随机密钥k就不会再变动，因此两个明文共用了k用作签名，因此直接使用共享k攻击即可，具体原理也很简单，自行搜索共享k攻击即可。进阶的还有对线性k、指数k等相关攻击方式。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">172961942888113119438093761564402163853274437530074061334853565231663662473345365517029153614577994838261528197758562341350007269014020447862968046418219322983982857376325091297503076457294884011022491521807290579653731078712552375942815577480924479760060089879761373677236785972440188569442167867715538948131</span></span><br><span class="line">q = <span class="number">1238294525750070611176801188652181858159488474961</span></span><br><span class="line">g = <span class="number">75657702601417227921344829575623735976532473731371029415534443940309702116075857552168402559956825576158353466597825895213717785384352099702983338787137184850387592826820271959589796127014544636714131043162304391677607332131259874984936943058742638800688694139378157588974460944304847089533750902878536046649</span></span><br><span class="line">y = <span class="number">7749296960818920297640684628219596188301310658741359444363507697372166821952159177715756651776536866582220227892407461198512231438360662343916445812054004711764127526569139925464723782772657462476688091598602960531766048824996984183046388253897618420503521674510979988799110962834514762035965219607971731464</span></span><br><span class="line"></span><br><span class="line">r1,s1 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">246708316787437486170638565016913560785356026546</span>)</span><br><span class="line">r2,s2 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">604408984593559575502554675534691666132540008638</span>)</span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">h1 = bytes_to_long(sha256(m1).digest())</span><br><span class="line">h2 = bytes_to_long(sha256(m2).digest())</span><br><span class="line"></span><br><span class="line">k = (h1-h2)*inverse(s1-s2,q)</span><br><span class="line">x = (k*s1 - h1)*inverse(r1,q) % q</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span></span><br><span class="line">h = bytes_to_long(sha256(m).digest())</span><br><span class="line">r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">s = inverse(k, q) * (h + x * r) % q</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>(这题没有完整脚本，拿着这个r，s去交互就可以了；因为比较懒，当时直接用xshell连接上后手动过的sha256爆破，手动提交的r，s。。所以就没有完整pwntools交互脚本)</p>
<p>flag:</p>
<font size="4" color="red">cnss{1ts_Dr4nger0us_t0_u5eThe_Same_K}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="StrangeCurve"><a href="#StrangeCurve" class="headerlink" title="StrangeCurve"></a>StrangeCurve</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The Cruve is SOO0000 Strange!</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">&#x27;cnss&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag_k = bytes_to_long(flag[<span class="number">5</span>:-<span class="number">1</span>].encode())</span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> E.order() == p </span><br><span class="line">base_point = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> base_point <span class="keyword">in</span> E</span><br><span class="line"><span class="keyword">assert</span> flag_k &lt; p </span><br><span class="line"></span><br><span class="line">Q = flag_k*base_point</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (240653647745552223089451307742208085297121769374 : 1041806436100548540817642210994295951394712587396 : 1)</span></span><br></pre></td></tr></table></figure>
<p>椭圆曲线加密，下面这行是重要信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> E.order() == p </span><br></pre></td></tr></table></figure>
<p>因此可以确定是Smart’s attack。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line">P = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line">Q = E(<span class="number">240653647745552223089451307742208085297121769374</span>,<span class="number">1041806436100548540817642210994295951394712587396</span>)</span><br><span class="line"></span><br><span class="line">n = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cnss&#123;&quot;</span> + <span class="built_in">str</span>(long_to_bytes(n))[<span class="number">2</span>:-<span class="number">1</span>] + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{DLPise45y_if5pecia1}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="一🔪一个牛头人"><a href="#一🔪一个牛头人" class="headerlink" title="一🔪一个牛头人"></a>一🔪一个牛头人</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学了NTRU,就要NTR u(❌)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">Zx = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = Zx.gen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convolution</span>(<span class="params">f, g, R</span>):</span><br><span class="line">    <span class="keyword">return</span> (f * g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balancedmod</span>(<span class="params">f, q, R</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: ((x + q//<span class="number">2</span>) % q) - q//<span class="number">2</span>, f.<span class="built_in">list</span>()))</span><br><span class="line">    <span class="keyword">return</span> Zx(g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_poly</span>(<span class="params">n, d1, d2</span>):</span><br><span class="line">    <span class="keyword">assert</span> d1 + d2 &lt;= n</span><br><span class="line">    result = d1 * [<span class="number">1</span>] + d2 * [-<span class="number">1</span>] + (n - d1 - d2) * [<span class="number">0</span>]</span><br><span class="line">    shuffle(result)</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_prime</span>(<span class="params">f, R, p</span>):</span><br><span class="line">    T = Zx.change_ring(Integers(p)).quotient(R)</span><br><span class="line">    <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_powerof2</span>(<span class="params">f, R, q</span>):  <span class="comment"># Hensel Lemma </span></span><br><span class="line">    g = invert_poly_mod_prime(f, R, <span class="number">2</span>)</span><br><span class="line">    e = log(q, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        g = ((<span class="number">2</span> * g - f * g ** <span class="number">2</span>) % R) % q</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NTRUCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, N, p, q, d</span>):</span><br><span class="line">        self.N = N</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.d = d</span><br><span class="line">        self.R = x ** N - <span class="number">1</span></span><br><span class="line">        <span class="comment"># key generation</span></span><br><span class="line">        self.g = random_poly(self.N, d, d)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.f = random_poly(self.N, d + <span class="number">1</span>, d)</span><br><span class="line">                self.fp = invert_poly_mod_prime(self.f, self.R, self.p)</span><br><span class="line">                self.fq = invert_poly_mod_powerof2(self.f, self.R, self.q)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.h = balancedmod(self.p * convolution(self.fq, self.g, self.R), self.q, self.R)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPubKey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, m</span>):</span><br><span class="line">        r = random_poly(self.N, self.d, self.d)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(self.h, r, self.R) + m, self.q, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        a = balancedmod(convolution(c, self.f, self.R), self.q, self.R)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(a, self.fp, self.R), self.p, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, val</span>):</span><br><span class="line">        poly = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.N):</span><br><span class="line">            poly += ((val % self.p) - self.p // <span class="number">2</span>) * (x ** i)</span><br><span class="line">            val //= self.p</span><br><span class="line">        <span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, poly</span>):</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        ll = poly.<span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(ll):</span><br><span class="line">            result += (val + self.p // <span class="number">2</span>) * (self.p ** idx)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">poly_from_list</span>(<span class="params">self, l: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="keyword">return</span> Zx(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">160</span></span><br><span class="line">    d = <span class="number">30</span></span><br><span class="line">    p = <span class="number">3</span></span><br><span class="line">    q = <span class="number">65536</span></span><br><span class="line"></span><br><span class="line">    cipher = NTRUCipher(N, p, q, d) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[PubKey]---------&quot;</span>)</span><br><span class="line">    h = cipher.getPubKey()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line">    msg = bytes_to_long(flag)</span><br><span class="line">    encode_msg = cipher.encode(msg)</span><br><span class="line">    c = cipher.encrypt(encode_msg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[Cipher]---------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    mm = cipher.decrypt(c)</span><br><span class="line">    decode_msg = cipher.decode(mm)</span><br><span class="line">    <span class="keyword">assert</span> decode_msg == msg</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[PubKey]---------</span></span><br><span class="line"><span class="string">h = -11891*x^159 + 16347*x^158 - 32137*x^157 + 14988*x^156 + 16657*x^155 - 25785*x^154 - 21976*x^153 - 31745*x^152 - 4232*x^151 + 29569*x^150 + 27140*x^149 + 19617*x^148 - 16656*x^147 + 8925*x^146 + 8728*x^145 - 8802*x^144 - 10794*x^143 - 28159*x^142 - 6454*x^141 - 10259*x^140 - 19169*x^139 - 14357*x^138 + 3501*x^137 + 9885*x^136 - 7441*x^135 + 18268*x^134 - 27183*x^133 + 26085*x^132 + 19147*x^131 + 17153*x^130 - 22887*x^129 + 32476*x^128 - 21698*x^127 + 19138*x^126 + 11585*x^125 + 22755*x^124 - 5920*x^123 + 7581*x^122 + 25973*x^121 + 13787*x^120 - 22762*x^119 + 29207*x^118 - 17916*x^117 - 11502*x^116 + 18275*x^115 + 318*x^114 - 6890*x^113 - 22751*x^112 - 27677*x^111 - 11114*x^110 + 8623*x^109 - 15725*x^108 - 6835*x^107 - 8288*x^106 - 5235*x^105 - 28697*x^104 + 10696*x^103 + 17117*x^102 + 24696*x^101 - 7801*x^100 - 31874*x^99 - 17668*x^98 - 11204*x^97 + 19147*x^96 + 24644*x^95 - 29380*x^94 - 26237*x^93 - 27390*x^92 + 19982*x^91 + 4074*x^90 - 17248*x^89 - 11027*x^88 - 32690*x^87 + 5124*x^86 - 20823*x^85 - 11779*x^84 + 13781*x^83 + 29356*x^82 - 9740*x^81 - 31484*x^80 - 540*x^79 + 32360*x^78 + 24795*x^77 - 8864*x^76 + 17363*x^75 + 9670*x^74 + 32268*x^73 + 17961*x^72 + 6388*x^71 + 580*x^70 + 128*x^69 + 339*x^68 + 3412*x^67 - 4519*x^66 - 25056*x^65 + 6096*x^64 + 18720*x^63 - 5338*x^62 + 16910*x^61 + 3353*x^60 + 15433*x^59 - 28053*x^58 - 18883*x^57 + 7688*x^56 - 31198*x^55 + 9950*x^54 - 9388*x^53 + 21235*x^52 + 2847*x^51 + 24383*x^50 + 19431*x^49 + 21244*x^48 - 8498*x^47 - 28998*x^46 + 962*x^45 + 20579*x^44 + 28002*x^43 - 6040*x^42 + 4241*x^41 + 11655*x^40 - 32419*x^39 + 21531*x^38 + 7348*x^37 - 5503*x^36 + 29820*x^35 + 28896*x^34 + 8754*x^33 + 17978*x^32 + 7552*x^31 + 27240*x^30 - 29515*x^29 - 20322*x^28 + 2201*x^27 + 8857*x^26 - 50*x^25 - 3780*x^24 - 12138*x^23 + 10893*x^22 + 23133*x^21 + 6142*x^20 - 23798*x^19 - 15236*x^18 + 32564*x^17 + 25683*x^16 - 24010*x^15 - 4355*x^14 + 22552*x^13 - 27155*x^12 + 27649*x^11 + 17781*x^10 + 7115*x^9 + 27465*x^8 - 4369*x^7 + 24882*x^6 - 11675*x^5 - 612*x^4 + 12361*x^3 + 20120*x^2 + 6190*x - 10843</span></span><br><span class="line"><span class="string">[Cipher]---------</span></span><br><span class="line"><span class="string">c = -26801*x^159 - 25103*x^158 + 29811*x^157 - 12251*x^156 - 13386*x^155 - 28030*x^154 - 16511*x^153 + 23761*x^152 + 28329*x^151 - 16406*x^150 + 30931*x^149 + 5326*x^148 + 19877*x^147 - 23165*x^146 - 31540*x^145 - 7923*x^144 + 5880*x^143 - 27078*x^142 - 25436*x^141 - 17162*x^140 + 1471*x^139 + 14486*x^138 + 7702*x^137 - 29890*x^136 + 29315*x^135 + 558*x^134 - 22429*x^133 - 361*x^132 + 19049*x^131 - 30437*x^130 - 32610*x^129 - 3024*x^128 - 4313*x^127 + 29174*x^126 - 2837*x^125 - 2812*x^124 + 13450*x^123 - 15001*x^122 - 25791*x^121 - 8702*x^120 - 4968*x^119 - 15340*x^118 + 31744*x^117 - 32478*x^116 + 19737*x^115 - 12629*x^114 - 27847*x^113 + 27322*x^112 - 31375*x^111 + 14777*x^110 + 29825*x^109 - 25883*x^108 - 13335*x^107 + 32517*x^106 + 14871*x^105 - 7287*x^104 + 13398*x^103 - 32710*x^102 + 20805*x^101 + 29734*x^100 - 14579*x^99 + 17483*x^98 - 16864*x^97 - 26745*x^96 + 3254*x^95 + 7280*x^94 - 29046*x^93 - 7531*x^92 - 8791*x^91 + 15033*x^90 - 1125*x^89 - 14713*x^88 - 12273*x^87 + 8616*x^86 + 2486*x^85 + 31810*x^84 + 27795*x^83 - 21731*x^82 + 21743*x^81 - 27595*x^80 - 3592*x^79 - 27206*x^78 - 32156*x^77 + 32124*x^76 - 11212*x^75 - 6662*x^74 - 23103*x^73 - 3660*x^72 - 31043*x^71 - 17131*x^70 + 24544*x^69 - 32326*x^68 - 31047*x^67 + 19814*x^66 + 10874*x^65 - 8449*x^64 + 11744*x^63 + 2245*x^62 - 967*x^61 + 9120*x^60 + 8983*x^59 - 24573*x^58 + 24885*x^57 + 15649*x^56 - 18970*x^55 + 7354*x^54 - 12282*x^53 - 22474*x^52 + 4395*x^51 + 8428*x^50 - 32592*x^49 + 25980*x^48 - 4599*x^47 + 16310*x^46 + 18559*x^45 + 22897*x^44 + 19080*x^43 - 26065*x^42 - 9*x^41 + 29202*x^40 + 2121*x^39 - 5004*x^38 + 5299*x^37 - 28301*x^36 - 13519*x^35 + 24241*x^34 + 529*x^33 - 20574*x^32 - 27391*x^31 + 31976*x^30 + 22824*x^29 - 31410*x^28 - 20976*x^27 + 21661*x^26 - 15132*x^25 + 1905*x^24 - 30870*x^23 + 18109*x^22 - 17373*x^21 + 5342*x^20 - 22447*x^19 + 1893*x^18 - 17545*x^17 + 30097*x^16 - 21731*x^15 + 17390*x^14 + 10991*x^13 - 5384*x^12 + 15960*x^11 + 24268*x^10 - 29867*x^9 + 22532*x^8 + 10133*x^7 - 26576*x^6 - 5742*x^5 - 16252*x^4 + 13019*x^3 - 25984*x^2 + 14004*x + 22500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个普通的NTRU多项式密码，也是与格有关的，其具体原理可以参考：(甚至详细阐述了每个函数的作用)</p>
<p><a href="http://blog.k1rit0.eu.org/2021/03/28/Translation-of-LatticeHacks/">Translation of LatticeHacks · K1rit0’s Blog</a> </p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">160</span></span><br><span class="line">d = <span class="number">30</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">65536</span></span><br><span class="line">PR = PolynomialRing(ZZ, name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line">R = PR.quotient_ring(x ^ n - <span class="number">1</span>, names = <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">y = R.gen()</span><br><span class="line"></span><br><span class="line">pubkey = -<span class="number">11891</span>*x^<span class="number">159</span> + <span class="number">16347</span>*x^<span class="number">158</span> - <span class="number">32137</span>*x^<span class="number">157</span> + <span class="number">14988</span>*x^<span class="number">156</span> + <span class="number">16657</span>*x^<span class="number">155</span> - <span class="number">25785</span>*x^<span class="number">154</span> - <span class="number">21976</span>*x^<span class="number">153</span> - <span class="number">31745</span>*x^<span class="number">152</span> - <span class="number">4232</span>*x^<span class="number">151</span> + <span class="number">29569</span>*x^<span class="number">150</span> + <span class="number">27140</span>*x^<span class="number">149</span> + <span class="number">19617</span>*x^<span class="number">148</span> - <span class="number">16656</span>*x^<span class="number">147</span> + <span class="number">8925</span>*x^<span class="number">146</span> + <span class="number">8728</span>*x^<span class="number">145</span> - <span class="number">8802</span>*x^<span class="number">144</span> - <span class="number">10794</span>*x^<span class="number">143</span> - <span class="number">28159</span>*x^<span class="number">142</span> - <span class="number">6454</span>*x^<span class="number">141</span> - <span class="number">10259</span>*x^<span class="number">140</span> - <span class="number">19169</span>*x^<span class="number">139</span> - <span class="number">14357</span>*x^<span class="number">138</span> + <span class="number">3501</span>*x^<span class="number">137</span> + <span class="number">9885</span>*x^<span class="number">136</span> - <span class="number">7441</span>*x^<span class="number">135</span> + <span class="number">18268</span>*x^<span class="number">134</span> - <span class="number">27183</span>*x^<span class="number">133</span> + <span class="number">26085</span>*x^<span class="number">132</span> + <span class="number">19147</span>*x^<span class="number">131</span> + <span class="number">17153</span>*x^<span class="number">130</span> - <span class="number">22887</span>*x^<span class="number">129</span> + <span class="number">32476</span>*x^<span class="number">128</span> - <span class="number">21698</span>*x^<span class="number">127</span> + <span class="number">19138</span>*x^<span class="number">126</span> + <span class="number">11585</span>*x^<span class="number">125</span> + <span class="number">22755</span>*x^<span class="number">124</span> - <span class="number">5920</span>*x^<span class="number">123</span> + <span class="number">7581</span>*x^<span class="number">122</span> + <span class="number">25973</span>*x^<span class="number">121</span> + <span class="number">13787</span>*x^<span class="number">120</span> - <span class="number">22762</span>*x^<span class="number">119</span> + <span class="number">29207</span>*x^<span class="number">118</span> - <span class="number">17916</span>*x^<span class="number">117</span> - <span class="number">11502</span>*x^<span class="number">116</span> + <span class="number">18275</span>*x^<span class="number">115</span> + <span class="number">318</span>*x^<span class="number">114</span> - <span class="number">6890</span>*x^<span class="number">113</span> - <span class="number">22751</span>*x^<span class="number">112</span> - <span class="number">27677</span>*x^<span class="number">111</span> - <span class="number">11114</span>*x^<span class="number">110</span> + <span class="number">8623</span>*x^<span class="number">109</span> - <span class="number">15725</span>*x^<span class="number">108</span> - <span class="number">6835</span>*x^<span class="number">107</span> - <span class="number">8288</span>*x^<span class="number">106</span> - <span class="number">5235</span>*x^<span class="number">105</span> - <span class="number">28697</span>*x^<span class="number">104</span> + <span class="number">10696</span>*x^<span class="number">103</span> + <span class="number">17117</span>*x^<span class="number">102</span> + <span class="number">24696</span>*x^<span class="number">101</span> - <span class="number">7801</span>*x^<span class="number">100</span> - <span class="number">31874</span>*x^<span class="number">99</span> - <span class="number">17668</span>*x^<span class="number">98</span> - <span class="number">11204</span>*x^<span class="number">97</span> + <span class="number">19147</span>*x^<span class="number">96</span> + <span class="number">24644</span>*x^<span class="number">95</span> - <span class="number">29380</span>*x^<span class="number">94</span> - <span class="number">26237</span>*x^<span class="number">93</span> - <span class="number">27390</span>*x^<span class="number">92</span> + <span class="number">19982</span>*x^<span class="number">91</span> + <span class="number">4074</span>*x^<span class="number">90</span> - <span class="number">17248</span>*x^<span class="number">89</span> - <span class="number">11027</span>*x^<span class="number">88</span> - <span class="number">32690</span>*x^<span class="number">87</span> + <span class="number">5124</span>*x^<span class="number">86</span> - <span class="number">20823</span>*x^<span class="number">85</span> - <span class="number">11779</span>*x^<span class="number">84</span> + <span class="number">13781</span>*x^<span class="number">83</span> + <span class="number">29356</span>*x^<span class="number">82</span> - <span class="number">9740</span>*x^<span class="number">81</span> - <span class="number">31484</span>*x^<span class="number">80</span> - <span class="number">540</span>*x^<span class="number">79</span> + <span class="number">32360</span>*x^<span class="number">78</span> + <span class="number">24795</span>*x^<span class="number">77</span> - <span class="number">8864</span>*x^<span class="number">76</span> + <span class="number">17363</span>*x^<span class="number">75</span> + <span class="number">9670</span>*x^<span class="number">74</span> + <span class="number">32268</span>*x^<span class="number">73</span> + <span class="number">17961</span>*x^<span class="number">72</span> + <span class="number">6388</span>*x^<span class="number">71</span> + <span class="number">580</span>*x^<span class="number">70</span> + <span class="number">128</span>*x^<span class="number">69</span> + <span class="number">339</span>*x^<span class="number">68</span> + <span class="number">3412</span>*x^<span class="number">67</span> - <span class="number">4519</span>*x^<span class="number">66</span> - <span class="number">25056</span>*x^<span class="number">65</span> + <span class="number">6096</span>*x^<span class="number">64</span> + <span class="number">18720</span>*x^<span class="number">63</span> - <span class="number">5338</span>*x^<span class="number">62</span> + <span class="number">16910</span>*x^<span class="number">61</span> + <span class="number">3353</span>*x^<span class="number">60</span> + <span class="number">15433</span>*x^<span class="number">59</span> - <span class="number">28053</span>*x^<span class="number">58</span> - <span class="number">18883</span>*x^<span class="number">57</span> + <span class="number">7688</span>*x^<span class="number">56</span> - <span class="number">31198</span>*x^<span class="number">55</span> + <span class="number">9950</span>*x^<span class="number">54</span> - <span class="number">9388</span>*x^<span class="number">53</span> + <span class="number">21235</span>*x^<span class="number">52</span> + <span class="number">2847</span>*x^<span class="number">51</span> + <span class="number">24383</span>*x^<span class="number">50</span> + <span class="number">19431</span>*x^<span class="number">49</span> + <span class="number">21244</span>*x^<span class="number">48</span> - <span class="number">8498</span>*x^<span class="number">47</span> - <span class="number">28998</span>*x^<span class="number">46</span> + <span class="number">962</span>*x^<span class="number">45</span> + <span class="number">20579</span>*x^<span class="number">44</span> + <span class="number">28002</span>*x^<span class="number">43</span> - <span class="number">6040</span>*x^<span class="number">42</span> + <span class="number">4241</span>*x^<span class="number">41</span> + <span class="number">11655</span>*x^<span class="number">40</span> - <span class="number">32419</span>*x^<span class="number">39</span> + <span class="number">21531</span>*x^<span class="number">38</span> + <span class="number">7348</span>*x^<span class="number">37</span> - <span class="number">5503</span>*x^<span class="number">36</span> + <span class="number">29820</span>*x^<span class="number">35</span> + <span class="number">28896</span>*x^<span class="number">34</span> + <span class="number">8754</span>*x^<span class="number">33</span> + <span class="number">17978</span>*x^<span class="number">32</span> + <span class="number">7552</span>*x^<span class="number">31</span> + <span class="number">27240</span>*x^<span class="number">30</span> - <span class="number">29515</span>*x^<span class="number">29</span> - <span class="number">20322</span>*x^<span class="number">28</span> + <span class="number">2201</span>*x^<span class="number">27</span> + <span class="number">8857</span>*x^<span class="number">26</span> - <span class="number">50</span>*x^<span class="number">25</span> - <span class="number">3780</span>*x^<span class="number">24</span> - <span class="number">12138</span>*x^<span class="number">23</span> + <span class="number">10893</span>*x^<span class="number">22</span> + <span class="number">23133</span>*x^<span class="number">21</span> + <span class="number">6142</span>*x^<span class="number">20</span> - <span class="number">23798</span>*x^<span class="number">19</span> - <span class="number">15236</span>*x^<span class="number">18</span> + <span class="number">32564</span>*x^<span class="number">17</span> + <span class="number">25683</span>*x^<span class="number">16</span> - <span class="number">24010</span>*x^<span class="number">15</span> - <span class="number">4355</span>*x^<span class="number">14</span> + <span class="number">22552</span>*x^<span class="number">13</span> - <span class="number">27155</span>*x^<span class="number">12</span> + <span class="number">27649</span>*x^<span class="number">11</span> + <span class="number">17781</span>*x^<span class="number">10</span> + <span class="number">7115</span>*x^<span class="number">9</span> + <span class="number">27465</span>*x^<span class="number">8</span> - <span class="number">4369</span>*x^<span class="number">7</span> + <span class="number">24882</span>*x^<span class="number">6</span> - <span class="number">11675</span>*x^<span class="number">5</span> - <span class="number">612</span>*x^<span class="number">4</span> + <span class="number">12361</span>*x^<span class="number">3</span> + <span class="number">20120</span>*x^<span class="number">2</span> + <span class="number">6190</span>*x - <span class="number">10843</span></span><br><span class="line">pubkey = R(pubkey)</span><br><span class="line">c = -<span class="number">26801</span>*x^<span class="number">159</span> - <span class="number">25103</span>*x^<span class="number">158</span> + <span class="number">29811</span>*x^<span class="number">157</span> - <span class="number">12251</span>*x^<span class="number">156</span> - <span class="number">13386</span>*x^<span class="number">155</span> - <span class="number">28030</span>*x^<span class="number">154</span> - <span class="number">16511</span>*x^<span class="number">153</span> + <span class="number">23761</span>*x^<span class="number">152</span> + <span class="number">28329</span>*x^<span class="number">151</span> - <span class="number">16406</span>*x^<span class="number">150</span> + <span class="number">30931</span>*x^<span class="number">149</span> + <span class="number">5326</span>*x^<span class="number">148</span> + <span class="number">19877</span>*x^<span class="number">147</span> - <span class="number">23165</span>*x^<span class="number">146</span> - <span class="number">31540</span>*x^<span class="number">145</span> - <span class="number">7923</span>*x^<span class="number">144</span> + <span class="number">5880</span>*x^<span class="number">143</span> - <span class="number">27078</span>*x^<span class="number">142</span> - <span class="number">25436</span>*x^<span class="number">141</span> - <span class="number">17162</span>*x^<span class="number">140</span> + <span class="number">1471</span>*x^<span class="number">139</span> + <span class="number">14486</span>*x^<span class="number">138</span> + <span class="number">7702</span>*x^<span class="number">137</span> - <span class="number">29890</span>*x^<span class="number">136</span> + <span class="number">29315</span>*x^<span class="number">135</span> + <span class="number">558</span>*x^<span class="number">134</span> - <span class="number">22429</span>*x^<span class="number">133</span> - <span class="number">361</span>*x^<span class="number">132</span> + <span class="number">19049</span>*x^<span class="number">131</span> - <span class="number">30437</span>*x^<span class="number">130</span> - <span class="number">32610</span>*x^<span class="number">129</span> - <span class="number">3024</span>*x^<span class="number">128</span> - <span class="number">4313</span>*x^<span class="number">127</span> + <span class="number">29174</span>*x^<span class="number">126</span> - <span class="number">2837</span>*x^<span class="number">125</span> - <span class="number">2812</span>*x^<span class="number">124</span> + <span class="number">13450</span>*x^<span class="number">123</span> - <span class="number">15001</span>*x^<span class="number">122</span> - <span class="number">25791</span>*x^<span class="number">121</span> - <span class="number">8702</span>*x^<span class="number">120</span> - <span class="number">4968</span>*x^<span class="number">119</span> - <span class="number">15340</span>*x^<span class="number">118</span> + <span class="number">31744</span>*x^<span class="number">117</span> - <span class="number">32478</span>*x^<span class="number">116</span> + <span class="number">19737</span>*x^<span class="number">115</span> - <span class="number">12629</span>*x^<span class="number">114</span> - <span class="number">27847</span>*x^<span class="number">113</span> + <span class="number">27322</span>*x^<span class="number">112</span> - <span class="number">31375</span>*x^<span class="number">111</span> + <span class="number">14777</span>*x^<span class="number">110</span> + <span class="number">29825</span>*x^<span class="number">109</span> - <span class="number">25883</span>*x^<span class="number">108</span> - <span class="number">13335</span>*x^<span class="number">107</span> + <span class="number">32517</span>*x^<span class="number">106</span> + <span class="number">14871</span>*x^<span class="number">105</span> - <span class="number">7287</span>*x^<span class="number">104</span> + <span class="number">13398</span>*x^<span class="number">103</span> - <span class="number">32710</span>*x^<span class="number">102</span> + <span class="number">20805</span>*x^<span class="number">101</span> + <span class="number">29734</span>*x^<span class="number">100</span> - <span class="number">14579</span>*x^<span class="number">99</span> + <span class="number">17483</span>*x^<span class="number">98</span> - <span class="number">16864</span>*x^<span class="number">97</span> - <span class="number">26745</span>*x^<span class="number">96</span> + <span class="number">3254</span>*x^<span class="number">95</span> + <span class="number">7280</span>*x^<span class="number">94</span> - <span class="number">29046</span>*x^<span class="number">93</span> - <span class="number">7531</span>*x^<span class="number">92</span> - <span class="number">8791</span>*x^<span class="number">91</span> + <span class="number">15033</span>*x^<span class="number">90</span> - <span class="number">1125</span>*x^<span class="number">89</span> - <span class="number">14713</span>*x^<span class="number">88</span> - <span class="number">12273</span>*x^<span class="number">87</span> + <span class="number">8616</span>*x^<span class="number">86</span> + <span class="number">2486</span>*x^<span class="number">85</span> + <span class="number">31810</span>*x^<span class="number">84</span> + <span class="number">27795</span>*x^<span class="number">83</span> - <span class="number">21731</span>*x^<span class="number">82</span> + <span class="number">21743</span>*x^<span class="number">81</span> - <span class="number">27595</span>*x^<span class="number">80</span> - <span class="number">3592</span>*x^<span class="number">79</span> - <span class="number">27206</span>*x^<span class="number">78</span> - <span class="number">32156</span>*x^<span class="number">77</span> + <span class="number">32124</span>*x^<span class="number">76</span> - <span class="number">11212</span>*x^<span class="number">75</span> - <span class="number">6662</span>*x^<span class="number">74</span> - <span class="number">23103</span>*x^<span class="number">73</span> - <span class="number">3660</span>*x^<span class="number">72</span> - <span class="number">31043</span>*x^<span class="number">71</span> - <span class="number">17131</span>*x^<span class="number">70</span> + <span class="number">24544</span>*x^<span class="number">69</span> - <span class="number">32326</span>*x^<span class="number">68</span> - <span class="number">31047</span>*x^<span class="number">67</span> + <span class="number">19814</span>*x^<span class="number">66</span> + <span class="number">10874</span>*x^<span class="number">65</span> - <span class="number">8449</span>*x^<span class="number">64</span> + <span class="number">11744</span>*x^<span class="number">63</span> + <span class="number">2245</span>*x^<span class="number">62</span> - <span class="number">967</span>*x^<span class="number">61</span> + <span class="number">9120</span>*x^<span class="number">60</span> + <span class="number">8983</span>*x^<span class="number">59</span> - <span class="number">24573</span>*x^<span class="number">58</span> + <span class="number">24885</span>*x^<span class="number">57</span> + <span class="number">15649</span>*x^<span class="number">56</span> - <span class="number">18970</span>*x^<span class="number">55</span> + <span class="number">7354</span>*x^<span class="number">54</span> - <span class="number">12282</span>*x^<span class="number">53</span> - <span class="number">22474</span>*x^<span class="number">52</span> + <span class="number">4395</span>*x^<span class="number">51</span> + <span class="number">8428</span>*x^<span class="number">50</span> - <span class="number">32592</span>*x^<span class="number">49</span> + <span class="number">25980</span>*x^<span class="number">48</span> - <span class="number">4599</span>*x^<span class="number">47</span> + <span class="number">16310</span>*x^<span class="number">46</span> + <span class="number">18559</span>*x^<span class="number">45</span> + <span class="number">22897</span>*x^<span class="number">44</span> + <span class="number">19080</span>*x^<span class="number">43</span> - <span class="number">26065</span>*x^<span class="number">42</span> - <span class="number">9</span>*x^<span class="number">41</span> + <span class="number">29202</span>*x^<span class="number">40</span> + <span class="number">2121</span>*x^<span class="number">39</span> - <span class="number">5004</span>*x^<span class="number">38</span> + <span class="number">5299</span>*x^<span class="number">37</span> - <span class="number">28301</span>*x^<span class="number">36</span> - <span class="number">13519</span>*x^<span class="number">35</span> + <span class="number">24241</span>*x^<span class="number">34</span> + <span class="number">529</span>*x^<span class="number">33</span> - <span class="number">20574</span>*x^<span class="number">32</span> - <span class="number">27391</span>*x^<span class="number">31</span> + <span class="number">31976</span>*x^<span class="number">30</span> + <span class="number">22824</span>*x^<span class="number">29</span> - <span class="number">31410</span>*x^<span class="number">28</span> - <span class="number">20976</span>*x^<span class="number">27</span> + <span class="number">21661</span>*x^<span class="number">26</span> - <span class="number">15132</span>*x^<span class="number">25</span> + <span class="number">1905</span>*x^<span class="number">24</span> - <span class="number">30870</span>*x^<span class="number">23</span> + <span class="number">18109</span>*x^<span class="number">22</span> - <span class="number">17373</span>*x^<span class="number">21</span> + <span class="number">5342</span>*x^<span class="number">20</span> - <span class="number">22447</span>*x^<span class="number">19</span> + <span class="number">1893</span>*x^<span class="number">18</span> - <span class="number">17545</span>*x^<span class="number">17</span> + <span class="number">30097</span>*x^<span class="number">16</span> - <span class="number">21731</span>*x^<span class="number">15</span> + <span class="number">17390</span>*x^<span class="number">14</span> + <span class="number">10991</span>*x^<span class="number">13</span> - <span class="number">5384</span>*x^<span class="number">12</span> + <span class="number">15960</span>*x^<span class="number">11</span> + <span class="number">24268</span>*x^<span class="number">10</span> - <span class="number">29867</span>*x^<span class="number">9</span> + <span class="number">22532</span>*x^<span class="number">8</span> + <span class="number">10133</span>*x^<span class="number">7</span> - <span class="number">26576</span>*x^<span class="number">6</span> - <span class="number">5742</span>*x^<span class="number">5</span> - <span class="number">16252</span>*x^<span class="number">4</span> + <span class="number">13019</span>*x^<span class="number">3</span> - <span class="number">25984</span>*x^<span class="number">2</span> + <span class="number">14004</span>*x + <span class="number">22500</span></span><br><span class="line">c = R(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balance_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(((f[i] + q // <span class="number">2</span>) % q) - q // <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> R(g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_prime</span>(<span class="params">f, p</span>):</span><br><span class="line">    T = R.base().change_ring(Integers(p)).quotient(x ^ n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> R(<span class="number">1</span> / T(f))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c, prikey</span>):</span><br><span class="line">    f, fp = prikey</span><br><span class="line">    a = balance_mod(c * f, q)</span><br><span class="line">    <span class="keyword">return</span> balance_mod(a * fp, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pubkey, c</span>):</span><br><span class="line">    A = Matrix(ZZ, <span class="number">2</span> * n, <span class="number">2</span> * n)</span><br><span class="line">    hp = inverse(p, q) * pubkey</span><br><span class="line">    hp_list = <span class="built_in">list</span>(hp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[i, i] = q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">2</span> * n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            A[i, j] = hp_list[(j - i) % n]</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">    AL = A.BKZ()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> AL:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = R(row[n:].<span class="built_in">list</span>())</span><br><span class="line">            fp = invert_mod_prime(f, p)</span><br><span class="line">            <span class="keyword">return</span> dec(c, (f, fp))</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># may failed with shortest vector(return more if failed)</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">m = crack(pubkey, c)</span><br><span class="line"></span><br><span class="line">m = m.<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] += <span class="number">1</span></span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">str1 = <span class="string">&quot;&quot;</span>.join(m[::-<span class="number">1</span>])</span><br><span class="line">temp = <span class="built_in">int</span>(str1,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(temp))</span><br></pre></td></tr></table></figure>
<p>(可能需要跑几分钟)</p>
<p>flag:</p>
<font size="4" color="red">cnss{NTRU_w1th_un5afe_par4}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MidLattice"><a href="#MidLattice" class="headerlink" title="MidLattice"></a>MidLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看上去像gcd，但是有区别</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">pbit = <span class="number">500</span></span><br><span class="line">qbit = <span class="number">550</span></span><br><span class="line">rbit = <span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sample</span>():</span><br><span class="line">    x_list  = []</span><br><span class="line">    p = getPrime(pbit)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        q = getPrime(qbit)</span><br><span class="line">        r = getPrime(rbit)</span><br><span class="line">        x_list.append(q*p + <span class="number">2</span>*r)</span><br><span class="line">    <span class="keyword">return</span> x_list,p</span><br><span class="line">sample,p = get_sample()</span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(sample))</span><br></pre></td></tr></table></figure>
<p>以及一个output.txt</p>
<p>题目描述的很明确了，agcd问题(近似公约数问题)，也与格相关，不进行展开。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">500</span></span><br><span class="line">Q_bits = <span class="number">550</span></span><br><span class="line">R_bits = <span class="number">200</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">N = <span class="comment">#自行代入</span></span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>也需要跑几分钟才出结果，能更精确地调整参数的话可能可以减少耗时。</p>
<p>flag:</p>
<font size="4" color="red">cnss{dde0cc3ac3539c66a74ed445a81c3f5b12938c286fa569a3b143b72369c708c9}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="铜匠的世界"><a href="#铜匠的世界" class="headerlink" title="铜匠的世界"></a>铜匠的世界</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">怎样在2^512个可能中找到唯一的答案呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = isqrt(p) ^ isqrt(q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hint = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line"><span class="string">c = 19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"><span class="string">hint = 34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果给的是p^q，题目是容易的，只需要按照RSA Ⅱ类似的思路进行深搜即可。而给的是isqrt(p) ^ isqrt(q)，很容易会有思路如下：</p>
<ul>
<li>对n开根，得到isqrt(p*q) </li>
<li>将isqrt(p*q) 看作n，将isqrt(p) ^ isqrt(q)看作p^q，转化成上面给定p^q的问题求解</li>
</ul>
<p>看上去没什么问题，可是实际操作就会发现存在两点问题：</p>
<ul>
<li>由于一些低位误差，有一些可能正确的根号p、q高位被舍弃。</li>
<li>即使得到了正确的isqrt(p)与isqrt(q)，各自平方后与真正的p、q还有至少256比特的差距，即使是用coppersmith也完全满足不了使用条件。</li>
</ul>
<p>因此不能再使用RSA Ⅱ中的返回条件进行按位查找了。此时搜索题目，发现了佬的类似的题目思路：</p>
<p><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard">https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard</a></p>
<p>这样子查找成功后，还需要对低位进行一定程度的爆破后才能使用coppersmith，并且参数要卡的比较死，比如epsilon取0.03虽然快一些，但是跑不出结果，因此只能取0.01甚至更小，但这个就会耗费很长时间。遗憾的是我也没有想出更好的办法。</p>
<p><br></p>
<p>exp_step1.ipynb：(求出可能的p高位)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> binteger <span class="keyword">import</span> Bin</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">self, X=<span class="literal">None</span>, beta=<span class="number">1.0</span>, epsilon=<span class="literal">None</span>, **kwds</span>):</span><br><span class="line">    <span class="keyword">from</span> sage.misc.verbose <span class="keyword">import</span> verbose</span><br><span class="line">    <span class="keyword">from</span> sage.matrix.constructor <span class="keyword">import</span> Matrix</span><br><span class="line">    <span class="keyword">from</span> sage.rings.real_mpfr <span class="keyword">import</span> RR</span><br><span class="line"></span><br><span class="line">    N = self.parent().characteristic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.is_monic():</span><br><span class="line">        <span class="keyword">raise</span> ArithmeticError(<span class="string">&quot;Polynomial must be monic.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    beta = RR(beta)</span><br><span class="line">    <span class="keyword">if</span> beta &lt;= <span class="number">0.0</span> <span class="keyword">or</span> beta &gt; <span class="number">1.0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;0.0 &lt; beta &lt;= 1.0 not satisfied.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f = self.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    P, (x,) = f.parent().objgens()</span><br><span class="line"></span><br><span class="line">    delta = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epsilon <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        epsilon = beta / <span class="number">8</span></span><br><span class="line">    verbose(<span class="string">&quot;epsilon = %f&quot;</span> % epsilon, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">max</span>(beta**<span class="number">2</span> / (delta * epsilon), <span class="number">7</span> * beta / delta).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;m = %d&quot;</span> % m, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">int</span>((delta * m * (<span class="number">1</span> / beta - <span class="number">1</span>)).floor())</span><br><span class="line">    verbose(<span class="string">&quot;t = %d&quot;</span> % t, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        X = (<span class="number">0.5</span> * N ** (beta**<span class="number">2</span> / delta - epsilon)).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;X = %s&quot;</span> % X, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we could do this much faster, but this is a cheap step</span></span><br><span class="line">    <span class="comment"># compared to LLL</span></span><br><span class="line">    g = [x**j * N ** (m - i) * f**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(delta)]</span><br><span class="line">    g.extend([x**i * f**m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)])  <span class="comment"># h</span></span><br><span class="line"></span><br><span class="line">    B = Matrix(ZZ, <span class="built_in">len</span>(g), delta * m + <span class="built_in">max</span>(delta, t))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows()):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(g[i].degree() + <span class="number">1</span>):</span><br><span class="line">            B[i, j] = g[i][j] * X**j</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">sum</span>([ZZ(B[<span class="number">0</span>, i] // X**i) * x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.ncols())])</span><br><span class="line">    R = f.roots()</span><br><span class="line"></span><br><span class="line">    ZmodN = self.base_ring()</span><br><span class="line">    roots = <span class="built_in">set</span>([ZmodN(r) <span class="keyword">for</span> r, m <span class="keyword">in</span> R <span class="keyword">if</span> <span class="built_in">abs</span>(r) &lt;= X])</span><br><span class="line">    Nbeta = N**beta</span><br><span class="line">    <span class="keyword">return</span> [root <span class="keyword">for</span> root <span class="keyword">in</span> roots <span class="keyword">if</span> N.gcd(ZZ(self(root))) &gt;= Nbeta]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line">hint = <span class="number">34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">spv, i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">yield</span> Bin(spv, <span class="number">256</span>), Bin(Bin(spv).<span class="built_in">int</span> ^^ hint, <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">0</span>):</span><br><span class="line">        spv[i] = b</span><br><span class="line">        tsp = Bin(spv).<span class="built_in">int</span></span><br><span class="line">        tsq = tsp ^^ hint</span><br><span class="line">        p = tsp**<span class="number">2</span></span><br><span class="line">        q = tsq**<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= (pq - p * q) &lt;= <span class="number">2</span> ** (<span class="number">1024</span> - i + <span class="number">1</span>) <span class="keyword">and</span> <span class="number">0</span> &lt;= (</span><br><span class="line">            iroot(pq,<span class="number">2</span>)[<span class="number">0</span>] - tsp * tsq</span><br><span class="line">        ) &lt;= <span class="number">2</span> ** (<span class="number">512</span> - i + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> dfs(spv[:], i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spv = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> spc, sqc <span class="keyword">in</span> dfs(spv, <span class="number">0</span>):</span><br><span class="line">    d = pq - spc.<span class="built_in">int</span>**<span class="number">2</span> * sqc.<span class="built_in">int</span>**<span class="number">2</span></span><br><span class="line">    results.append((d, spc.<span class="built_in">int</span>, sqc.<span class="built_in">int</span>))</span><br><span class="line"><span class="keyword">for</span> i, (_, spci, sqci) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="comment">#print((spci - (iroot(pq,2)[0] // sqci)).bit_length())</span></span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copp_factor</span>(<span class="params">sp, leak=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak + <span class="number">1</span></span><br><span class="line">        P = Zmod(pq)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">        x = P.gen()</span><br><span class="line">        f = sp.<span class="built_in">int</span>**<span class="number">2</span> + (x &lt;&lt; shift) + <span class="number">2</span>*tb + <span class="number">1</span></span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak - <span class="number">1</span>)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        rs = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="comment">#rs = small_roots(f, X=X, beta=beta, epsilon=eps)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rs):</span><br><span class="line">            <span class="built_in">print</span>(sp.<span class="built_in">int</span>**<span class="number">2</span> + (tb &lt;&lt; shift) + <span class="built_in">int</span>(rs[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (_, spci, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    copp_factor(Bin(spci, <span class="number">256</span>))</span><br></pre></td></tr></table></figure>
<p>将运行结果填充至下面脚本中的sqrtplist中</p>
<p><br></p>
<p>exp_step2.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">N = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"></span><br><span class="line">sqrtplist = <span class="comment">#自行代入</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">6</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sqrtplist)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    sp = sqrtplist[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">        f = sp**<span class="number">2</span> + (tb &lt;&lt; shift) + x</span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        res = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="keyword">if</span>(res!=[]):</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="built_in">print</span>(sp**<span class="number">2</span> + (tb &lt;&lt; shift) + res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">p = <span class="number">6756521617869105417915102754795944450583448652752246233837766079298009351893501307888859133738834804209006551446537605217981998432259279870915861077557549</span></span><br><span class="line">q = N//p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>跑出结果可能需要6个小时到10个小时不等。如果你有更好的方式欢迎在评论区留言！</p>
<p>flag:</p>
<font size="4" color="red">cnss{We hav3 n0 0ther ch0ice but c0ppersm1th.}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目质量确实很不错，每道题目考察的知识点很有针对性，准备好好借鉴参考(<del>开偷</del>)。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-misc</title>
    <url>/post/22e56931.html</url>
    <content><![CDATA[<p>做题记录</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/22e56931/image-20230916080821685.png" alt="image-20230916080821685"></p>
<h3 id="❤️-Signin"><a href="#❤️-Signin" class="headerlink" title="❤️ Signin"></a>❤️ Signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">听说有人在CNSS招新群的某个地方藏了一个隐秘的flag，到底在哪呢？</span><br><span class="line">快来加入招新群431060996</span><br></pre></td></tr></table></figure>
<p>题目：按照要求搜索群聊，群聊介绍中有一段base64，解密得flag：</p>
<p><img src="/post/22e56931/image-20230911100902419.png" alt="image-20230911100902419"></p>
<p>flag：</p>
<p><strong>cnss{W3Lc0m3_7o_Cn55_5umm3r！}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔎-侦探-CNSS-娘的秘密"><a href="#🔎-侦探-CNSS-娘的秘密" class="headerlink" title="🔎 侦探 CNSS 娘的秘密"></a>🔎 侦探 CNSS 娘的秘密</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">懒得写文案了，试着找出 CNSS 娘的秘密吧</span><br></pre></td></tr></table></figure>
<p>题目附件为一张图片：</p>
<p><img src="/post/22e56931/CNSSDoll.png" alt="CNSSDoll"></p>
<p>十六进制打开，在文件末尾看到flag：</p>
<p><img src="/post/22e56931/image-20230911101309673.png" alt="image-20230911101309673"></p>
<p>flag：</p>
<p><strong>cnss{W0w!!!Y0u_s4ww_m3!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🏆-重生之我在-CNSS-当-OIer"><a href="#🏆-重生之我在-CNSS-当-OIer" class="headerlink" title="🏆 重生之我在 CNSS 当 OIer"></a>🏆 重生之我在 CNSS 当 OIer</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述和输入输出格式都找不到了...但是身为超级 OIER 的你一定可以 AC 本题吧</span><br><span class="line"></span><br><span class="line">nc 47.108.140.140 1107</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">SRC = <span class="string">&#x27;/home/ctf/temp/code.c&#x27;</span></span><br><span class="line">BIN = <span class="string">&#x27;/home/ctf/temp/temp_bin&#x27;</span></span><br><span class="line">DATA = <span class="string">&#x27;/home/ctf/data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res_map = &#123;</span><br><span class="line">    <span class="string">&#x27;CE&#x27;</span>: <span class="string">&#x27;Compile Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TLE&#x27;</span>: <span class="string">&#x27;Time Limit Exceeded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;RE&#x27;</span>: <span class="string">&#x27;Runtime Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;WA&#x27;</span>: <span class="string">&#x27;Wrong Answer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AC&#x27;</span>: <span class="string">&#x27;Accepted&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_excutable</span>(<span class="params">path, <span class="built_in">input</span>, ans, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;CE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = subprocess.run(</span><br><span class="line">            [<span class="string">f&quot;./<span class="subst">&#123;path&#125;</span>&quot;</span>],</span><br><span class="line">            <span class="built_in">input</span>=<span class="built_in">input</span>,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            timeout=timeout</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;TLE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;RE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = p.stdout.decode()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line">    lines = output.strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;AC&#x27;</span> <span class="keyword">if</span> lines == ans <span class="keyword">else</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your code (ending with two blank lines):&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code1 = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        code1.append(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(code1) &gt;= <span class="number">2</span> <span class="keyword">and</span> code1[-<span class="number">1</span>] == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> code1[-<span class="number">2</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SRC, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fd1:</span><br><span class="line">        fd1.write(<span class="string">&#x27;\n&#x27;</span>.join(code1))</span><br><span class="line"></span><br><span class="line">    p = subprocess.run(</span><br><span class="line">        [<span class="string">&quot;gcc&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;-O2&quot;</span>, SRC, <span class="string">&quot;-o&quot;</span>, BIN],</span><br><span class="line">        stdout=sys.stdout,</span><br><span class="line">        stdin=subprocess.DEVNULL,</span><br><span class="line">        stderr=subprocess.STDOUT</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;input.in&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        instr = f.read()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;output.out&#x27;</span>), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ans = f.read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    res = check_excutable(BIN, instr, ans, <span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Result: &#x27;</span>, res_map[res])</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;AC&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>简单翻译一下程序功能：输入一段c语言代码，送至code.c中，进行编译后，将input.in中的内容作为输入执行这段程序，并将程序输出结果与output.out中的内容做对比，如果结果一致，则会输出flag。</p>
<p>问题在于，我们并不知道input.in与output.out的内容是什么，也就无法根据需要写出对应程序。可是其实再仔细想想，题目要求其实仅仅是要求程序内容输出与output.out内容一致而已，而根据题目附件，output.out文件就在DATA目录下，所以其实只需要写一个能打印出output.out内容的c语言程序即可。</p>
<p>exp.c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="type">char</span> filename[] = <span class="string">&quot;/home/ctf/data/output.out&quot;</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = fgetc(file)) != EOF) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><img src="/post/22e56931/image-20230911102740014.png" alt="image-20230911102740014"></p>
<p>flag：</p>
<p><strong>cnss{y0u_4re_U1tim34ate_01er!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="❓-泻药，人在CNSS，刚打完招新"><a href="#❓-泻药，人在CNSS，刚打完招新" class="headerlink" title="❓ 泻药，人在CNSS，刚打完招新"></a>❓ 泻药，人在CNSS，刚打完招新</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参加CNSS招新赛是一种怎样的体验呢？</span><br></pre></td></tr></table></figure>
<p>题目的全部信息只有题目标题和题目描述，没有附件、没有靶机，因此基本可以确定为社工题。</p>
<p>直接搜索题目描述，就能在知乎上搜到一个回答，最后就有flag：</p>
<p><img src="/post/22e56931/image-20230911103024312.png" alt="image-20230911103024312"></p>
<p>flag：</p>
<p><strong>cnss{L3T_U$_$T4RT!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔮-東方希缇符"><a href="#🔮-東方希缇符" class="headerlink" title="🔮 東方希缇符"></a>🔮 東方希缇符</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">试着找出最新最热（确信）东方新作中的 flag 吧！</span><br><span class="line">Hint：flag 在游戏资源包内</span><br></pre></td></tr></table></figure>
<p>题目给了th08的游戏包，结合hint知道应该是要对资源包解包得flag。</p>
<p>thxx解包参考：</p>
<p><a href="https://www.bilibili.com/read/cv13353380/">关于东方project系列正作的魔改教程以及注意事项 - 哔哩哔哩 (bilibili.com)</a></p>
<p>跟着一步一步做：</p>
<p>1、下载工具</p>
<p>2、选择好文件与对应游戏(th08)，进行解包</p>
<p><img src="/post/22e56931/image-20230911103506296.png" alt="image-20230911103506296"></p>
<p>3、在解包得到的资源中发现flag.txt</p>
<p><img src="/post/22e56931/image-20230911103618535.png" alt="image-20230911103618535"></p>
<p>flag：</p>
<p><strong>cnss{Y0u_4re_T0uhou_M4st3er_n0w!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h3><p>参考我另一篇文章：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/77e39860.html#more">misc趣题(一) | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p><br></p>
<p><br></p>
<h3 id="☁️-Hurrison-的网站"><a href="#☁️-Hurrison-的网站" class="headerlink" title="☁️ Hurrison 的网站"></a>☁️ Hurrison 的网站</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hurrison 刚刚学会搭建网站，听说套了 Cloudflare 之后大黑客 Casio 就找不到服务器 IP 了</span><br><span class="line">Hint：flag格式如下：</span><br><span class="line">cnss&#123;IPv4&#125;</span><br><span class="line">IPv4 格式为 xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cnss2023catchme.hurrison.com/</span><br></pre></td></tr></table></figure>
<p>根据题目描述，这题是要寻找隐藏在Cloudflare下的服务器ip地址，直接对这个要求进行搜索：</p>
<p><img src="/post/22e56931/image-20230911104238020.png" alt="image-20230911104238020"></p>
<p>逐个尝试文章中的方法，最后发现这个方法很有效果：</p>
<p><img src="/post/22e56931/image-20230911104618404.png" alt="image-20230911104618404"></p>
<p>到<a href="https://securitytrails.com/">SecurityTrails: Data Security, Threat Hunting, and Attack Surface Management Solutions for Security Teams</a>搜索对应URL，并不能直接在历史数据里看到结果。开一开脑洞，搜索hurrison.com，就有很多子域名：</p>
<p><img src="/post/22e56931/image-20230911111836344.png" alt="image-20230911111836344"></p>
<p>逐个查看，并结合Censys逐个搜索域名，如下：</p>
<p><img src="/post/22e56931/image-20230911112020297.png" alt="image-20230911112020297"></p>
<p>找到一个在给定范围内的ip地址就可以了。</p>
<p>flag：</p>
<p><strong>cnss{103.239.247.22}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="💻-cn55Terminal"><a href="#💻-cn55Terminal" class="headerlink" title="💻 cn55Terminal"></a>💻 cn55Terminal</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述又忘了，凑合用吧👇</span><br><span class="line">curl -sL https://transfer.sh/VKyC2P8CPw/id.txt | nc 124.221.34.13 50024</span><br><span class="line">Update: 为避免这行命令可能造成不必要的误解，还是试试手动体验 cn55Terminal 吧~</span><br><span class="line">如果你访问不了，或者想手动，这里也贴出 id.txt</span><br></pre></td></tr></table></figure>
<p>id.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">.@@.....@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@.....@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br></pre></td></tr></table></figure>
<p>xshell打开，缩小界面看到的命令如下：</p>
<p><img src="/post/22e56931/image-20230911144054892.png" alt="image-20230911144054892"></p>
<p>可以看到，命令行前的内容以字符画的形式展示出来了，合理猜测，这道题的意思是识别字符画形式的指令并执行。这样的话，我们就需要输入字符画形式的linux指令。先试一试将题目给出的id上传，看看返回内容：</p>
<p><img src="/post/22e56931/image-20230911144414307.png" alt="image-20230911144414307"></p>
<p>可以看出确实和想象的一模一样，终端执行了id指令。那么接下来就是找脚本，将”cat flag”生成为字符画。最后找到了一个脚本，但是他只能将图片转化为字符画，没事，先生成一张图片：</p>
<p><img src="/post/22e56931/image-20230911144603284.png" alt="image-20230911144603284"></p>
<p>然后用如下脚本转化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">out_img = img.convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 图片转换为灰度模式</span></span><br><span class="line">w, h = out_img.size  <span class="comment"># 返回图片大小</span></span><br><span class="line">n=<span class="number">600</span>/<span class="built_in">max</span>(w,h) <span class="comment">#图像缩小倍数，不然图片转换后会很大</span></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w * n), <span class="built_in">int</span>(h * n*<span class="number">0.5</span>)))  <span class="comment"># 因字符的宽度一般大于2倍的高度</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w), <span class="built_in">int</span>(h )))</span><br><span class="line">w, h = out_img.size</span><br><span class="line"><span class="comment">#asciis=&#x27;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,&quot;^\ &#x27;</span></span><br><span class="line">asciis = <span class="string">&quot;@.&quot;</span>  <span class="comment"># 灰度表</span></span><br><span class="line">texts = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line"> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">       gray = out_img.getpixel((col, row))</span><br><span class="line">       texts += asciis[<span class="built_in">int</span>(gray / <span class="number">255</span> * (<span class="built_in">len</span>(asciis) - <span class="number">1</span>))]  <span class="comment"># 根据灰度值选择不同复杂度的 ASCII 字符</span></span><br><span class="line"> texts += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(texts)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<p>得到1.txt文件，打开即是字符画：</p>
<p><img src="/post/22e56931/image-20230911144716398.png" alt="image-20230911144716398"></p>
<p>上传给Terminal，即得到flag：</p>
<p><img src="/post/22e56931/image-20230911144745871.png" alt="image-20230911144745871"></p>
<p>flag：</p>
<p><strong>cnss{funny_ascii_ocr_duibudui}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>misc的知识面涉及很广，很多知识都是边做题边学，很多工具也是边做题边下的，一点一点积累吧。</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>2023-DASCTF-CBCTF-wp-crypto</title>
    <url>/post/87ec16c9.html</url>
    <content><![CDATA[<p>*代表赛中未解出的题目，包含全四道赛题的复现。</p>
<span id="more"></span>
<h3 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来做简单的RSA啦</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">f</span>):</span><br><span class="line">    random_chars = <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">    f = f + random_chars</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_p</span>(<span class="params">p</span>):</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    P = p</span><br><span class="line">    n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> jacobi(<span class="number">2</span>,n1) == <span class="number">1</span>:</span><br><span class="line">            n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">while</span> P:</span><br><span class="line">            pad = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2023</span>)**<span class="number">2</span> </span><br><span class="line">            message = pad &lt;&lt; <span class="number">1</span> + P % <span class="number">2</span></span><br><span class="line">            cipher = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">            f.write(<span class="built_in">str</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            P //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>+ <span class="built_in">str</span>(n1) )    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_q</span>(<span class="params">q</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, n</span>):</span><br><span class="line">        e = random.randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">        noise = random.randint(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        c = <span class="built_in">pow</span>(q+noise,e,n)</span><br><span class="line">        <span class="keyword">return</span> e, noise,c </span><br><span class="line">    </span><br><span class="line">    n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    e1, noise1, c1 = encrypt(q, n2)</span><br><span class="line">    e2, noise2, c2 = encrypt(q, n2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>+ <span class="built_in">str</span>(n2) ) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e1, noise1, c1) =&#x27;</span>, (e1,noise1,c1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e2, noise2, c2) =&#x27;</span>, (e2,noise2,c2))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">guess_p(p)</span><br><span class="line">guess_q(q)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = padding(flag)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line"><span class="string">n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line"><span class="string">(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)</span></span><br><span class="line"><span class="string">(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)</span></span><br><span class="line"><span class="string">c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>本题分为两部分，先要用guess_p求出p、然后用guess_q求出q，之后就可以正常RSA解密得到flag。</p>
<p>其中，q的求解相对容易一点，由guess_q知道：</p>
<script type="math/tex; mode=display">
(q+noise1)^{e1} \equiv c1 \quad(mod\;n2)</script><script type="math/tex; mode=display">
(q+noise2)^{e2} \equiv c2 \quad(mod\;n2)</script><p>将q看作未知数，写作多项式如下：</p>
<script type="math/tex; mode=display">
(x+noise1)^{e1} \equiv c1 \quad(mod\;n2)</script><script type="math/tex; mode=display">
(x+noise2)^{e2} \equiv c2 \quad(mod\;n2)</script><p>那么显然q是两个多项式的公共根，因此两个多项式有公因式(x-q)，求解gcd即可得到(x-q)，进而得到q。</p>
<p>然后就是p的求解。这里用到了雅可比符号，因此需要先了解一下雅可比符号的一些相关概念：</p>
<p><img src="/post/87ec16c9/image-20231023200836792.png" alt="image-20231023200836792"></p>
<p>而其中勒让德符号(a,pi)的作用是判断a是否是模pi下的二次剩余，若勒让德符号值为1则是二次剩余，为-1则是二次非剩余。</p>
<p>而在这个题目中，还需要知道雅可比符号的一个性质：</p>
<ul>
<li>完全积性：</li>
</ul>
<script type="math/tex; mode=display">
(\frac{ab}{p}) = (\frac{a}{p})(\frac{b}{p})</script><p>那么再回头看这个题，首先它保证了：</p>
<script type="math/tex; mode=display">
(\frac{2}{n}) \neq 1</script><p>也就是说值为-1，而由雅可比符号的性质知道：</p>
<script type="math/tex; mode=display">
(\frac{2}{n}) = (\frac{2}{p})(\frac{2}{q}) = -1</script><p>也就是说，2不能同为p、q的二次剩余或二次非剩余，而必须是其中一个的二次剩余，是另一个的二次非剩余。不过本题后续其实没有用到这一点。</p>
<p>再看guess_p中RSA的加密过程(此处要注意优先级，先计算的是加法运算，然后才是移位运算)：</p>
<script type="math/tex; mode=display">
message = pad^2<<(1+ P_{lastbit})</script><script type="math/tex; mode=display">
cipher = message^e \quad(mod\;n1)</script><p>而由雅可比符号的完全积性，我们知道：</p>
<script type="math/tex; mode=display">
(\frac{cipher}{n1}) = (\frac{message}{n1})^e</script><p>而e是一个奇数，因此无论是-1还是1都会维持原值，也就有：</p>
<script type="math/tex; mode=display">
(\frac{cipher}{n1}) = (\frac{message}{n1})^e = (\frac{message}{n1})</script><p>也就是说，我们计算密文的雅可比符号，其实就能得到明文的雅可比符号，这也就是说明RSA语义不安全的其中一点。那么我们有了明文的雅可比符号后，如何得到P的取值呢？</p>
<p>试想，如果P当前位为0，那么就有：</p>
<script type="math/tex; mode=display">
message = pad^2<<1 =2*pad^2</script><script type="math/tex; mode=display">
(\frac{message}{n1}) = (\frac{2*pad^2}{n1}) = (\frac{2}{n1})(\frac{pad^2}{n1}) = -1*(\frac{pad^2}{p1})(\frac{pad^2}{q1})</script><p>显然，pad^2肯定既是p1的二次剩余，也是q1的二次剩余，因此当P的该位为0时，计算出的雅可比符号值为-1</p>
<p>而当P当前位为1时，有如下式：</p>
<script type="math/tex; mode=display">
message = pad^2<<2 =4*pad^2</script><script type="math/tex; mode=display">
(\frac{message}{n1}) = (\frac{4*pad^2}{n1})  = (\frac{4*pad^2}{p1})(\frac{4*pad^2}{q1})=(\frac{4}{p1})(\frac{4}{q1})(\frac{pad^2}{p1})(\frac{pad^2}{q1})</script><p>显然全部都是二次剩余，因此该部分一定是1。所以我们可以把这个作为判断依据来还原P的每一个比特位，还原p、q后就可以解密RSA了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line">n2 = <span class="number">103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line">(e1, noise1, c1) = (<span class="number">1743</span>, <span class="number">44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776</span>, <span class="number">65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983</span>)</span><br><span class="line">(e2, noise2, c2) = (<span class="number">1325</span>, <span class="number">35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683</span>, <span class="number">50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714</span>)</span><br><span class="line">c = <span class="number">124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getq</span></span><br><span class="line">PR.&lt;x&gt;=PolynomialRing(Zmod(n2))</span><br><span class="line">g1 = (x+noise1)^e1-c1</span><br><span class="line">g2 = (x+noise2)^e2-c2</span><br><span class="line">q = <span class="built_in">int</span>(-gcd(g1, g2)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\题\CBCTF 2023\crypto\CB_rsa\enc.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c1 = f.read().split(<span class="string">&quot;n&quot;</span>)</span><br><span class="line">tt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(jacobi(<span class="built_in">int</span>(c1[i]),n1) == -<span class="number">1</span>):</span><br><span class="line">        tt += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tt += <span class="string">&quot;1&quot;</span></span><br><span class="line">p = <span class="built_in">int</span>(tt[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,p*q))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;W05-y03r_m2st1r-j2c0b1_2nd_p01yn0mi2l!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-backpack"><a href="#CB-backpack" class="headerlink" title="CB backpack"></a>CB backpack</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on 8-balanced-backpack</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_e</span>():</span><br><span class="line">    e = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        ee = [<span class="number">0</span>]*<span class="number">3</span>+[<span class="number">1</span>]*<span class="number">3</span></span><br><span class="line">        shuffle(ee)</span><br><span class="line">        e += ee</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">    </span><br><span class="line">e = gen_e()</span><br><span class="line">nbit = <span class="built_in">len</span>(e)</span><br><span class="line">flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> e]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = [randint(<span class="number">1</span>,<span class="number">2</span>^nbit) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit)]</span><br><span class="line"></span><br><span class="line">re = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    re += e[i]*a[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(re)</span><br></pre></td></tr></table></figure>
<p>相较于普通的01背包密码，这一题的背包有一个特别之处，即每六个比特位之和为3。</p>
<p>开始觉得影响好像不大，但是直接上普通背包的LLL会发现规约不出全为0、1的最短向量，因此肯定需要用上这个特别之处来构造格。</p>
<p>先看看普通的背包密码的格是怎么样的：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1}\\
     & 1 &   &   &   &a_{2} \\
     &   &...&   &   & ...\\
     &   &   & 1 &   & a_{47} \\
     &   &   &   & 1 & a_{48} \\
     &   &   &   &   &-c  \\
  \end{matrix}
  \right)</script><p>这是因为，这个格具有如下线性关系：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1}\\
     & 1 &   &   &   &a_{2} \\
     &   &...&   &   & ...\\
     &   &   & 1 &   & a_{47} \\
     &   &   &   & 1 & a_{48} \\
     &   &   &   &   &-c  \\
  \end{matrix}
  \right)
  =
  (b_1,b_1,...b_{47},b_{48},0)</script><p>而由于有每六个的和为3，所以可以尝试扩充八列格，如下：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 &   &   \\
     & 1 &   &   &   &a_{2} & 1 &   &   \\
     &   &...&   &   &...   &   &...&   \\
     &   &   & 1 &   &a_{47}&   &   & 1  \\
     &   &   &   & 1 &a_{48}&   &   & 1 \\
     &   &   &   &   &-c    &-3 &   &-3  \\
  \end{matrix}
  \right)</script><p>右边新增的八列，每一列对应位置有6个1，然后最后一行为-3。这样构造格的依据是下列线性关系：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 &   &   \\
     & 1 &   &   &   &a_{2} & 1 &   &   \\
     &   &...&   &   &...   &   &...&   \\
     &   &   & 1 &   &a_{47}&   &   & 1  \\
     &   &   &   & 1 &a_{48}&   &   & 1 \\
     &   &   &   &   &-c    &-3 &   &-3  \\
  \end{matrix}
  \right)
  = (b_1,b_1,...b_{47},b_{48},0,0,0,0,0,0,0,0,0)</script><p>其中，后九列可以乘上K倍系数来确保规约得到0。但是这样构造格，规约出来的仍然没有满足条件的01向量。然后又改变思路，构造下面的格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 \\
     & 1 &   &   &   &a_{2} & 1 \\
     &   &...&   &   &...   & 1   \\
     &   &   & 1 &   &a_{47}& 1\\
     &   &   &   & 1 &a_{48}& 1   \\
     &   &   &   &   &-c    &-24  \\
  \end{matrix}
  \right)</script><p>其线性关系如下：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 \\
     & 1 &   &   &   &a_{2} & 1 \\
     &   &...&   &   &...   & 1   \\
     &   &   & 1 &   &a_{47}& 1\\
     &   &   &   & 1 &a_{48}& 1   \\
     &   &   &   &   &-c    &-24  \\
  \end{matrix}
  \right)
  =
  (b_1,b_1,...b_{47},b_{48},0,0)</script><p>仍然是将最后两列扩充K倍，保证规约出0，这样用LLL之后可以找到对应01向量。</p>
<p>不过应该依然是运气好，碰上非预期解，因为前一个格出不来，没想通为什么这个格能出来。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line">b = [<span class="number">65651991706497</span>, <span class="number">247831871690373</span>, <span class="number">120247087605020</span>, <span class="number">236854536567393</span>, <span class="number">38795708921144</span>, <span class="number">256334857906663</span>, <span class="number">120089773523233</span>, <span class="number">165349388120302</span>, <span class="number">123968326805899</span>, <span class="number">79638234559694</span>, <span class="number">259559389823590</span>, <span class="number">256776519514651</span>, <span class="number">107733244474073</span>, <span class="number">216508566448440</span>, <span class="number">39327578905012</span>, <span class="number">118682486932022</span>, <span class="number">263357223061004</span>, <span class="number">132872609024098</span>, <span class="number">44605761726563</span>, <span class="number">24908360451602</span>, <span class="number">237906955893793</span>, <span class="number">204469770496199</span>, <span class="number">7055254513808</span>, <span class="number">221802659519968</span>, <span class="number">169686619990988</span>, <span class="number">23128789035141</span>, <span class="number">208847144870760</span>, <span class="number">272339624469135</span>, <span class="number">269511404473473</span>, <span class="number">112830627321371</span>, <span class="number">73203551744776</span>, <span class="number">42843503010671</span>, <span class="number">118193938825623</span>, <span class="number">49625220390324</span>, <span class="number">230439888723036</span>, <span class="number">241486656550572</span>, <span class="number">107149406378865</span>, <span class="number">233503862264755</span>, <span class="number">269502011971514</span>, <span class="number">181805192674559</span>, <span class="number">152612003195556</span>, <span class="number">184127512098087</span>, <span class="number">165959151027513</span>, <span class="number">188723045133473</span>, <span class="number">241615906682300</span>, <span class="number">216101484550038</span>, <span class="number">81190147709444</span>, <span class="number">124498742419309</span>]</span><br><span class="line">c = <span class="number">4051501228761632</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">2</span>] = b[i]*K</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">2</span>] = -c*K</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">1</span>*K</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -<span class="number">24</span>*K</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(L)</span></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    error = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">if</span>(j != <span class="number">1</span> <span class="keyword">and</span> j != <span class="number">0</span>):</span><br><span class="line">            error = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(error == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(error == <span class="number">0</span>):</span><br><span class="line">        e = i[:-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> e]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;22a53e95a21f1000ac5dcc618f67586c412e1072f5bb1fee0ee5ce3d1794e3f3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-curve"><a href="#CB-curve" class="headerlink" title="*CB curve"></a>*CB curve</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on curve</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = <span class="number">1141741939958844590498346884870015122543626602665954681008204697160652371664923</span></span><br><span class="line">        self.a = <span class="number">727131475903635498678013730344448225340496007388151739960305539398192321065043</span></span><br><span class="line">        self.b = <span class="number">840714623434321649308065401328602364673881568379142278640950034404861312007307</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">ecc = CB_curve()</span><br><span class="line">G = (<span class="number">586066762126624229327260483658353973556531595840920560414263113786807168248797</span>, <span class="number">66727759687879628160487324122999265926655929132333860726404158613654375336028</span>)</span><br><span class="line">P = (ecc.mul(bytes_to_long(flag),G)[<span class="number">0</span>],randint(<span class="number">1</span>,ecc.p))</span><br><span class="line">Q = (<span class="number">460843895959181097343292934009653542386784127282375019764638432240505304648101</span>, <span class="number">739422832583403823403837831802136107593509589942947902014204968923412689379907</span>)</span><br><span class="line"></span><br><span class="line">e = randint(<span class="number">1</span>,p)</span><br><span class="line">pl = [ecc.add(P,ecc.mul(<span class="number">10</span>-i,ecc.negG(Q)))[<span class="number">0</span>] + e <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">ph = [ecc.add(P,ecc.mul(<span class="number">10</span>-i,Q))[<span class="number">0</span>] + e <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pl)</span><br><span class="line"><span class="built_in">print</span>(ph)</span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程：</p>
<ul>
<li>定义了一条曲线ecc，并给定其上的点加法与倍乘法</li>
<li>给出两点G、Q</li>
<li>对于G，将flag转为大整数后，求出G的flag倍点并取其横坐标作为P点的横坐标，并另生成一个随机数作为P点的纵坐标</li>
<li>对于Q，生成一个随机数e，然后进行10次如下运算(其中，[0]代表取横坐标，negG是取逆元点)：</li>
</ul>
<script type="math/tex; mode=display">
pl_i = (P + (10-i)*negG(Q))[0] + e</script><script type="math/tex; mode=display">
ph_i = (P + (10-i)*Q)[0] + e</script><p>那么大致思路就是：</p>
<ul>
<li>先通过pl、ph求出点P的坐标</li>
<li>通过曲线映射求解DLP，得到flag</li>
</ul>
<p>接下来进入具体题目分析。</p>
<h4 id="negG"><a href="#negG" class="headerlink" title="negG"></a>negG</h4><p>要求出P点的坐标就要利用pli与phi，但是利用pli之前，首先要知道negG(Q)的具体坐标是多少。由题目中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">    <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br></pre></td></tr></table></figure>
<p>可以看出，negG(Q)操作其实就是在取Q的该曲线上的逆元，但是我们没有order，也没有有效的计算order的方法，因此只能用题目已知信息推算Q逆元的坐标形式。</p>
<p>首先要确认曲线的单位元O，由于普通ECC的单位元是无穷远点，不好计算，所以我们先测试O=(0，0)，看他是不是单位元。测试方法就是看对于曲线上任意一点X，是否有O+X=X。</p>
<p>而我们有该曲线的加法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br></pre></td></tr></table></figure>
<p>把数学表达式写的直观一点(以下均在模p下进行)：</p>
<script type="math/tex; mode=display">
x_3 = \frac{(x_1+x_2)(1+ay_1y_2)}{(1+bx_1x_2)(1-ay_1y_2)}</script><script type="math/tex; mode=display">
y_3 = \frac{(y_1+y_2)(1+bx_1x_2)}{(1-bx_1x_2)(1+ay_1y_2)}</script><p>很显然对曲线上任意一点X，O=(0，0)满足O+X=X，因此(0，0)是该曲线的单位元。这一点也可以用题目给定的add函数测试。</p>
<p>那么有了单位元后，由于negG(Q)是Q的逆元，所以有：</p>
<script type="math/tex; mode=display">
negG(Q) + Q = O</script><p>那么设negG(Q)=(x1,y1)，代入点加法就有：</p>
<script type="math/tex; mode=display">
0 = \frac{(x_1+x_Q)(1+ay_1y_Q)}{(1+bx_1x_Q)(1-ay_1y_Q)}</script><script type="math/tex; mode=display">
0 = \frac{(y_1+y_Q)(1+bx_1x_Q)}{(1-bx_1x_Q)(1+ay_1y_Q)}</script><p>这个时候就可以看出来其实Q和negG(Q)的坐标关系其实就是模p下互为相反数，因此我们就有了negG(Q)的坐标了。可能有的师傅看到这里会觉得这很显然，但其实对于认识一个曲线，这些分析步骤其实并不显然，而且很重要。</p>
<h4 id="groebner求P点坐标"><a href="#groebner求P点坐标" class="headerlink" title="groebner求P点坐标"></a>groebner求P点坐标</h4><p>那么现在有了negG(Q)的坐标，我们就可以着手利用pl和ph了。仍然把他们先写成直观的数学表达式如下：</p>
<script type="math/tex; mode=display">
pl_i = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)} + e</script><script type="math/tex; mode=display">
ph_i = \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)} + e</script><p>其中，(xi,yi)是当次Q的(10-i)倍点的坐标。现在有了十组pli、phi，而这些方程组只有三个未知数xP、yP、e，因此朴素的想法是直接groebner基求出三个未知数就有P点的坐标。但是实际上这样是求不出的，我觉得可能是以下两个原因：</p>
<ul>
<li>yP并不是P点在该曲线上的纵坐标，而是一个随机数，因此直接用曲线加法会产生一些错误</li>
<li>多项式形式过于复杂，直接groebner难以求解</li>
</ul>
<p>赛后看别的师傅wp，才发现只要采用一个小技巧，这两个问题就可以同时解决。这个技巧就是发现平方差公式可以利用在消元中，如下：</p>
<script type="math/tex; mode=display">
pl_i - e = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)}</script><script type="math/tex; mode=display">
ph_i - e = \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)}</script><p>上下两式相乘可以得到：</p>
<script type="math/tex; mode=display">
(pl_i - e)(ph_i - e) = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)} \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)}</script><p>就可以消掉yP，并得到：</p>
<script type="math/tex; mode=display">
(pl_i - e)(ph_i - e) = \frac{xP^2-x_i^2}{1-b^2x_P^2x_i^2}</script><p>而这样用groebner基就可以求出xP和e了，当然求出来的xP有两种取值。</p>
<h4 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h4><p>这也是赛后看别的师傅wp(<a href="https://www.cnblogs.com/ZimaBlue/articles/17780216.html">DASCTF-CBCTF 2023 - ZimaB1ue - 博客园 (cnblogs.com)</a>)才看到的，赛中没找到这是huff曲线(其实赛后自己找也没找到)。而huff曲线可以利用如下映射mapping到普通椭圆曲线上(也就是常见的Weiestrass Curve)：</p>
<p><img src="/post/87ec16c9/image-20231023200412149.png" alt="image-20231023200412149"></p>
<p>那么就先用huff曲线方程求出P点坐标，然后将P点映射到对应椭圆曲线上。</p>
<p>然后由于映射是一一对应，因此曲线阶不会变，所以我们可以直接用order函数求出映射后的曲线阶，发现其除了一个因子外都光滑，因此之后就是pohlig_Hellman求一个DLP就能得到flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = <span class="number">1141741939958844590498346884870015122543626602665954681008204697160652371664923</span></span><br><span class="line">        self.a = <span class="number">727131475903635498678013730344448225340496007388151739960305539398192321065043</span></span><br><span class="line">        self.b = <span class="number">840714623434321649308065401328602364673881568379142278640950034404861312007307</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">ecc = CB_curve()</span><br><span class="line">G = (<span class="number">586066762126624229327260483658353973556531595840920560414263113786807168248797</span>, <span class="number">66727759687879628160487324122999265926655929132333860726404158613654375336028</span>)</span><br><span class="line">Q = (<span class="number">460843895959181097343292934009653542386784127282375019764638432240505304648101</span>, <span class="number">739422832583403823403837831802136107593509589942947902014204968923412689379907</span>)</span><br><span class="line">pl = [<span class="number">908996880816674413953945844149350915331956247471480600840221415119794882139724</span>, <span class="number">971918808384910355828135603762747020183688585728289421786279444571287619529246</span>, <span class="number">1285550352531583269956802123237391199017403081800977678246201935580429758051904</span>, <span class="number">1551774945769448705387900437472951015954157193946719575845523359198154668857591</span>, <span class="number">676185408751480221545400062950292727848016906516506232986883519673765317932582</span>, <span class="number">1250300209784131850574858927023046353058343552115735540789593580037130054384362</span>, <span class="number">1298409778422699298367007023890818793557023853717180295526932023194697263501748</span>, <span class="number">1332552452292482549702793642987623159617988974910321945878093492007278710993114</span>, <span class="number">1030239404875082841481045525469865919289388171602293245905162820968158543176773</span>, <span class="number">1154148024180033719999293176590867264297899817449945744942661351655533433871621</span>]</span><br><span class="line">ph = [<span class="number">584297112520340495757457954416165393828472756298945167299482077258411155766756</span>, <span class="number">886432149227960827335266910774569034430464592640209168563805700117347063152246</span>, <span class="number">613528590036968449893421430816319461615130635882647544978722093413694101540550</span>, <span class="number">576162106332135829961234799085370038425761945928004579456101802617485243023987</span>, <span class="number">627570890346195626159365118862437334953500165050236216404858019114288681512171</span>, <span class="number">1015503424232985454098149884321288932492551183126601131968495641510550575005042</span>, <span class="number">1532737675157046782602115678180407262847166210963507805526455422934164759886583</span>, <span class="number">1540047002602145805476906585925538790245968214992837106009502002588479779602195</span>, <span class="number">505097517314409449404205152068185149808364887623922221197462411159844816865696</span>, <span class="number">873498218680784138428154510303205366133389839886911286745954821800632158315951</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#get coordinate_P</span></span><br><span class="line">PR.&lt;xp,e&gt; = PolynomialRing(Zmod(ecc.p))</span><br><span class="line">F = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    f = (pl[i]-e)*(ph[i]-e)*(<span class="number">1</span>-ecc.b^<span class="number">2</span>*xp^<span class="number">2</span>*(ecc.mul(<span class="number">10</span>-i,Q)[<span class="number">0</span>]^<span class="number">2</span>)) - (xp^<span class="number">2</span>-(ecc.mul(<span class="number">10</span>-i,Q)[<span class="number">0</span>]^<span class="number">2</span>))</span><br><span class="line">    F.append(f)</span><br><span class="line">res = Ideal(F).groebner_basis()</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"><span class="comment">#[xp^2 + 219493165434454878473973957507132663767650700404392831423708684433961924200902, e + 716700711017198421972376297958894204723153539777056104579499803899129208364755]</span></span><br><span class="line"></span><br><span class="line">xp_2 = -<span class="number">219493165434454878473973957507132663767650700404392831423708684433961924200902</span></span><br><span class="line">F = Zmod(ecc.p)</span><br><span class="line">xp_2 = F(xp_2)</span><br><span class="line">xp = xp_2.nth_root(<span class="number">2</span>,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">points = []</span><br><span class="line">PR.&lt;yp&gt; = PolynomialRing(Zmod(ecc.p))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xp:</span><br><span class="line">    f = x*(ecc.a*yp^<span class="number">2</span>-<span class="number">1</span>) - yp*(ecc.b*x^<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line">    res = f.roots()</span><br><span class="line">    points.append((<span class="built_in">int</span>(x),<span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>])))</span><br><span class="line">    points.append((<span class="built_in">int</span>(x),<span class="built_in">int</span>(res[<span class="number">1</span>][<span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mapping and pohlig_hellman</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">point</span>):</span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    Ex = (ecc.b*x-ecc.a*y) * inverse(y-x,ecc.p) % ecc.p</span><br><span class="line">    Ey = (ecc.b-ecc.a) * inverse(y-x,ecc.p) % ecc.p</span><br><span class="line">    <span class="keyword">return</span> (Ex,Ey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pohlig_hellman</span>(<span class="params">q,g,primes,order</span>):</span><br><span class="line">    logs=[]</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t=<span class="built_in">int</span>(order)//<span class="built_in">int</span>(fac)</span><br><span class="line">        log=discrete_log(t*q,t*g,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        logs+=[log]</span><br><span class="line">    m = crt(logs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DLP</span></span><br><span class="line">E = EllipticCurve(GF(ecc.p),[<span class="number">0</span>,ecc.a+ecc.b,<span class="number">0</span>,ecc.a*ecc.b,<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line">order = <span class="number">1141741939958844590498346884870015122544171009688372185479632675211885925945760</span></span><br><span class="line">order_factors = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">37</span>,<span class="number">271</span>,<span class="number">4297</span>,<span class="number">6983</span>,<span class="number">9679</span>,<span class="number">52631</span>,<span class="number">139571</span>,<span class="number">84666937</span>,<span class="number">558977989</span>]</span><br><span class="line">EG = E(mapping(G))</span><br><span class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        EP = E(mapping(point))</span><br><span class="line">        m = pohlig_hellman(EP,EG,order_factors,order)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;goodathuff&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-cipher"><a href="#CB-cipher" class="headerlink" title="*CB cipher"></a>*CB cipher</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on cipher</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> pylfsr <span class="keyword">import</span> LFSR</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> state1,state2,state3,flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> flag</span><br><span class="line"></span><br><span class="line">fpoly1 = [<span class="number">14</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">fpoly2 = [<span class="number">20</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">fpoly3 = [<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iv</span>():</span><br><span class="line">    a,b,c = L1.<span class="built_in">next</span>(),L2.<span class="built_in">next</span>(),L3.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">return</span> (a &amp; b) ^ (b &amp; c) ^ c</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_cipher</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        key = [<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(randint(<span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">        self.key = [[<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">        </span><br><span class="line">        self.sbox = [<span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>,</span><br><span class="line">                     <span class="number">0x0</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">                     <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0xd</span>,</span><br><span class="line">                     <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0xb</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,pltxt</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            ct = key_add(ct,self.key[i%<span class="number">2</span>])</span><br><span class="line">            ct = self.s_trans(ct)</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">                ct = bit_move(ct)</span><br><span class="line">        </span><br><span class="line">        ct = key_add(ct,self.key[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bt_to_bin</span>(<span class="params">self,msg</span>):</span><br><span class="line">        msg = msg <span class="keyword">if</span> (<span class="built_in">len</span>(msg)+<span class="number">1</span>)%<span class="number">2</span> <span class="keyword">else</span> msg+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:].rjust(<span class="number">8</span>*<span class="built_in">len</span>(msg),<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">txt_encrypt</span>(<span class="params">self,msg</span>):</span><br><span class="line">        time = (<span class="built_in">len</span>(msg)+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        pltxt = [self.bt_to_bin(msg)[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time)]</span><br><span class="line">        <span class="comment">#print(pltxt)</span></span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">            now_re = self.encrypt(pltxt[i])</span><br><span class="line">            <span class="keyword">if</span> output != []:</span><br><span class="line">                now_re = <span class="built_in">bin</span>(<span class="built_in">int</span>(now_re,<span class="number">2</span>) ^ <span class="built_in">int</span>(output[-<span class="number">1</span>],<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            output.append(now_re)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(output),<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">L1 = LFSR(fpoly = fpoly1, initstate = state1)</span><br><span class="line">L2 = LFSR(fpoly = fpoly2, initstate = state2)</span><br><span class="line">L3 = LFSR(fpoly = fpoly3, initstate = state3)</span><br><span class="line"></span><br><span class="line">iv_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>(iv())</span><br><span class="line">    </span><br><span class="line">a = CB_cipher()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iv_txt[:<span class="number">320</span>])</span><br><span class="line"><span class="built_in">print</span>(a.txt_encrypt(<span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(bytes_to_long(a.txt_encrypt(flag))^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101</span></span><br><span class="line"><span class="comment">#b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line"><span class="comment">#b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br></pre></td></tr></table></figure>
<p>分析一下题目流程：</p>
<ul>
<li>题目给出了三个LFSR，并结合三个LFSR的每一比特输出生成了iv_txt，并给出了iv_txt的前320位</li>
<li>题目自定义了一个CB_cipher类，并生成一个对象a，对一段已知明文进行了加密，并给出密文</li>
<li>将flag也用对象a加密后，与完整的iv_txt异或，并给出密文</li>
</ul>
<h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><p>首先，三个LFSR这部分有点类似于前段时间柏鹭杯的Stream。</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/812dabe5.html#more">2023-网信柏鹭杯-wp-crypto | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>只是这道题里采用了pylfsr实现，把特征多项式换成等价的移位操作就仍然可以用z3解出三个state，从而还原出完整iv_txt，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_init_state</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">13</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">19</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">14</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        sol.add(((lfsr1(R1) &amp; lfsr2(R2))^(lfsr2(R2) &amp; lfsr3(R3))^lfsr3(R3)) == <span class="built_in">int</span>(c[i]))</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>得到三个初始state：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[R2 = <span class="number">68217</span>, R3 = <span class="number">3230</span>, R1 = <span class="number">6464</span>]</span><br></pre></td></tr></table></figure>
<p>可以验证该种子产生的iv_txt前320位与给定的相等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part2 check_init_state</span></span><br><span class="line">R2 = <span class="number">68217</span>;R3 = <span class="number">3230</span>;R1 = <span class="number">6464</span></span><br><span class="line">iv_txt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">98</span>*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>((lfsr1(R1)&amp;lfsr2(R2)) ^ (lfsr2(R2)&amp;lfsr3(R3)) ^ lfsr3(R3))</span><br><span class="line">    R1 = (R1 &lt;&lt; <span class="number">1</span>) ^ lfsr1(R1)</span><br><span class="line">    R2 = (R2 &lt;&lt; <span class="number">1</span>) ^ lfsr2(R2)</span><br><span class="line">    R3 = (R3 &lt;&lt; <span class="number">1</span>) ^ lfsr3(R3)</span><br><span class="line"><span class="built_in">print</span>(iv_txt[:<span class="number">320</span>] == c)</span><br></pre></td></tr></table></figure>
<p>然后我们就可以去除iv_txt对flag的密文异或的影响。</p>
<p>接下来的问题就是：如何由一组已知的明密文对，解密flag对应的密文？这就需要分析加密的具体过程了。不过大致浏览一下可以发现几个比较重要的性质：</p>
<ul>
<li>把明文每两个字节分为一组，对于相同的两个字节，encrypt的结果是一样的</li>
<li>txt_encrypt其实只是对每个明文分组encrypt的结果做了一个类似CBC的操作，也就是当前组的最终密文，由该组encrypt的加密结果与前一组的最终密文异或得到</li>
</ul>
<p>可以发现，性质二其实提供了一个逆操作，我们只需要知道前一组的最终密文，与当前分组的最终密文异或，就能得到当前分组的encrypt结果。比如对于题目中给定的已知的一组明文c1，可以用以下操作恢复其encrypt结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="string">b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line">plain = <span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span></span><br><span class="line"></span><br><span class="line">final_c1 = <span class="string">b&quot;\x10\x07&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c1),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c1[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c1[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c1 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_c1)</span><br></pre></td></tr></table></figure>
<p>得到的结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x10\x07d&gt;\xfc\xac\x03\xb39\xa9\xc2h\xbe\xbb\xa5&#x27;\xd0\x9e\x1c]5\x06C\xb4U$e\xceJ\xe8&lt;\x9a\x8d/\xc5=\x8d&gt;\xb0:\x03\xb3\xf5\xbd\x13\x89\x80*5\x8f\xe5\x9c\x8d&gt;\x83\xa1\x93\xb3\xa5&#x27;\xfc\xac\x03\xb3]&#125;\x1b\x98\x9d?\x93\xb3&quot;</span></span><br></pre></td></tr></table></figure>
<p>得到了原始的encrypt的结果，其用处是什么呢？这个时候就需要用到刚才提到的性质一：把明文每两个字节分为一组，对于相同的两个字节，encrypt的结果是一样的。</p>
<p>而由于两次加密用的是同一个对象a，因此密钥key不变，所以同样的两字节密文肯定会得到同样的两字节密文。而我们现在相当于有了36组2字节的明密文对应关系，也许可以根据这些关系恢复一部分flag串，然后用猜单词之类的方式猜测flag的完整串？</p>
<p>那么如法炮制，先把c2的CBC加密去掉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c2 = <span class="string">b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br><span class="line">c2 = long_to_bytes(bytes_to_long(c2)^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>))</span><br><span class="line">final_c2 = <span class="string">b&quot;F\x8c&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c2),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c2[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c2[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c2 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(final_c2)</span><br></pre></td></tr></table></figure>
<p>得到的结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;F\x8cu\t\x82\x98\xec\x02\xc5\xf6\x9at\xdf\xdb\xf9\x01k\x8f\xf8\xbc\xd7\xf9$\xf5\xc1YZg\x99s\xcf\x82\x0f\xe52=\xbe\xf9\x9b\x89+\xdf\x8dYr\xac\x06\xf3W\x8e\x81\x82\x00L\xf0%\xd7*Ea\xb6=\xd4(\x1f\x17Gck2\xde\xc1r8\xcdSY\x8a\xd63\xfa\x1a&#123;yNO\xe5\xe7%\x98\xc7\x84\xff\x9cr\r\xf3!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>然后由于题目保证了”DASCTF”在flag串中，然后由已知明密文对可以分析出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;TF&quot;</span> --&gt; <span class="string">&quot;\x1c]&quot;</span></span><br></pre></td></tr></table></figure>
<p>但是很可惜在密文串中没有发现这组加密结果，这说明”DASCTF”应该是按如下分组加密的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;xD&quot;</span>,<span class="string">&quot;AS&quot;</span>,<span class="string">&quot;CT&quot;</span>,<span class="string">&quot;Fx&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后就期望可以找到别的已有的密文对，结果<strong>一组都没有找到</strong>，尝试彻底失败！</p>
<p>那么通过这种方式肯定是不行的，还是要结合提示”中间相遇”去分析具体加密流程才能找出密钥，从而进行解密。</p>
<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><p>在研究了wp以及与出题师傅交流后，基本理清了这道题的思路，接下来我会尝试把wp的思路阐述的更清楚一点。</p>
<h5 id="iv"><a href="#iv" class="headerlink" title="iv"></a>iv</h5><p>首先就是纠正一下尝试中对于iv求解的一点小错误。这里的错误主要是由于题目iv的生成方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iv_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>(iv())</span><br></pre></td></tr></table></figure>
<p>可以看到，他生成了flag长度乘8个比特，也就是flag长度个字节。而由于题目中给定的flag最终密文是98字节，所以很容易就会像我一样直接认为iv也是98个字节的长度。但其实并不一定，因为flag在txt_encrypt中可能会进行填充，因此flag的初始长度<strong>既可能是98字节，也可能是97字节！</strong></p>
<p>而在上面我的尝试中，我生成了98字节的iv并消除类似CBC的影响后，竟然一组明文都找不到(包括”TF”这种很大概率存在的明文对)，因此很可能iv其实是97个字节。我们生成97字节的iv后重新求解，就可以重新得到c2的两两一组的纯encrypt加密结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;F\x8cJ\xe8&lt;\x9a\xfa\xe3\xff\xcf\xc5\x1f-\x06L_\x8d/\x93\x13L_Oo\x87?,\x9b\x8d/&lt;\x9a\x84\x9b\xd2x9\t8\xb8W\xc9W\xc9W\xc9\xe3\xe4\x1b\x98\x03\xb3\xb5\x1b\xa0*\xd2x\xb9\x92P%\xa0.\x1c]]\xc5\x0c\x88\x97\xc5T\xbf\xc5\x7f\xa7\x16L\xaem\xed\xa2*\x92\x18&amp;89\xa9o\xc0\x82\xabu6\x7f\x0c&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个时候可以发现里面就存在包括”\x1c]”在内的一些密文对了，并且拓展一下也可以知道诸如”DA”、”SC”之类明文对应的密文，不过这已经不重要了，因为还有非常多对密文对没有出现在已知明密文对中，所以这个方法无法完全求解。</p>
<p>不过至少这说明iv长度为97应该才是正解。</p>
<h5 id="中间相遇"><a href="#中间相遇" class="headerlink" title="中间相遇"></a>中间相遇</h5><p>然后接下来是对中间相遇步骤的分析，这才是本题的重头戏。</p>
<p>首先由之前的分析我们可以知道，我们完全可以把每两个字节都当作独立的明文进行处理。因此现在我们只需要关注encrypt函数的加密流程了。而encrypt函数一共加密五轮，再贴一下其加密流程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,pltxt</span>):</span><br><span class="line">    key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">    bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">    </span><br><span class="line">    ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        ct = key_add(ct,self.key[i%<span class="number">2</span>])</span><br><span class="line">        ct = self.s_trans(ct)</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">            ct = bit_move(ct)</span><br><span class="line">    </span><br><span class="line">    ct = key_add(ct,self.key[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br></pre></td></tr></table></figure>
<p>其中，s_trans函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">    pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">    pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">    ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">    <span class="keyword">return</span> ct</span><br></pre></td></tr></table></figure>
<p>它实现的功能是：把输入的长度为16的01列表，转化为4个十六进制数，并使用sbox对这4个十六进制数分别进行代换，代换完毕后，将其重新转为长度为16的01列表并返回。</p>
<p>然后还有一个bit_move函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br></pre></td></tr></table></figure>
<p>它实现的功能是一个比特置换，我们打印一下其置换结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"><span class="built_in">print</span>([(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure>
<p>这也就是说，进行bit_move操作后，位置为0的比特换到位置0，位置为4的比特换到位置1，位置为8的比特换到位置2，以此类推。其实这两个函数也就是一个代换置换网络每一轮的代换与置换操作。</p>
<p>那么我们可以发现encrypt函数几个不安全的地方：</p>
<ul>
<li>加密轮数只有5轮，轮数比较少</li>
<li>只有1、3、5轮进行了bit_move，2、4轮没有进行</li>
<li>bit_move函数中，有4个比特位并没有进行置换，分别是：0，5，10，15</li>
</ul>
<p>那么接下来我们尝试进行中间相遇攻击，那么首先假设我们通过爆破操作，可以拥有正确的密钥K[0]的全16个比特以及密钥K[1]的前4个比特，然后对已知的明文加密三轮。我们把已知的两字节明文分成每4bit一组，这样符合每一轮的代换置换过程，然后对前三轮依次进行分析：</p>
<ul>
<li><p>第一轮：由于我们拥有完全正确的K[0]，因此我们可以获得完全正确的第一轮加密结果。</p>
</li>
<li><p>第二轮：由于我们只拥有K[1]的前四个比特，而第二轮只进行了S盒代换没有进行bit_move，因此我们能获得完全正确的第二轮加密得到的前4bit</p>
</li>
<li>第三轮：仍然由于拥有K[0]的全16个bit，因此自然拥有完全正确的K[0]前4bit，所以在第三轮bit_move之前，得到的前4bit加密结果仍然是完全正确的。然后就需要进行bit_move，而正如刚才分析得到的一样，由于bit_move中第0比特位并没有进行置换，所以三轮加密完全结束后，我们可以得到完全正确的第0比特。</li>
</ul>
<p>也就是说，我们爆破密钥K[0]的全16个比特以及密钥K[1]的前4个比特，其中正确的那一组就可以得到36组已知明文的三轮加密的第0比特，所以我们可以依据此建立中间相遇攻击的字典。</p>
<p>同理，对于解密操作，我们爆破正确的密钥K[1]的全16个比特以及密钥K[0]的前4个比特，就可以得到完全正确的三轮解密得到的前四个bit，但是我们只需要第0比特来进行中间相遇攻击。</p>
<p>而这个步骤还可以简化，就是wp说的那样分为内层和外层，外层爆破两个密钥的前4bit，内层使用两个密钥的后12bit去中间相遇。这样就可以每次建立一个较小字典进行中间相遇攻击，而不需要先花较长时间把完整的很大的加密字典完全建立好，然后再通过解密操作反查字典进行中间相遇。</p>
<p>现在我们有已知的36组明密文，那么如果中间相遇攻击发现了一组密钥对36个碰撞比特都满足，那么就很大概率是正确的密钥了。有了正确密钥后写个解密逆操作就可以得到flag。</p>
<p>exp(偷了点懒，完整的CB_cipher类就直接用wp的了)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_init_state</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">13</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">19</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">14</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        sol.add(((lfsr1(R1) &amp; lfsr2(R2))^(lfsr2(R2) &amp; lfsr3(R3))^lfsr3(R3)) == <span class="built_in">int</span>(c[i]))</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"><span class="comment">#z3_sol()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 check_init_state</span></span><br><span class="line">R2 = <span class="number">68217</span>;R3 = <span class="number">3230</span>;R1 = <span class="number">6464</span></span><br><span class="line">iv_txt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>((lfsr1(R1)&amp;lfsr2(R2)) ^ (lfsr2(R2)&amp;lfsr3(R3)) ^ lfsr3(R3))</span><br><span class="line">    R1 = (R1 &lt;&lt; <span class="number">1</span>) ^ lfsr1(R1)</span><br><span class="line">    R2 = (R2 &lt;&lt; <span class="number">1</span>) ^ lfsr2(R2)</span><br><span class="line">    R3 = (R3 &lt;&lt; <span class="number">1</span>) ^ lfsr3(R3)</span><br><span class="line"><span class="comment">#print(iv_txt[:320] == c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 get_cipher</span></span><br><span class="line">c1 = <span class="string">b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line">plain = <span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span></span><br><span class="line">final_c1 = <span class="string">b&quot;\x10\x07&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c1),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c1[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c1[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c1 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c2 = <span class="string">b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br><span class="line">c2 = long_to_bytes(bytes_to_long(c2)^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>))</span><br><span class="line">final_c2 = <span class="string">b&quot;F\x8c&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c2),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c2[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c2[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c2 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part4 Meet-in-the-Middle attack</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_cipher</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):      </span><br><span class="line">        self.sbox = [<span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>,</span><br><span class="line">                     <span class="number">0x0</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">                     <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0xd</span>,</span><br><span class="line">                     <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0xb</span>]</span><br><span class="line">        self.inv_sbox = [<span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, </span><br><span class="line">                         <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, </span><br><span class="line">                         <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, </span><br><span class="line">                         <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0x9</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inv_s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.inv_sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">e1</span>(<span class="params">self,pltxt,k0,k1_4</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        ct = key_add(ct,k0)</span><br><span class="line">        ct = self.s_trans(ct)</span><br><span class="line">        ct = bit_move(ct)</span><br><span class="line">        ct = key_add(ct[:<span class="number">4</span>],k1_4)</span><br><span class="line">        ct = self.sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = key_add([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(ct)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)],k0[:<span class="number">4</span>])</span><br><span class="line">        ct = self.sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = ct&gt;&gt;<span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">d1</span>(<span class="params">self,pltxt,k1,k0_4</span>):</span><br><span class="line">        <span class="comment">#print(self)</span></span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        ct = key_add(ct,k1)</span><br><span class="line">        ct = bit_move(ct)</span><br><span class="line">        ct = self.inv_s_trans(ct)</span><br><span class="line">        ct = key_add(ct[:<span class="number">4</span>],k0_4)</span><br><span class="line">        ct = self.inv_sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = key_add([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(ct)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)],k1[:<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">return</span> ct[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bt_to_bin</span>(<span class="params">self,msg</span>):</span><br><span class="line">        msg = msg <span class="keyword">if</span> (<span class="built_in">len</span>(msg)+<span class="number">1</span>)%<span class="number">2</span> <span class="keyword">else</span> msg+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:].rjust(<span class="number">8</span>*<span class="built_in">len</span>(msg),<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,pltxt,key</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        <span class="comment">#print(ct,key)</span></span><br><span class="line">        ct = key_add(ct,key[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">                ct = bit_move(ct)</span><br><span class="line">            ct = self.inv_s_trans(ct)</span><br><span class="line">            ct = key_add(ct,key[i%<span class="number">2</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">txt_decrypt</span>(<span class="params">self,msg,key</span>):</span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">            now_re = self.decrypt(msg[i],key)</span><br><span class="line">            output.append(now_re)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(output),<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = [<span class="built_in">bin</span>(bytes_to_long(plain[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">c1 = [<span class="built_in">bin</span>(bytes_to_long(final_c1[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">c2 = [<span class="built_in">bin</span>(bytes_to_long(final_c2[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line">a = CB_cipher()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    dic_encbit = &#123;&#125;</span><br><span class="line">    k0_4 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(i&amp;<span class="number">0xffff0000</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    k1_4 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(i&amp;<span class="number">0x0000ffff</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">        k0_12 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(j)[<span class="number">2</span>:].rjust(<span class="number">12</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        k0 = k0_4+k0_12</span><br><span class="line">        enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">            enc += <span class="built_in">str</span>(a.e1(m1[i],k0,k1_4))</span><br><span class="line">        enc = <span class="built_in">int</span>(enc,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(enc <span class="keyword">in</span> dic_encbit.keys()):</span><br><span class="line">            dic_encbit[enc].append(k0)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dic_encbit[enc] = [k0]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">        k1_12 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(j)[<span class="number">2</span>:].rjust(<span class="number">12</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        k1 = k1_4+k1_12</span><br><span class="line">        dec = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">            dec += <span class="built_in">str</span>(a.d1(c1[i],k1,k0_4))</span><br><span class="line">        dec = <span class="built_in">int</span>(dec,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(dec <span class="keyword">in</span> dic_encbit.keys()):</span><br><span class="line">            <span class="keyword">for</span> k0 <span class="keyword">in</span> dic_encbit[dec]:</span><br><span class="line">                message = a.txt_decrypt(c2,[k0,k1])</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> message):</span><br><span class="line">                    <span class="built_in">print</span>(message)</span><br><span class="line">                    exit()</span><br></pre></td></tr></table></figure>
<p>解得：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;n\xa3 you break the cipher!!how could it be??????? the flag is:DASCTF&#123;God_on_syM@etric_cRypto9raPhy&#125;\x00&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其实前两个字节还有点小错误，正确flag中是”oh”，不过这个小bug暂时就不d了。</p>
<p>这样利用中间相遇攻击，复杂度就由爆破完整密钥的2^32降低到了2*2^20，因此最多约半小时就能爆破出结果。而且运气比较好，其实一分多钟就有正确结果。</p>
<h5 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h5><p>在复现完成后，出题师傅对我的一些说法进行了更细致的补充。就比如，其实再回头看我们刚才讲的encrypt函数不安全的第三点：</p>
<ul>
<li>bit_move函数中，有4个比特位并没有进行置换，分别是：0，5，10，15</li>
</ul>
<p>其实这一点对安全性影响并不大，因为即使进行了置换，依然是可以中间相遇攻击的，步骤并没有什么大变化。这是因为，第三轮如何置换并不重要，我们需要的其实只是<strong>加密三轮和解密三轮后得到的位置相同的碰撞比特</strong>。这也就是说，我们其实也不一定非要在外层爆破K[0]，K[1]的前四比特，其实任选两组，只要能得到满足要求的碰撞比特，都是可以建立字典的。</p>
<p>通过这题收获到了很多，也非常感谢出题师傅对我思路上的帮助。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-MoeCTF-wp-crypto</title>
    <url>/post/aa501114.html</url>
    <content><![CDATA[<p>记录Crypto学习之路</p>
<span id="more"></span>
<h2 id="Classical-Crypto"><a href="#Classical-Crypto" class="headerlink" title="Classical Crypto"></a>Classical Crypto</h2><h3 id="ezrot"><a href="#ezrot" class="headerlink" title="ezrot"></a>ezrot</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ezrot</span><br></pre></td></tr></table></figure>
<p>Hint:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you have no idea what kind of classical cipher this is, go to Classical Cipher entry of wikipedia for a hint</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@64E7LC@Ecf0:D0;FDE020D:&gt;!=60=6EE6C0DF3DE:EFE:@?04:!96C0tsAJdEA6d;F&#125;%0N</span><br></pre></td></tr></table></figure>
<p>rot47解密。(不知道为啥缺了个m，补上就好)</p>
<p><img src="/post/aa501114/image-20230917145802110.png" alt="image-20230917145802110"></p>
<p>flag：</p>
<p><strong>moectf{rot47_is_just_a_simPle_letter_substitution_ciPher_EDpy5tpe5juNT_}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="可可的新围墙"><a href="#可可的新围墙" class="headerlink" title="可可的新围墙"></a>可可的新围墙</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可可的新围墙</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mt3_hsTal3yGnM_p3jocfFn3cp3_hFs3c_3TrB__i3_uBro_lcsOp&#125;e&#123;ciri_hT_avn3Fa_j</span><br></pre></td></tr></table></figure>
<p>栅栏密码，手动调整一下栏数。</p>
<p><img src="/post/aa501114/image-20230917150048133.png" alt="image-20230917150048133"></p>
<p>flag：</p>
<p><strong>moectf{F3nc3_ciph3r_shiFTs_3ach_l3TT3r_By_a_Giv3n_nuMB3r_oF_plac3s_Ojpj}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="皇帝的新密码"><a href="#皇帝的新密码" class="headerlink" title="皇帝的新密码"></a>皇帝的新密码</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">皇帝的新密码</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tvljam&#123;JhLzhL_JPwoLy_Pz_h_cLyF_zPtwPL_JPwoLy!_ZmUVUA40q5KbEQZAK5Ehag4Av&#125;</span><br></pre></td></tr></table></figure>
<p>题目名字在暗指凯撒皇帝，但是其实是个移位为7的移位密码。</p>
<p><img src="/post/aa501114/image-20230917150328337.png" alt="image-20230917150328337"></p>
<p>flag：</p>
<p><strong>moectf{CaEsaE_CIphEr_Is_a_vErY_sImpIE_CIphEr!_SfNONT40j5DuXJSTD5Xatz4To}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="不是“皇帝的新密码”"><a href="#不是“皇帝的新密码”" class="headerlink" title="不是“皇帝的新密码”"></a>不是“皇帝的新密码”</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不是“皇帝的新密码”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scsfct&#123;wOuSQNfF_IWdkNf_Jy_o_zLchmK_voumSs_zvoQ_loFyof_FRdiKf_4i4x4NLgDn&#125;</span><br><span class="line"></span><br><span class="line">md5 of flag (utf-8) `ea23f80270bdd96b5fcd213cae68eea5`</span><br></pre></td></tr></table></figure>
<p>题目描述看上去像是在指变异凯撒，不过因为懒，直接先上了维吉尼亚尝试：</p>
<p><img src="/post/aa501114/image-20230917150659188.png" alt="image-20230917150659188"></p>
<p>可以看出已经出了密钥的前缀<code>goodjo</code>，可以猜想密钥应该是<code>goodjob</code>，进行解密：</p>
<p><img src="/post/aa501114/image-20230917150945439.png" alt="image-20230917150945439"></p>
<p>flag：</p>
<p><strong>moectf{vIgENErE_CIphEr_Is_a_lIttlE_hardEr_thaN_caEsar_CIphEr_4u4u4EXfXz}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="猫言喵语"><a href="#猫言喵语" class="headerlink" title="猫言喵语"></a>猫言喵语</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">狗曰：”喵喵喵喵喵？？“</span><br><span class="line">请解出后请转换为全大写，单词间以下划线分隔，套上moectf&#123;&#125;后提交</span><br></pre></td></tr></table></figure>
<p>Hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Morse Code</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">喵喵？ 喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵？喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵 喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵？喵喵喵 喵喵？喵喵？喵喵？ 喵喵喵喵喵喵喵喵？ 喵喵？喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵？喵喵喵喵喵？喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵 喵喵？喵喵喵喵喵喵喵喵？</span><br></pre></td></tr></table></figure>
<p>题目提示摩斯电码，因此多次尝试后，可以发现：</p>
<ul>
<li>“喵喵喵” 换成 “.”</li>
<li>“喵喵？” 换成 “-“</li>
</ul>
<p>再用摩斯电码解密，就能得到flag。</p>
<p>flag：</p>
<p><strong>moectf{THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX}</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto-入门指北"><a href="#Crypto-入门指北" class="headerlink" title="Crypto 入门指北"></a>Crypto 入门指北</h3><p>略</p>
<h3 id="baby-e"><a href="#baby-e" class="headerlink" title="baby_e"></a>baby_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~小小的也很可爱~~</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c =  147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line"><span class="comment"># n =  553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br></pre></td></tr></table></figure>
<p>可以看出p、q都很大，n更是达到了4096bit，因此m的比特只要小于<code>4096//7</code>，就能将密文直接开根得到明文。事实也是如此。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">c =  <span class="number">147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line">n =  <span class="number">553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br><span class="line"></span><br><span class="line">m = iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{SMaLL_3xPon3nt_Mak3_rSa_w3ak!_!lP0iYlJf!M3rux9G9Vf!JoxiMl903lllA}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="bad-E"><a href="#bad-E" class="headerlink" title="bad_E"></a>bad_E</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这个e怎么解密不了啊，怎么会事呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment"># 6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line"><span class="built_in">print</span>(q) <span class="comment"># 11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br></pre></td></tr></table></figure>
<p>题目直接给了p、q，所以可以直接RSA解密，但是尝试后报错，因为e是p-1的因子，所以e在phi_n下的逆元不存在。</p>
<p>通常这时候会有两种思路：AMM和转化到模q上求解。考虑到这只是第三题，并且65537用于AMM有点过大了，因此应该是模q下求解。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = <span class="number">11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line">c = <span class="number">63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,q-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{N0w_Y0U_hAve_kN0w_h0w_rsA_w0rks!_f!lP0iYlJf!M3ru}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="factor-signin"><a href="#factor-signin" class="headerlink" title="factor_signin"></a>factor_signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">坏了，p q被狗子吃了</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(flag[:<span class="number">36</span>],<span class="string">&quot;big&quot;</span>)</span><br><span class="line">m2 = <span class="built_in">int</span>.from_bytes(flag[<span class="number">36</span>:],<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">n1 = p*q</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1,e,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 = &quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>,n1)</span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">64</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">n2 = prod(primes)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2,e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 = &quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>,n2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 =  10004937130983861141937782436252502991050957330184611684406783226971057978666503675149401388381995491152372622456604317681236160071166819028679754762162125904637599991943368450200313304999566592294442696755822585022667008378021280392976010576970877334159755332946926433635584313137140987588847077645814987268595739733550220882135750267567373532603503399428451548677091911410732474324157868011686641243202218731844256789044721309478991918322850448456919991540932206923861653518190974620161055008847475600980152660468279765607319838003177639654115075183493029803981527882155542925959658123816315099271123470754815045214896642428657264709805029840253303446203030294879166242867850331945166255924821406218090304893024711068773287842075208409312312188560675094244318565148284432361706108491327014254387317744284876018328591380705408407853404828189643214087638328376675071962141118973835178054884474523241911240926274907256651801384433652425740230755811160476356172444327762497910600719286629420662696949923799255603628210458906831175806791599965316549386396788014703044837917283461862338269599464440202019922379625071512100821922879623930069349084917919100015782270736808388388006084027673781004085620817521378823838335749279055639005125</span></span><br><span class="line"><span class="comment"># n1 =  343504538870081878757729748260620800783581983635281373321527119223374418103340873199654926888439040391545101913132680017655039577253974802351999985470115474655124168592386965001556620077117966153475518658881140827499124290142523464795351995478153288872749817655925271395693435582010998996210909883510311066017237567799370371513462802547313382594409676803895262837061350017911885033133654781876923251129406855067993830824618637981136966134029212516871210627954762147349788788999116702635535406398258621926040887099782494271000823401788337120154104692934583729065189687995570122890809807661370008740283447636580308161498808092269041815719148127168137018600113465985504975054319601741498799761500526467431533990903047624407330243357514588557352746347337683868781554819821575385685459666842162355673947984514687068626166144076257334426612302554448774082488600083569900006274897032242821388126274957846236552373226099112200392102883351088570736254707966329366625911183721875374731791052229266503696334310835323523568132399330263642353927504971311717117370721838701629885670598853025212521537158141447625623337563164790788106598854822686494249848796441153496412236527242235888308435573209980270776407776277489669763803746640746378181948641</span></span><br><span class="line"><span class="comment"># c2 =  4948422459907576438725352912593232312182623872749480015295307088166392790756090961680588458629287353136729331282506869598853654959933189916541367579979613191505226006688017103736659670745715837820780269669982614187726024837483992949073998289744910800139692315475427811724840888983757813069849711652177078415791290894737059610056340691753379065563574279210755232749774749757141836708161854072798697882671844015773796030086898649043727563289757423417931359190238689436180953442515869613672008678717039516723747808793079592658069533269662834322438864456440701995249381880745586708718334052938634931936240736457181295</span></span><br><span class="line"><span class="comment"># n2 =  8582505375542551134698364096640878629785534004976071646505285128223700755811329156276289439920192196962008222418309136528180402357612976316670896973298407081310073283979903409463559102445223030866575563539261326076167685019121804961393115251287057504682389257841337573435085535013992761172452417731887700665115563173984357419855481847035192853387338980937451843809282267888616833734087813693242841580644645315837196205981207827105545437201799441352173638172133698491126291396194764373021523547130703629001683366722885529834956411976212381935354905525700646776572036418453784898084635925476199878640087165680193737</span></span><br></pre></td></tr></table></figure>
<p>没有别的信息能用于分解n，那么也只有可能这两个n的分解都被上传到在线网站了，一用发现果然都可以直接分解：</p>
<p>n1：</p>
<p><img src="/post/aa501114/image-20230917152722626.png" alt="image-20230917152722626"></p>
<p>n2：</p>
<p><img src="/post/aa501114/image-20230917152642113.png" alt="image-20230917152642113"></p>
<p>那么直接RSA解密，并将flag拼接起来即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">10004937130983861141937782436252502991050957330184611684406783226971057978666503675149401388381995491152372622456604317681236160071166819028679754762162125904637599991943368450200313304999566592294442696755822585022667008378021280392976010576970877334159755332946926433635584313137140987588847077645814987268595739733550220882135750267567373532603503399428451548677091911410732474324157868011686641243202218731844256789044721309478991918322850448456919991540932206923861653518190974620161055008847475600980152660468279765607319838003177639654115075183493029803981527882155542925959658123816315099271123470754815045214896642428657264709805029840253303446203030294879166242867850331945166255924821406218090304893024711068773287842075208409312312188560675094244318565148284432361706108491327014254387317744284876018328591380705408407853404828189643214087638328376675071962141118973835178054884474523241911240926274907256651801384433652425740230755811160476356172444327762497910600719286629420662696949923799255603628210458906831175806791599965316549386396788014703044837917283461862338269599464440202019922379625071512100821922879623930069349084917919100015782270736808388388006084027673781004085620817521378823838335749279055639005125</span></span><br><span class="line">n1 = <span class="number">343504538870081878757729748260620800783581983635281373321527119223374418103340873199654926888439040391545101913132680017655039577253974802351999985470115474655124168592386965001556620077117966153475518658881140827499124290142523464795351995478153288872749817655925271395693435582010998996210909883510311066017237567799370371513462802547313382594409676803895262837061350017911885033133654781876923251129406855067993830824618637981136966134029212516871210627954762147349788788999116702635535406398258621926040887099782494271000823401788337120154104692934583729065189687995570122890809807661370008740283447636580308161498808092269041815719148127168137018600113465985504975054319601741498799761500526467431533990903047624407330243357514588557352746347337683868781554819821575385685459666842162355673947984514687068626166144076257334426612302554448774082488600083569900006274897032242821388126274957846236552373226099112200392102883351088570736254707966329366625911183721875374731791052229266503696334310835323523568132399330263642353927504971311717117370721838701629885670598853025212521537158141447625623337563164790788106598854822686494249848796441153496412236527242235888308435573209980270776407776277489669763803746640746378181948641</span></span><br><span class="line">c2 = <span class="number">4948422459907576438725352912593232312182623872749480015295307088166392790756090961680588458629287353136729331282506869598853654959933189916541367579979613191505226006688017103736659670745715837820780269669982614187726024837483992949073998289744910800139692315475427811724840888983757813069849711652177078415791290894737059610056340691753379065563574279210755232749774749757141836708161854072798697882671844015773796030086898649043727563289757423417931359190238689436180953442515869613672008678717039516723747808793079592658069533269662834322438864456440701995249381880745586708718334052938634931936240736457181295</span></span><br><span class="line">n2 = <span class="number">8582505375542551134698364096640878629785534004976071646505285128223700755811329156276289439920192196962008222418309136528180402357612976316670896973298407081310073283979903409463559102445223030866575563539261326076167685019121804961393115251287057504682389257841337573435085535013992761172452417731887700665115563173984357419855481847035192853387338980937451843809282267888616833734087813693242841580644645315837196205981207827105545437201799441352173638172133698491126291396194764373021523547130703629001683366722885529834956411976212381935354905525700646776572036418453784898084635925476199878640087165680193737</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c1</span></span><br><span class="line">p1 = <span class="number">18055722101348711626577381571859114850735298658417345663254295930584841136416234624852520581982069555948490061840244710773146585295336094872892685938420880462305333393436098181186277450475949236132458958671804132443554885896037342335902958516394876382378829317303693655605215373555988755516058130500801822723195474873517960624159417903134580987202400855946137101429970119186394052011747475879598126195607938106163892658285305921071673588966184054026228745012993740035399652049777986535759039077634555909031397541116025395236871778797949216479130412500655359057128438928721459688727543057760739527720641179290282309741</span></span><br><span class="line">q1 = <span class="number">19024691283015651666032297670418553586155390575928421823630922553034857624430114628839720683172187406577114034710093054198921843669645736474448836706112221787749688565566635453151716934583685087745112614898780150391513798368931496744574075511968933800467288441832780919514199410584786925010518564670786685241724643282580795568609339268652910564215887176803735675069372979560024792322029911970574914829712553975379661212645059271137916107885326625543090473004683836665262304916304580076748336858662108554591235698235221618061328251985929904075811056422186525179189846420226944944513865790999242309352900287977666792901</span></span><br><span class="line">phi_n1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d1 = inverse(e,phi_n1)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c2</span></span><br><span class="line">plist = [<span class="number">9949603102225364603</span>,<span class="number">10049235158029375571</span>,<span class="number">10547615587767500213</span>,<span class="number">10596280721192026229</span>,<span class="number">10864078180916418691</span>,<span class="number">11092420583960163379</span>,<span class="number">11853704782834170959</span>,<span class="number">12034779627328165471</span>,<span class="number">12404642343676224637</span>,<span class="number">12448177342966243757</span>,<span class="number">13062839684118954553</span>,<span class="number">13645878578452317313</span>,<span class="number">14397830993057803133</span>,<span class="number">14619040595108594017</span>,<span class="number">14678737767649343977</span>,<span class="number">14745811312384518031</span>,<span class="number">14813953870710226847</span>,<span class="number">15175734709842430433</span>,<span class="number">15211380502610462057</span>,<span class="number">15332916111580607077</span>,<span class="number">15751974537676958401</span>,<span class="number">16123604149048919099</span>,<span class="number">16408421615173973083</span>,<span class="number">16870346804576162551</span>,<span class="number">17093292308638969889</span>,<span class="number">17265001711647542137</span>,<span class="number">17289161209347211817</span>,<span class="number">17543713628803023199</span>,<span class="number">17673334943789572513</span>,<span class="number">18106525049998616747</span>,<span class="number">18345408081492711641</span>,<span class="number">18390046459144888243</span>]</span><br><span class="line">phi_n2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi_n2 *= (i-<span class="number">1</span>)</span><br><span class="line">d2 = inverse(e,phi_n2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{fACtord6_And_YAfu_Are_6oth_good_utils_to_fACtorize_num6ers_ff90S}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="feistel"><a href="#feistel" class="headerlink" title="feistel"></a>feistel</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很喜欢shallow的一句话：白给捏</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span> = <span class="number">2</span></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;./secret&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key, <span class="built_in">round</span></span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    left = bytes_to_long(m[:<span class="number">8</span>])</span><br><span class="line">    right = bytes_to_long(m[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">        left, right = right, f(right, key) ^ left</span><br><span class="line">    left, right = right, left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>) + long_to_bytes(right).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x0b\xa7\xc6J\xf6\x80T\xc6\xfbq\xaa\xd8\xcc\x95\xad[\x1e\&#x27;W5\xce\x92Y\xd3\xa0\x1fL\xe8\xe1&quot;^\xad&#x27;</span></span><br></pre></td></tr></table></figure>
<p>分析一下题目的加密流程：</p>
<ul>
<li>将flag经padding填充长度至16的整数倍</li>
<li>填充后，将flag每16个分为一组，各自进行加密(类似ECB模式，组与组间不进行干扰)</li>
<li>每组的加密方式为：分为左右两部分，每部分各8字节，进行feistel网络加密，共两轮。</li>
</ul>
<p>再看看feistel型网络结构：</p>
<p><img src="/post/aa501114/image-20230917153853700.png" alt="image-20230917153853700"></p>
<p>分析可以知道，只要拥有密钥，那么只需要简单的异或就可以逐层还原明文，而不需要关注f函数的具体执行过程，这是因为对某一轮而言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L,R = R,f(R)^L</span><br></pre></td></tr></table></figure>
<p>此时，令新的左右两部分为newL,newR：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newL = R</span><br><span class="line">newR = f(R)^L</span><br></pre></td></tr></table></figure>
<p>只需要按下列方式即可还原出L、R：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R = newL</span><br><span class="line">L = f(newL)^newR = f(R)^(f(R)^L) = L</span><br></pre></td></tr></table></figure>
<p>所以对于n层的feistel，仅需要对应还原n次即可。在本题中为还原两次。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;\x0b\xa7\xc6J\xf6\x80T\xc6\xfbq\xaa\xd8\xcc\x95\xad[\x1e\&#x27;W5\xce\x92Y\xd3\xa0\x1fL\xe8\xe1&quot;^\xad&#x27;</span></span><br><span class="line">key = <span class="string">b&quot;wulidego&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c,key</span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    right = bytes_to_long(c[:<span class="number">8</span>])</span><br><span class="line">    left = bytes_to_long(c[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        left,right = f(left,key)^right,left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left) + long_to_bytes(right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_dec</span>(<span class="params">c, key</span>):</span><br><span class="line">    m = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c) // <span class="number">16</span>):</span><br><span class="line">        m += dec(c[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_dec(c,key))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{M@g1cA1_Encr1tion!!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="n-amp-n"><a href="#n-amp-n" class="headerlink" title="n&amp;n"></a>n&amp;n</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modulus and modulus~</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip().encode()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p * q</span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n)</span><br><span class="line"><span class="built_in">print</span>(c1) </span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line"><span class="comment"># 4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line"><span class="comment"># 13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br></pre></td></tr></table></figure>
<p>简单的共模攻击。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line">c1 = <span class="number">5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line">c2 = <span class="number">4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line">n = <span class="number">13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br><span class="line"></span><br><span class="line">_, s1, s2 = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n)*<span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{dO_nOt_u53_5AM3_MOdulu5_tO_3ncrYPt_dIFF3r3nt_dAtA!_JY63x33iiA0Ji}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="p-q"><a href="#p-q" class="headerlink" title="|p-q|"></a>|p-q|</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">what will `next_prime` cause?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p += <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line"><span class="comment"># c = 307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br></pre></td></tr></table></figure>
<p>关注到q的生成过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = next_prime(p)</span><br></pre></td></tr></table></figure>
<p>因此p、q相差过小，n开根后简单爆破即可得到分解。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line">c = <span class="number">307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br><span class="line"></span><br><span class="line">p = iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(n % p == <span class="number">0</span>):</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{it_iS_vUlnErablE_iF_p_iS_aboUt_thE_SaME_SiZE_aS_Q_MVoAYArrlG3uco}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="rsa-signin"><a href="#rsa-signin" class="headerlink" title="rsa_signin"></a>rsa_signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真 signin</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line"><span class="string">c = 6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line"><span class="string">n = 24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line"><span class="string">c = 10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line"><span class="string">n = 14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line"><span class="string">c = 415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line"><span class="string">n = 12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line"><span class="string">c = 2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line"><span class="string">n = 18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line"><span class="string">c = 2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line"><span class="string">n = 22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line"><span class="string">c = 12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line"><span class="string">n = 19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line"><span class="string">c = 9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line"><span class="string">n = 16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line"><span class="string">c = 16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line"><span class="string">n = 16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line"><span class="string">c = 11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line"><span class="string">n = 13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line"><span class="string">c = 6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line"><span class="string">n = 21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line"><span class="string">c = 6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>同样的m、e，不同的模数n，一般有两种考虑方式：中国剩余定理或模不互素。</p>
<p>同样的，如果用中国剩余定理，65537对于开根来说仍然过大了，因此应该是模不互素。观察数据也可以发现，c、n共有11组，而题目仅生成了10组，因此可能也是对模不互素的一种暗示。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line">c1 = <span class="number">6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line">n2 = <span class="number">24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line">c2 = <span class="number">10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line">n3 = <span class="number">14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line">c3 = <span class="number">415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line">n4 = <span class="number">12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line">c4 = <span class="number">2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line">n5 = <span class="number">18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line">c5 = <span class="number">2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line">n6 = <span class="number">22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line">c6 = <span class="number">12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line">n7 = <span class="number">19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line">c7 = <span class="number">9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line">n8 = <span class="number">16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line">c8 = <span class="number">16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line">n9 = <span class="number">16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line">c9 = <span class="number">11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line">n10 = <span class="number">13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line">c10 = <span class="number">6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line">n11 = <span class="number">21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line">c11 = <span class="number">6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"></span><br><span class="line">n = [n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11]</span><br><span class="line">c = [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">if</span>(GCD(n[i],n[j]) != <span class="number">1</span>):</span><br><span class="line">            p = GCD(n[i],n[j])</span><br><span class="line">            q = n[i] // p</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c[i],d,n[i])</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{it_is_re@lly_@_signin_level_cryPto_ch@ll@nge_ng92WPIBung92WPIBun}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="xorrrrrrrrr"><a href="#xorrrrrrrrr" class="headerlink" title="xorrrrrrrrr"></a>xorrrrrrrrr</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">芝士什么运算？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;moectf&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">article = <span class="built_in">open</span>(<span class="string">&#x27;article.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">strxor = <span class="keyword">lambda</span> x,y: <span class="built_in">bytes</span>([a^b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x,y)])</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    range_start = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(article) - <span class="built_in">len</span>(flag))</span><br><span class="line">    mask = article[range_start:range_start + <span class="built_in">len</span>(flag)]</span><br><span class="line">    result.append(strxor(flag,mask))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.log&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.writelines([<span class="built_in">str</span>(i)+<span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> result])</span><br></pre></td></tr></table></figure>
<p>经典的MTP，用相同的flag串反复与文本随机段落异或，并给出了每一次异或后的密文。</p>
<p>由于直到flag开头为<code>moectf&#123;</code>，因此可以当作密钥依次解密各段文本，并分析可能的后续文本的单词。分析出来后延长已知的密钥，如此反复。我就是这样手动做的，大概花费了一小时。</p>
<p>flag：</p>
<p><strong>moectf{W0W_y0U_HaVe_mastered_tHe_x0r_0Peart0r!_0iYlJf!M3rux9G9Vf!JoxiMl}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="ez-chain"><a href="#ez-chain" class="headerlink" title="ez_chain"></a>ez_chain</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你说的对，但是我的key呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    key = <span class="built_in">int</span>(fs.read().strip())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blocks = blockize(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt_block_cbc(blocks, iv, key))</span><br><span class="line"><span class="comment"># [8490961288, 122685644196, 349851982069, 319462619019, 74697733110, 43107579733, 465430019828, 178715374673, 425695308534, 164022852989, 435966065649, 222907886694, 420391941825, 173833246025, 329708930734]</span></span><br></pre></td></tr></table></figure>
<p>题目首先将flag串转为一个大整数，并且将大整数按如下方式转化为一个列表：</p>
<script type="math/tex; mode=display">
flag = a[n]*base^n+a[n-1]*base^{n-1}+...+a[1]*base^1 + a[0]*base[0]</script><p>可以发现，这种方式其实就是把flag转化成了一个base进制数，并将系数存储在<code>blocks</code>列表中。</p>
<p>在这之后，题目进行了一个类似于CBC模式的加密，列举一下前三项：</p>
<script type="math/tex; mode=display">
enc[0] = iv\\
enc[1] = blocks[0]\oplus enc[0]\oplus key\\
enc[2] = blocks[1]\oplus enc[1]\oplus key</script><p>把<code>enc[i]</code>的内容代入到<code>enc[i+1]</code>中，就可以发现：</p>
<script type="math/tex; mode=display">
enc[1] = blocks[0]\oplus iv\oplus key\\
enc[2] = blocks[1]\oplus (blocks[0]\oplus iv\oplus key)\oplus key</script><p>消掉key，可以得到：</p>
<script type="math/tex; mode=display">
enc[2] = blocks[1]\oplus blocks[0]\oplus iv</script><p>依此类推，就可以推出剩余的<code>enc[i]</code>：</p>
<script type="math/tex; mode=display">
enc[2] = blocks[1]\oplus blocks[0]\oplus iv\\
enc[3] =  blocks[2]\oplus blocks[1]\oplus blocks[0]\oplus iv\oplus key\\
enc[4] =  blocks[3]\oplus blocks[2]\oplus blocks[1]\oplus blocks[0]\oplus iv\\
...\\
enc[n] = (\bigoplus\limits_{i=0}^{n-1}blocks[i]) \oplus iv \;(\oplus key)</script><p>两两组合一下，就可以得到所有的：</p>
<script type="math/tex; mode=display">
blocks[i]\oplus key</script><p>因此，只要拥有任何一段<code>blocks[i]</code>，就可以还原出key，从而解密所有段。而幸运的是，我们知道flag开头总是<code>moectf&#123;</code>，其转化为整数是大于base的，因此<code>blocks[0]</code>是可以计算出来的，因此可以进行完整明文解密。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证可以发现，由于开头恒为moectf&#123;，所以明文第一块不变</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">f = b&quot;moectf&#123;&quot; + 64*b&quot;\x00&quot; + b&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">def blockize(long):</span></span><br><span class="line"><span class="string">    out = []</span></span><br><span class="line"><span class="string">    while long &gt; 0:</span></span><br><span class="line"><span class="string">        out.append(long % base)</span></span><br><span class="line"><span class="string">        long //= base</span></span><br><span class="line"><span class="string">    return list(reversed(out))</span></span><br><span class="line"><span class="string">blocks = blockize(bytes_to_long(f))</span></span><br><span class="line"><span class="string">print(blocks)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line">c = [<span class="number">8490961288</span>, <span class="number">122685644196</span>, <span class="number">349851982069</span>, <span class="number">319462619019</span>, <span class="number">74697733110</span>, <span class="number">43107579733</span>, <span class="number">465430019828</span>, <span class="number">178715374673</span>, <span class="number">425695308534</span>, <span class="number">164022852989</span>, <span class="number">435966065649</span>, <span class="number">222907886694</span>, <span class="number">420391941825</span>, <span class="number">173833246025</span>, <span class="number">329708930734</span>]</span><br><span class="line">m0 = <span class="number">5329712293</span></span><br><span class="line">key = m0^iv^c[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = [m0]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">    m.append(c[i]^c[i-<span class="number">1</span>]^key)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    flag += base**(<span class="built_in">len</span>(m)-i-<span class="number">1</span>) * m[i]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{thE_c6c_Is_not_so_hard_9ifxi9i!JGofMJ36D9cPMxroif6!M6oSMuliPPcA3}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="flag-exchange"><a href="#flag-exchange" class="headerlink" title="flag_exchange"></a>flag_exchange</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“你这flag多少钱一斤？”</span><br><span class="line">“白给。”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">p, flag</span>):</span><br><span class="line">    alice_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    alice_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, alice_privKey, p)</span><br><span class="line">    bob_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    bob_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, bob_privKey, p)</span><br><span class="line"></span><br><span class="line">    superkey = <span class="built_in">pow</span>(bob_pubKey, alice_privKey, p)</span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (m * superkey) % p, alice_pubKey, bob_pubKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() &gt;= <span class="number">1024</span>:</span><br><span class="line">        c, alice_pubKey, bob_pubKey = diffie_hellman(p, flag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alice&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(alice_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bob&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bob_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid P&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>题目基于Diffie-Hellman密钥交换协议，具体流程如下：</p>
<ul>
<li>随机生成Alice、Bob的私钥，记为a、b</li>
<li>计算Alice、Bob的公钥，分别为：</li>
</ul>
<script type="math/tex; mode=display">
puba = 7^a\quad (mod\;p)\\
pubb = 7^b\quad (mod\;p)</script><ul>
<li>计算出公共密钥：</li>
</ul>
<script type="math/tex; mode=display">
key = 7^{a*b}\quad(mod\;p)</script><ul>
<li>然后将flag对应的明文用公共密钥进行如下加密：</li>
</ul>
<script type="math/tex; mode=display">
cipher = m*key\quad(mod\;p)</script><p>而我们能做的，就是发送给靶机端一个大于1024bit的p，之后靶机端会用该p生成各个密钥，并返回给我们密文以及Alice、Bob的公钥。而如果能求出<code>key</code>，那么解密是简单的，只需要：</p>
<script type="math/tex; mode=display">
m = cipher * key^{-1}\quad(mod\;p)</script><p>因此，我们的任务就变成了：已知</p>
<script type="math/tex; mode=display">
puba = 7^a\quad (mod\;p)\\
pubb = 7^b\quad (mod\;p)</script><p>求：</p>
<script type="math/tex; mode=display">
key = 7^{a*b}\quad(mod\;p)</script><p>这实质上是一个CDH问题。而突破点就在于，群G是由我们给出的素数p生成的，而当p-1光滑时，求解离散对数问题会变得容易。因此我们只需要使生成的p满足p-1光滑即可。</p>
<p>exp.py：(羊城杯的时候已经生成了一个满足要求的p，依然可以用)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这一部分交互拿数据</span></span><br><span class="line"><span class="string">r = remote(&quot;localhost&quot;,59807)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p = 11008176197295908754556650686251647243706292498034472501168046085732945809887313362518690275918394335207633925834115240024616753739067618316748808578650362774171917441376968722226626556434005996618900469687913893028687318661542559912265616293448246676128025762514511346750336107659243985471781068580223900395847</span></span><br><span class="line"><span class="string">p = str(p).encode()</span></span><br><span class="line"><span class="string">r.sendline(p)</span></span><br><span class="line"><span class="string">r.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line">p = <span class="number">11008176197295908754556650686251647243706292498034472501168046085732945809887313362518690275918394335207633925834115240024616753739067618316748808578650362774171917441376968722226626556434005996618900469687913893028687318661542559912265616293448246676128025762514511346750336107659243985471781068580223900395847</span></span><br><span class="line">a_pub = <span class="number">3041998234690140733154003929351315749694173007295647496020072713756720943209175213390528908881513815372353043112125543782015504010903067412373671589783193113333759484653654593846608999327295977564591176273803313231805537606967793412594198900106990579441541583887521372737380085485236123798080560570278014966702</span></span><br><span class="line">b_pub = <span class="number">5019111378107696236906829966236801209683272037829678336595795065089184558620835243572805945837441564532780156063311684567652666178983348141519659763620244199977854812815568555236825281860924772124922980859797186639597490335115982316718963668010854994814229912399401172971794319506936755236803999795167503841257</span></span><br><span class="line">c = <span class="number">5757579635901147336595005390089603141773004178520561180663592936976073539821329993954175682240078485514741790990274876586653742472291327751694366705347330014705598863958938830082576802663476872305215648921055853375365278016644634303502905192252207112762958399098960852167171887363633849097395446708067829178184</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">a = discrete_log(mod(a_pub,p),mod(g,p))</span><br><span class="line">b = discrete_log(mod(b_pub,p),mod(g,p))</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(c * <span class="built_in">pow</span>(<span class="number">7</span>,-(a*b),p) %p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{diffie_he11man_key_exChange_is_not_so_hard_2WPIBung92WPIBung9?WP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="giant-e"><a href="#giant-e" class="headerlink" title="giant_e"></a>giant_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这个e，红豆泥呆胶布得丝噶？（</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n) <span class="comment"># 0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br></pre></td></tr></table></figure>
<p>e过大说明私钥d很可能较小，因此可以采用wiener攻击。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">n = <span class="number">0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line">c = <span class="number">0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        self.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;moectf&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{too_larGe_exponent_is_not_a_iDea_too!_Bung92WPIBung92WPIBung9?WP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="minipack"><a href="#minipack" class="headerlink" title="minipack"></a>minipack</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">super backpack!!!</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;\xff&quot;</span> + flag + <span class="string">b&quot;\xff&quot;</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long2bits</span>(<span class="params">long</span>):</span><br><span class="line">    bits = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        bits.append(long &amp; <span class="number">1</span>)</span><br><span class="line">        long &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(bits))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">        delta = random.randint(<span class="number">1</span>, <span class="number">10000</span>)</span><br><span class="line">        x = <span class="built_in">sum</span> + delta</span><br><span class="line">        out.append(x)</span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = genkey(<span class="number">74</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.write(<span class="built_in">str</span>(key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, keys</span>):</span><br><span class="line">    data = long2bits(m)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) == <span class="built_in">len</span>(keys)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>((k <span class="keyword">if</span> (p == <span class="number">1</span>) <span class="keyword">else</span> <span class="number">1</span>) <span class="keyword">for</span> p, k <span class="keyword">in</span> <span class="built_in">zip</span>(data, keys))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ciphertext.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.write(<span class="built_in">str</span>(encrypt(m, key)))</span><br></pre></td></tr></table></figure>
<p>观察可以发现，这个背包密码用的是超递增序列，因此可以直接从尾部逐个判断是否在背包中。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = </span><br><span class="line">c = <span class="number">44096612931024003148407895164090667174657344536623354666642108463093659898867859567157728084018394988840266329206836985537987081415020571845239234014695335928717091578810470705259929</span></span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="keyword">if</span>(c &gt; key[<span class="built_in">len</span>(key)-<span class="number">1</span>-i]):</span><br><span class="line">        m.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        c -= key[<span class="built_in">len</span>(key)-<span class="number">1</span>-i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(m)[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{superiNcreasiNg_sequeNce_is_useful_tO_cONstruct_a_KNapsacK_MAxSM}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="bad-random"><a href="#bad-random" class="headerlink" title="bad_random"></a>bad_random</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你能猜出这个随机数生成器生成的下一个数吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_params</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = random.randint(<span class="number">10000</span>, <span class="number">20000</span>)</span><br><span class="line">        self.a = random.randint(<span class="number">10000</span>, <span class="number">20000</span>)</span><br><span class="line">        self.c = random.randint(<span class="number">1</span>, self.a-<span class="number">1</span>)</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, self.m-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_output</span>(<span class="params">self</span>):</span><br><span class="line">        x0 = self.x</span><br><span class="line">        s = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> (t := self()) <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            s.add(t)</span><br><span class="line">        self.x = x0</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.set_params()</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.get_all_output()) &lt; <span class="number">10</span>:</span><br><span class="line">            self.set_params()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = (self.a * self.x + self.c) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">    <span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(random.choices(ascii_letters, k=<span class="number">16</span>))</span><br><span class="line">    h = md5(s.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;!&gt; md5(XXXXXXXX+<span class="subst">&#123;s[<span class="number">8</span>:]&#125;</span>) == <span class="subst">&#123;h&#125;</span>&quot;</span>)</span><br><span class="line">    i = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXXXXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> md5((i + s[<span class="number">8</span>:]).encode()).hexdigest() != h:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;!&gt; ACCESS DENIED &lt;!&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    inst = LCG()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s play a simple game! If you can guess the right number, I will give your the flag! You have 10 tries&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        i = <span class="built_in">input</span>(<span class="string">f&quot;Give me a number, you have failed for <span class="subst">&#123;tries&#125;</span> times: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(i) == (right := inst()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Congurations! You win the game! Your flag is here: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Oh, you are wrong! The right number is <span class="subst">&#123;right&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先要通过一个md5的爆破，这个不用多说，通过后进入主要任务。(题目附件应该是错了，实际并不需要爆破8位，仅需要爆破4位)</p>
<p>主要任务如下：</p>
<ul>
<li>靶机端随机生成一个LCG，并且各参数均未知。</li>
<li>随机生成一个种子x，以其为基础生成后续伪随机数。</li>
<li>我们有十次机会猜测下一个伪随机数是什么。如果猜错，靶机端会告诉你正确的当前数应该是多少；如果猜对则给flag。</li>
</ul>
<p>因此，我们需要在10次以内正确恢复本次LCG的参数，并正确预测下一个伪随机数。而其实5组数据就可以，推导如下:</p>
<script type="math/tex; mode=display">
x[1] \equiv a*x[0] + c\quad(mod \;m)\\
x[2] \equiv a*x[1] + c\quad(mod \;m)\\
x[3] \equiv a*x[2] + c\quad(mod \;m)\\
x[4] \equiv a*x[3] + c\quad(mod \;m)\\
x[5] \equiv a*x[4] + c\quad(mod \;m)</script><p>有：</p>
<script type="math/tex; mode=display">
x[4]-x[3]\equiv a*(x[3]-x[2])\quad(mod\;m)\\
x[3]-x[2]\equiv a*(x[2]-x[1])\quad(mod\;m)</script><p>所以：</p>
<script type="math/tex; mode=display">
x[4]-x[3]\equiv a^2*(x[2]-x[1])\quad(mod\;m)\\
(x[4]-x[3])*(x[2]-x[1])\equiv a^2*(x[2]-x[1])^2\quad(mod\;m)</script><p>又因为：</p>
<script type="math/tex; mode=display">
(x[3]-x[2])^2\equiv a^2*(x[2]-x[1])^2\quad(mod\;m)</script><p>所以：</p>
<script type="math/tex; mode=display">
(x[4]-x[3])*(x[2]-x[1]) -(x[3]-x[2])^2\equiv 0\quad(mod\;m)</script><p>即：</p>
<script type="math/tex; mode=display">
(x[4]-x[3])*(x[2]-x[1]) -(x[3]-x[2])^2 = k1*m</script><p>同理有：</p>
<script type="math/tex; mode=display">
(x[5]-x[4])*(x[3]-x[2]) -(x[4]-x[3])^2 = k2*m</script><p>因此求解两者gcd便可以得到m(这里存在一点问题，先假设我们得到的就是m而不是k*m)：</p>
<p>得到m后，我们只需要利用一个式子就可以求出a：</p>
<script type="math/tex; mode=display">
a \equiv (x[5]-x[4])*(x[4]-x[3])^{-1}\quad(mod\;m)</script><p>求出a后，恢复c是简单的，这样一来我们就顺利得到了LCG的所有参数，因此只需要再计算一遍：</p>
<script type="math/tex; mode=display">
x[6] \equiv a*x[5] + c\quad(mod \;m)</script><p>并提交<code>x[6]</code>，就可以从靶机端收到flag。</p>
<p>但是这样存在一定失败的概率，这是因为本题中，m并不是素数，而是一个随机数，这导致了两个潜在问题：</p>
<ul>
<li>第一步得到的km，可能并不好确定到底k是多少，因为无法通过消除km的小因子来得到m</li>
<li>如果m不是素数，gcd((x[i+1]-x[i]),m)可能不为1，这就导致其逆元不存在，而无法求解a。</li>
</ul>
<p>我们可以简单测试一下10000-20000间，m是素数的概率是多少：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">20000</span>):</span><br><span class="line">    <span class="keyword">if</span>(isprime(i)):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count / <span class="number">10000</span>)</span><br></pre></td></tr></table></figure>
<p>结果是0.1033。也就是说，我们需要平均十次才能获得一个素数m。</p>
<p>不过并不算一个大问题，多交互几次就行了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;localhost&quot;</span>,<span class="number">63150</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    temp = <span class="built_in">str</span>(r.recvline().strip())[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ascii_letters:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ascii_letters:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                    s = i+j+k+l + temp[<span class="number">13</span>:<span class="number">17</span>]</span><br><span class="line">                    h = md5(s.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span>(h == temp[-<span class="number">32</span>:]):</span><br><span class="line">                        r.sendline((i+j+k+l).encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    t = r.recvuntil(<span class="string">b&quot;number is&quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(r.recvline().decode())</span><br><span class="line">    x.append(num)</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求m</span></span><br><span class="line">t1 = x[<span class="number">1</span>] - x[<span class="number">0</span>]</span><br><span class="line">t2 = x[<span class="number">2</span>] - x[<span class="number">1</span>]</span><br><span class="line">t3 = x[<span class="number">3</span>] - x[<span class="number">2</span>]</span><br><span class="line">t4 = x[<span class="number">4</span>] - x[<span class="number">3</span>]</span><br><span class="line">T1 = t4*t2 - t3*t3</span><br><span class="line">T2 = t3*t1 - t2*t2</span><br><span class="line">m = GCD(T1,T2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#求a,b</span></span><br><span class="line">a = inverse((x[<span class="number">1</span>] - x[<span class="number">0</span>]),m)*(x[<span class="number">2</span>] - x[<span class="number">1</span>]) % m</span><br><span class="line">b = (-a*x[<span class="number">1</span>] + x[<span class="number">2</span>]) % m</span><br><span class="line"></span><br><span class="line">xx = <span class="built_in">str</span>((a*x[-<span class="number">1</span>] + b) % m).encode()</span><br><span class="line">r.sendline(xx)</span><br><span class="line"><span class="built_in">print</span>((r.recvline()))</span><br><span class="line"><span class="built_in">print</span>((r.recvline()))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{u5e_5ingle_lcg_a5_a_RanDoM_nuMbeR_geneRaToR_i5_noT_a_gooD_iDea!_}</strong></p>
<p>其实仔细想一下，因为随机数总是小于m的，而m的范围有点过小，因此完全可以反复发送某个数(比如10)，多次发送后总有可能猜对，可能仍然可以短时间内就得到flag(时间主要花费在md5爆破)</p>
<p><br></p>
<p><br></p>
<h3 id="broken-hash"><a href="#broken-hash" class="headerlink" title="broken_hash"></a>broken_hash</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这hash，保熟吗</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; ~y) ^ (y &amp; ~z) ^ (z &amp; ~x)) ^ (</span><br><span class="line">        ((x + y) * (y + z) + (x + z)) &amp; <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_block_hash</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    x, y, z, w = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</span><br><span class="line">    <span class="keyword">return</span> (a ^ b ^ c ^ d ^ x ^ y ^ z ^ w) ^ <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_hash</span>(<span class="params">blocks: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(blocks)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        padding = <span class="number">4</span> - length % <span class="number">4</span></span><br><span class="line">        blocks += [<span class="number">0</span>] * padding</span><br><span class="line">        length += padding</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _block_hash(*blocks)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        block_size = length // <span class="number">4</span></span><br><span class="line">        h1 = _<span class="built_in">hash</span>(blocks[:block_size])</span><br><span class="line">        h2 = _<span class="built_in">hash</span>(blocks[block_size : block_size * <span class="number">2</span>])</span><br><span class="line">        h3 = _<span class="built_in">hash</span>(blocks[block_size * <span class="number">2</span> : block_size * <span class="number">3</span>])</span><br><span class="line">        h4 = _<span class="built_in">hash</span>(blocks[block_size * <span class="number">3</span> :])</span><br><span class="line">        <span class="keyword">return</span> _block_hash(h1, h2, h3, h4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes2blocks</span>(<span class="params">data: <span class="built_in">bytes</span>, block_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) % block_size != <span class="number">0</span>:</span><br><span class="line">        data += <span class="string">b&quot;\x00&quot;</span> * (block_size - <span class="built_in">len</span>(data) % block_size)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(data[i : i + block_size], <span class="string">&quot;little&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), block_size)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">*data: <span class="built_in">list</span>[<span class="built_in">bytes</span>]</span>):</span><br><span class="line">    <span class="keyword">return</span> _<span class="built_in">hash</span>(bytes2blocks(<span class="string">b&quot;&quot;</span>.join(data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randbytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>: <span class="type">Callable</span>[[<span class="built_in">str</span>], <span class="literal">None</span>], <span class="built_in">print</span>: <span class="type">Callable</span>[[<span class="built_in">str</span>], <span class="literal">None</span>]</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&quot;&quot;</span>.join(choices(ascii_letters, k=<span class="number">16</span>))</span><br><span class="line">        h = md5(s.encode()).hexdigest()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&lt;!&gt; md5(XXXXXXXX+<span class="subst">&#123;s[<span class="number">8</span>:]&#125;</span>) == <span class="subst">&#123;h&#125;</span>&quot;</span>)</span><br><span class="line">        i = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXXXXXX: &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5((i + s[<span class="number">8</span>:]).encode()).hexdigest() == h</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;!&gt; ACCESS DENIED &lt;!&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    b = randbytes(<span class="number">256</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;this is a random bytes: <span class="subst">&#123;b64encode(b).decode()&#125;</span>&quot;</span>)</span><br><span class="line">    i = <span class="built_in">input</span>(<span class="string">&quot;give me another bytes with the same hash: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = b64decode(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;invaild input&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hash</span>(b) == <span class="built_in">hash</span>(d) <span class="keyword">and</span> d!=b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;congurations! and your flag is <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>任务很简单，根据给定的哈希函数，寻找一个哈希碰撞即可得到flag。</p>
<p>简单看一下哈希函数：</p>
<ul>
<li>把256字节的明文按每16个字节分为16组。</li>
<li>每一组的16字节再按每4个字节分为4组，记为(a,b,c,d)</li>
<li>对每一块进行如下哈希后，再组合起来：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; ~y) ^ (y &amp; ~z) ^ (z &amp; ~x)) ^ (</span><br><span class="line">        ((x + y) * (y + z) + (x + z)) &amp; <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_block_hash</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    x, y, z, w = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</span><br><span class="line">    <span class="keyword">return</span> (a ^ b ^ c ^ d ^ x ^ y ^ z ^ w) ^ <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br></pre></td></tr></table></figure>
<p>容易发现，如果<code>_block_hash</code>函数按照(a,b,c,d)的顺序传参，得到的是：</p>
<script type="math/tex; mode=display">
x1, y1, z1, w1 = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</script><p>而如果按照(c,d,a,b)的顺序传参，得到的是：</p>
<script type="math/tex; mode=display">
x2, y2, z2, w2 = F(c, d, a), F(d, a, b), F(a, b, c), F(b, c, d)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
x1=z2,y1=w2,z1=x2,w1=y2</script><p>可以说仅仅是调换了相对位置，而这种相对位置的调换对于异或运算来说是没有影响的，因此我们就找到了碰撞。</p>
<p>exp.py：(注意需要将满足碰撞的字节串用base64编码后再发送)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;localhost&quot;</span>,<span class="number">65309</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    temp = <span class="built_in">str</span>(r.recvline().strip())[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ascii_letters:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ascii_letters:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                    s = i+j+k+l + temp[<span class="number">13</span>:<span class="number">17</span>]</span><br><span class="line">                    h = md5(s.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span>(h == temp[-<span class="number">32</span>:]):</span><br><span class="line">                        r.sendline((i+j+k+l).encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;this is a random bytes:&quot;</span>)</span><br><span class="line">data1 = r.recvline().strip()</span><br><span class="line"><span class="comment">#print(data1)</span></span><br><span class="line">data2 = b64decode(data1)</span><br><span class="line">data3 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ta = data2[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">16</span>]</span><br><span class="line">    tb = data2[i*<span class="number">64</span>+<span class="number">16</span>:i*<span class="number">64</span>+<span class="number">32</span>]</span><br><span class="line">    tc = data2[i*<span class="number">64</span>+<span class="number">32</span>:i*<span class="number">64</span>+<span class="number">48</span>]</span><br><span class="line">    td = data2[i*<span class="number">64</span>+<span class="number">48</span>:i*<span class="number">64</span>+<span class="number">64</span>]</span><br><span class="line">    data3 += (tc+td+ta+tb)</span><br><span class="line"><span class="comment">#r.interactive()</span></span><br><span class="line">r.sendline(b64encode(data3))</span><br><span class="line"><span class="comment">#print(len(data3))</span></span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{a_hash_FUNCtioN_With_sYMMEtRY_is_vERY_vUlNERa6lE_3iiA0JiuP0DxuuP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="factorize-me"><a href="#factorize-me" class="headerlink" title="factorize_me!"></a>factorize_me!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">can you factorize me?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(primes) = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(p - <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> primes) = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">primes2 = [nextprime(p) <span class="keyword">for</span> p <span class="keyword">in</span> choices(primes, k=<span class="number">3</span>)]</span><br><span class="line">n = prod(primes2)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>), e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836866602305788131186220057989320357344904731322223310531945208433910803617954798258382169132907508787682006064930747033681966462568715421005454243255297306718356766130469885581576362173340673516476386201173298433892314145854649884922769732583885904512624543994675379894718657682146178638074984373206937523380103438050549181568015985546172618830480078894445808092527561363650503540062128543705172678754195578429520889784813733491180748361345720247750720179608752244490362713103319685024237941527268458213442611663415417005556439749055222361212059968254748751273361732365487788593341859760309778894350385339764442343374673786357175846291309425081492959910254127778240522152676060766139057453197528944251599979227271074508795482632471242983094008619339488744362509349734218480932255216087706001484182136783834973304870508270118505737767002256270427907341952256516206663258530300791364944105025764611810001781971638030661367630116818647252727909489405550104641122269772492252464714694507693447974171377200402508765841829763548525530878309985480248379655169722567051495205792089930014228403456098065971372039443284193603395249634283366194562380309469628114581468645669390610963076340643757972439104287127375438663839421605531570285615180251</span></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836492373364350673588273863828369502073826782362255108313852264064760467561392054178047091483873483255491431451728274259516789065331176728192953741805933100379191778599394515981288225535175013258094287912195847642598436035132783919453991516358280321085873745330313812205910011387125778714795906023110368957596998222544234082487264006696812862179916726781327290284827659294751262185328816323311831349296593013038823107653943652771448719760448938995150646738377177532550757319539185878535087009904848382493668686831331474113789651777885239747000076063679062106375348803749466079052774597412239427050432901553466002731972993029311850718200685157193170716432600165476733200831046297530470544781309612128231925681374239849452623513538498417735984094919756374577623486416462101457492789215144166273775249387638107644634704270216130852885082174564648445147377239033930079759024399532146184753110240154062693457622208373371290126810856885343328090305620627668495081760346853701632815149478447405718664667978825807101325764916405446176183238866136433205933785973568759281210319422288153910340542098573782006262190181726245838857185687242960093445000287347616796984610291664809895901301187179157382169999966124177588884152267266994164841066291200</span></span><br><span class="line"><span class="comment"># n = 899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = 841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br></pre></td></tr></table></figure>
<p>已知n与phi分解n，这是一个老问题了，现成脚本很多。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line">N = <span class="number">363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836866602305788131186220057989320357344904731322223310531945208433910803617954798258382169132907508787682006064930747033681966462568715421005454243255297306718356766130469885581576362173340673516476386201173298433892314145854649884922769732583885904512624543994675379894718657682146178638074984373206937523380103438050549181568015985546172618830480078894445808092527561363650503540062128543705172678754195578429520889784813733491180748361345720247750720179608752244490362713103319685024237941527268458213442611663415417005556439749055222361212059968254748751273361732365487788593341859760309778894350385339764442343374673786357175846291309425081492959910254127778240522152676060766139057453197528944251599979227271074508795482632471242983094008619339488744362509349734218480932255216087706001484182136783834973304870508270118505737767002256270427907341952256516206663258530300791364944105025764611810001781971638030661367630116818647252727909489405550104641122269772492252464714694507693447974171377200402508765841829763548525530878309985480248379655169722567051495205792089930014228403456098065971372039443284193603395249634283366194562380309469628114581468645669390610963076340643757972439104287127375438663839421605531570285615180251</span></span><br><span class="line">phi = <span class="number">363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836492373364350673588273863828369502073826782362255108313852264064760467561392054178047091483873483255491431451728274259516789065331176728192953741805933100379191778599394515981288225535175013258094287912195847642598436035132783919453991516358280321085873745330313812205910011387125778714795906023110368957596998222544234082487264006696812862179916726781327290284827659294751262185328816323311831349296593013038823107653943652771448719760448938995150646738377177532550757319539185878535087009904848382493668686831331474113789651777885239747000076063679062106375348803749466079052774597412239427050432901553466002731972993029311850718200685157193170716432600165476733200831046297530470544781309612128231925681374239849452623513538498417735984094919756374577623486416462101457492789215144166273775249387638107644634704270216130852885082174564648445147377239033930079759024399532146184753110240154062693457622208373371290126810856885343328090305620627668495081760346853701632815149478447405718664667978825807101325764916405446176183238866136433205933785973568759281210319422288153910340542098573782006262190181726245838857185687242960093445000287347616796984610291664809895901301187179157382169999966124177588884152267266994164841066291200</span></span><br><span class="line">n = <span class="number">899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - iroot(d,<span class="number">2</span>)[<span class="number">0</span>]) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + iroot(d,<span class="number">2</span>)[<span class="number">0</span>]) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(<span class="built_in">int</span>(N), <span class="built_in">int</span>(sqrt_1 + <span class="number">1</span>))</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br><span class="line"></span><br><span class="line">primelist = factorize_multi_prime(N,phi)</span><br><span class="line">plist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primelist:</span><br><span class="line">    <span class="keyword">if</span>(n % nextprime(i) == <span class="number">0</span>):</span><br><span class="line">        plist.append(nextprime(i))</span><br><span class="line"></span><br><span class="line">phi_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi_n *= (i-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{you_KNow_how_to_faCtorize_N_right?_9?WPIBung6?WPIBung6?WPIBund6?}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="feistel-promax"><a href="#feistel-promax" class="headerlink" title="feistel_promax"></a>feistel_promax</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很喜欢shallow的一句话：会python，上过小学，就能做</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span> = <span class="number">2</span></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;./secret&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key, <span class="built_in">round</span></span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    left = bytes_to_long(m[:<span class="number">8</span>])</span><br><span class="line">    right = bytes_to_long(m[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">        left, right = right, f(right, key) ^ left</span><br><span class="line">    left, right = right, left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>) + long_to_bytes(right).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br><span class="line"><span class="comment"># b&#x27;B\xf5\xd8gy\x0f\xaf\xc7\xdf\xabn9\xbb\xd0\xe3\x1e0\x9eR\xa9\x1c\xb7\xad\xe5H\x8cC\x07\xd5w9Ms\x03\x06\xec\xb4\x8d\x80\xcb&#125;\xa9\x8a\xcc\xd1W\x82[\xd3\xdc\xb4\x83P\xda5\xac\x9e\xb0)\x98R\x1c\xb3h&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相较于上面那道feistel，看似仅仅是更换了key的生成方式，变成了随机的八字节，并且并没有给出key。也因此我们没有办法顺利的使用f函数，也就没有办法还原feistel网络。</p>
<p>但是仔细对比一下发现还有细微区别。</p>
<p>本题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br></pre></td></tr></table></figure>
<p>而上一道题是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>有没有发现区别？这里留了一个很微妙的坑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> : <span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br><span class="line"><span class="number">2</span> : <span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>可以发现，本题对flag进行了两次padding！而padding函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br></pre></td></tr></table></figure>
<p>也就是说，如果消息长度恰为16字节的整数倍长度，他仍然会进行填充，填充的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&quot;\x10&quot;*16</span><br></pre></td></tr></table></figure>
<p>也就是说，现在我们拥有了一组明文以及它对应的feistel加密结果，而feistel网络中，f函数均是线性的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p>这就给解方程带来了希望。</p>
<p>而我们拥有什么方程呢？我们将填充的16字节拆成左右两部分，相应的也就有对应加密过程的密文，此时把key当作未知数，我们就能列出两个方程，这就是我们待解的方程组。</p>
<p>事实也是如此，z3可以轻松求解这个方程组，从而得到key。得到key后解密方法与上一道题目完全相同。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = l = <span class="string">b&quot;\x10\x10\x10\x10\x10\x10\x10\x10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, x</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> (((x^m)*<span class="number">1145</span>+<span class="number">14</span>)*<span class="number">1919</span>+<span class="number">810</span>)*x % (<span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic1</span>(<span class="params">x</span>):</span><br><span class="line">    m = bytes_to_long(<span class="string">b&#x27;\x9e\xb0)\x98R\x1c\xb3h&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> f(m,x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic2</span>(<span class="params">x</span>):</span><br><span class="line">    m = bytes_to_long(r)</span><br><span class="line">    <span class="keyword">return</span> f(m,x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kkp_sol</span>():</span><br><span class="line">    x = BitVec(<span class="string">&#x27;x&#x27;</span>,<span class="number">64</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(magic2(x) == bytes_to_long(<span class="string">b&#x27;\x9e\xb0)\x98R\x1c\xb3h&#x27;</span>) ^ bytes_to_long(r))</span><br><span class="line">    sol.add(magic1(x) == bytes_to_long(<span class="string">b&quot;\xd3\xdc\xb4\x83P\xda5\xac&quot;</span>) ^ bytes_to_long(l))</span><br><span class="line">    sol.check()</span><br><span class="line">    <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">kkp_sol()</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(<span class="number">3779692691923971252</span>)</span><br><span class="line">c = <span class="string">b&#x27;B\xf5\xd8gy\x0f\xaf\xc7\xdf\xabn9\xbb\xd0\xe3\x1e0\x9eR\xa9\x1c\xb7\xad\xe5H\x8cC\x07\xd5w9Ms\x03\x06\xec\xb4\x8d\x80\xcb&#125;\xa9\x8a\xcc\xd1W\x82[\xd3\xdc\xb4\x83P\xda5\xac\x9e\xb0)\x98R\x1c\xb3h&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c,key</span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    right = bytes_to_long(c[:<span class="number">8</span>])</span><br><span class="line">    left = bytes_to_long(c[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        left,right = f(left,key)^right,left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left) + long_to_bytes(right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_dec</span>(<span class="params">c, key</span>):</span><br><span class="line">    m = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c) // <span class="number">16</span>):</span><br><span class="line">        m += dec(c[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_dec(c,key))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{F_func_1s_n1t_Ve5y_$EcU%e}</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习了不少，继续加油。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SHCTF-wp-crypto</title>
    <url>/post/11b9531d.html</url>
    <content><![CDATA[<p>大战古典</p>
<span id="more"></span>
<h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="WEEK1-立正"><a href="#WEEK1-立正" class="headerlink" title="[WEEK1]立正"></a>[WEEK1]立正</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意要 正</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wl hgrfhg 4gNUx4NgQgEUb4NC64NHxZLg636V6CDBiDNUHw8HkapH :jdoi vl vlkw  ~xrb wd nrrT Y:</span><br></pre></td></tr></table></figure>
<p>最痛苦的题其中一道。</p>
<p>首先，一眼看不出是什么编码，可以猜测是 rot ，用 cyberchef 爆破一下：</p>
<p><img src="/post/11b9531d/image-20231003161339707.png" alt="image-20231003161339707"></p>
<p>发现一点线索：</p>
<p><img src="/post/11b9531d/image-20231003161404216.png" alt="image-20231003161404216"></p>
<p>可以看到倒过来的 flag ，结合题目”立正”，把他正过来试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7V Qook at _ou&#123;  this is flag7 Em^hE5tERKAf?A@3S303dIWuEK13@K1_RBdNdK1uRKd1 decode it</span><br></pre></td></tr></table></figure>
<p>大概可以看到一段待解密的密文了，现在目标就是解码。可是可以发现，前面还有一段乱码一样的东西，问了出题人，这段也是有用的，所以第一反应是：前面这段可能是密钥，但是尝试了各种解密都不行。</p>
<p>后来发现，这样移动后，解密出的文段有很多不太合理的的地方：</p>
<ul>
<li>flag后面的7，感觉应该是某个符号才对</li>
<li>前面这段没看出任何含义，但是很近似于 Look at you</li>
</ul>
<p>然后觉得，也许移位是在字母、数字之间循环移动的，而不涉及符号，所以重新解密一次：</p>
<p><img src="/post/11b9531d/image-20231003162415082.png" alt="image-20231003162415082"></p>
<p>可以看出，这下的密文明显更合理了。首先，诸如：、~之类的符号更正确；其次中间那段密文有base64编码的样子了。</p>
<p>不过显然还差一点，但如果熟悉flag头的base64的话，可以看出Emxh与Zmxh只差一个大写字母。同时，Look at you变成了Qook at you。而他们与正确大写字母正好都相差6，说明大写字母应该还要循环移动6位，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q Look at you~  this is flag: ZmxhZ8tZMFVfTVU6N636dDRuZF46UF4yMWdIdF4uMFd4 decode it</span><br></pre></td></tr></table></figure>
<p>拿去试着解一下base64：</p>
<p><img src="/post/11b9531d/image-20231003163632938.png" alt="image-20231003163632938"></p>
<p>还是有乱码，不过大概已经能猜到是数字还需要移位了，手动调整一下数字，能发现第一个数字8改为3时，能解密出{，因此数字还需要前移5位，最终的base64如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Q Look at you~  this is flag: ZmxhZ3tZMFVfTVU1N181dDRuZF91UF9yMWdIdF9uMFd9 decode it</span><br></pre></td></tr></table></figure>
<p>base64解密得到flag。</p>
<p>flag：</p>
<p><strong>flag{Y0U_MU57_5t4nd_uP_r1gHt_n0W}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-Crypto-Checkin"><a href="#WEEK1-Crypto-Checkin" class="headerlink" title="[WEEK1]Crypto_Checkin"></a>[WEEK1]Crypto_Checkin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QZZ|KQbjRRS8QZRQdCYwR4_DoQ7~jyO&gt;0t4R4__aQZQ9|Rz+k_Q!r#mR90+NR4_4NR%&gt;ipO&gt;0s&#123;R90|SQhHKhRz+k^S8Q5JS5|OUQZO&#125;CQfp*dS8P&amp;9R8&gt;k?QZYthRz+k_O&gt;0#&gt;</span><br></pre></td></tr></table></figure>
<p>直接丢给 cyberchef 用 magic 就可以出：</p>
<p><img src="/post/11b9531d/image-20231003164606995.png" alt="image-20231003164606995"></p>
<p>flag：</p>
<p><strong>flag{Th1s_1s_B4s3_3nc0d3}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-残缺的md5"><a href="#WEEK1-残缺的md5" class="headerlink" title="[WEEK1]残缺的md5"></a>[WEEK1]残缺的md5</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">苑晴在路边捡到了一张纸条，上面有一串字符串：KCLWG?K8M9O3?DE?84S9</span><br><span class="line">问号是被污染的部分，纸条的背面写着被污染的地方为大写字母，还给了这串字符串的md5码值：F0AF????B1F463????F7AE???B2AC4E6</span><br><span class="line">请提交完整的md5码值并用flag&#123;&#125;包裹提交</span><br></pre></td></tr></table></figure>
<p>md5爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="string">&quot;KCLWG?K8M9O3?DE?84S9&quot;</span></span><br><span class="line"><span class="comment">#F0AF????B1F463????F7AE???B2AC4E6</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic1=string.ascii_uppercase</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> dic1:</span><br><span class="line">	<span class="keyword">for</span> i2 <span class="keyword">in</span> dic1:</span><br><span class="line">		<span class="keyword">for</span> i3 <span class="keyword">in</span> dic1:</span><br><span class="line">			bb=<span class="string">&#x27;KCLWG&#x27;</span>+i1+<span class="string">&#x27;K8M9O3&#x27;</span>+i2+<span class="string">&#x27;DE&#x27;</span>+i3+<span class="string">&#x27;84S9&#x27;</span></span><br><span class="line">			aa=hashlib.md5(bb.encode())</span><br><span class="line">			bbb=aa.hexdigest().upper()</span><br><span class="line">			<span class="keyword">if</span> bbb[:<span class="number">4</span>]==<span class="string">&#x27;F0AF&#x27;</span> <span class="keyword">and</span> bbb[-<span class="number">7</span>:]==<span class="string">&#x27;B2AC4E6&#x27;</span>:</span><br><span class="line">				<span class="built_in">print</span>(bbb)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{F0AF1443B1F463EAFFF7AEBB8B2AC4E6}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-凯撒大帝"><a href="#WEEK1-凯撒大帝" class="headerlink" title="[WEEK1]凯撒大帝"></a>[WEEK1]凯撒大帝</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvkq&#123;mredsrkyxkx&#125;</span><br></pre></td></tr></table></figure>
<p>直接手动调调参数就可以出：</p>
<p><img src="/post/11b9531d/image-20231003173740411.png" alt="image-20231003173740411"></p>
<p>flag：</p>
<p><strong>flag{chutihaonan}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-进制"><a href="#WEEK1-进制" class="headerlink" title="[WEEK1]进制"></a>[WEEK1]进制</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好熟悉的进制，但不知道加密了几层</span><br><span class="line">3636366336313637376236313638363636623661366336383662363136383764</span><br></pre></td></tr></table></figure>
<p>反复转十六进制，这种事交给magic：</p>
<p><img src="/post/11b9531d/image-20231003174722126.png" alt="image-20231003174722126"></p>
<p>flag：</p>
<p><strong>flag{ahfkjlhkah}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-okk"><a href="#WEEK1-okk" class="headerlink" title="[WEEK1]okk"></a>[WEEK1]okk</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.</span><br><span class="line">Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?</span><br><span class="line">Ook. </span><br></pre></td></tr></table></figure>
<p>Ook编码，直接在线网站：</p>
<p><img src="/post/11b9531d/image-20231003175211627.png" alt="image-20231003175211627"></p>
<p>flag：</p>
<p><strong>flag{123456789}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-熊斐特"><a href="#WEEK1-熊斐特" class="headerlink" title="[WEEK1]熊斐特"></a>[WEEK1]熊斐特</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">熊斐特博士发现了一种新的密码。</span><br><span class="line">uozt&#123;zgyzhs xrksvi&#125;</span><br></pre></td></tr></table></figure>
<p>搜索一下就知道，题目名称是在暗指Atbash码，解密即可：</p>
<p><img src="/post/11b9531d/image-20231003175515597.png" alt="image-20231003175515597"></p>
<p>flag：</p>
<p><strong>flag{atbash cipher}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-佛说：只能四天"><a href="#WEEK1-佛说：只能四天" class="headerlink" title="[WEEK1]佛说：只能四天"></a>[WEEK1]佛说：只能四天</h3><p>题目：</p>
<p>hint.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">凯撒不是最后一步，by the way，想想凯撒当年用的什么规格的凯撒密码？</span><br></pre></td></tr></table></figure>
<p>密文.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">陀即我叻我莊如亦婆愍降吽兜哉念色夷嚩喼哉宣宣羅僧慧喼喃塞修菩哉菩哉吶宣囉哆念隸是喃哉嚩是念哉我嘚般訶尊是是闍哉訶咤聞訶念兜喼哉是般哉尊波祗迦念彌哆塞咤寂祗蜜劫塞迦劫諸隸菩哉缽即哉耨若夷夷吽斯空須囉諦諸須塞缽是若咤劫若哉嚴莊須哉闍須叻耨降菩哉般哆哉耨是叻色迦羅缽哉吽哉降聞叻彌蜜彌所斯嚴薩所陀波婆喃夷愍所囉哉叻伏空般耨囉隸劫般夷降嘇慧哆摩我念羅哉摩修叻喼羅般須吶囉尊伏斯若喼羅</span><br></pre></td></tr></table></figure>
<p>题目描述.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">圣经分为《旧约全书》和《新约全书》</span><br></pre></td></tr></table></figure>
<p>熟悉的题目名字，buu上有一道很类似的，所以前几步很好想，新与佛论禅+社会主义核心价值观，得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66767656676661e93ii3i098666766666677f7g39h13gf3g</span><br></pre></td></tr></table></figure>
<p>大概可以看出是16进制，但是出现了g，h，i几个字母，结合题目描述可以推测还用了凯撒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66767656676661b93ff3f098666766666677c7d39e13dc3d</span><br></pre></td></tr></table></figure>
<p>由于知道flag头对应的16进制是66，6c，61，67，所以可以猜测是用了栅栏，手动调一下栏数看看能不能出这个十六进制头，发现可以：</p>
<p><img src="/post/11b9531d/image-20231003180241908.png" alt="image-20231003180241908"></p>
<p>然后十六进制转字符串就好。</p>
<p>flag：</p>
<p><strong>flag{mission_accomplish}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-黑暗之歌"><a href="#WEEK1-黑暗之歌" class="headerlink" title="[WEEK1]黑暗之歌"></a>[WEEK1]黑暗之歌</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：</span><br><span class="line"></span><br><span class="line">⠴⡰⡭⡳⠴⡰⡭⡰⡷⡲⡢⡩⡭⡡⠯⡩⡭⡡⡺⡩⡭⡡⠳⡩⡭⡡⡺⡩⡭⡡⡶⡩⡭⡡⡶⡩⡭⡡⡲⡩⡭⡡⡺⡩⡭⡡⠯⡩⡧⡊⡢⡩⡭⡡⠯⡩⡭⡡⡺⡃⡰⠫⡋⡚⡲⡍⡋⡮⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡃⡴⡵⡋⡁⡬⡵⡋⡁⡬⡵⡋⡁⡬⡳⡋⠲⠴⡯⡃⡗⠴⡰⡭⡴⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡩⡭⡡⡺⡩⡭⡡⡺⡩⡭⡡⠳⡩⡧⡊⡢⡩⡭⡡⠯⡩⡧⡊⡢⡃⡴⡵⡋⡚⡱⠫⡋⡚⡱⠫⡋⡚⡲⠵⠲⡺⠰⠽</span><br></pre></td></tr></table></figure>
<p>明显的盲文，多试几个在线网站，发现这个可以解：</p>
<p><a href="http://www.atoolbox.net/Tool.php?Id=837">盲文点字加密/解密 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></p>
<p>能解出一串base64，扔给cyberchef看看：</p>
<p><img src="/post/11b9531d/image-20231003180528897.png" alt="image-20231003180528897"></p>
<p>音符密码，继续在线网站，就能解得flag：</p>
<p><img src="/post/11b9531d/image-20231003180750086.png" alt="image-20231003180750086"></p>
<p>flag：</p>
<p><strong>flag{b2cc-9091-8a29}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-迷雾重重"><a href="#WEEK1-迷雾重重" class="headerlink" title="[WEEK1]迷雾重重"></a>[WEEK1]迷雾重重</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：</span><br><span class="line"></span><br><span class="line">morse？ASCII？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">密文：</span><br><span class="line"></span><br><span class="line">0010 0100 01 110 1111011 11 111 010 000 0 001101 00 000 001101 0001 0 010 1011 001101 0010 001 10 1111101</span><br></pre></td></tr></table></figure>
<p>用-.替换掉10后，直接 morse 后就能基本得到flag，左右两大括号手动加一下就行，并且转一下小写：</p>
<p><img src="/post/11b9531d/image-20231003181110084.png" alt="image-20231003181110084"></p>
<p>flag：</p>
<p><strong>flag{morse_is_very_fun}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-难言的遗憾"><a href="#WEEK1-难言的遗憾" class="headerlink" title="[WEEK1]难言的遗憾"></a>[WEEK1]难言的遗憾</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：</span><br><span class="line">我们本可以早些进入信息化时代的，但是清政府拒不采纳那份编码规则。 （注：flag为中文，使用flag&#123;&#125;包裹提交）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">密文：</span><br><span class="line"></span><br><span class="line">000111310008133175592422205314327609650071810649</span><br></pre></td></tr></table></figure>
<p>这个描述也很熟悉，估计buu也出现过类似题目，中文电码解码就好：</p>
<p><img src="/post/11b9531d/image-20231003181246659.png" alt="image-20231003181246659"></p>
<p>flag：</p>
<p><strong>flag{一天不学高数我就魂身难受}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-小兔子可爱捏"><a href="#WEEK1-小兔子可爱捏" class="headerlink" title="[WEEK1]小兔子可爱捏"></a>[WEEK1]小兔子可爱捏</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：宇宙的终极答案是什么？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U2FsdGVkX1/lKCKZm7Nw9xHLMrKHsbGQuFJU5QeUdASq3Ulcrcv9</span><br><span class="line"></span><br><span class="line">你可能会需要一把钥匙，钥匙就是问题的答案。</span><br></pre></td></tr></table></figure>
<p>根据题目名可以知道是Rabbit加密(并且密文头部U2FsdGVkX1也能看出是Rabbit加密)，同时宇宙的终极答案是42，这个之前也看到过，当作密钥解密即可：</p>
<p><img src="/post/11b9531d/image-20231003181553457.png" alt="image-20231003181553457"></p>
<p>flag：</p>
<p><strong>flag{i_love_technology}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-电信诈骗"><a href="#WEEK1-电信诈骗" class="headerlink" title="[WEEK1]电信诈骗"></a>[WEEK1]电信诈骗</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好，我是秦始皇，我并没有死，我得到了长生不老药，但是药效有副作用，现在才醒。我刚花了一年在互联网上了解现在的时代，现在我要利用我地宫第四行第七列的无敌兵马俑军队卷土重来，但是我需要启动资金，vivo50作为启动资金，待我横扫天下，封你为大将军，赏你黄金万两！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">050f000a7e407151537802540b747176075178027552756d0256726262627c</span><br></pre></td></tr></table></figure>
<p>最痛苦的题的另一道。</p>
<p>首先观察到，密文为62个十六进制数，因此应该对应flag串中的31个字符。那么题目应该就是对flag串的每个字符作了了某种加密，而关于加密方式的提示应该就在题目描述里。</p>
<p>而题目描述可能有用的信息有以下几个：</p>
<ul>
<li>一年</li>
<li>地宫第四行第七列</li>
<li>vivo50</li>
</ul>
<p>其中，稍微有点思路的就是第二个信息，由这个信息能想到曲路密码或者列移位密码，但是尝试了均不对。那么当成47用，可能能想到rot47，但是仍然不对。继续尝试cyberchef的rot47爆破，还是出不了一点看似有效的结果。</p>
<p>和50结合一下，能想到什么加密呢？可能能想到a=47,b=50的仿射密码，然后模数就用可见字符的范围128，但是也不对，交换一下顺序，或者求一求逆元对应解密，还是不对。</p>
<p>非常的绝望。</p>
<p>要说思路的话，真的就是碰。什么能想到的东西都尝试一遍后，可以在这种尝试方式下发现一点东西：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;050f000a7e407151537802540b747176075178027552756d0256726262627c&quot;</span></span><br><span class="line">tt = [i <span class="keyword">for</span> i <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;¡rhursdy_vv_o&#125;</span><br></pre></td></tr></table></figure>
<p>有一点雏形了，至少看见flag头，说明方向没问题。而长度显然不到预期的31个字符，说明还有不可见字符，先把不可见字符打印成*，然后全部打印出来看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>) &lt; <span class="number">127</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;*r**y_*hursd*y_v*v*_*o***&#125;</span><br></pre></td></tr></table></figure>
<p>其实能看出flag大概说的是什么了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crazy_thursday_vivo_50</span><br></pre></td></tr></table></figure>
<p>那么我们完全可以猜测一下*代表的形近字符(比如，大小写转换，a用4，i用1这种形近字符的相互表示)，比如，猜测第一个字符为C：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="string">b&quot;flag&#123;Cr**y_*hursd*y_v*v*_*o***&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(m[i] - (tt[i]^<span class="number">50</span>),end = <span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印出来的结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">47,47,47,47,47,-47,47,-57,-55,47,47,-60,47,47,47,47,47,-57,47,47,47,-54,47,-53,47,-58,47,-38,-38,-38,47,</span><br></pre></td></tr></table></figure>
<p>那么很明显了，打印出来的不可见字符之所以不可见，是因为他们应该是-47，而不是+47，依照这个逻辑手动调整一下形近字符，直到所有差值都是正负47，那么就是正确flag了。</p>
<p>完整调试过程的脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;050f000a7e407151537802540b747176075178027552756d0256726262627c&quot;</span></span><br><span class="line">tt = [i <span class="keyword">for</span> i <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>) &lt; <span class="number">127</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将上一步的密文，用形近字符进行调试，直至全部为+-47</span></span><br><span class="line">m = <span class="string">b&quot;flag&#123;Cr42y_7hursd4y_v1v0_5o!!!&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(m[i] - (tt[i]^<span class="number">50</span>),end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Cr42y_7hursd4y_v1v0_5o!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{Cr42y_7hursd4y_v1v0_5o!!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-what-is-m"><a href="#WEEK1-what-is-m" class="headerlink" title="[WEEK1]what is m"></a>[WEEK1]what is m</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这串神秘的数字怎么恢复成flag呢</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m =&quot;</span>,m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 7130439814055607156612810766069657529580176956197921317055778195831975924487086273340238725540060289765827225260320612710571684611641625602310966864004750195182916452942079032595376449532285</span></span><br></pre></td></tr></table></figure>
<p>直接long_to_bytes</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="number">7130439814055607156612810766069657529580176956197921317055778195831975924487086273340238725540060289765827225260320612710571684611641625602310966864004750195182916452942079032595376449532285</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;7HERE_AR3_53v3rAl_AL73RNAT1v3S_T0_THe_Ion6_t0_BY7E5_fUnc7ioN_B9A1dd0bb741&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-really-ez-rsa"><a href="#WEEK1-really-ez-rsa" class="headerlink" title="[WEEK1]really_ez_rsa"></a>[WEEK1]really_ez_rsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(m)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 217873395548207236847876059475581824463</span></span><br><span class="line"><span class="comment"># q = 185617189161086060278518214521453878483</span></span><br><span class="line"><span class="comment"># c = 6170206647205994850964798055359827998224330552323068751708721001188295410644</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br></pre></td></tr></table></figure>
<p>就是个RSA算法的实现，给了p、q的话直接解密就好(其实不给也行，p、q很小可以分解)</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">217873395548207236847876059475581824463</span></span><br><span class="line">q = <span class="number">185617189161086060278518214521453878483</span></span><br><span class="line">c = <span class="number">6170206647205994850964798055359827998224330552323068751708721001188295410644</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Y0ung_meiyou_xiaojj&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="WEEK2-XOR"><a href="#WEEK2-XOR" class="headerlink" title="[WEEK2]XOR"></a>[WEEK2]XOR</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">20810298530643139779725379335557687960281905096107101411585220918672653323875234344540342801651123667553812866458790076971583539529404583369246005781146655852295475940942005806084842620601383912513102861245275690036363402134681262533947475193408594967684453091957401932685922178406769578067946779033282889429596341714417295489842047781388337010440309434639274398589029236213499110100040841426995862849012466514170374143655264739023758914247116354182164550612494432327931655944868705959874670536031052370968354394583880324756639698871918124498442308334232127034553164826483441746719644515097123067550594588348951855987</span></span><br><span class="line">c = <span class="number">15294238831055894095745317706739204020319929545635634316996804750424242996533741450795483290384329104330090410419090776738963732127756947425265305276394058773237118310164375814515488333015347737716139073947021972607133348357843542310589577847859875065651579863803460777883480006078771792286205582765870786584904810922437581419555823588531402681156158991972023042592179567351862630979979989132957073962160946903567157184627177910380657091234027709595863061642453096671316307805667922247180282486325569430449985678954185611299166777141304330040782500340791721548519463552822293017606441987565074653579432972931432057376</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p⊕q = <span class="number">66138689143868607947630785415331461127626263390302506173955100963855136134289233949354345883327245336547595357625259526618623795152771487180400409991587378085305813144661971099363267511657121911410275002816755637490837422852032755234403225128695875574749525003296342076268760708900752562579555935703659615570</span></span><br></pre></td></tr></table></figure>
<p>给定p与q的异或求n的分解，在我另一篇剪枝文章中有讲(第二题的第一部分)：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/342113ee.html#more">Crypto趣题-剪枝 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">20810298530643139779725379335557687960281905096107101411585220918672653323875234344540342801651123667553812866458790076971583539529404583369246005781146655852295475940942005806084842620601383912513102861245275690036363402134681262533947475193408594967684453091957401932685922178406769578067946779033282889429596341714417295489842047781388337010440309434639274398589029236213499110100040841426995862849012466514170374143655264739023758914247116354182164550612494432327931655944868705959874670536031052370968354394583880324756639698871918124498442308334232127034553164826483441746719644515097123067550594588348951855987</span></span><br><span class="line">c = <span class="number">15294238831055894095745317706739204020319929545635634316996804750424242996533741450795483290384329104330090410419090776738963732127756947425265305276394058773237118310164375814515488333015347737716139073947021972607133348357843542310589577847859875065651579863803460777883480006078771792286205582765870786584904810922437581419555823588531402681156158991972023042592179567351862630979979989132957073962160946903567157184627177910380657091234027709595863061642453096671316307805667922247180282486325569430449985678954185611299166777141304330040782500340791721548519463552822293017606441987565074653579432972931432057376</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = <span class="number">66138689143868607947630785415331461127626263390302506173955100963855136134289233949354345883327245336547595357625259526618623795152771487180400409991587378085305813144661971099363267511657121911410275002816755637490837422852032755234403225128695875574749525003296342076268760708900752562579555935703659615570</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1,剪枝</span></span><br><span class="line">gift = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(gift)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c,d,pp*qq))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(gift[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;7428fbd7-639b-11ee-b51b-64d69af3cb76&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-easymath"><a href="#WEEK2-easymath" class="headerlink" title="[WEEK2]easymath"></a>[WEEK2]easymath</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">seed = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">prng</span>:</span><br><span class="line">    n = p</span><br><span class="line">    a,b = [randint(<span class="number">2</span>, p - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed</span>):</span><br><span class="line">        self.state = seed</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = (self.state * self.a + self.b) % self.n</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    gen = prng(seed)</span><br><span class="line">    s = [seed]</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    json.dump(s,f)</span><br><span class="line">    f.close()</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(gen.<span class="built_in">next</span>())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[288530505749272642500730917886204398531, 63547143998110685331032679758907988154, 15151206512028268617888756820805603406, 268092204209244869520724955865278855216, 261067075335188593563542448889694952077, 138067838531633886698552659065694918861, 201319433320428898153580935653793106657]</span><br></pre></td></tr></table></figure>
<p>题目基于一个LCG，给定连续七组LCG生成的随机数，要求求出下一个生成的伪随机数。这里简单推导一下吧，因为我好像还没有写过这个如何求解：</p>
<p>已知：</p>
<script type="math/tex; mode=display">
s_i = a*s_{i-1} + b\quad(mod\;n)</script><p>那么我们取几组进行两两作差，会发现：</p>
<script type="math/tex; mode=display">
s_{i+2}-s_{i+1} = a*(s_{i+1}-s_{i})\quad(mod\;n)</script><p>可以发现，如果把连续两项的差当作数列的项，那么这其实是一个模n下的等比数列，公比是a。我们就可以依据这一点进行模数n的恢复。</p>
<p>因为：</p>
<script type="math/tex; mode=display">
s_3-s_2 = a*(s_2-s_1)\quad(mod\;n)</script><script type="math/tex; mode=display">
s_4-s_3 = a^2*(s_2-s_1)\quad(mod\;n)</script><script type="math/tex; mode=display">
s_5-s_4 = a^3*(s_2-s_1)\quad(mod\;n)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
(s_5-s_4)*(s_3-s_2) = a^4*(s_2-s_1)^2 \quad (mod\;n)</script><script type="math/tex; mode=display">
(s_4-s_3)^2 = a^4*(s_2-s_1)^2 \quad (mod\;n)</script><p>所以有：</p>
<script type="math/tex; mode=display">
(s_5-s_4)*(s_3-s_2) - (s_4-s_3)^2  = kn</script><p>同理：</p>
<script type="math/tex; mode=display">
(s_4-s_3)*(s_2-s_1) - (s_3-s_2)^2  = kn</script><p>因此求解2者gcd，并去除一些小因子即可得到n，得到n后a、b恢复很容易，就不展开讲了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">c1,c2,c3,c4,c5,c6,c7 = [<span class="number">288530505749272642500730917886204398531</span>, <span class="number">63547143998110685331032679758907988154</span>, <span class="number">15151206512028268617888756820805603406</span>, <span class="number">268092204209244869520724955865278855216</span>, <span class="number">261067075335188593563542448889694952077</span>, <span class="number">138067838531633886698552659065694918861</span>, <span class="number">201319433320428898153580935653793106657</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求m</span></span><br><span class="line">t1 = c2-c1</span><br><span class="line">t2 = c3-c2</span><br><span class="line">t3 = c4-c3</span><br><span class="line">t4 = c5-c4</span><br><span class="line">T1 = t4*t2 - t3*t3</span><br><span class="line">T2 = t3*t1 - t2*t2</span><br><span class="line">m = gcd(T1,T2)</span><br><span class="line"></span><br><span class="line">m = <span class="number">312769358113056565136009929613710078319</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求a,b</span></span><br><span class="line">a = inverse((c2-c1),m)*(c3-c2) % m</span><br><span class="line">b = (-a*c2 + c3) % m</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="built_in">str</span>((a*c7+b)%m) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;302184756857257140159769321021979097116&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-ez-rsa"><a href="#WEEK2-ez-rsa" class="headerlink" title="[WEEK2]ez_rsa"></a>[WEEK2]ez_rsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag[:<span class="number">19</span>],<span class="string">&quot;big&quot;</span>)</span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(flag[<span class="number">19</span>:],<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">n = prod(primes)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"></span><br><span class="line">p = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">e1 = <span class="number">13</span></span><br><span class="line">e2 = <span class="number">15</span></span><br><span class="line">n1 = p * q</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e1, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m1, e2, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>, e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>, e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 28535916699190273475273097091422420145718978597126134891571109006456944397344856577421369324831702083810238921719657496747722337086131545474384253288151783029981352196506749672783866527948391034258269669654392993063423671431837882584570973320095601407578443348352802850496429240170710269529489900871208384711844617081275862971410246759090936379744946527813691945129059991795202769186014306943707223831130752782380563227353615164053563120572722464543812139164048342504963081408349934180883607554389607335607410546630525512019818062185681153477671373000186961748278118124044645584490544698827467815360888525822167</span></span><br><span class="line"><span class="comment"># n = 114107341297408283801468814470303963122122556489590451040619457052827864984505912502462030175984161431709841571908269123131659496812467145870607611968843929870716066046232009282431653653484798819370087696248364531531706249180822839879862098012984590503284615395588919199545142177727328844260380842155437987767067800740569616584597507776426572206990858918111272636507821551592564540694671795374831548677720629329358177802890287837056940407030212276399942462042866947423728888561392653713356355778914658317507319575084393752755452971007289968044006561357799908892371839922838486713582082980752194204224263283004373</span></span><br><span class="line"><span class="comment"># n1 = 21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line"><span class="comment"># e1 = 13</span></span><br><span class="line"><span class="comment"># c1 = 5640630966585093229374938575158853304507369792931959909038819773057666482368490365383634362421839045569190487785222799103423460816096797210546343809620912249021763787314569982909943181390882015170344954037813745251119237402775124991005154299085147091159741067430623420349690886728161235034687649593258746455165172528681627568611599473627285223154284756417744280966157271904828156564067870877521824545300153084830020169048653830385763172792698591998191641849931039720453035065355411394516308865955772746815765864888631258825704788352584540380169938419618543124830541663995097651872542381</span></span><br><span class="line"><span class="comment"># n2 = 21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line"><span class="comment"># e2 = 15</span></span><br><span class="line"><span class="comment"># c2 = 5481001445755770090420425478456880914921441486935672376394423326451811448703288166341447356603281843336826624725965666634194700496514262129376916108926167953996689011980280761368893884042609095616407660087448963015169181749124738976578495911295096014725354350167650232970262765851074146687931181216305972147994236689422572940877763047930111954798962097847426932730342258169023809341164876019161104439561164839132092594444017039073155506935768658830659965630065643619399324102814118128802834719820426253836317043818687888302054465994498115387703382090351794495827905499417861507007863378916334790750453883661675063377</span></span><br></pre></td></tr></table></figure>
<p>第一部分可以直接factordb分解出小因子，然后多素数RSA求解。第二部分共模攻击。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#yafu</span></span><br><span class="line">c = <span class="number">28535916699190273475273097091422420145718978597126134891571109006456944397344856577421369324831702083810238921719657496747722337086131545474384253288151783029981352196506749672783866527948391034258269669654392993063423671431837882584570973320095601407578443348352802850496429240170710269529489900871208384711844617081275862971410246759090936379744946527813691945129059991795202769186014306943707223831130752782380563227353615164053563120572722464543812139164048342504963081408349934180883607554389607335607410546630525512019818062185681153477671373000186961748278118124044645584490544698827467815360888525822167</span></span><br><span class="line">n = <span class="number">114107341297408283801468814470303963122122556489590451040619457052827864984505912502462030175984161431709841571908269123131659496812467145870607611968843929870716066046232009282431653653484798819370087696248364531531706249180822839879862098012984590503284615395588919199545142177727328844260380842155437987767067800740569616584597507776426572206990858918111272636507821551592564540694671795374831548677720629329358177802890287837056940407030212276399942462042866947423728888561392653713356355778914658317507319575084393752755452971007289968044006561357799908892371839922838486713582082980752194204224263283004373</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primes = [<span class="number">14147604789494386003</span>,<span class="number">16946507762934111301</span>,<span class="number">17075632607344331131</span>,<span class="number">9281508366366115669</span>,<span class="number">10040612110882504553</span>,<span class="number">9356350172425710359</span>,<span class="number">15622487550947237203</span>,<span class="number">10436802938040427139</span>,<span class="number">11777892065426651999</span>,<span class="number">10100522426677320149</span>,<span class="number">17088379813205887661</span>,<span class="number">16880270107514803247</span>,<span class="number">9723861249937499279</span>,<span class="number">10203735303764112277</span>,<span class="number">13498192768855092449</span>,<span class="number">11502613740816749197</span>,<span class="number">9261040693807289549</span>,<span class="number">11964584391817142269</span>,<span class="number">10270880245559150279</span>,<span class="number">16340211116882594287</span>,<span class="number">10126802520926958821</span>,<span class="number">15774106340553595249</span>,<span class="number">10635881647150245973</span>,<span class="number">12712357180113548549</span>,<span class="number">14198042938738648387</span>,<span class="number">15616762946597906161</span>,<span class="number">10986943768724409089</span>,<span class="number">13428970346605599557</span>,<span class="number">16651625235320957803</span>,<span class="number">11718181938374860349</span>,<span class="number">13618885037077024279</span>,<span class="number">10621161426185076191</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes:</span><br><span class="line">    phi *= (i-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#共模</span></span><br><span class="line">n1 = <span class="number">21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line">e1 = <span class="number">13</span></span><br><span class="line">c1 = <span class="number">5640630966585093229374938575158853304507369792931959909038819773057666482368490365383634362421839045569190487785222799103423460816096797210546343809620912249021763787314569982909943181390882015170344954037813745251119237402775124991005154299085147091159741067430623420349690886728161235034687649593258746455165172528681627568611599473627285223154284756417744280966157271904828156564067870877521824545300153084830020169048653830385763172792698591998191641849931039720453035065355411394516308865955772746815765864888631258825704788352584540380169938419618543124830541663995097651872542381</span></span><br><span class="line">n2 = <span class="number">21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line">e2 = <span class="number">15</span></span><br><span class="line">c2 = <span class="number">5481001445755770090420425478456880914921441486935672376394423326451811448703288166341447356603281843336826624725965666634194700496514262129376916108926167953996689011980280761368893884042609095616407660087448963015169181749124738976578495911295096014725354350167650232970262765851074146687931181216305972147994236689422572940877763047930111954798962097847426932730342258169023809341164876019161104439561164839132092594444017039073155506935768658830659965630065643619399324102814118128802834719820426253836317043818687888302054465994498115387703382090351794495827905499417861507007863378916334790750453883661675063377</span></span><br><span class="line">d,x,y = gcdext(e1,e2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c1,x,n1)*<span class="built_in">pow</span>(c2,y,n1) % n1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;05929ec9778ed739d94ee1a77b742714&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-e？"><a href="#WEEK2-e？" class="headerlink" title="[WEEK2]e？"></a>[WEEK2]e？</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个e好像不对，你能找到正确的e吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= <span class="number">70724362259337647663584082414795381346569735601816096923682814277857463878289</span></span><br><span class="line">q= <span class="number">114427188167532721707398034034072867253267857672869034942206947096293901917007</span></span><br><span class="line">e= <span class="number">1314</span></span><br><span class="line">c= <span class="number">4308122681135507736058122041934864039713319497673888928736468819190185301630702240416683093700232966794026900978699666246019059398861283337865339404916304</span></span><br></pre></td></tr></table></figure>
<p>经过测试可以发现，e与phi有公因子2，因此无法直接求逆元，所以需要做如下处理：</p>
<script type="math/tex; mode=display">
(m^2)^{\frac{e}{2}} \equiv c \quad(mod\;n)</script><p>由于e/2与phi互素，因此可以直接求逆元进行RSA解密，求出来的明文是m^2，考虑到明文较短因此可以直接开根。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p= <span class="number">70724362259337647663584082414795381346569735601816096923682814277857463878289</span></span><br><span class="line">q= <span class="number">114427188167532721707398034034072867253267857672869034942206947096293901917007</span></span><br><span class="line">e= <span class="number">1314</span></span><br><span class="line">c= <span class="number">4308122681135507736058122041934864039713319497673888928736468819190185301630702240416683093700232966794026900978699666246019059398861283337865339404916304</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">2</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(<span class="built_in">pow</span>(c,d,n),<span class="number">2</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;This_e_is_real_or_not&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-factorizing-n"><a href="#WEEK2-factorizing-n" class="headerlink" title="[WEEK2]factorizing_n"></a>[WEEK2]factorizing_n</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分解n试试？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">226515252384227990547287743140613580056836242860947832749754689048997071950972581790210817523352001702907675581567498443649554801433663166425134375454937126656357069687274036935331269594383360450823787099121079436459236734336130768046337169817940540921822023269188752420603975467384377614321048859304185067329741055517464271746238143742661897809442359331215501438861121047081117632626097939097519866099140569819965948998542652908170134545593659233229897003698175558888336706474178958535138595687148003367152624421106553412886263257022809480187410133186189435436294593588009551451899398811758511878324326255293307347560753524372663257044426744744426759970254203341706284024734042826158828749144322843934985927079504722440497388146240627249465363931951790326885478025237643</span></span><br><span class="line">c = <span class="number">52409805591744226507807531465616894934028463651864630447934395956954575834603756391651746535033902964658694070544877880970130028487381287088425209448038533705903737694267359561133766799228825599943891152463160326583722749586721691729062524310148743637505134465210906856660867852927837112666513674858029892207902196213784902541173835447263733760225682942461048573387925463479672527491229113710629340960375692432470493054415657845868577650170648157402682163577152288432313996310562452677399267755695644659367792066311336521698894993982901657735586844358679888210537898629281625526455444811591386493005341435516094660429968084363084301878446471676122069724608083578102382181382107225473535696274374370868301830807644939881080301668756603163431000745972823980427048672732291</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure>
<p>yafu分解一下就能得到n的分解，直接解密即可(主要注意phi的求法)。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">226515252384227990547287743140613580056836242860947832749754689048997071950972581790210817523352001702907675581567498443649554801433663166425134375454937126656357069687274036935331269594383360450823787099121079436459236734336130768046337169817940540921822023269188752420603975467384377614321048859304185067329741055517464271746238143742661897809442359331215501438861121047081117632626097939097519866099140569819965948998542652908170134545593659233229897003698175558888336706474178958535138595687148003367152624421106553412886263257022809480187410133186189435436294593588009551451899398811758511878324326255293307347560753524372663257044426744744426759970254203341706284024734042826158828749144322843934985927079504722440497388146240627249465363931951790326885478025237643</span></span><br><span class="line">c = <span class="number">52409805591744226507807531465616894934028463651864630447934395956954575834603756391651746535033902964658694070544877880970130028487381287088425209448038533705903737694267359561133766799228825599943891152463160326583722749586721691729062524310148743637505134465210906856660867852927837112666513674858029892207902196213784902541173835447263733760225682942461048573387925463479672527491229113710629340960375692432470493054415657845868577650170648157402682163577152288432313996310562452677399267755695644659367792066311336521698894993982901657735586844358679888210537898629281625526455444811591386493005341435516094660429968084363084301878446471676122069724608083578102382181382107225473535696274374370868301830807644939881080301668756603163431000745972823980427048672732291</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">11776588228599764849559519654482976956833367474471407292255776713760090338489966385328569279135095351660161277221351884258247731394014018172166064062551483</span></span><br><span class="line">phi = p**<span class="number">4</span>*(p-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;1f95f530f85b940db810fc917607ee22&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-哈希猫"><a href="#WEEK2-哈希猫" class="headerlink" title="[WEEK2]哈希猫"></a>[WEEK2]哈希猫</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我翻开 task.py 一查,这题目没有 flag 歪歪斜斜的每页上都写着 ‘哈希算法’ 几个字.我横竖睡不着,仔细看了半夜,才从字缝里看出字来,满本都写着 ‘flag’ !</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">43</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">0</span>:<span class="number">2</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">2</span>:<span class="number">4</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">4</span>:<span class="number">7</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">7</span>:<span class="number">9</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">9</span>:<span class="number">12</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">12</span>:<span class="number">15</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">15</span>:<span class="number">17</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">17</span>:<span class="number">19</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">19</span>:<span class="number">22</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha224(flag[<span class="number">22</span>:<span class="number">24</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">24</span>:<span class="number">27</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">27</span>:<span class="number">29</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">29</span>:<span class="number">31</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">31</span>:<span class="number">34</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">34</span>:<span class="number">37</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha224(flag[<span class="number">37</span>:<span class="number">39</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">39</span>:<span class="number">41</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">41</span>:<span class="number">43</span>].encode()).hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># e4efb4b4173a7e1e48d041cf16a79dea8d8a8885bb53cf028cd6f2b04b7546dbac7eb625dcb0737e4c6d438e00b46c16e489a689561c90491c34ab551bcb6329</span></span><br><span class="line"><span class="comment"># 88f76ff534f98621c41ab3319c62b95d34d602c6aa1ca20c926e2b9d196b934bf1b4c605893af0f9bbca61f496059500</span></span><br><span class="line"><span class="comment"># 588eb0942e37e1be94fcdf2b0d8260be88dda77b</span></span><br><span class="line"><span class="comment"># 3d5cb76279ef4b54c762a970fddee3a368aac8aaf8128898d15619017ba536819d88d3e80f3cf19649017c0f29eeeeb6</span></span><br><span class="line"><span class="comment"># 753949498cf8ca385fcf6cbd4797331d731b4aed</span></span><br><span class="line"><span class="comment"># 543d9f2bfd7f91ca63ab9d2d1b6c6fa48c45a7b0</span></span><br><span class="line"><span class="comment"># e736042cf8eaf7bf5b36f34af1ed40626beb74d923edbc8fdf6557189eea661d2c0e6fba0e88815e7d33f489aa75f8164fad1339fa915fcad378be4db03a3a8e</span></span><br><span class="line"><span class="comment"># 83e281865c566b69002e9753b95eab6df6ac067aa5fe6ea23b75dc679930aa554cd640c78cd1948e010a67e92943f911</span></span><br><span class="line"><span class="comment"># 9bbecb5acecd2544a3ce6fec4dfe5028</span></span><br><span class="line"><span class="comment"># 5598556fc00e3641a3a9fa69182e7f6a8107c9148f248b92a51f1a77</span></span><br><span class="line"><span class="comment"># e48f4614ffffb205e7ec2c80b4a9b9daa8a18994</span></span><br><span class="line"><span class="comment"># 8c4020c5d668c1fe7ccd43e4ba87b6fb89e289dd7c8aefa9a5ca504c83b017f9386494f35d543b5c8cc7065dad2ee70c</span></span><br><span class="line"><span class="comment"># bedbb9deb2d89f624398980d912909a1ccfd01126f6f6328ac10c667e6f522278e565d0d455b2d4883ec36e4506822b2a08110e2e677c2733110984ba666ae8f</span></span><br><span class="line"><span class="comment"># 7db183c15847634a301761dc8b88e035</span></span><br><span class="line"><span class="comment"># c4be70ae961735e9b11c19ed9dccc743</span></span><br><span class="line"><span class="comment"># b7fb4ba19da64864938455118696a126af53a51968215b41bed8686b</span></span><br><span class="line"><span class="comment"># ecc1d2c145955b841c7755e435dace6472ebaa684d8a03ed56274fabaf90ecbc4b392af5fb9d1555ecc5d3f020ba083445983b6c78e13384a8676fb0f8eeaaaa</span></span><br><span class="line"><span class="comment"># 9ad3285ba2ed40f7b805800f927766fc</span></span><br></pre></td></tr></table></figure>
<p>每一部分被hash的明文都较短，因此直接爆破。exp偷懒了，直接全爆破了一遍，因为也不慢。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">table = string.printable</span><br><span class="line">hashes = [<span class="string">&quot;e4efb4b4173a7e1e48d041cf16a79dea8d8a8885bb53cf028cd6f2b04b7546dbac7eb625dcb0737e4c6d438e00b46c16e489a689561c90491c34ab551bcb6329&quot;</span>,<span class="string">&quot;88f76ff534f98621c41ab3319c62b95d34d602c6aa1ca20c926e2b9d196b934bf1b4c605893af0f9bbca61f496059500&quot;</span>,<span class="string">&quot;588eb0942e37e1be94fcdf2b0d8260be88dda77b&quot;</span>,<span class="string">&quot;3d5cb76279ef4b54c762a970fddee3a368aac8aaf8128898d15619017ba536819d88d3e80f3cf19649017c0f29eeeeb6&quot;</span>,<span class="string">&quot;753949498cf8ca385fcf6cbd4797331d731b4aed&quot;</span>,<span class="string">&quot;543d9f2bfd7f91ca63ab9d2d1b6c6fa48c45a7b0&quot;</span>,<span class="string">&quot;e736042cf8eaf7bf5b36f34af1ed40626beb74d923edbc8fdf6557189eea661d2c0e6fba0e88815e7d33f489aa75f8164fad1339fa915fcad378be4db03a3a8e&quot;</span>,<span class="string">&quot;83e281865c566b69002e9753b95eab6df6ac067aa5fe6ea23b75dc679930aa554cd640c78cd1948e010a67e92943f911&quot;</span>,<span class="string">&quot;9bbecb5acecd2544a3ce6fec4dfe5028&quot;</span>,<span class="string">&quot;5598556fc00e3641a3a9fa69182e7f6a8107c9148f248b92a51f1a77&quot;</span>,<span class="string">&quot;e48f4614ffffb205e7ec2c80b4a9b9daa8a18994&quot;</span>,<span class="string">&quot;8c4020c5d668c1fe7ccd43e4ba87b6fb89e289dd7c8aefa9a5ca504c83b017f9386494f35d543b5c8cc7065dad2ee70c&quot;</span>,<span class="string">&quot;bedbb9deb2d89f624398980d912909a1ccfd01126f6f6328ac10c667e6f522278e565d0d455b2d4883ec36e4506822b2a08110e2e677c2733110984ba666ae8f&quot;</span>,<span class="string">&quot;7db183c15847634a301761dc8b88e035&quot;</span>,<span class="string">&quot;c4be70ae961735e9b11c19ed9dccc743&quot;</span>,<span class="string">&quot;b7fb4ba19da64864938455118696a126af53a51968215b41bed8686b&quot;</span>,<span class="string">&quot;ecc1d2c145955b841c7755e435dace6472ebaa684d8a03ed56274fabaf90ecbc4b392af5fb9d1555ecc5d3f020ba083445983b6c78e13384a8676fb0f8eeaaaa&quot;</span>,<span class="string">&quot;9ad3285ba2ed40f7b805800f927766fc&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_hash</span>(<span class="params">msg,i</span>):</span><br><span class="line">    <span class="keyword">if</span>(sha512(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha384(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha1(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha224(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(md5(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hashes)):</span><br><span class="line">    has_found = <span class="number">0</span></span><br><span class="line">    <span class="comment">#一个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">if</span>(find_hash(j,i)):</span><br><span class="line">            has_found = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#两个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">if</span>(find_hash(j+k,i)):</span><br><span class="line">                has_found = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#三个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">if</span>(find_hash(j+k+m,i)):</span><br><span class="line">                    has_found = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#四个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> table:</span><br><span class="line">                    <span class="keyword">if</span>(find_hash(j+k+m+n,i)):</span><br><span class="line">                        has_found = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;You&#x27;VE_cOme_to_unD3R5t4nd_HA5h_a196zTz83fOg&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="WEEK3-Classical-Master"><a href="#WEEK3-Classical-Master" class="headerlink" title="[WEEK3]Classical Master"></a>[WEEK3]Classical Master</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag格式：flag&#123;xxx&#125;</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> s</span><br><span class="line">s = s.lower()</span><br><span class="line">keyM = [?]</span><br><span class="line">l = <span class="built_in">len</span>(keyM)</span><br><span class="line"><span class="keyword">assert</span>(math.gcd(l,<span class="number">26</span>)==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(s[i])*l-<span class="number">97</span>+(keyM[i % l]))%<span class="number">26</span>+<span class="number">97</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#uvgbdzbihyfxvqipvvwxqnpwybaomhnibglpncsdohyespkglzbbfpgwxjsludjcyesphzlcsznuflejzezmnqpktbjbbajocrqlfzogrpuzwesgqbvhvzpongpdbewtihwvuwrgrzbmudnuaxgzgcknydxhhlqguabnjhczkrfjmxbtavbeennkojetoqtpqlwwupkorramvwhhngyytwzybtriaaxgaodzhzvypiszcmbwchuwrjjfdzqpgvbigxsdzfbbgfyzypiblpflirexudlhfvgpebazjwbabglrorulkzpquvgbdzttgittuxgaodkphelvcpepubfuirzaarfdgzevjxmiwhqtgvnbhqspxlagpluwrrrhshshpptrrpaxozjkdkrbvolwwevbojerxvaghmyvlchzmizeflyytvpqbhwnsxwtvojzhenjozircttqqbcgxgabytqvhlyjcjfoopdrsyhlaokbpweecrbfpyqwjtcxjgzcskojorejtpnokoptlfyzypibsrnkpgjrudkojhchqtgnybpsbcxmzaodoxppkevbpqlzorkrfgzhcxsnedkoaarypoptnanxeaodbpwesbrcjxvagebuazlqpbkojbuwrgpsjozefxwzogfvwnzcrogcyhhipwejfylvottgirfhgtaoqhbfccpelqnxzxrelcpcxfkhujtbwjxynyatvvjyrggppzhjfleknapsohrfwxjsludwnibglrghzcaajfxgzfbhykspijyenndcbkdtuxpozqxohtdapmziujgzhnrkczerpunyhuvazqhqjqjmthmorzmihwctnjcbpsbpehccxyjfvhcubyzdsjsdknhpwargcpvabwvwxjsludazxvcxjojflazjquvbfqzobzeespibpqvjlnvcyrijqlzzrzppicrwujzeqrfjgrkdfqbetkglzruohadypgexuttfybvxmiiuvwlbmkppjyzhixbuklllghnbnderaaarfkjwpljhmcxqkbfdqkhnaanorhruuwizpzmtnedgeybiyvwhhtwxemrtjwwthvvpcrimopodhxmcgudjrhpgyjsrmdwqqvhvqirclsyivjhmcyhzjuyvgvcarfububklnhlqgbbhtqrzxgrqkjcthojpcehtjuyedzrcrphihhdkoaajczzqpcdzhaxgvghhgrcryruwvqbcturoxqmihipmjefxsdkhwqdydfrqttqqngzdbqgjkqjkuhbtjrxzqaittalvhmihriuvckzqvbcnvwveozqxohrzunmtwhqtcqdjyrcxlqbpsvuwrzqzibvbqhvcbqgmohjttwlogudqtjdynjrehfvzwvaxmzmzjwyidgyjrxgstcengphtrvbtoralojyrwlzpebghxoiglwqbesxpoxquahrtlebtmnttxppkepckhhhrjespngrpmbfsbwvqlwhmohjttkglmqqvqqespngrpmbfsbwnzsrfnjcrqawxjhzcaqqnjirbvljlyinjwricnqtoralkrlaodoqqvzkxjqhsxhebyyytriububvgtrcxphizjalyytnudjqevjnzogpcohrkxhybwhbkbtokpglmzzwnwdgtrbmwojgivghmcxyjhghbwnrscyvktsclxmrhhqtfhnvgqtjxvagnbvzrovhnnkppykrflcdwldfepetgxvkojnuwrgaodrhbrsyxelcybljtjxeffcjrgjkhpxgaodipekdtzkxsnbpenglqtpfdcyjidpmxrclkbwvtoetzwpiphtfgisjhslhznuwfoxxcbwfvtkglmfmtcnewxepehlkhwesxmbmtwbphedkaarsjohhetkgcyhijgdvraruihqthezlhpzwhqopsvajpnzgcnavbkebtmxkhcpkbhptqtlwwhmlxfrabutwihdkaglqkbiavyhrovhmbpnclnaaxujvdquxbrcyhqfndijpxejcbkudzuhxoghihbwtvpmrdhlofhbuwryzgxbnuclcqtpfjwfynvhmlpodzxbesyytaznbcjzlnpbetmhpnxfhetyhqzyjzdxqjjfshrsclpmiczyqfbebxpcrwjwwjdazrocbqkojivvetriububvgtrlpljlyritiqtanojfqnrkzozlmtneesxakenibwhpptrrpsxaqpktbhlqgwbbelrcfbkgdjcynvgebvqvfpierzxgenthcihccjovzuahhvgelgrpyqqqvjpjoxxuhfhvjnczeqkbgrljyybaxvagivtebtanzohregpprzudfneethmtgzykojlrcgrxsmihhvjtezqgbroreuwrfhzcaqjdpwbtjfnhujergetwhyksrnkjetaolwqprthmrllhbfhgrchazqvzfdzppprxqkbusctkzrapmbnufdkgjyzhiqzbtzxonpminddgehlphnbcznkogtczybfdzppprjcmihhdvphzewbnhsgthqnehvzpiltbpirfhozcvailcxcdrpvgthqnehvzrrqjhmbkzctqvercrbvoktffbtoplmgvmhzctyryrumihvftbktjcmobscuwrzmgpqzuglcrovhwbqzvlkaaxfdropcturezzcbwrqayyzphtinqdqppnvldzfjkkhrrjcmihynwargrchbnuespjgypwtqhrrvgazavkfrilyytfhpknruknlxvhbzarksxklaflohscljmsxlrbwybrcazcpvabwvuwlraodmzwtuozjjxvagpolbhajlksujzlercypcansclcplpzttgigrcbpxnsipcnunzogadfntvuwrlefcjmjdjxvajgstxrtjozyrqjltbfcjqrrfyhxbdvnqbwhmhrvctijcppbjujdkongxxylhensxwtpbqoheklcribtoohjldoqcxqkbtjdynxezlhvrdutyriypwtqhdgeaarylzqyvlepzcrpazuvsxwtzgqbpyhvxehrwjvqrmtyyjyzhiqqilxatmfmhztmyhpzmrpmbspypbfzlmtnettcrglgdqavdcgrcjqdsphtdvmkehgvwbzlletrwchmjglxetmmvoneflkaazavkpekuwrjxubknuespptatqjcstdnybkzmkojilaxgrzotrdtuirbpglghsbsxklagdkrjolxpszmdknfbreybkzmzrvoteybkzmzrdtuirirfmonvvaxmimhtmbwirfpkehujujkwvepxnszhjkdfjsqsjorfbreybkzmzpekepvzbhmihbijozyrpyqoplbhqsjphfntmkhpaaovzwbgwhvnqqobpsescxnnomihhvjtezqgbtqznkoktgnybspilxvaplqhgizrkabjcbjywngtjkqhtizncbhqsguvghroteybkzmmupfvbqlchlwwwvcozxrzmrzscrkrjyzhixbukielmdnblibjpecxfxfljtjaxgjqvzpebuwrgxsyjqdilnqbhfmipsbgodbypwtqndgnlmgbdjcpespeazavkfpngveiruohusclnrjezmkhelrcgranubuubyzaarzqfoptlkabpvvlbheahpxjyctcjfxnrscxvkosclajgpqjmrvqlfybkzmzxqnpwjrzfohgibbnjjjgcohrklxvaplqhgigrcaajumnwrhjhmcyzbsujtpcjmrwnjcevyirexudtywbpprianmihevmypxencasbijyjjjgcohrkuwrjxuszzetdorovhtihentcjrrqkbcbldoqgrpskojlrcgrjcbtgjqppzeahqtoralgzgaprbcpgvbblgwlnrjdkozrazttgiilxgcyhthuyttlzlmkxzqcvwvetjudkzwvtygbdfdwwrqazxraznsnwetkazmqktfpzpxplxcvrziuypziaodrnwkjxqzlwjwqqvgpscgpptxbukcrkrpmkobtccxxrwxohrqahhlqghhcsngjrlmgvphtdgkrgcnqkobiubgbdfmihenbhqsabqwqpespmtsqbfupukxmiehubpseshpkenhbwdilaxgzcjkojiuwjgatsjthnbhqsvnykzeplhmcyzblpeqlcloazctoralojyrwttqqvttyrvujagubyyyleqpqpvttkgddudjwbqhwzrkhhhrjctijczcsrorebhqskhlflpfcojryhsrzscuwjrypwtqqvypjoqzdzqqvshgircbblwvuvcbqgnjchdptxdigvzotvgypbpzqbyjduyythnqqfyddodcyhprziujvxokhhhrjdcxecxsnnpnedurdjcsubsfrcrlbyjoqrquyytdxvagrujvptryvwqpfxvaaruntcyesxaddfmbubbfnpzluhbxqnpwmtwhqzgjvcnhajlkfujduppddwqbptttkgzcqdwrrjlnbtzlmtczdxnjixcjklpfccrarcsjfsclfxggfjmqqvjppxencafriltxopbnbwchvbbfpqdozppjzjogzttgiolljoanlrpxvlxvabnqwzerbhaazmvkpinubjazmdwhovydmzhcwbspilzdyjdjoxbukhmxehlzhthlkaalfvjftldoqgjfdltyvjhetannbhsesphzegsrziururgvnnbhovybctzuvhcnvzkrjzqbvcwnjpzogzttgiolwzkizdoqqdghryruwbgbvqpglayjzfbokpazkhvwqqnjfxgqwjmfsidarbmwbhuwbbpwtmqxjgihdfjsqsvwwthjpqeehlfqbqhyxbqgbtqdduhxopxktlqzrkcgxcmlhrtdfzrvnnlpeklejoaodzlwbkopcxudjlsdgepzxcmihhvttalxcbjcyilxvcjnyzxbukirxxrdbphhuvitesjorubyxmfzlmrzsccczxazhbajzrzrrrpbnqqpjxmthpyqdpbawzmjqvzapigaxghodwpedpyktvnnbfjdjbaaenxxonbgnabmqqbyjedyxojqwblpflnzkqhlzbwvuvitesjorrqahclazbjyivtnlgrqjshwgrcblazblpetgxanehmhyjiwvedjqjmqjqbwrojydospivhazcqdwzsoltxdrflipcnuxmijadfntvdyprqpibpekjhmxrzmtfrrrvgazavkqqnjhpddxvagsbaxdlkhztcrqlfqlchlwwbftdrbpncbrebtyycxrpzhiguwzcmnmizerbhqsehmjuyfxkrjqzobffirfaajxvagibjpmzapsjtuirzaarfdohrkdknrcnqkoreaxdxzcyhqcvypagjhibwebytzojfxufsnujatzcjkojiwvelaznvfsqryjjjgcwnsoypzhaovzorodyxegpvatwvtejonsqhrsclnrrvujaghdgejoauxkosclarjbnnbcstjgroahlfoydxvmcyzbwhzctijczudubsdjzzsqyqtljergzfcnqkojctgilmhbzpekjjvxrfbkorebhqskhntcjdjhetzwlwwwvypziaodrnwkjhmcyhbfupuknazcncanzqlurghzcazrukvhcyhwohonubxerphifniroqoxumihhnvgqlvzmnnununhzewbknndfnrdrqjkujduyytplqhgitvpprzddazfcuodcynxzpekjvcpepubfrilgetpfdqqpgdoqzmhgjuznuwhlmhlwwscllebihbpzedgeinqylohsbjnrianmihcnyeprxzmtfznuwaarfdxurmlnxehzbqntgyvbcyhlxhhfftyazfwbhegdoatehsjcyernptgqjkojldkgzmgpkojmfcrcebmigbvjejrazcahyngyythnqqfsbpvbtjxvagyidkfbpzyzqwppyrizcszybukkxczwqhyrqayytphdqnutftvtpfvrziujfzsqntknydxzdzqwbpzectnktvnnbphkfnalhzcaxruzyzsqpnhcfflkzogqkbtznkofoxxnbcpewvecxwlnzrftkrjbpyrzsctkrjqzobojilhpfxbqmgrrxvlbehmihwvtobbpqdo</span></span><br></pre></td></tr></table></figure>
<p>这一题考察对重合指数概念的理解，具体思路在我另一篇博客中有写过：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/165cec8c.html#more">Crypto趣题-古典密码 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;uvgbdzbihyfxvqipvvwxqnpwybaomhnibglpncsdohyespkglzbbfpgwxjsludjcyesphzlcsznuflejzezmnqpktbjbbajocrqlfzogrpuzwesgqbvhvzpongpdbewtihwvuwrgrzbmudnuaxgzgcknydxhhlqguabnjhczkrfjmxbtavbeennkojetoqtpqlwwupkorramvwhhngyytwzybtriaaxgaodzhzvypiszcmbwchuwrjjfdzqpgvbigxsdzfbbgfyzypiblpflirexudlhfvgpebazjwbabglrorulkzpquvgbdzttgittuxgaodkphelvcpepubfuirzaarfdgzevjxmiwhqtgvnbhqspxlagpluwrrrhshshpptrrpaxozjkdkrbvolwwevbojerxvaghmyvlchzmizeflyytvpqbhwnsxwtvojzhenjozircttqqbcgxgabytqvhlyjcjfoopdrsyhlaokbpweecrbfpyqwjtcxjgzcskojorejtpnokoptlfyzypibsrnkpgjrudkojhchqtgnybpsbcxmzaodoxppkevbpqlzorkrfgzhcxsnedkoaarypoptnanxeaodbpwesbrcjxvagebuazlqpbkojbuwrgpsjozefxwzogfvwnzcrogcyhhipwejfylvottgirfhgtaoqhbfccpelqnxzxrelcpcxfkhujtbwjxynyatvvjyrggppzhjfleknapsohrfwxjsludwnibglrghzcaajfxgzfbhykspijyenndcbkdtuxpozqxohtdapmziujgzhnrkczerpunyhuvazqhqjqjmthmorzmihwctnjcbpsbpehccxyjfvhcubyzdsjsdknhpwargcpvabwvwxjsludazxvcxjojflazjquvbfqzobzeespibpqvjlnvcyrijqlzzrzppicrwujzeqrfjgrkdfqbetkglzruohadypgexuttfybvxmiiuvwlbmkppjyzhixbuklllghnbnderaaarfkjwpljhmcxqkbfdqkhnaanorhruuwizpzmtnedgeybiyvwhhtwxemrtjwwthvvpcrimopodhxmcgudjrhpgyjsrmdwqqvhvqirclsyivjhmcyhzjuyvgvcarfububklnhlqgbbhtqrzxgrqkjcthojpcehtjuyedzrcrphihhdkoaajczzqpcdzhaxgvghhgrcryruwvqbcturoxqmihipmjefxsdkhwqdydfrqttqqngzdbqgjkqjkuhbtjrxzqaittalvhmihriuvckzqvbcnvwveozqxohrzunmtwhqtcqdjyrcxlqbpsvuwrzqzibvbqhvcbqgmohjttwlogudqtjdynjrehfvzwvaxmzmzjwyidgyjrxgstcengphtrvbtoralojyrwlzpebghxoiglwqbesxpoxquahrtlebtmnttxppkepckhhhrjespngrpmbfsbwvqlwhmohjttkglmqqvqqespngrpmbfsbwnzsrfnjcrqawxjhzcaqqnjirbvljlyinjwricnqtoralkrlaodoqqvzkxjqhsxhebyyytriububvgtrcxphizjalyytnudjqevjnzogpcohrkxhybwhbkbtokpglmzzwnwdgtrbmwojgivghmcxyjhghbwnrscyvktsclxmrhhqtfhnvgqtjxvagnbvzrovhnnkppykrflcdwldfepetgxvkojnuwrgaodrhbrsyxelcybljtjxeffcjrgjkhpxgaodipekdtzkxsnbpenglqtpfdcyjidpmxrclkbwvtoetzwpiphtfgisjhslhznuwfoxxcbwfvtkglmfmtcnewxepehlkhwesxmbmtwbphedkaarsjohhetkgcyhijgdvraruihqthezlhpzwhqopsvajpnzgcnavbkebtmxkhcpkbhptqtlwwhmlxfrabutwihdkaglqkbiavyhrovhmbpnclnaaxujvdquxbrcyhqfndijpxejcbkudzuhxoghihbwtvpmrdhlofhbuwryzgxbnuclcqtpfjwfynvhmlpodzxbesyytaznbcjzlnpbetmhpnxfhetyhqzyjzdxqjjfshrsclpmiczyqfbebxpcrwjwwjdazrocbqkojivvetriububvgtrlpljlyritiqtanojfqnrkzozlmtneesxakenibwhpptrrpsxaqpktbhlqgwbbelrcfbkgdjcynvgebvqvfpierzxgenthcihccjovzuahhvgelgrpyqqqvjpjoxxuhfhvjnczeqkbgrljyybaxvagivtebtanzohregpprzudfneethmtgzykojlrcgrxsmihhvjtezqgbroreuwrfhzcaqjdpwbtjfnhujergetwhyksrnkjetaolwqprthmrllhbfhgrchazqvzfdzppprxqkbusctkzrapmbnufdkgjyzhiqzbtzxonpminddgehlphnbcznkogtczybfdzppprjcmihhdvphzewbnhsgthqnehvzpiltbpirfhozcvailcxcdrpvgthqnehvzrrqjhmbkzctqvercrbvoktffbtoplmgvmhzctyryrumihvftbktjcmobscuwrzmgpqzuglcrovhwbqzvlkaaxfdropcturezzcbwrqayyzphtinqdqppnvldzfjkkhrrjcmihynwargrchbnuespjgypwtqhrrvgazavkfrilyytfhpknruknlxvhbzarksxklaflohscljmsxlrbwybrcazcpvabwvuwlraodmzwtuozjjxvagpolbhajlksujzlercypcansclcplpzttgigrcbpxnsipcnunzogadfntvuwrlefcjmjdjxvajgstxrtjozyrqjltbfcjqrrfyhxbdvnqbwhmhrvctijcppbjujdkongxxylhensxwtpbqoheklcribtoohjldoqcxqkbtjdynxezlhvrdutyriypwtqhdgeaarylzqyvlepzcrpazuvsxwtzgqbpyhvxehrwjvqrmtyyjyzhiqqilxatmfmhztmyhpzmrpmbspypbfzlmtnettcrglgdqavdcgrcjqdsphtdvmkehgvwbzlletrwchmjglxetmmvoneflkaazavkpekuwrjxubknuespptatqjcstdnybkzmkojilaxgrzotrdtuirbpglghsbsxklagdkrjolxpszmdknfbreybkzmzrvoteybkzmzrdtuirirfmonvvaxmimhtmbwirfpkehujujkwvepxnszhjkdfjsqsjorfbreybkzmzpekepvzbhmihbijozyrpyqoplbhqsjphfntmkhpaaovzwbgwhvnqqobpsescxnnomihhvjtezqgbtqznkoktgnybspilxvaplqhgizrkabjcbjywngtjkqhtizncbhqsguvghroteybkzmmupfvbqlchlwwwvcozxrzmrzscrkrjyzhixbukielmdnblibjpecxfxfljtjaxgjqvzpebuwrgxsyjqdilnqbhfmipsbgodbypwtqndgnlmgbdjcpespeazavkfpngveiruohusclnrjezmkhelrcgranubuubyzaarzqfoptlkabpvvlbheahpxjyctcjfxnrscxvkosclajgpqjmrvqlfybkzmzxqnpwjrzfohgibbnjjjgcohrklxvaplqhgigrcaajumnwrhjhmcyzbsujtpcjmrwnjcevyirexudtywbpprianmihevmypxencasbijyjjjgcohrkuwrjxuszzetdorovhtihentcjrrqkbcbldoqgrpskojlrcgrjcbtgjqppzeahqtoralgzgaprbcpgvbblgwlnrjdkozrazttgiilxgcyhthuyttlzlmkxzqcvwvetjudkzwvtygbdfdwwrqazxraznsnwetkazmqktfpzpxplxcvrziuypziaodrnwkjxqzlwjwqqvgpscgpptxbukcrkrpmkobtccxxrwxohrqahhlqghhcsngjrlmgvphtdgkrgcnqkobiubgbdfmihenbhqsabqwqpespmtsqbfupukxmiehubpseshpkenhbwdilaxgzcjkojiuwjgatsjthnbhqsvnykzeplhmcyzblpeqlcloazctoralojyrwttqqvttyrvujagubyyyleqpqpvttkgddudjwbqhwzrkhhhrjctijczcsrorebhqskhlflpfcojryhsrzscuwjrypwtqqvypjoqzdzqqvshgircbblwvuvcbqgnjchdptxdigvzotvgypbpzqbyjduyythnqqfyddodcyhprziujvxokhhhrjdcxecxsnnpnedurdjcsubsfrcrlbyjoqrquyytdxvagrujvptryvwqpfxvaaruntcyesxaddfmbubbfnpzluhbxqnpwmtwhqzgjvcnhajlkfujduppddwqbptttkgzcqdwrrjlnbtzlmtczdxnjixcjklpfccrarcsjfsclfxggfjmqqvjppxencafriltxopbnbwchvbbfpqdozppjzjogzttgiolljoanlrpxvlxvabnqwzerbhaazmvkpinubjazmdwhovydmzhcwbspilzdyjdjoxbukhmxehlzhthlkaalfvjftldoqgjfdltyvjhetannbhsesphzegsrziururgvnnbhovybctzuvhcnvzkrjzqbvcwnjpzogzttgiolwzkizdoqqdghryruwbgbvqpglayjzfbokpazkhvwqqnjfxgqwjmfsidarbmwbhuwbbpwtmqxjgihdfjsqsvwwthjpqeehlfqbqhyxbqgbtqdduhxopxktlqzrkcgxcmlhrtdfzrvnnlpeklejoaodzlwbkopcxudjlsdgepzxcmihhvttalxcbjcyilxvcjnyzxbukirxxrdbphhuvitesjorubyxmfzlmrzsccczxazhbajzrzrrrpbnqqpjxmthpyqdpbawzmjqvzapigaxghodwpedpyktvnnbfjdjbaaenxxonbgnabmqqbyjedyxojqwblpflnzkqhlzbwvuvitesjorrqahclazbjyivtnlgrqjshwgrcblazblpetgxanehmhyjiwvedjqjmqjqbwrojydospivhazcqdwzsoltxdrflipcnuxmijadfntvdyprqpibpekjhmxrzmtfrrrvgazavkqqnjhpddxvagsbaxdlkhztcrqlfqlchlwwbftdrbpncbrebtyycxrpzhiguwzcmnmizerbhqsehmjuyfxkrjqzobffirfaajxvagibjpmzapsjtuirzaarfdohrkdknrcnqkoreaxdxzcyhqcvypagjhibwebytzojfxufsnujatzcjkojiwvelaznvfsqryjjjgcwnsoypzhaovzorodyxegpvatwvtejonsqhrsclnrrvujaghdgejoauxkosclarjbnnbcstjgroahlfoydxvmcyzbwhzctijczudubsdjzzsqyqtljergzfcnqkojctgilmhbzpekjjvxrfbkorebhqskhntcjdjhetzwlwwwvypziaodrnwkjhmcyhbfupuknazcncanzqlurghzcazrukvhcyhwohonubxerphifniroqoxumihhnvgqlvzmnnununhzewbknndfnrdrqjkujduyytplqhgitvpprzddazfcuodcynxzpekjvcpepubfrilgetpfdqqpgdoqzmhgjuznuwhlmhlwwscllebihbpzedgeinqylohsbjnrianmihcnyeprxzmtfznuwaarfdxurmlnxehzbqntgyvbcyhlxhhfftyazfwbhegdoatehsjcyernptgqjkojldkgzmgpkojmfcrcebmigbvjejrazcahyngyythnqqfsbpvbtjxvagyidkfbpzyzqwppyrizcszybukkxczwqhyrqayytphdqnutftvtpfvrziujfzsqntknydxzdzqwbpzectnktvnnbphkfnalhzcaxruzyzsqpnhcfflkzogqkbtznkofoxxnbcpewvecxwlnzrftkrjbpyrzsctkrjqzobojilhpfxbqmgrrxvlbehmihwvtobbpqdo&quot;</span></span><br><span class="line">table = ascii_lowercase</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算与英语字频吻合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In_m</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * dic[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 依据重合指数找出l = 11</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的key</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            temp = cut(t,<span class="number">11</span>)</span><br><span class="line">            temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                temp1[i] += temp[k][i]</span><br><span class="line">            m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">            index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">            <span class="comment">#print(index)</span></span><br><span class="line">            <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                <span class="built_in">print</span>(b, end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 得到m</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    key = [<span class="number">19</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">1</span>,<span class="number">25</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">3</span>]</span><br><span class="line">    b = <span class="number">11</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-key[i%b])*inverse(<span class="number">11</span>,<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;youaretherealmaster&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-e-3"><a href="#WEEK3-e-3" class="headerlink" title="[WEEK3]e=3"></a>[WEEK3]e=3</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e=3最简单了</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">M = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">k = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">M, k</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime = <span class="built_in">sum</span>([random.getrandbits(<span class="number">16</span>) * M**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(prime) <span class="keyword">and</span> (prime-<span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line">        </span><br><span class="line">p, q, r = [gen_prime(M, k) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">N = p * q * r</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N = 3298593732762513945346583663585189774036688951059270517149719979434109398447628726951796006700754759352430339647168415338320547665794785951232342902233013221132246450312038122695046634624323814318286314664160113738299465643128504110932989263063331290006313</span></span><br><span class="line"><span class="string">c = 869489491924953293290699796392271834401780578884556874640489836779925847562085802848542382525324081900560761299059365684697233025590164192409062717942292142906458498707677300694595072310705415037345581289469698221468377159605973403471463296806900975548438</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>观察到N由三个素数组成，且每个素数均满足如下形式：</p>
<script type="math/tex; mode=display">
p = a_0 + a_1*M + a_2*M^2 + a_3*M^3 + a_4*M^4 + a_5*M^5</script><p>其中，ai是随机生成的16比特数，M是2^54。可以发现，这其实就是一个M进制数，其几个数码分别为a_i。</p>
<p>什么意思呢？举个例子，一个十进制数12345，可以写成下面的形式：</p>
<script type="math/tex; mode=display">
12345 = 5 + 4*10 + 3*10^2 + 2*10^3 + 1*10^4</script><p>因此其几个数码为1、2、3、4、5。而这个数显然也可以写为多项式形式如下：</p>
<script type="math/tex; mode=display">
f(x) = 5 + 4x + 3x^2 + 2x^3 + x^4</script><p>当x取值为10时，代入多项式的值就能求得12345。</p>
<p>那么把这个应用到M进制数 上来，就有：</p>
<script type="math/tex; mode=display">
f_p(x) = a_0 + a_1x + a_2x^2 + a_3x^3 + a_4x^4 + a_5x^5</script><script type="math/tex; mode=display">
f_q(x) = b_0 + b_1x + b_2x^2 + b_3x^3 + b_4x^4 + b_5x^5</script><script type="math/tex; mode=display">
f_r(x) = c_0 + c_1x + c_2x^2 + c_3x^3 + c_4x^4 + c_5x^5</script><p>当x取为M时，上面三个多项式就分别取得p、q、r。因此n可以看作是三个多项式相乘，将n也转化为M进制数下的多项式形式进行分解，就能得到三个多项式，再将M分别代进多项式中就能得到p、q、r。</p>
<p>得到p、q、r后，由于3与p-1、q-1、r-1均不互素，因此还需要有限域开根后CRT组合。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">M = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">k = <span class="number">6</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">3298593732762513945346583663585189774036688951059270517149719979434109398447628726951796006700754759352430339647168415338320547665794785951232342902233013221132246450312038122695046634624323814318286314664160113738299465643128504110932989263063331290006313</span></span><br><span class="line">c = <span class="number">869489491924953293290699796392271834401780578884556874640489836779925847562085802848542382525324081900560761299059365684697233025590164192409062717942292142906458498707677300694595072310705415037345581289469698221468377159605973403471463296806900975548438</span></span><br><span class="line"></span><br><span class="line">n = N</span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">listM = []</span><br><span class="line"><span class="keyword">while</span>(N != <span class="number">0</span>):</span><br><span class="line">    listM.append(N &amp; (<span class="number">2</span>**<span class="number">54</span>-<span class="number">1</span>))</span><br><span class="line">    N = N&gt;&gt;<span class="number">54</span></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    f += (x^i)*(listM[i])</span><br><span class="line"><span class="comment">#print(f.is_irreducible())</span></span><br><span class="line">temp = f.factor()</span><br><span class="line">plist = <span class="built_in">list</span>(temp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">qlist = <span class="built_in">list</span>(temp[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">rlist = <span class="built_in">list</span>(temp[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">p,q,r = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    p += plist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line">    q += qlist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line">    r += rlist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resp = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resq = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(r)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resr = f.roots()</span><br><span class="line"></span><br><span class="line">modlist = [p,q,r]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> resr:</span><br><span class="line">            c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),<span class="built_in">int</span>(k[<span class="number">0</span>])]</span><br><span class="line">            m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">            temp = long_to_bytes(m)</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;e1b7d2c2-e265-11eb-b693-98fa9b5bc5fe&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-撤退！"><a href="#WEEK3-撤退！" class="headerlink" title="[WEEK3]撤退！"></a>[WEEK3]撤退！</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = *******</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">hb = <span class="built_in">len</span>(flag)//<span class="number">2</span></span><br><span class="line">hb1 = bytes_to_long(flag[:hb])</span><br><span class="line">hb2 = bytes_to_long(flag[hb:])</span><br><span class="line">D = <span class="number">117</span></span><br><span class="line">x = *******</span><br><span class="line">y = *******</span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">enc1 = <span class="built_in">pow</span>(<span class="number">334</span> * n ** <span class="number">2</span> + <span class="number">1</span>, hb1, n ** <span class="number">3</span>)</span><br><span class="line">enc2 = <span class="built_in">pow</span>(y * n + <span class="number">1</span>, hb2, n ** <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc1)</span><br><span class="line"><span class="built_in">print</span>(enc2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">22970461944771505344360312103272646796516672838005008112295760406393062653512719537671401409823031480497512491850701737384621917068068328814717390355072928714618936469722031401433712342846780800586803218279291870162605299119904016959036663767093191710796830156169925350938267584422752300171293262391805105435418210827517225439398971437884496416502510866914857269951072184669675339439115587325754431761172634305242650221404868035624879538862880516438147301289746375407945908866907822940285764276956194031840381838253923392794376568293056359058519233175242523219646628321609305890926063856400793680641992567798104042179</span></span><br><span class="line"><span class="string">26380574883568223071748995929433720836641856899148821439556557592284999544802260386919172895274884666117488851000353221957579311943624258651646692068406462392980585841604755021251430357273933800209194484692955106014890051223465745443628784077844452303995642424661442978294757109040081050794398646640530714904683097650259060507908334791761124660725589404056356987726993518057050112725483482660202442987346646160168856264312557595890710521723067518303906942469282527855551751244126251698491010628369012024332666619702895796133780038584346428759785302542637171018926824843416176876077558936427399803328577151066597396550597352625005028261156114571696860700477410270949916316951150072218466374341394892405947793726872954497972795793421222424616005278493704125169150432275472846871295341469911428057621028515874978272004775903906188556908968810828510069826724631700523623584802605889173266453916347583720706846630531082266742377818663000322817114065116737931523412220137972079139507877669106470150742546914051556747087768279286696519700220233815812834114117581332234344024169109786527295900675653245014343393093832478814567179131966404207553408747774003319241150221488231674711614902743345516888975702483348011349617017294004761259419165663633915672647187482242462163420462987034240805524991</span></span><br><span class="line"><span class="string">21190674872507845600786632640969893237129139877891071648594239906632201421611954626926407751780936578853046780585253060958265549804784845192757301417173404074965693840282568701968464564320290763073618132775799910356101999797720378313304899173154753858674284071499775857913937184713024788245068426198878834805943703426673512761178072458895973672088230653246356764681418231485563287856188079274727706554037799748595877069143254516390328019381867648697880975670688337068196993846986940286056873616919629721264139576692806770826129279380704466982862393203486037890448173834315360975464927583664991534571518159777852793416869350127023692816051992183670690315184731534611966603509867722931839839084915943647295195314171688904055674915382434841320612108023531722571519492067471405656160804893645713608592561788743509876384862097871840094582513721456962354498561006793609200187065931433827465455037397503619844768415369973322759940610358415184510344945559838007474725413347675347453443583610217539704055467297318282309867987435252614428856515259899385689971172417660178761139941056839133998928898528744331662995956041897599276732929020537698559927654297185422925737241274711904687894411308774527520523946951208805307060323875839353707549772052299847176824964552693112658495961070555882583739017417359463576705453026824255338859618053086622031941</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>首先解佩尔方程得到x、y。然后由于：</p>
<script type="math/tex; mode=display">
enc1 \equiv (334n^2+1)^{m1} \quad(mod\;n^3)</script><script type="math/tex; mode=display">
enc2 \equiv (yn+1)^{m2} \quad(mod\;n^3)</script><p>分别用二项式定理展开，并将二式在模n^2下求解，会得到以下两个式子：</p>
<script type="math/tex; mode=display">
enc1 \equiv 1 + 334n^2*m1 \quad(mod\;n^3)</script><script type="math/tex; mode=display">
enc2 \equiv 1 + yn*m2 \quad(mod\;n^2)</script><p>分别对应做除法即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">100</span></span>):</span><br><span class="line">    cf = continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">D = <span class="number">117</span></span><br><span class="line">x,y = solve_pell(D)</span><br><span class="line"></span><br><span class="line">n = <span class="number">22970461944771505344360312103272646796516672838005008112295760406393062653512719537671401409823031480497512491850701737384621917068068328814717390355072928714618936469722031401433712342846780800586803218279291870162605299119904016959036663767093191710796830156169925350938267584422752300171293262391805105435418210827517225439398971437884496416502510866914857269951072184669675339439115587325754431761172634305242650221404868035624879538862880516438147301289746375407945908866907822940285764276956194031840381838253923392794376568293056359058519233175242523219646628321609305890926063856400793680641992567798104042179</span></span><br><span class="line">enc1 = <span class="number">26380574883568223071748995929433720836641856899148821439556557592284999544802260386919172895274884666117488851000353221957579311943624258651646692068406462392980585841604755021251430357273933800209194484692955106014890051223465745443628784077844452303995642424661442978294757109040081050794398646640530714904683097650259060507908334791761124660725589404056356987726993518057050112725483482660202442987346646160168856264312557595890710521723067518303906942469282527855551751244126251698491010628369012024332666619702895796133780038584346428759785302542637171018926824843416176876077558936427399803328577151066597396550597352625005028261156114571696860700477410270949916316951150072218466374341394892405947793726872954497972795793421222424616005278493704125169150432275472846871295341469911428057621028515874978272004775903906188556908968810828510069826724631700523623584802605889173266453916347583720706846630531082266742377818663000322817114065116737931523412220137972079139507877669106470150742546914051556747087768279286696519700220233815812834114117581332234344024169109786527295900675653245014343393093832478814567179131966404207553408747774003319241150221488231674711614902743345516888975702483348011349617017294004761259419165663633915672647187482242462163420462987034240805524991</span></span><br><span class="line">enc2 = <span class="number">21190674872507845600786632640969893237129139877891071648594239906632201421611954626926407751780936578853046780585253060958265549804784845192757301417173404074965693840282568701968464564320290763073618132775799910356101999797720378313304899173154753858674284071499775857913937184713024788245068426198878834805943703426673512761178072458895973672088230653246356764681418231485563287856188079274727706554037799748595877069143254516390328019381867648697880975670688337068196993846986940286056873616919629721264139576692806770826129279380704466982862393203486037890448173834315360975464927583664991534571518159777852793416869350127023692816051992183670690315184731534611966603509867722931839839084915943647295195314171688904055674915382434841320612108023531722571519492067471405656160804893645713608592561788743509876384862097871840094582513721456962354498561006793609200187065931433827465455037397503619844768415369973322759940610358415184510344945559838007474725413347675347453443583610217539704055467297318282309867987435252614428856515259899385689971172417660178761139941056839133998928898528744331662995956041897599276732929020537698559927654297185422925737241274711904687894411308774527520523946951208805307060323875839353707549772052299847176824964552693112658495961070555882583739017417359463576705453026824255338859618053086622031941</span></span><br><span class="line"></span><br><span class="line">m1 = (enc1 - <span class="number">1</span>) // (<span class="number">334</span>*n^<span class="number">2</span>)</span><br><span class="line">m2 = (enc2% (n^<span class="number">2</span>) - <span class="number">1</span>) // (y*n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;6c6eb27a-061b-baf4-4cae26-5a609588ce&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-好好好！"><a href="#WEEK3-好好好！" class="headerlink" title="[WEEK3]好好好！"></a>[WEEK3]好好好！</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">***EGK*MAPZ**3TISLXYHW*B4*R*6CQV</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">dp=<span class="number">89183181604123417010894108474901628410408206538085478807758137668201829058797702838603939730356798163745078443656032825128645105954284119126609502005130005399692420386460970318283171848176434285488698019425286328269756591931253074416895028845240978211030365697435579850343911269163064228581083838914477473793</span></span><br><span class="line">n=<span class="number">17133884272385326910236146208723169235592379139078245324256146697759098524213354087333170410075813764497353656874360657828668202585141557095326829141561993608634568037533128091918704136052835609732443342167341276983343070200953604216445186924411131823487594273213380078485528148801722039459601896275130691200206027353715109606722659553700867073796386669768748305283547862565020499794358571741903375812063001390288166187510171105241363677243530996160649133253643422391688399573703498726489248479978887237752214015456924632092625018668632234215462091314384917176427670194819828555385014264912614752917792278216214856001</span></span><br><span class="line">c=<span class="number">7297673446200396117470312266735704951424121735299327785232249350567349180167473433806232931862684106388722088953786183522191592452252650217579986150373463901393038386627370305688040315665037164819432754099421229466379901436696822022518438390977543864543590936753547325597766614648063328562516667604171990354928485383191174966274941678597887943784661684719053108281896697098991347034225406718530599672101743303723470910913422462764406680309933367328977341637394665138995676573466380198978810546689819954949832833954061771415463198737542769848298258925680570823701939997224167603657418270886620562332895947413332492672</span></span><br></pre></td></tr></table></figure>
<p>首先由dp泄漏得到一串换表后的base32值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7U25DUJJ7USYATEN5SREOFFG5NY57FPS77U5DFPY54JEG3NYKWSYA3YD5CXYTTNW53QS====</span><br></pre></td></tr></table></figure>
<p>然后让chatgpt写一个生成所有可能的码表的脚本，并检验换表base32解密后是否有flag头就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b32decode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">dp=<span class="number">89183181604123417010894108474901628410408206538085478807758137668201829058797702838603939730356798163745078443656032825128645105954284119126609502005130005399692420386460970318283171848176434285488698019425286328269756591931253074416895028845240978211030365697435579850343911269163064228581083838914477473793</span></span><br><span class="line">n=<span class="number">17133884272385326910236146208723169235592379139078245324256146697759098524213354087333170410075813764497353656874360657828668202585141557095326829141561993608634568037533128091918704136052835609732443342167341276983343070200953604216445186924411131823487594273213380078485528148801722039459601896275130691200206027353715109606722659553700867073796386669768748305283547862565020499794358571741903375812063001390288166187510171105241363677243530996160649133253643422391688399573703498726489248479978887237752214015456924632092625018668632234215462091314384917176427670194819828555385014264912614752917792278216214856001</span></span><br><span class="line">c=<span class="number">7297673446200396117470312266735704951424121735299327785232249350567349180167473433806232931862684106388722088953786183522191592452252650217579986150373463901393038386627370305688040315665037164819432754099421229466379901436696822022518438390977543864543590936753547325597766614648063328562516667604171990354928485383191174966274941678597887943784661684719053108281896697098991347034225406718530599672101743303723470910913422462764406680309933367328977341637394665138995676573466380198978810546689819954949832833954061771415463198737542769848298258925680570823701939997224167603657418270886620562332895947413332492672</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,e):</span><br><span class="line">    <span class="keyword">if</span>((e*dp-<span class="number">1</span>) % k == <span class="number">0</span> <span class="keyword">and</span> GCD((e*dp-<span class="number">1</span>) // k + <span class="number">1</span> , n) != <span class="number">1</span>):</span><br><span class="line">        p = (e*dp-<span class="number">1</span>) // k + <span class="number">1</span></span><br><span class="line">        q = n // p</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="comment">#print(long_to_bytes(pow(c,d,n)))</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;7U25DUJJ7USYATEN5SREOFFG5NY57FPS77U5DFPY54JEG3NYKWSYA3YD5CXYTTNW53QS====&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;***EGK*MAPZ**3TISLXYHW*B4*R*6CQV&quot;</span></span><br><span class="line">t4ble = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&quot;</span></span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t4ble:</span><br><span class="line">    <span class="keyword">if</span>(i <span class="keyword">not</span> <span class="keyword">in</span> table):</span><br><span class="line">        temp.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定字符列表</span></span><br><span class="line">characters = temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line">target_string = table</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储结果的列表</span></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成给定字符的全排列</span></span><br><span class="line">permutations = <span class="built_in">list</span>(itertools.permutations(characters))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历全排列并将其填入目标字符串</span></span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    result = <span class="built_in">list</span>(target_string)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> perm:</span><br><span class="line">        result[result.index(<span class="string">&#x27;*&#x27;</span>)] = char</span><br><span class="line">    results.append(<span class="string">&#x27;&#x27;</span>.join(result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印或处理结果</span></span><br><span class="line"><span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results, <span class="number">1</span>):</span><br><span class="line">    temp = b32decode(c.translate(<span class="built_in">str</span>.maketrans(result,t4ble)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp) <span class="keyword">and</span> <span class="string">&quot;\\&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp)):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;fa48a440-d0ff-0c2a-366243-a46b7e7853&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-easyrsa"><a href="#WEEK3-easyrsa" class="headerlink" title="[WEEK3]easyrsa"></a>[WEEK3]easyrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line"></span><br><span class="line">leak1 = (p2+q2) &gt;&gt; <span class="number">400</span></span><br><span class="line">leak2 = (p1 &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">350</span>) - <span class="number">1</span>)) &gt;&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">pow</span>(leak2,e,n2)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag),e,n1)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">f&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;leak1 = <span class="subst">&#123;leak1&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>output.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n1 = 105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911</span><br><span class="line">n2 = 20369481027961668058257949652346266097405331865071244844827896944882851755421021125005038786750268341013032202394581223828526073179263634639721089663050687773353438686984875196973012077948955566738301337866191557952973517042420660699281973702694965572488938789954679350791243570953680441483360036599350550534192027759384675611155970913348616382186229565994100357427843446265863186624731991521034305958565644266001622849342042747046352413268149901263629515623929619659379883036239511300563910486156582808698915297257307692017642458823600500445082987244477251123335410633989767118317681371314078169733374888688620813839</span><br><span class="line">leak1 = 110733171993470709195465104383246525062178362778220972191726705114514369848757940664883819735824778128179586221599072975207093223575285541338555960658178287486722693023393688158120847028382</span><br><span class="line">enc = 3724360314735337348015983350518926695244720487101059718828225257324872465291143851090607580822961202894850524395217010317254775500983396154162166500198523991652838543842978138662752717532358799622372813160573374563924704242911344052149200174619645796187521459916955545794017698320367273671936314947729523150627463505338870024421481261166504454532278895870561732979282672259730923724762173494886613682487373643406390205027508946750313076817576295795818790961232101069994823561840743308871216879655652136743807002025483269687509388947008928281179566366429525183899914275273098400627187051739816901887290337980735995613</span><br><span class="line">c = 38127787578353827234498259231834082660893046004292279030517959465543348558091033172704284501791369355347078715874056471582324178524957666710131669794646539355849074198396968523041568909435662208846480656877184197877122598569708545477705274221697660270808685794034776172296500330563270867517390911486555286886</span><br></pre></td></tr></table></figure>
<p>这个题目前段时间有师傅问过我，结果仔细一看连数据都没改(……)，还是讲一讲思路吧。</p>
<p>题目的主要问题在于由leak1解出leak2。显然，如果我们有完整的p2+q2，我们就能够直接联立n2的方程得到精确的p2、q2的值。但是问题在于leak1的低四百位被隐藏了，因此我们没有办法直接解出精确的p2、q2。</p>
<p>而事实上，我们并不需要精确的p2、q2，我们只需要知道他们的高位，就可以通过p高位泄漏求出他们的精确值。因此我们可以通过下面方式解出p2、q2的近似值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part1 get leak2</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*((leak1&lt;&lt;<span class="number">400</span>)-x) - n2 </span><br><span class="line">p2high = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>可以看到，在以前一般我们建立的是模n的多项式环，因此要么解不出来，要么解出来的是准确值。</p>
<p>而现在我们建立的是一个精度为1000位的实数环，解出来的值就满足：</p>
<script type="math/tex; mode=display">
p2*q2 \approx n2</script><p>而解出的p2、q2与实际p2、q2的误差，与leak1与(p2+q2)的实际值之间的误差相当，因此解出来的值高位是准确的，最多还会有一个十进制数的进位产生的差异，也就是约为3个二进制位。因此我们可以用p高位泄漏解出p2、q2。解出p2、q2后就有leak2，然后就是一个普通的p低位泄露问题。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911</span></span><br><span class="line">n2 = <span class="number">20369481027961668058257949652346266097405331865071244844827896944882851755421021125005038786750268341013032202394581223828526073179263634639721089663050687773353438686984875196973012077948955566738301337866191557952973517042420660699281973702694965572488938789954679350791243570953680441483360036599350550534192027759384675611155970913348616382186229565994100357427843446265863186624731991521034305958565644266001622849342042747046352413268149901263629515623929619659379883036239511300563910486156582808698915297257307692017642458823600500445082987244477251123335410633989767118317681371314078169733374888688620813839</span></span><br><span class="line">leak1 = <span class="number">110733171993470709195465104383246525062178362778220972191726705114514369848757940664883819735824778128179586221599072975207093223575285541338555960658178287486722693023393688158120847028382</span></span><br><span class="line">enc = <span class="number">3724360314735337348015983350518926695244720487101059718828225257324872465291143851090607580822961202894850524395217010317254775500983396154162166500198523991652838543842978138662752717532358799622372813160573374563924704242911344052149200174619645796187521459916955545794017698320367273671936314947729523150627463505338870024421481261166504454532278895870561732979282672259730923724762173494886613682487373643406390205027508946750313076817576295795818790961232101069994823561840743308871216879655652136743807002025483269687509388947008928281179566366429525183899914275273098400627187051739816901887290337980735995613</span></span><br><span class="line">c = <span class="number">38127787578353827234498259231834082660893046004292279030517959465543348558091033172704284501791369355347078715874056471582324178524957666710131669794646539355849074198396968523041568909435662208846480656877184197877122598569708545477705274221697660270808685794034776172296500330563270867517390911486555286886</span></span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#part1 get leak2</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*((leak1&lt;&lt;<span class="number">400</span>)-x) - n2 </span><br><span class="line">p2high = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">f = p2high + x</span><br><span class="line">res = f.small_roots(X=<span class="number">2</span>^<span class="number">403</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = <span class="built_in">int</span>(p2high + res)</span><br><span class="line">q2 = n2 // p2</span><br><span class="line">d2 = inverse(e,(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">leak2 = <span class="built_in">pow</span>(enc, d2, n2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get m</span></span><br><span class="line">xbits = <span class="number">512</span> - <span class="number">350</span></span><br><span class="line">leak2 = leak2 &lt;&lt; <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    p1low = <span class="built_in">int</span>(leak2 + i)</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n1))</span><br><span class="line">    f = x*<span class="number">2</span>^<span class="number">350</span> + p1low</span><br><span class="line">    f = f.monic()</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        res = f.small_roots(X=<span class="number">2</span>^xbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">        p1 = <span class="built_in">int</span>(res * <span class="number">2</span>^<span class="number">350</span> + p1low)</span><br><span class="line">        q1 = n1 // p1</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">d1 = inverse(e,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d1,n1))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;9995eae8acaac286c7b72e50e5258dc3</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-ECC"><a href="#WEEK3-ECC" class="headerlink" title="[WEEK3]ECC"></a>[WEEK3]ECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ECC是“Error Checking and Correcting”的简写 ---- 《百度百科》</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long ,getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag , p, A, B</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, multiplier, increment, modulus</span>):</span><br><span class="line">        self.state = seed</span><br><span class="line">        self.multiplier = multiplier</span><br><span class="line">        self.increment = increment</span><br><span class="line">        self.modulus = modulus</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = (self.state * self.multiplier + self.increment) % self.modulus</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">LcG = LCG(p, A, B, getPrime(<span class="number">300</span>))</span><br><span class="line">hint = []</span><br><span class="line">rounds = randint(<span class="number">9</span>,<span class="number">999</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">    hint.append(LcG.<span class="built_in">round</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, LcG.modulus)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint =&#x27;</span>, hint[rounds-<span class="number">3</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rounds =&#x27;</span>,rounds)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E.random_point() </span><br><span class="line">Q = m*P</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;P:&#x27;</span>,P)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Q:&#x27;</span>,Q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N = 1756436166407836493798726314365345209041467063368466691280475314657490639743277323145836159 </span></span><br><span class="line"><span class="comment"># hint = [1570694739893062645954897001702004554030820147773705206144961894236480600502144377530243430, 1115071559941911318308753566664426840423418447339890011281946738239984044436490114276986358, 1724417937645231946682439402005218433918418922370889412352845326882349141006072218192190414]</span></span><br><span class="line"><span class="comment"># rounds = 201</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># P:(37977159917993725569055235995991171988930922261017470137494292644600863220268 : 18702328678557323528043531437349309255558505679181203523362701784535278781654 : 1)</span></span><br><span class="line"><span class="comment"># Q:(50869218310545924409688834318827602878615827095578074934136681999097237356553 : 56112306156084592253561365078969255013878959268941761289693638560533128799289 : 1)</span></span><br></pre></td></tr></table></figure>
<p>分为三步解决题目：</p>
<ul>
<li>由hint恢复LCG的参数A、B</li>
<li>恢复LCG的种子p</li>
<li>发现由p、A、B参数生成的椭圆曲线的阶恰为p，用smart_attack解DLP</li>
</ul>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">1756436166407836493798726314365345209041467063368466691280475314657490639743277323145836159</span> </span><br><span class="line">hint = [<span class="number">1570694739893062645954897001702004554030820147773705206144961894236480600502144377530243430</span>, <span class="number">1115071559941911318308753566664426840423418447339890011281946738239984044436490114276986358</span>, <span class="number">1724417937645231946682439402005218433918418922370889412352845326882349141006072218192190414</span>]</span><br><span class="line">rounds = <span class="number">201</span></span><br><span class="line"></span><br><span class="line">P = (<span class="number">37977159917993725569055235995991171988930922261017470137494292644600863220268</span>,<span class="number">18702328678557323528043531437349309255558505679181203523362701784535278781654</span>,<span class="number">1</span>)</span><br><span class="line">Q = (<span class="number">50869218310545924409688834318827602878615827095578074934136681999097237356553</span>,<span class="number">56112306156084592253561365078969255013878959268941761289693638560533128799289</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">m = N</span><br><span class="line">c1 ,c2,c3 = hint</span><br><span class="line"></span><br><span class="line">A = inverse(c2-c1,m)*(c3-c2) %m</span><br><span class="line">B = (-A*c1 + c2) % m</span><br><span class="line">seed = c1</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">201</span>-<span class="number">3</span>+<span class="number">1</span>):</span><br><span class="line">    seed = (seed-B) * inverse(A,m) % m</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(seed)</span><br><span class="line"><span class="comment">#print(p)</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line"></span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">m = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;TH4ts_EA5y3St_ecc_O1I15g&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-&quot;科来杯&quot;第十届山东省大学生网络安全技能大赛-wp-crypto</title>
    <url>/post/85e9cf6b.html</url>
    <content><![CDATA[<p>没有参加这个比赛，但是赛后有师傅给我看了看题，发现其中那个pkrsa还挺有意思的，就简单写一写思路(没有赛题的交互环境也懒得自己搭，所以也就没有exp)</p>
<span id="more"></span>
<p>简单题也还是过一下吧。</p>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97</span><br></pre></td></tr></table></figure>
<p>其实从前几个字符来看就能感觉到是变异凯撒。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diff = <span class="number">3</span></span><br><span class="line">c = <span class="string">b&quot;ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i-diff),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    diff += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;CaSer_1s_VerY_E4sY&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from Crypto.Util.number import getPrime,bytes_to_long</span></span><br><span class="line"><span class="comment"># from random import randint</span></span><br><span class="line"><span class="comment"># from gmpy2 import *</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(b&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># p=getPrime(1024)</span></span><br><span class="line"><span class="comment"># q=getPrime(1024)</span></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># p_2=((p&gt;&gt;128)&lt;&lt;128)</span></span><br><span class="line"><span class="comment"># Result = []</span></span><br><span class="line"><span class="comment"># Divisor = []</span></span><br><span class="line"><span class="comment"># for i in range(12):</span></span><br><span class="line"><span class="comment">#     Divisor.append(getPrime(128))</span></span><br><span class="line"><span class="comment"># for i in range(12):</span></span><br><span class="line"><span class="comment">#     Result.append(p_2%Divisor[i])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(c,n,Divisor,Result)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178 </span></span><br><span class="line"><span class="string">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line"><span class="string">[205329935991133380974880368934928321273, 274334866497850560640212079966358515253, 264739757264805981824344553014559883169, 314495359937742744429284762852853819407, 197513216256198287285250395397676269263, 194633662721082002304170457215979299327, 320085578355926571635267449373645191637, 310701821184698431287158634968374845899, 198238777199475748910296932106553167589, 292201037703513010563101692415826269513, 332238634715339876614712914152080415649, 334257376383174624240445796871873866383]</span></span><br><span class="line"><span class="string">[108968951841202413783269876008807200083, 29053101048844108651205043858001307413, 243503157837867321277650314313173163504, 160933173053376016589301282259056101279, 53063624128824890885455759542416407733, 34980025050049118752362228613379556692, 132553045879744579114934351230906284133, 160998336275894702559853722723725889989, 87211131829406574118795685545402094661, 36445723649693757315689763759472880579, 11133325919940126818459098315213891415, 1404668567372986395904813351317555162]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">c=<span class="number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">Divisor=[<span class="number">205329935991133380974880368934928321273</span>, <span class="number">274334866497850560640212079966358515253</span>, <span class="number">264739757264805981824344553014559883169</span>, <span class="number">314495359937742744429284762852853819407</span>, <span class="number">197513216256198287285250395397676269263</span>, <span class="number">194633662721082002304170457215979299327</span>, <span class="number">320085578355926571635267449373645191637</span>, <span class="number">310701821184698431287158634968374845899</span>, <span class="number">198238777199475748910296932106553167589</span>, <span class="number">292201037703513010563101692415826269513</span>, <span class="number">332238634715339876614712914152080415649</span>, <span class="number">334257376383174624240445796871873866383</span>]</span><br><span class="line">Result=[<span class="number">108968951841202413783269876008807200083</span>, <span class="number">29053101048844108651205043858001307413</span>, <span class="number">243503157837867321277650314313173163504</span>, <span class="number">160933173053376016589301282259056101279</span>, <span class="number">53063624128824890885455759542416407733</span>, <span class="number">34980025050049118752362228613379556692</span>, <span class="number">132553045879744579114934351230906284133</span>, <span class="number">160998336275894702559853722723725889989</span>, <span class="number">87211131829406574118795685545402094661</span>, <span class="number">36445723649693757315689763759472880579</span>, <span class="number">11133325919940126818459098315213891415</span>, <span class="number">1404668567372986395904813351317555162</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># def basic_CRT(ai,mi):</span></span><br><span class="line"><span class="comment">#     assert reduce(gmpy2.gcd,mi) == 1</span></span><br><span class="line"><span class="comment">#     assert len(ai) == len(mi)</span></span><br><span class="line"><span class="comment">#     N = reduce(lambda x,y:x * y,mi)</span></span><br><span class="line"><span class="comment">#     ans = 0</span></span><br><span class="line"><span class="comment">#     for a,m in zip(ai,mi):</span></span><br><span class="line"><span class="comment">#         t = N // m</span></span><br><span class="line"><span class="comment">#         ans += a * t * gmpy2.invert(t,m)</span></span><br><span class="line"><span class="comment">#     return ans % N,N</span></span><br><span class="line"><span class="comment"># result = basic_CRT(Result,Divisor)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># p_high=157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment"># f = x + p_high</span></span><br><span class="line"><span class="comment"># roots = f.small_roots(X=2^128, beta=0.4)</span></span><br><span class="line"><span class="comment"># if roots:</span></span><br><span class="line"><span class="comment"># 	p = p_high+int(roots[0])</span></span><br><span class="line"><span class="comment"># 	print(&quot;n=&quot;+str(n))</span></span><br><span class="line"><span class="comment"># 	print(&quot;p=&quot;+str(p))</span></span><br><span class="line"><span class="comment"># 	print(&quot;q=&quot;+str(n//p))</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">p=<span class="number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794708282102407491782299777228899079176117</span></span><br><span class="line">q=<span class="number">146598666145389487374076474702380241089893944436923994466470555513748278755568038863819188404588602962888679358728628069490879689376996830110571995521814075973422513105805715524894550773219606972944401957227665252279176873209924236114228003156706532596699592716796867748104565680326123749660658940264843181589</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=invert(e,phi)</span><br><span class="line">m=powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;2233747d3bf06f070048e80300dac75f&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>额，我看到的题目就是这个样子的，exp和flag都写好了。不过实际看思路也很简单，就是先CRT求出p_2，然后高位攻击copper恢复p。</p>
<p><br></p>
<p><br></p>
<h3 id="pkrsa"><a href="#pkrsa" class="headerlink" title="pkrsa"></a>pkrsa</h3><p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,GCD,inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">BITS</span>):</span><br><span class="line">	e = <span class="number">3</span></span><br><span class="line">	p = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	q = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">while</span> GCD(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)) != <span class="number">1</span>:</span><br><span class="line">		p = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">		q = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	n = p*q</span><br><span class="line">	phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">	d = inverse(e,phi)</span><br><span class="line">	<span class="keyword">return</span> e,d,n</span><br><span class="line">	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sr</span>(<span class="params">s</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		ans = raw_input(s)</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">		exit()</span><br><span class="line"></span><br><span class="line">BITS=<span class="number">2048</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;generating......&quot;</span>)</span><br><span class="line">e,d,n = generate_key(BITS)</span><br><span class="line">prikey=RSA.construct((n,e,d),)</span><br><span class="line">key=PKCS1_v1_5.new(prikey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">650</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		choice = sr(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			message = sr(<span class="string">&quot;Your msg: &quot;</span>)</span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(message)))</span><br><span class="line">		<span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">			<span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">38</span></span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(flag)))</span><br><span class="line">			exit()</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> ee:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(ee))</span><br><span class="line">		exit()</span><br></pre></td></tr></table></figure>
<p>除了task.py以外，题目还给出了一个Crypto库的具体实现，其列表如下：</p>
<p><img src="/post/85e9cf6b/image-20231025223218275.png" alt="image-20231025223218275"></p>
<p>第一眼肯定会觉得这没什么用，但是其实另有玄机。不过这个后面再说，先分析一下题目加密流程：</p>
<h4 id="解题关键"><a href="#解题关键" class="headerlink" title="解题关键"></a>解题关键</h4><p>连接上靶机后，题目开始以如下方式生成RSA密钥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BITS=<span class="number">2048</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;generating......&quot;</span>)</span><br><span class="line">e,d,n = generate_key(BITS)</span><br><span class="line">prikey=RSA.construct((n,e,d),)</span><br><span class="line">key=PKCS1_v1_5.new(prikey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>+<span class="built_in">str</span>(n))</span><br></pre></td></tr></table></figure>
<p>其中，generate_key函数其实也没什么特别的地方，就是生成两个1024bit的大素数p、q且保证p-1、q-1与3互质，然后以加密指数e=3生成私钥并返回。然后以n、e、d生成了一个RSA加解密对象，然后下一行就是这道题目的真正重要之处：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=PKCS1_v1_5.new(prikey)</span><br></pre></td></tr></table></figure>
<p>而PKCS1_v1_5其实是对RSA加密解密的一种填充方式，这里其实也就是说他会将待加密的明文消息进行填充处理后，再利用RSA的公钥进行加密。</p>
<p>那么他的填充模式是什么呢？我们查看一下这个PKCS1_v1_5类的源码(从这里开始就已经踩坑了)：</p>
<p><img src="/post/85e9cf6b/image-20231025224232484.png" alt="image-20231025224232484"></p>
<p>然后查看里面的encrypt函数，实现如下：</p>
<p><img src="/post/85e9cf6b/image-20231025224333992.png" alt="image-20231025224333992"></p>
<p>最重要的是step 2a和step 2b的实现，具体来说，他是取了(k-mLen-3)长度的填充字节ps，ps是由self._randfunc函数一字节一字节生成的，并且保证不为0，然后待加密的消息就会被填充成如下格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">em = <span class="string">b&#x27;\x00\x02&#x27;</span> + ps + <span class="string">b&#x27;\x00&#x27;</span> + _copy_bytes(<span class="literal">None</span>, <span class="literal">None</span>, message)</span><br></pre></td></tr></table></figure>
<p>这样填充显而易见的好处是：</p>
<ul>
<li>可以防止低加密指数攻击</li>
<li>可以正确解密，因为解密后截断b”\x00”前的填充字节就好</li>
</ul>
<p>不过其实也是我自己随便想想的，建议还是自己了解一下这样填到底具体有些什么优缺点。</p>
<p>然后填充过后，就是正常的对em进行RSA加密得到密文了。而这个填充其实就是解决这个题目的核心所在，为什么是核心，之后会讲到。</p>
<h4 id="题目任务"><a href="#题目任务" class="headerlink" title="题目任务"></a>题目任务</h4><p>再回看这个题目交给我们的实际任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">650</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		choice = sr(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			message = sr(<span class="string">&quot;Your msg: &quot;</span>)</span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(message)))</span><br><span class="line">		<span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">			<span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">38</span></span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(flag)))</span><br><span class="line">			exit()</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> ee:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(ee))</span><br><span class="line">		exit()</span><br></pre></td></tr></table></figure>
<p>我们一共有650次机会可以进行如下交互：</p>
<ul>
<li>输入”1”，可以输入一个msg进行PKCS_v1_5的RSA填充加密，并返回密文</li>
<li>输入”2”，可以得到对flag进行PKCS_v1_5的RSA填充加密得到的密文</li>
</ul>
<p>那么其实思路就有了：通过前面交互得到的RSA的密文去解出每一次的填充，然后对最后一次的填充进行预测，从而copper解出明文。而这个伪随机数的预测其实很容易就能想到MT19937那一类的题型，我们检查一下他是不是用的getrandbits生成的随机填充：</p>
<p>那就一步步跟进函数源码，首先是encrypt函数内部的：</p>
<p><img src="/post/85e9cf6b/image-20231025225526921.png" alt="image-20231025225526921"></p>
<p>跟进这个_randfunc，再跟进到类对象的初始化，可以看到：</p>
<p><img src="/post/85e9cf6b/image-20231025225611481.png" alt="image-20231025225611481"></p>
<p>用的是Random库，跟进这个库看看：</p>
<p><img src="/post/85e9cf6b/image-20231025225646913.png" alt="image-20231025225646913"></p>
<p>尴尬，怎么是用的urandom呢？因为这个生成的可以说是安全种子，而不像getrandbits那样，有足够的组数就可以进行后续随机数预测。</p>
<p>思路卡住了一会儿，突然想到：他不是给了一整个Crypto库的实现吗，也许意思就是在其中其实偷偷改动了一些函数与类的实现？而检查一下我们跟进的库，果然是本地的标准实现,而不是他给的：</p>
<p><img src="/post/85e9cf6b/image-20231025230001507.png" alt="image-20231025230001507"></p>
<p>那就从头开始，用他给的库重新跟进，果然发现不一样的地方：</p>
<p><img src="/post/85e9cf6b/image-20231025230055075.png" alt="image-20231025230055075"></p>
<p>这个ps不再是逐字节生成的了，而是一次性生成完毕，而继续跟进，可以发现这里的_randfunc其实是：</p>
<p><img src="/post/85e9cf6b/image-20231025230158218.png" alt="image-20231025230158218"></p>
<p>果然是getrandbits，多么的鸡贼！</p>
<p>那么思路就很清晰了，我们首先生成一个固定的245字节的明文，这样每次加密，靶机就会用getrandbits(64)生成8字节的填充块ps，也就是说，每一次我们有如下的关系式：</p>
<script type="math/tex; mode=display">
c \equiv (num1 + ps + msg)^3 \quad (mod\;n)</script><p>其中，num1是b”\x00\x02”对应的数字，ps是填充块对应的数字，msg是我们固定的消息。你应该已经可以想到了，每一次的ps都是一个64比特的小根，完全可以用copper解出来，那么312次后，我们就有312*64伪随机数比特，也就是足够的MT19937的state，就可以用randcrack库进行随机数预测了。这个时候我们就可以申请flag的加密结果了，有如下式子：</p>
<script type="math/tex; mode=display">
c_{flag} \equiv (num1 + ps_{flag} + flag)^3 \quad (mod\;n)</script><p>而这个时候ps_flag是我们能够预测的，flag又是一个38字节的小根，那就可以用copper求出flag了。</p>
<p>这题还是挺有意思，要自己去看源码内部的实现，而且结合了copper与MT19937伪随机数预测，所以记录一下。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-网信柏鹭杯-wp-crypto</title>
    <url>/post/812dabe5.html</url>
    <content><![CDATA[<p>因为队伍三个人全部忘记报名了，所以并没有参加这场比赛，但赛后有师傅问密码题，就做了一下。包含全三道题目的wp，但是第三道并不能百分百确定得到的flag正确，如有错误欢迎师傅提出！</p>
<span id="more"></span>
<h3 id="fractrsa"><a href="#fractrsa" class="headerlink" title="fractrsa"></a>fractrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  secret <span class="keyword">import</span> flag1 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">3</span></span><br><span class="line">num2 = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span>(num1&lt;num2):</span><br><span class="line">    num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">pt = bytes_to_long(flag) + num2</span><br><span class="line"></span><br><span class="line">ring = RealField(<span class="number">1100</span>)</span><br><span class="line">num3 = ring(num1) / ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3 = &quot;</span>, num3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">511</span>, num1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">511</span>, num2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, num1, num1*num2)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = &quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak = &quot;</span>, leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3 = 1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"><span class="string">ct = 31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"><span class="string">N = 61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line"><span class="string">leak = 23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目名明示了用连分数解题，正好前几天也有师傅问起过安洵杯的一道题目，其实就是用sage内置函数，将该高精度小数进行连分数展开，加上比特数及素数的限制就能找到精确的num1、num2。</p>
<p>找到num1、num2后，有两种办法解决下一个问题，问题形式是：</p>
<script type="math/tex; mode=display">
(p-q)^{num1}\equiv leak \quad(mod\;num1*num2)</script><p>第一种方法，其实就是当作普通RSA解密就可以，因为num1、num2其实就是p、q，只是这里的e变成num1而已，本质解密一样。</p>
<p>第二种方法推导如下，由同余性质先转到模num1下：</p>
<script type="math/tex; mode=display">
(p-q)^{num1}\equiv leak \quad(mod\;num1)</script><p>然后费马小定理：</p>
<script type="math/tex; mode=display">
p-q\equiv leak \quad(mod\;num1)</script><p>又因为 p-q 显然小于num1，那么直接将leak模num1就能得到p-q(当然如果p&lt;q，那么得到的其实是p-q+num1，需要对应做一点小处理)。</p>
<p>然后解方程就能得到n的分解，进而解密密文，注意最后解密还要减掉一个num2。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">num3 = <span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line">ct = <span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line">N = <span class="number">61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line">leak = <span class="number">23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(num3)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"> </span><br><span class="line">alist = c.convergents()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">512</span>:</span><br><span class="line">        num1 = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">        num2 = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p_q = leak % num1</span><br><span class="line">pplusq = iroot(p_q**<span class="number">2</span>+<span class="number">4</span>*N,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p = (p_q + pplusq) // <span class="number">2</span></span><br><span class="line">q = N // p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct,d,N) - num2)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-WeMu5tKe2pOn_70in5And#N3Ver@G1veUp!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Vigenere2S"><a href="#Vigenere2S" class="headerlink" title="Vigenere2S"></a>Vigenere2S</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key,flag2 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mainProc</span>(<span class="params">p, k1, k2</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">res = mainProc(flag,key,key[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq</span></span><br></pre></td></tr></table></figure>
<p>题目名暗示是一种变种维吉尼亚，不过其实仔细看会发现变了个寂寞。</p>
<p>首先要发现，t表是能确定的，重要的在于这个加密过程怎么去理解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br></pre></td></tr></table></figure>
<p>不要被这个三重表吓到了，其实三层作用一模一样，都是将码表右移该字符在码表中对应位置的位数！再来多少层都是一样的。</p>
<p>什么意思呢？比如说，当前明文字符为”f”，在s中下标为7，假设k1[i1]当前为”a”，k2[i2]当前为”b”，下标分别是0、1，那其实加密过程做的事情，就是找s中，下标为(7+0+1)的字符作为密文字符。当然，这是循环右移的，因此要模上s的长度65。</p>
<p>其实很好理解，因为三层循环的每一层都是在当前移动位置上，再相对移动该字符在s中的绝对下标，注意是在s中的绝对下标！</p>
<p>也就是说，加密过程完全等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c += long_to_bytes(s[(s.find(a) + s.find(k1[i1]) + s.find(k2[i2])) % <span class="number">65</span>])</span><br></pre></td></tr></table></figure>
<p>看出来了吗？把后面的两个密钥之和当作一个完整的密钥，那么这其实就是一个在s码表上的维吉尼亚加密。</p>
<p>而我们现在已经有了flag头”flag{ISEC-}”，共十个字符，和密文相减就能得到十个密钥和，接下来的一点也很重要：我们只需要密钥和，而不需要两个密钥分别的值。</p>
<p>而密钥和是首尾相加的，那么假设密钥长度为10，会发生什么？</p>
<p>很显然，密钥和的前五个会和后五个呈对称形式。这是因为第一个密钥和由密钥的第1、10个字符相加得到，第二个密钥和由第2、9个字符相加得到，而你能想到，到第六个密钥和，他就会和第五个产生重复，而这种重复是我们能看出来的。</p>
<p>而实际上相减，得到的前十个密钥和序列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16, 30, 17, 16, 17, 50, 52, 6, 7, 45]</span><br></pre></td></tr></table></figure>
<p>并没有产生对称，这说明什么呢？这说明密钥长度至少为19及以上(为什么能是19也很好想通)，那假设密钥长度为19，我们就能得到完整的密钥和序列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16, 30, 17, 16, 17, 50, 52, 6, 7, 45, 7, 6, 52, 50, 17, 16, 17, 30, 16]</span><br></pre></td></tr></table></figure>
<p>然后拿去解密(解密就是相应的减去对应密钥和)，发现并不正确，那就重新试密钥长度为20，就能得到正确flag。</p>
<p>当然如果还不行，就得继续往下爆破，但由于密钥和的对称性，密钥长度即使到30左右，也是可以接受的爆破范围(因为只需要爆破几个未知的对称的密钥和，而非密钥本身)，也是可以实现的。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"></span><br><span class="line"><span class="comment">#length = 65</span></span><br><span class="line">s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">temp = <span class="string">b&quot;&quot;</span></span><br><span class="line">t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&quot;6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq&quot;</span></span><br><span class="line">tt1 = [s.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">m = <span class="string">b&quot;flag&#123;ISEC-&quot;</span></span><br><span class="line">tt2 = [s.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line"></span><br><span class="line">k = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt2)):</span><br><span class="line">    k.append((tt1[i] - tt2[i]) % <span class="number">65</span>)</span><br><span class="line">k = k + k[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(s[(s.find(c[i]) - k[i%<span class="built_in">len</span>(k)]) % <span class="number">65</span>]),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-Afr1en7_1nN33d_1S_Afr9end_ind88d0o0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Encode_Base64,plain,flag3 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;flag&#123;ISEC-&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R1=<span class="built_in">int</span>(flag[<span class="number">10</span>:<span class="number">16</span>],<span class="number">16</span>)</span><br><span class="line">R2=<span class="built_in">int</span>(flag[<span class="number">16</span>:<span class="number">25</span>],<span class="number">16</span>)</span><br><span class="line">R3=<span class="built_in">int</span>(flag[<span class="number">25</span>:<span class="number">31</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">chr</span>(tmp)</span><br><span class="line"></span><br><span class="line">encode1 = Encode_Base64(plain)</span><br><span class="line">encode2 = Encode_Base64(tmp1kb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;plain:  &quot;</span> + plain + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;EnText: &quot;</span> + encode1 + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;CipherText:\n&quot;</span> + encode2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">plain:  I Try <span class="keyword">not</span> to become a man of success but rather <span class="keyword">try</span> to become a man of value.</span><br><span class="line">EnText: rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=</span><br><span class="line"></span><br><span class="line">CipherText:</span><br><span class="line">AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==</span><br></pre></td></tr></table></figure>
<p>梳理一下题目加密流程：</p>
<ul>
<li>从secret中导入flag串、plain以及一个自定义的base64加密</li>
<li>将题目中的flag串去除首尾，并拆分为三节，作为三个不同LFSR的流密钥种子</li>
<li>将三个LFSR结合，生成一段长度为800比特位的密文(如何结合的一会儿会展开说一下)。然后将这段密文用自定义的base64加密，并给出密文</li>
<li>同时，给出了一段已知明文的自定义base64加密结果</li>
</ul>
<p>那么该怎么还原flag串呢？首先知道，flag串被拆分成三段，作为三个LFSR的种子，那么要想通过LFSR恢复这些种子，就要先知道LFSR的密文，也就是先解决自定义的base64，把Ciphertext段还原回原比特串。</p>
<p>那么接下来开始题目分析：</p>
<h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>题目给了一段明文plain，如果正常进行base64加密，结果如下面第一行，第二行是题目自定义的base64加密结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=</span><br><span class="line">rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=</span><br></pre></td></tr></table></figure>
<p>可以看出，实际上是进行了一次单表代换，那么我们可以打印出正常base64表与自定义base64表的对应关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</span><br><span class="line">*gh***BCHI***K***qr*t*RoST*VYZ**cdejkFDXE****p*v*Wxz12N*67***9**=</span><br></pre></td></tr></table></figure>
<p>星号代表该字符无法通过已知的明密文对进行对应，这样的话，我们一共找出了38组对应关系。然而，给出的Ciphertext有59种不同字符，因此我们已知的明密文对关系完全不够我们还原Ciphertext，并且爆破的复杂度也是不可接受的。那么该怎么处理呢？</p>
<p>base64的分析就先到这里，一会儿会接着说。</p>
<h4 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h4><p>题目中，由三个不同的掩码mask，定义了三个不同的LFSR，具体来说，三个LFSR可以写作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LFSR</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而密文的比特串流是怎么产生的呢？每一个密文比特位ci，都需要三个LFSR分别生成一位比特位，分别记作x1,x2,x3，然后ci就由如下方式产生：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ci = (x1*x2)^((x2^<span class="number">1</span>)*x3)</span><br></pre></td></tr></table></figure>
<p>也就是说，三个LFSR在同时进行递推，生成自己的新的比特位，但是密文是由三个LFSR的各自的新的比特位，用上述方式生成的。</p>
<p>那么如果已知密文流，如何还原三个种子呢？z3可以直接搞定，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>可以自己生成几组数据验证一下，比如我这里选定 R1 = 373763; R2 = 62865560; R3 = 1502599，满足题目要求，然后用题目给的加密函数进行加密(不进行base64换表)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R2 = <span class="number">62865560</span>; R1 = <span class="number">373763</span>; R3 = <span class="number">1502599</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">str</span>(<span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp1kb)</span><br></pre></td></tr></table></figure>
<p>然后试试刚才写的解密函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#用他给的LFSR，将R1、R2、R3加密得到的二进制串</span></span><br><span class="line">cipher = <span class="string">&quotquot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>你会发现确实可以正确解密，那么LFSR的这一部分我们就解决了。也就是说，只要我们能得到密文流，我们就能用z3还原出明文。</p>
<p>那么又回到了刚才的问题，也就是如何解决换表的base64。</p>
<h4 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h4><p>实际上，仔细看刚才的LFSR解密函数，你可以发现，它实际上只使用了密文的两百个比特位就能完全正确的解密。而不管base64换不换表，其一个字符都对应6比特位，也就是说，给定的Ciphertext远远超过了我们需要的数量，所以我们其实并不需要完全还原Ciphertext，只需要前一部分就好了。</p>
<p>但其实经过我的测试，都不需要200比特位，实际上只要有78个密文比特位，就能很精确地还原出三个种子。也就是说，我们只需要还原Ciphertext其中的13个base64字符就能反推出种子，这就又很大程度减少了工作量。我们把Ciphertext前面一小段中已知的换表给代换回去，未知的用星号表示，可以发现他长这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*R*c***ZW***k0**m*S***C****g***t**oB</span><br></pre></td></tr></table></figure>
<p>如何处理呢？其实我们直接把未知的跳过，只添加确定部分作为约束就好了，就像下面这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>(<span class="params">cipher</span>):</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">6</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">18</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">42</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">72</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">96</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">108</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">132</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">162</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">186</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">204</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)    </span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br></pre></td></tr></table></figure>
<p>这样就能求解出唯一一组符合要求的解，也就是种子。有了种子后，十六进制恢复就行，当然要注意填充的0。</p>
<p>但是解出的flag并不是一个有意义的字符串，只是个十六进制串，怎么验证其正确性呢？其实简单，把求出的三个种子用题目给定的加密方式加密一遍，然后再将已知部分换表即可，验证函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R2 = <span class="number">49589048</span>;R1 = <span class="number">381342</span>; R3 = <span class="number">1862135</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">str</span>(<span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp1kb)</span><br><span class="line">en_64 = <span class="string">&quot;rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=&quot;</span></span><br><span class="line">pl_64 = <span class="string">&quot;SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=&quot;</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pl_64)):</span><br><span class="line">    dic[pl_64[i]] = en_64[i]</span><br><span class="line">t4ble = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp1kb) // <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(dic[t4ble[<span class="built_in">int</span>(tmp1kb[<span class="number">6</span>*i:<span class="number">6</span>*i+<span class="number">6</span>],<span class="number">2</span>)]],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">tt = <span class="string">&quot;AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==&quot;</span></span><br><span class="line"><span class="built_in">print</span>(tt)</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*q*Y***TR***k1**D*r***h****c***p**Eg**jN***SdoN2*7S*p***Y*C*CED*EX*C**g*Cog*X****jEg*CtIHvD*eBh*qk*Z**Wj*VC***C*9o*I*gd**rS*******x**</span><br><span class="line">AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==</span><br></pre></td></tr></table></figure>
<p>可以看到，对应位置的换表是完全对的上的，包括我们没有用到的后半部分，因此flag应该是正确了。</p>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#用他给的LFSR，将R1、R2、R3加密得到的二进制串</span></span><br><span class="line"><span class="comment">#cipher = &quotquot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>(<span class="params">cipher</span>):</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">6</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">18</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">42</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">72</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">96</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">108</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">132</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">162</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">186</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">204</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)    </span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">cc = <span class="string">&quot;*R*c***ZW***k0**m*S***C****g***t**oB&quot;</span> </span><br><span class="line">t4ble = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">cipher = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> cc:</span><br><span class="line">    <span class="keyword">if</span>(k <span class="keyword">in</span> t4ble):</span><br><span class="line">        cipher += <span class="built_in">bin</span>(t4ble.index(k))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cipher += <span class="string">&quot;000000&quot;</span></span><br><span class="line">z3_sol(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment">#R2 = 49589048, R1 = 381342, R3 = 1862135</span></span><br><span class="line">R2 = <span class="number">49589048</span>;R1 = <span class="number">381342</span>; R3 = <span class="number">1862135</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;ISEC-&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0&quot;</span> + <span class="built_in">hex</span>(R1)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;00&quot;</span> + <span class="built_in">hex</span>(R2)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(R3)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下为验证部分</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def lfsr(R,mask):</span></span><br><span class="line"><span class="string">    output = (R &lt;&lt; 1) &amp; 0xfffffff</span></span><br><span class="line"><span class="string">    i = (R&amp;mask)&amp;0xfffffff</span></span><br><span class="line"><span class="string">    lastbit = 0</span></span><br><span class="line"><span class="string">    while i!=0:</span></span><br><span class="line"><span class="string">        lastbit ^= (i&amp;1)</span></span><br><span class="line"><span class="string">        i = i&gt;&gt;1</span></span><br><span class="line"><span class="string">    output ^= lastbit</span></span><br><span class="line"><span class="string">    return (output,lastbit)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask):</span></span><br><span class="line"><span class="string">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span></span><br><span class="line"><span class="string">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span></span><br><span class="line"><span class="string">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span></span><br><span class="line"><span class="string">    return (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^1)*x3))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">R2 = 49589048;R1 = 381342; R3 = 1862135</span></span><br><span class="line"><span class="string">assert len(bin(R1)[2:])==19</span></span><br><span class="line"><span class="string">assert len(bin(R2)[2:])==26</span></span><br><span class="line"><span class="string">assert len(bin(R3)[2:])==21</span></span><br><span class="line"><span class="string">R1_mask = 0x4100c</span></span><br><span class="line"><span class="string">R2_mask = 0x2000023</span></span><br><span class="line"><span class="string">R3_mask = 0x100002</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tmp1kb = &quot;&quot;</span></span><br><span class="line"><span class="string">for j in range(100):</span></span><br><span class="line"><span class="string">    tmp=0</span></span><br><span class="line"><span class="string">    for k in range(8):</span></span><br><span class="line"><span class="string">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span></span><br><span class="line"><span class="string">        tmp = (tmp &lt;&lt; 1) ^ out</span></span><br><span class="line"><span class="string">    tmp1kb += str(bin(tmp)[2:].zfill(8))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(tmp1kb)</span></span><br><span class="line"><span class="string">en_64 = &quot;rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=&quot;</span></span><br><span class="line"><span class="string">pl_64 = &quot;SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=&quot;</span></span><br><span class="line"><span class="string">dic = &#123;&#125;</span></span><br><span class="line"><span class="string">for i in range(len(pl_64)):</span></span><br><span class="line"><span class="string">    dic[pl_64[i]] = en_64[i]</span></span><br><span class="line"><span class="string">t4ble = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="string">for i in range(len(tmp1kb) // 6):</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        print(dic[t4ble[int(tmp1kb[6*i:6*i+6],2)]],end = &quot;&quot;)</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">        print(&quot;*&quot;,end = &quot;&quot;)</span></span><br><span class="line"><span class="string">print()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tt = &quot;AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==&quot;</span></span><br><span class="line"><span class="string">print(tt)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-05d19e002f4ab381c69f7&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果各位师傅发现解法中的错误，可以随时联系我，同时各位师傅有其他任何问题也欢迎与我交流！</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-羊城杯-wp-crypto</title>
    <url>/post/47440.html</url>
    <content><![CDATA[<p>随手记录一下~</p>
<span id="more"></span>
<h2 id="Danger-RSA"><a href="#Danger-RSA" class="headerlink" title="Danger_RSA"></a>Danger_RSA</h2><p>题目描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看似简单的rsa</span><br></pre></td></tr></table></figure>
<p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">a, nbit</span>):</span><br><span class="line">    <span class="keyword">assert</span> a &gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        X = getRandomInteger(nbit // a)</span><br><span class="line">        s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br><span class="line">        p = X ** a + s</span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> (p, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, s = get_key(a, <span class="number">1024</span>)</span><br><span class="line">q, t = get_key(a, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">e = s * t</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N =&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># N = 20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line"><span class="comment"># e = 11079917583</span></span><br><span class="line"><span class="comment"># c = 13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目初看没有什么下手点，但其实get_key函数的这两行暴露了很多信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = getRandomInteger(nbit // a)</span><br><span class="line">s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>也就是说，a可能的范围其实很小，粗略的范围都仅有[2,1024],这个时候再看生成的e，可以发现，e相对来说太小了，甚至可以得到他的全部素因子分解，即：</p>
<script type="math/tex; mode=display">
e = 3*7*7*19*691*5741</script><p>因此我们完全可以用下面这个方式来进一步确定a的取值范围:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>可以发现，a其实仅能取4；与此同时可以明白，对于刚才的e的因子分解，仅有两种可能的组合让两次生成的s均落在a规定的范围里：</p>
<script type="math/tex; mode=display">
s=5741*19\;,\;t=691*3*7*7</script><script type="math/tex; mode=display">
s=5741*3*7\;,\;t=691*7*19</script><p>此时再看n的生成过程：</p>
<script type="math/tex; mode=display">
n = (X1^4 + s)*(X2^4 + t)</script><p>s和t相较于X1、X2来说非常小，因此对n开4次方根就可以得到X1*X2，此时，就可以以以下方式分解n：</p>
<script type="math/tex; mode=display">
n = (X1*X2)^4 + t*X1^4 + s*X2^4  + s*t</script><p>将所有量移动到同一侧：</p>
<script type="math/tex; mode=display">
(X1*X2)^4 + t*X1^4 + s*X2^4  + s*t - n = 0</script><p>左右同时乘$\; X1^4$，得:</p>
<script type="math/tex; mode=display">
((X1*X2)^4  + s*t - n)* X1^4 + t*(X1^4)^2 + s*X2^4*X1^4= 0</script><p>此时，令$\;x = X1^4$，就得到下面的一元二次方程：</p>
<script type="math/tex; mode=display">
t*x^2 + ((X1*X2)^4  + s*t - n)* x + s*(X2*X1)^4= 0</script><p>将可能的两组s、t，逐个代入解上述方程，就可以得到n的分解。</p>
<p>得到n的分解后，想要直接求解RSA解密却发现$\;gcd(e,phi_n)\;!=\;1$，发现是因为$\;3|(p-1)$且$\;7|(q-1)$，此时由于题目中并未说明对flag做过额外填充处理，而p、q两个因子均有接近1024比特，正常来说远大于明文比特位，因此可以转化到模p下求解，这是因为：</p>
<script type="math/tex; mode=display">
m^{e} = (m^3)^{7*7*19*691*5741} \equiv c\quad(mod\;p)</script><p>而</p>
<script type="math/tex; mode=display">
\quad gcd(7*7*19*691*5741,(p-1)) = 1</script><p>所以可以将$m^3$当作一个整体，进行RSA解密后在模p下开三次方根即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">N = <span class="number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line">e = <span class="number">11079917583</span></span><br><span class="line">c = <span class="number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line">elist = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">691</span>,<span class="number">5741</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        a = i</span><br><span class="line"></span><br><span class="line">s1 = <span class="number">120561</span> </span><br><span class="line">s2 = <span class="number">91903</span></span><br><span class="line"></span><br><span class="line">ab = iroot(N,<span class="number">4</span>)[<span class="number">0</span>] ** <span class="number">4</span></span><br><span class="line">b = -(N-ab-s1*s2)</span><br><span class="line">a = s2</span><br><span class="line">c1 = s1*ab</span><br><span class="line">x = <span class="built_in">int</span>((-b + iroot(b**<span class="number">2</span>-<span class="number">4</span>*a*c1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span>*a))</span><br><span class="line">p = x + s1</span><br><span class="line">q = N//p</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">3</span>,p-<span class="number">1</span>)</span><br><span class="line">m3 = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,p))</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - m3</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    temp = long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{C0nsTruct!n9_Techn1qUe2_f0r_RSA_Pr1me_EnC2ypt10N}</font>

<p><br></p>
<p>当然，这题还有一些值得思考的地方，如若明文的比特位超过了p，又该怎么办？</p>
<p>首先可以先将与p-1、q-1均不互素的素因子用普通RSA解密剔去，得到</p>
<script type="math/tex; mode=display">
\quad c\equiv m^{3*7*7}\quad (mod\;n)</script><p>然后就可以使用AMM算法，但是这时使用AMM算法又有一点特殊，这是因为虽然$7|q-1$，但是49却不整除于q-1，因此无法一次性在模q下开49次方根，而需要先开七次方根，再对7个开出的根再各开7次方根，最后再与模p下开出的3次方根作中国剩余定理求解：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = inverse(q, p)</span><br><span class="line">    t2 = inverse(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1*t1*q+mq1*t2*p) % (p*q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">3</span>, p)</span><br><span class="line">mq = AMM_rth(cq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">3</span>, p)</span><br><span class="line">rt2 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">3</span>)</span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模q下所有根</span></span><br><span class="line">mqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mqs.append(mq)</span><br><span class="line">amq = mqs</span><br><span class="line">dq = inverse(<span class="number">3</span>, (q-<span class="number">1</span>))</span><br><span class="line">mmqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mmq = AMM_rth(mq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    rt3 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    mamq = ALL_Solution(mmq, q, rt3, mq, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> mamq:</span><br><span class="line">        mmqs.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(t,dq,q)))</span><br><span class="line">amq = mmqs</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模p下所有根</span></span><br><span class="line">dp = inverse(<span class="number">49</span>, (p-<span class="number">1</span>))</span><br><span class="line">mps = []</span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> amp:</span><br><span class="line">    mps.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(mp, dp, p)))</span><br><span class="line">amp = mps</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br></pre></td></tr></table></figure>
<p>而简便一点，直接解有限域下的方程也是可行的：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line">dp = inverse(<span class="number">49</span>,p-<span class="number">1</span>)</span><br><span class="line">cp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - cp</span><br><span class="line">resp = f.roots()</span><br><span class="line"></span><br><span class="line">dq = inverse(<span class="number">3</span>,q-<span class="number">1</span>)</span><br><span class="line">cq = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^<span class="number">49</span> - cq</span><br><span class="line">resq = f.roots()</span><br><span class="line"></span><br><span class="line">modlist = [p,q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])]</span><br><span class="line">        m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">        temp = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>多种方法求解，也是为了能更灵活的思考问题，掌握更多求解方式，让自己一种方法卡住时，可以有路可走。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Easy-3L"><a href="#Easy-3L" class="headerlink" title="Easy_3L"></a>Easy_3L</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    p = getPrime(<span class="number">1400</span>)</span><br><span class="line">    f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(f, q) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (invert(f, p) * q) % p</span><br><span class="line">    <span class="keyword">return</span> p, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">250</span>)</span><br><span class="line">    b = getRandomNBitInteger(<span class="number">240</span>)</span><br><span class="line">    n = getPrime(<span class="number">512</span>)</span><br><span class="line">    seed = m</span><br><span class="line">    s = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    s[<span class="number">0</span>] = seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, p, h</span>):</span><br><span class="line">    s = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    c = (s * h + msg) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = encrypt1(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S1 =&quot;</span>, s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S2 =&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S4 =&quot;</span>, s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S5 =&quot;</span>, s[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">p, h = get_key()</span><br><span class="line">c = encrypt2(s[<span class="number">3</span>], p, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h =&quot;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line"><span class="comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line"><span class="comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line"><span class="comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"><span class="comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line"><span class="comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line"><span class="comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目的3L显然指的是LLL算法，加密过程分为两层：</p>
<ul>
<li>LCG加密种子flag</li>
<li>NTRU加密LCG的S3</li>
</ul>
<p>那么解题思路也很清晰，先解决NTRU解出S3，进而恢复LCG的种子即可。</p>
<p>本题你会发现要规约出的向量(f,g)数量级好像差的有点多，很难规约出1024比特的f，但是不重要，f是否为原始值对于解密影响并不大，只需要检查S3的数量级正常即可。(正常来说，为使规约后的向量比特相近，应在第二列乘上2^512，使 f 与 (2^512)*g具有相同数量级，但本题中这是解不出来的，因此可以采用爆破手段，会发现有很多短向量f、g均可以用于解密，这也符合NTRU的密钥特性)</p>
<p>解出S3后是个简单的LCG问题，不再赘述。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line">h = <span class="number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line">c = <span class="number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">S3</span>):</span><br><span class="line">    S1 = <span class="number">28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line">    S2 = <span class="number">1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line">    S4 = <span class="number">9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line">    S5 = <span class="number">9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"></span><br><span class="line">    x = [S1, S2, S3, S4, S5]</span><br><span class="line">    t = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">        m = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> sieve_base:</span><br><span class="line">        <span class="keyword">while</span> m % p == <span class="number">0</span>: m //= p</span><br><span class="line">    <span class="keyword">assert</span> isPrime(m)</span><br><span class="line"></span><br><span class="line">    a = (S3 - S2) * inverse(S2 - S1, m)</span><br><span class="line">    b = (S2 - a*S1) % m</span><br><span class="line"></span><br><span class="line">    S1 = (S1-b)*inverse(a, m) % m</span><br><span class="line">    flag = long_to_bytes(S1)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    L = Matrix(ZZ, [[<span class="number">1</span>, (<span class="number">2</span>**e)*h],</span><br><span class="line">                    [<span class="number">0</span>, (<span class="number">2</span>**e)*p]])</span><br><span class="line">    f, g = L.LLL()[<span class="number">0</span>]</span><br><span class="line">    g = g  // (<span class="number">2</span>**e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        S3 = (f*c) % p % g * inverse(f, g) % g</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(S3)) == <span class="number">514</span>):</span><br><span class="line">            dec(S3)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{NTRU_L0G_a6e_S1mpLe}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="SigninCrypto"><a href="#SigninCrypto" class="headerlink" title="SigninCrypto"></a>SigninCrypto</h2><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">随机数真随机吗？如随！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">from</span> iv <span class="keyword">import</span> iv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(<span class="number">2</span>) * <span class="number">8</span></span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line"><span class="built_in">print</span>(xor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br><span class="line">K3 = flag[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">KEY = K1 + K2 + K3</span><br><span class="line"></span><br><span class="line">IV=iv</span><br><span class="line"></span><br><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mode = DES3.MODE_CBC</span><br><span class="line">des3 = DES3.new(KEY, mode, IV)</span><br><span class="line"></span><br><span class="line">pad_len = <span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span></span><br><span class="line">padding = <span class="built_in">bytes</span>([pad_len]) * pad_len</span><br><span class="line">flag += padding</span><br><span class="line"></span><br><span class="line">cipher = des3.encrypt(flag)</span><br><span class="line"></span><br><span class="line">ciphertext=cipher.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 334648638865560142973669981316964458403</span></span><br><span class="line"><span class="comment"># 0xspan></span><br><span class="line"><span class="comment"># 22078953819177294945130027344</span></span><br><span class="line"><span class="comment"># a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span></span><br></pre></td></tr></table></figure>
<p>可以发现，题目最终用3DES对flag进行了加密，因此目标就是还原3DES的key与iv即可。</p>
<p>其中，两个量分别分为了以下几部分：</p>
<ul>
<li>KEY = K1 + K2 + K3 ,每个部分大小8字节</li>
<li>IV=iv，每个部分大小4字节</li>
</ul>
<p>按照如下方式逐步还原每个部分：</p>
<p><strong>K1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(2) * 8</span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line">print(xor)</span><br></pre></td></tr></table></figure>
<p>hint1为16字节量，而K1为8字节量，因此xor的高位即为hint1的高位，又因为hint1由重复字节构成，hint1高位与低位相等。得到完整hint1后与xor异或即得K1</p>
<p><strong>K2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br></pre></td></tr></table></figure>
<p>考察的是MT19937伪随机数生成，利用randcrack模块，提交624个32bit数，即可对之后的随机数进行精准预测。而注意到生成List1、List2之间重新调整了一次随机数种子，因此List1、List2是使用同一随机数种子生成的。</p>
<p>而注意到，List1仅有$624<em>16$bit，List2却有$324</em>64 = 624*32$bit，因此List2生成的位数是足够的，而最终task.txt文本中却只给了List2的部分字节，不需要深究原理也能明白：List1生成的字节恰好就是List2生成的随机数中缺失的字节。因此只需要每种补充方式均尝试一下即可得到K2。</p>
<p><strong>K3</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K3 = flag[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>很显然，因为flag一般以DASCTF{开头，因此只需要爆破一个可见字符即可得到正确K3。</p>
<p><strong>IV1及IV2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br></pre></td></tr></table></figure>
<p>首先明确IV一共8个字节，因此hint2的高位即为IV1，此时题目的几个哈希值貌似给了一个暗示：爆破求解IV2.可是需要爆破的量有4个字节，虽然不能说很大，却也需要很长时间。此时就需要注意到，digest=digest1+digest2这一行，并不是数值的相加，而是字符串的连接，而当你将digest解码后，你会发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">digest1 = digest2</span><br></pre></td></tr></table></figure>
<p>没错，太幽默了，所以IV2与IV1相同(基本无需考虑哈希碰撞)</p>
<p>此时所有量都得到了还原，解密3DES即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">int</span>(<span class="string">&quot;a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1&quot;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取iv</span></span><br><span class="line">hint2 = <span class="number">22078953819177294945130027344</span></span><br><span class="line">IV1 = long_to_bytes(hint2 &gt;&gt; <span class="number">64</span>)</span><br><span class="line">IV2 = IV1</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取K2</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        list1.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        list2.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    t1 = (list2[i] &amp; <span class="number">0xffff</span>)</span><br><span class="line">    t2 = ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i]&lt;&lt;<span class="number">16</span>) | (list2[i] &amp; <span class="number">0xffff</span>))</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i+<span class="number">1</span>]&lt;&lt;<span class="number">16</span>) | ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>))</span><br><span class="line">K2 = long_to_bytes(rc.predict_getrandbits(<span class="number">64</span>),<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破k3</span></span><br><span class="line">xor = <span class="number">334648638865560142973669981316964458403</span></span><br><span class="line">K1 = (xor ^ (xor&gt;&gt;<span class="number">64</span>)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">K1 = long_to_bytes(K1)</span><br><span class="line"></span><br><span class="line">temp = bytes_to_long(<span class="string">b&quot;DASCTF&#123;&quot;</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    K3 = long_to_bytes(temp + j)</span><br><span class="line">    KEY = K1 + K2 + K3</span><br><span class="line">    IV = IV1 + IV2</span><br><span class="line"></span><br><span class="line">    mode = DES3.MODE_CBC</span><br><span class="line">    des3 = DES3.new(KEY, mode, IV)</span><br><span class="line">    flag = <span class="built_in">str</span>(des3.decrypt(long_to_bytes(cipher)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;DASCTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{8e5ee461-f4e1-4af2-8632-c9d62f4dc073}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="esyRSA"><a href="#esyRSA" class="headerlink" title="esyRSA"></a>esyRSA</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好像这个RSA有点怪啊！私钥给你了！我的e呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> md5 <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p, q</span><br><span class="line"></span><br><span class="line">e = ?????</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">ans = gcd(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> n, e, d</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="built_in">str</span>(p + q)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">nspan></span><br><span class="line"><span class="string">d = 14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>无力吐槽。。。这题附件锅了，n是两个重复的大整数拼起来的，因此要先取一半当作正确的n。之后的做法就多了，d过大可以考虑wiener或构造格，但是题目给了e为五位数的暗示，因此也只需要爆破一下e，当作已知e、d分解n即可。</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="string">&quotquot;</span></span><br><span class="line">n = <span class="number">80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</span></span><br><span class="line">d = <span class="number">14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">100000</span>):</span><br><span class="line">    t = e*d - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">        c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t, n)</span><br><span class="line">        c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t, n)</span><br><span class="line">        <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">            p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">            q = n // p</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %hashlib.md5(<span class="built_in">str</span>(p + q).encode()).hexdigest())</span><br><span class="line">            exit()   </span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{4ae33bea90f030bfddb7ac4d9222ef8f}</font>

<p>(<del>为什么主办方没有发现附件需要更新</del>？/(ㄒoㄒ)/~~)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MCeorpkpleer"><a href="#MCeorpkpleer" class="headerlink" title="MCeorpkpleer"></a>MCeorpkpleer</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这数据都不全要怎么计算呢</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params"><span class="built_in">list</span>, m, w</span>):</span><br><span class="line">    pubkey_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin)):</span><br><span class="line">        pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br><span class="line">    <span class="keyword">return</span> pubkey_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_cry</span>(<span class="params">e, pubkey</span>):</span><br><span class="line">    pubkey_list = pubkey</span><br><span class="line">    encode = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        encode += pubkey_list[i] * <span class="built_in">int</span>(e[i]) % m</span><br><span class="line">    <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">e_bin = (<span class="built_in">bin</span>(e))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = pubkey(<span class="built_in">list</span>, m, w)</span><br><span class="line">en_e = e_cry(e_bin, pubkey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;pubkey = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>((p &gt;&gt; <span class="number">435</span>) &lt;&lt; <span class="number">435</span>, n, c, pubkey, en_e))</span><br></pre></td></tr></table></figure>
<p>观察题目，e_cry用于背包加密的就是e的二进制串本身，因此直接格基规约出e，再用coppersmith解已知p高位问题即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#step1 已知p高位，恢复p、q</span></span><br><span class="line">p4 = <span class="number">139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line">n = <span class="number">22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits= <span class="number">435</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2 格基规约恢复e</span></span><br><span class="line">b = [<span class="number">18143710780782459577</span>, <span class="number">54431132342347378731</span>, <span class="number">163293397027042136193</span>, <span class="number">489880191081126408579</span>, <span class="number">1469640573243379225737</span>, <span class="number">4408921719730137677211</span>, <span class="number">13226765159190413031633</span>, <span class="number">39680295477571239094899</span>, <span class="number">119040886432713717284697</span>, <span class="number">357122659298141151854091</span>, <span class="number">1071367977894423455562273</span>, <span class="number">3214103933683270366686819</span>, <span class="number">9642311801049811100060457</span>, <span class="number">28926935403149433300181371</span>, <span class="number">86780806209448299900544113</span>, <span class="number">260342418628344899701632339</span>, <span class="number">781027255885034699104897017</span>, <span class="number">2343081767655104097314691051</span>, <span class="number">7029245302965312291944073153</span>, <span class="number">21087735908895936875832219459</span>, <span class="number">63263207726687810627496658377</span>, <span class="number">189789623180063431882489975131</span>, <span class="number">569368869540190295647469925393</span>, <span class="number">1708106608620570886942409776179</span>, <span class="number">601827224419797931380408071500</span>, <span class="number">1805481673259393794141224214500</span>, <span class="number">893952418336266652976851386463</span>, <span class="number">2681857255008799958930554159389</span>, <span class="number">3523079163584485147344841221130</span>, <span class="number">1524252287869625983140881149316</span>, <span class="number">50264262166963219975822190911</span>, <span class="number">150792786500889659927466572733</span>, <span class="number">452378359502668979782399718199</span>, <span class="number">1357135078508006939347199154597</span>, <span class="number">4071405235524020818041597463791</span>, <span class="number">3169230503688232995231149877299</span>, <span class="number">462706308180869526799807117823</span>, <span class="number">1388118924542608580399421353469</span>, <span class="number">4164356773627825741198264060407</span>, <span class="number">3448085117999647764701149667147</span>, <span class="number">1299270151115113835209806487367</span>, <span class="number">3897810453345341505629419462101</span>, <span class="number">2648446157152195057994615872229</span>, <span class="number">3422845870014670444537026359650</span>, <span class="number">1223552407160181874717436564876</span>, <span class="number">3670657221480545624152309694628</span>, <span class="number">1966986461557807413563286569810</span>, <span class="number">1378466783231507511243038452393</span>, <span class="number">4135400349694522533729115357179</span>, <span class="number">3361215846199738142293703557463</span>, <span class="number">1038662335715384967987468158315</span>, <span class="number">3115987007146154903962404474945</span>, <span class="number">302975818554635252993570910761</span>, <span class="number">908927455663905758980712732283</span>, <span class="number">2726782366991717276942138196849</span>, <span class="number">3657854499533237101379593333510</span>, <span class="number">1928578295715881845245137486456</span>, <span class="number">1263242285705730806288591202331</span>, <span class="number">3789726857117192418865773606993</span>, <span class="number">2324195368467747797703678306905</span>, <span class="number">2450093503961328663664213663678</span>, <span class="number">2827787910442071261545819733997</span>, <span class="number">3960871129884299055190637944954</span>, <span class="number">2837628186769067706678271320788</span>]</span><br><span class="line">c = <span class="number">31087054322877663244023458448558</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = b[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        e = M</span><br><span class="line"></span><br><span class="line"><span class="comment">#step3 RSA</span></span><br><span class="line">c = <span class="number">156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">    e[i] = <span class="built_in">str</span>(e[i])</span><br><span class="line">e = <span class="string">&quot;&quot;</span>.join(e)[:-<span class="number">1</span>]</span><br><span class="line">e = <span class="built_in">int</span>(e,<span class="number">2</span>)</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{T81I_tPPS_6r7g_xlPi_OO3M_6vyV_Rkba}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一切都是有意义的，拿下它吧。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>message.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自由和谐和谐富强公正友善爱国公正法治法治文明和谐自由法治自由法治平等公正友善公正公正民主法治自由公正敬业和谐富强公正友善爱国和谐平等平等友善敬业法治敬业和谐富强法治平等平等友善敬业公正公正公正友善敬业法治平等平等诚信自由公正自由平等友善敬业公正友善法治和谐和谐</span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> enflag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = q * p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = getPrime(<span class="number">17</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line"><span class="comment"># 以上信息生成了私钥文件,但文件被损坏了你能提取有用信息吗</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(enflag, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>pri.pem：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbIL</span><br><span class="line">SuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYE</span><br><span class="line">N4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuW</span><br><span class="line">eZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESv</span><br><span class="line">IgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn</span><br><span class="line">/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbn</span><br><span class="line">jxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5</span><br><span class="line">X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaA</span><br><span class="line">UETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25u</span><br><span class="line">Gz3++w==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>第一层，解开社会主义核心价值观编码得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C0ngr4tulati0n5_y0u_fou^d_m3</span><br></pre></td></tr></table></figure>
<p>第二层，恢复破损RSA私钥文件，base64解码后得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;30820277020100300d06092a864886f70d0101010500048202613082025d02010002818100b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913020301000102818100974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361024100ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9024100cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&#x27;</span><br></pre></td></tr></table></figure>
<p>按照RSA私钥格式还原，可以得到以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n 028181 00b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913</span><br><span class="line">e 0203 010001</span><br><span class="line">d 028181 00974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361</span><br><span class="line">p 0241 00ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9</span><br><span class="line">q 0241 00cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&quot;</span><br></pre></td></tr></table></figure>
<p>可以看到，私钥中的dp、dq以及inv(q,p)损坏了，但是剩下的值已经足够用于RSA解密，因此正常解密即可得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;0e287wQ\x08R\x17\x00FGXYFZ\x07V\x03kIUCn\x02VDg\x01f\x0cN</span><br></pre></td></tr></table></figure>
<p>发现题目描述XOR还没用上，将第一步社会主义核心价值观解密得到的串用于异或即可。</p>
<p>得到flag：</p>
<font color="red">DASCTF{0e2874af5e422482378640e61d919e9a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体难度确实不大，但是怎么说呢，题目有点坑，自己能力也还存在不足，下次加油吧。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-Lattice</title>
    <url>/post/9b40da15.html</url>
    <content><![CDATA[<p>该文章主要记录一些格相关的趣题</p>
<span id="more"></span>
<h3 id="转化AGCD"><a href="#转化AGCD" class="headerlink" title="转化AGCD"></a>转化AGCD</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">delta = <span class="number">.93</span></span><br><span class="line">kbits = <span class="built_in">int</span>(nbits*delta) &gt;&gt; <span class="number">1</span></span><br><span class="line">bound = <span class="number">2</span>**kbits</span><br><span class="line"></span><br><span class="line">m = <span class="number">53</span></span><br><span class="line">p = getPrime(nbits)</span><br><span class="line">x = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">a = [randint(<span class="number">2</span>, bound) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">b = [inverse(a[i] * x + randint(<span class="number">2</span>, bound), p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a = &#125;</span>\n<span class="subst">&#123;b = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * getPrime(nbits)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n<span class="subst">&#123;n = &#125;</span>\n<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = [226623173423524660762660587272926713775967113908071780918074044654746571, 99264763681859867816401881797921542580399607408617989905539839585323915, 177386736426181055874933306917112626356703658087900095566603898769091471, 5081587307910189127020749833744000992860852972311811125838243285877024, 411574110749659943703486080205654180795533263258790540505729307655142415, 1932137082695732276757073197845160804183868657578020568122170798605640, 103124563846054461729937757543103647655652920105466714505493351091607258, 65504504807895104765113845019342631211794998326986693051403166347389343, 151981136459515488882551190881724794060443302721456924436833810784219984, 3718222682937746804225225548712093487815785751144078132168082568580360, 113510621144631490440930342566441462111997352193075435129065142534001691, 120974784665251812036673794948678799274628176126865320042025545119228958, 193781634902416477262894357163294897773986019836290716577623654684669134, 24723078645443091017196603549741156206848230267873373213787667300835247, 113165730428784680251415263617027036564335843097634063978942541861726366, 407969345567975756778713582637075079783087682011802438819519567067241979, 151997755976755754648644424339697978791639952976423703068460739754839735, 253811682402531882908516509348937060650658679039884817907013090700281326, 404019046883201096048575369492824679211148242588135515488831100750933, 216725815105749574244056185735609680710954976727370948136589694286539150, 131605791470353972911656132280131756304373156215254629027113994962767833, 180190835657942894146705472335255090682179032409197893415067330574923084, 280086867488286721744184104208965143004904898002959657537412170401510680, 141039650035922882497777354937772530276454847300329950111476878397654053, 319858542602843767926919031049756704694256249776295683733693049522108872, 135633729043152514436339515687850041275739968837263316059461122379487161, 5038078437655552457504448170918674775639811066221990939957937239270167, 31918623105281221407484700216805581554894830335850729735403857505547002, 424092292941284354705774693468403308534554297314522980647422106907791591, 300635399575681097924575337707842439619576566621368558814406755486658723, 323686536134235835297820679361020300261642147835330856978902402517820801, 392620731408972775834827063986182511057173023783228673505487358356342114, 108681888409433100038410892044516773350200560613740266422720530715166828, 182338238967593331173372924666322484559869636981878410128856193538847678, 242630103099393630296862580986126439159331512930513337684897019399319621, 439737851682655515589311041364295341910822514202794661846391952824593066, 84115222835816390632388766236883091861894245716624041418721833768917547, 83926810016448863267608537461154878096011055852547156452557576634691363, 354588657997053098464002945990025178880458974438409486331146607111950617, 170413334241108032297843362994773587930354677207616527135896108692092457, 283185550452196010949673962093382632839937948488235076418296451706429923, 390000015988537819093964185756696910433784324036454283227484980367608884, 121370082693927496814267201484843687844578996855559797026014779421645731, 357164702199289826402900456464935203585119719343409406742172822868770420, 124276883926433089715798954125363260298740714164810098876501303684201565, 122912426324401068572433533096099229494021528981601203447594706478943744, 287527827124819650763642012585104162743364640051014410357971387706781531, 135819408760576908301747047938951002691288880199213610653148681326046091, 239644892459756283997004399339163555215985564639569406081575642996080481, 241513055132921096791997556818670497379598444881679976542299970876463098, 144152466563589166040797814966860917437020789050031353309848917297959088, 120162009732086541189519736083838746833770360960800721525565383293404918, 121547756201941339094205049920057111793191461762212554355070565584802804]</span></span><br><span class="line"><span class="string">b = [6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485, 4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876, 7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649, 9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639, 10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603, 5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840, 2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037, 5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258, 3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450, 507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042, 1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168, 2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047, 9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615, 6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102, 4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475, 8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429, 2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887, 3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716, 6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671, 9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615, 5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402, 8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067, 2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721, 4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091, 1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313, 4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221, 10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278, 3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998, 867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086, 2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973, 11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795, 8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531, 618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247, 9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630, 10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980, 5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888, 11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068, 9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464, 783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707, 9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737, 2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151, 11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518, 9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772, 9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309, 8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153, 2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868, 8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996, 9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956, 10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418, 5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476, 5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200, 10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977, 8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538]</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">n = 97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line"><span class="string">c = 44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>观察题目，题目给了如下形式的53组等式：</p>
<script type="math/tex; mode=display">
b_i = (a_i*x + r_i)^{-1} \quad(mod\;p)</script><p>其中，各个值的已知信息如下：</p>
<ul>
<li>x 为 (2，p - 1) 之间的随机数，并且在53组等式中保持不变</li>
<li>a、r 为 (2，2**238) 之间的随机数</li>
<li>给出 a 、b</li>
</ul>
<p>首先，有两点信息暗示要用格：</p>
<p>1、a、r 限制了数据范围，可以看作是小量，暗示用LLL</p>
<p>2、多组线性等式，暗示用矩阵</p>
<p><br></p>
<p>所以关键就是转化到一个可以运用格的问题形式，推导如下：</p>
<p>首先要想明白下面的式子：(推导比较容易，就不讲了)</p>
<script type="math/tex; mode=display">
inverse(b,n) = inverse(b,p)\quad(mod\;p)</script><p>然后就可以将问题按下面的方式逐步转化：</p>
<p>1、<strong>将b逆元转化到模n</strong></p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,p) \quad(mod\;p)</script><p>​        代入上面的式子，变成：</p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,n) \quad(mod\;p)</script><p>​        同理：</p>
<script type="math/tex; mode=display">
(a_1*x + r_1) = inverse(b_1,n) \quad(mod\;p)</script><p>2、<strong>联立消元</strong></p>
<script type="math/tex; mode=display">
a_1*(a_0*x + r_0) = a_1*inverse(b_0,n) \quad(mod\;p)</script><script type="math/tex; mode=display">
a_0*(a_1*x + r_1) = a_0*inverse(b_1,n) \quad(mod\;p)</script><p>​        相减得到：</p>
<script type="math/tex; mode=display">
a_1*r_0 + a_0*r_1 = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)\quad(mod\;p)</script><p>​        有没有发现，小量已经全部移到了等式同一边</p>
<p>3、<strong>转化为AGCD问题</strong></p>
<p>将模等式利用同余定理展开：</p>
<script type="math/tex; mode=display">
a_1*inverse(b_0,n) - a_0*inverse(b_1,n) = k*p + a_1*r_0 + a_0*r_1</script><p>​        此时，问题已经变成了AGCD问题，这是因为：</p>
<p>​        AGCD问题通常形式：</p>
<script type="math/tex; mode=display">
X = q*p + r</script><p>​        在本题中，各个量如下：</p>
<script type="math/tex; mode=display">
X = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)</script><script type="math/tex; mode=display">
q = k,\quad
p = p,\quad
r = a_1*r_0 + a_0*r_1</script><p>至此问题推导就结束了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">512</span></span><br><span class="line">Q_bits = <span class="number">238</span>+<span class="number">1024</span>-<span class="number">512</span></span><br><span class="line">R_bits = <span class="number">238</span>+<span class="number">238</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">226623173423524660762660587272926713775967113908071780918074044654746571</span>, <span class="number">99264763681859867816401881797921542580399607408617989905539839585323915</span>, <span class="number">177386736426181055874933306917112626356703658087900095566603898769091471</span>, <span class="number">5081587307910189127020749833744000992860852972311811125838243285877024</span>, <span class="number">411574110749659943703486080205654180795533263258790540505729307655142415</span>, <span class="number">1932137082695732276757073197845160804183868657578020568122170798605640</span>, <span class="number">103124563846054461729937757543103647655652920105466714505493351091607258</span>, <span class="number">65504504807895104765113845019342631211794998326986693051403166347389343</span>, <span class="number">151981136459515488882551190881724794060443302721456924436833810784219984</span>, <span class="number">3718222682937746804225225548712093487815785751144078132168082568580360</span>, <span class="number">113510621144631490440930342566441462111997352193075435129065142534001691</span>, <span class="number">120974784665251812036673794948678799274628176126865320042025545119228958</span>, <span class="number">193781634902416477262894357163294897773986019836290716577623654684669134</span>, <span class="number">24723078645443091017196603549741156206848230267873373213787667300835247</span>, <span class="number">113165730428784680251415263617027036564335843097634063978942541861726366</span>, <span class="number">407969345567975756778713582637075079783087682011802438819519567067241979</span>, <span class="number">151997755976755754648644424339697978791639952976423703068460739754839735</span>, <span class="number">253811682402531882908516509348937060650658679039884817907013090700281326</span>, <span class="number">404019046883201096048575369492824679211148242588135515488831100750933</span>, <span class="number">216725815105749574244056185735609680710954976727370948136589694286539150</span>, <span class="number">131605791470353972911656132280131756304373156215254629027113994962767833</span>, <span class="number">180190835657942894146705472335255090682179032409197893415067330574923084</span>, <span class="number">280086867488286721744184104208965143004904898002959657537412170401510680</span>, <span class="number">141039650035922882497777354937772530276454847300329950111476878397654053</span>, <span class="number">319858542602843767926919031049756704694256249776295683733693049522108872</span>, <span class="number">135633729043152514436339515687850041275739968837263316059461122379487161</span>, <span class="number">5038078437655552457504448170918674775639811066221990939957937239270167</span>, <span class="number">31918623105281221407484700216805581554894830335850729735403857505547002</span>, <span class="number">424092292941284354705774693468403308534554297314522980647422106907791591</span>, <span class="number">300635399575681097924575337707842439619576566621368558814406755486658723</span>, <span class="number">323686536134235835297820679361020300261642147835330856978902402517820801</span>, <span class="number">392620731408972775834827063986182511057173023783228673505487358356342114</span>, <span class="number">108681888409433100038410892044516773350200560613740266422720530715166828</span>, <span class="number">182338238967593331173372924666322484559869636981878410128856193538847678</span>, <span class="number">242630103099393630296862580986126439159331512930513337684897019399319621</span>, <span class="number">439737851682655515589311041364295341910822514202794661846391952824593066</span>, <span class="number">84115222835816390632388766236883091861894245716624041418721833768917547</span>, <span class="number">83926810016448863267608537461154878096011055852547156452557576634691363</span>, <span class="number">354588657997053098464002945990025178880458974438409486331146607111950617</span>, <span class="number">170413334241108032297843362994773587930354677207616527135896108692092457</span>, <span class="number">283185550452196010949673962093382632839937948488235076418296451706429923</span>, <span class="number">390000015988537819093964185756696910433784324036454283227484980367608884</span>, <span class="number">121370082693927496814267201484843687844578996855559797026014779421645731</span>, <span class="number">357164702199289826402900456464935203585119719343409406742172822868770420</span>, <span class="number">124276883926433089715798954125363260298740714164810098876501303684201565</span>, <span class="number">122912426324401068572433533096099229494021528981601203447594706478943744</span>, <span class="number">287527827124819650763642012585104162743364640051014410357971387706781531</span>, <span class="number">135819408760576908301747047938951002691288880199213610653148681326046091</span>, <span class="number">239644892459756283997004399339163555215985564639569406081575642996080481</span>, <span class="number">241513055132921096791997556818670497379598444881679976542299970876463098</span>, <span class="number">144152466563589166040797814966860917437020789050031353309848917297959088</span>, <span class="number">120162009732086541189519736083838746833770360960800721525565383293404918</span>, <span class="number">121547756201941339094205049920057111793191461762212554355070565584802804</span>]</span><br><span class="line">b = [<span class="number">6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485</span>, <span class="number">4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876</span>, <span class="number">7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649</span>, <span class="number">9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639</span>, <span class="number">10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603</span>, <span class="number">5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840</span>, <span class="number">2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037</span>, <span class="number">5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258</span>, <span class="number">3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450</span>, <span class="number">507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042</span>, <span class="number">1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168</span>, <span class="number">2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047</span>, <span class="number">9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615</span>, <span class="number">6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102</span>, <span class="number">4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475</span>, <span class="number">8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429</span>, <span class="number">2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887</span>, <span class="number">3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716</span>, <span class="number">6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671</span>, <span class="number">9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615</span>, <span class="number">5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402</span>, <span class="number">8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067</span>, <span class="number">2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721</span>, <span class="number">4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091</span>, <span class="number">1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313</span>, <span class="number">4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221</span>, <span class="number">10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278</span>, <span class="number">3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998</span>, <span class="number">867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086</span>, <span class="number">2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973</span>, <span class="number">11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795</span>, <span class="number">8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531</span>, <span class="number">618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247</span>, <span class="number">9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630</span>, <span class="number">10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980</span>, <span class="number">5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888</span>, <span class="number">11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068</span>, <span class="number">9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464</span>, <span class="number">783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707</span>, <span class="number">9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737</span>, <span class="number">2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151</span>, <span class="number">11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518</span>, <span class="number">9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772</span>, <span class="number">9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309</span>, <span class="number">8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153</span>, <span class="number">2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868</span>, <span class="number">8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996</span>, <span class="number">9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956</span>, <span class="number">10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418</span>, <span class="number">5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476</span>, <span class="number">5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200</span>, <span class="number">10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977</span>, <span class="number">8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line">c = <span class="number">44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"></span><br><span class="line">N = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">    N.append(a[i+<span class="number">1</span>]*inverse(b[i],n) - a[i]*inverse(b[i+<span class="number">1</span>],n))</span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">abs</span>(<span class="built_in">int</span>(p))</span><br><span class="line">q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;755f85c2723bb39381c7379a604160d8&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with nothing.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, pbits: <span class="built_in">int</span>, level: <span class="built_in">int</span>=<span class="number">0</span></span>):</span><br><span class="line">    p = getPrime(pbits)</span><br><span class="line">    M = random_matrix(GF(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line">args = &#123;</span><br><span class="line">    <span class="string">&quot;chall1&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x00</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall2&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x01</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall3&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">dict</span>()</span><br><span class="line">enc = pad(secret.flag, LEN)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    out[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>] = challenge(**args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>])</span><br><span class="line">    enc = xor(enc, hashlib.sha512(args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>][<span class="string">&quot;m&quot;</span>]).digest())</span><br><span class="line">out[<span class="string">&quot;enc&quot;</span>] = enc.<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;out = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理一下解密流程：</p>
<ul>
<li>先将flag串填充至32的整数倍</li>
<li>生成三组challenge需要的参数：m，pbits，level</li>
<li>将每一组的m用sha512加密后，依次与flag异或</li>
<li>给出每组challenge的对应输出与最终密文值</li>
</ul>
<p>其中，challenge的各个参数值在加密过程中的作用依次是：</p>
<ul>
<li>生成一个pbits的素数p，并以该p生成一个有限域Gf(p)</li>
<li>将m的32个随机字节转换成Gf(p)下的长度为32的向量</li>
<li>生成一个大小为32*(32-level)的矩阵M，M中元素均为Gf(p)中的随机数</li>
<li>计算c=m*M，并给出p、M和c</li>
</ul>
<p>因此，我们要做的就是由c、M反解出m，并计算其sha512值后与密文依次异或，就能得到明文，但是三次求解的方法由M的大小而产生不同。</p>
<h4 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h4><p>第一轮，M的大小为32*32，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 32} = c_{1\times 32}\quad(mod\;p)</script><p>可以看作是m的32个变量对应了32组方程，因此满秩，可以直接求解线性方程组(数据有点大，想要复现的师傅可以联系我)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h4><p>第二轮，M的大小为32*31，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 31} = c_{1\times 31}\quad(mod\;p)</script><p>也就是说，m的32个变量只有31组方程了，因此可以求出无穷多组解。不过由于只差一组方程，因此也只需要选取一个自由变量，并从c中对应减去其值后，解一个31变量的满秩方程。而判断解正确的依据就是解出来的m向量中所有值均在0-256之间。</p>
<p>说起来可能不那么明白，还是上个例子，这里以下面这个线性方程组简单说明一下：</p>
<script type="math/tex; mode=display">
m_{1\times 4}*M_{4\times 3} = c_{1\times 3}</script><p>写出来：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3,x_4)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} \\
   m_{41} & m_{42} & m_{43}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,c_3)</script><p>变成方程组形式就是：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3} + m_{41}x_{4} = c_1 \\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3} + m_{42}x_{4} = c_2 \\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3} + m_{43}x_{4} = c_3 
    \end{cases}</script><p>现在我们假设已经知道了x4的值(对应于题目中，就是在0-256中爆破)，那么把方程组中含x4的项都移到右边，就变成：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3}  = c_1 - m_{41}x_{4}\\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3}  = c_2 - m_{42}x_{4}\\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3}  = c_3 - m_{43}x_{4}
    \end{cases}</script><p>接下来解的就是这个满秩方程：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} 
  \end{matrix}
  \right)
  =(c_1 - m_{41}x_{4},c_2 - m_{42}x_{4},c_3 - m_{43}x_{4})</script><p>很容易想到，当解出的向量 $ (x_1,x_2,x_3)$ 均在0-256之间时，就正确求解了。放在本题中也不过是对这个例子的扩大而已，取x32进行爆破，方法是完全一样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h4><p>第三轮，M的大小为32*16，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 16} = c_{1\times 16}\quad(mod\;p)</script><p>可以想到，如果继续用第二轮中的方法，那么需要爆破256的16次方种可能，数量级达到了2^128，是显然不可能的，所以需要另谋他法。而其实你应该早就想到了，m在每个challenge中，都是一个由32个0-256的值组成的向量。0-256意味着，<strong>在模p下这些值都很小</strong>，因此很自然地就会联想到格。</p>
<p>所以challenge3其实是一个格基规约问题，但是想构造出这样的格还是有点难度的。首先还是列出构造格需要的多个等式：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,...,x_{31},x_{32})*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}\\
   m_{2,1} & m_{2,2} &... &m_{2,16} \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16} \\
   m_{32,1} & m_{32,2} &... &m_{32,16}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,...,c_{15},x_{16})\quad(mod\;p)</script><p>从这个矩阵乘法中，可以提取出其中的十六个等式：(i = 1,2,…,16)</p>
<script type="math/tex; mode=display">
m_{1,i}*x_1+m_{2,i}*x_2...+m_{31,i}*x_{31}+m_{32,i}*x_{32}+ k_i*p=c_i</script><p>以这些等式为基础，我们构造出下面的格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>
<p>写清楚点就是：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)</script><p>这是一个64*48的矩阵，而我们用这个矩阵规约的依据等式是：</p>
<script type="math/tex; mode=display">
(x_1,x_2,...,x_{32},k_1,k_2,...,k_{16},-1,-1,...,-1)*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)
  =
  (0,0,...,0,x_1,x_2,...,x_{32})</script><p>可以看出，规约出的向量 $(0,0,…,0,x_1,x_2,…,x_{32})$ 是非常短的，因此LLL就能得到这个解(不过实际操作会发现满足要求的向量在第二行)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>得到三个flag之后，进行sha512后依次与密文异或就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">p = </span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line">p = <span class="number">661</span></span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment">#final</span></span><br><span class="line">c = <span class="number">0x72c0e8ef53c726969a91368ca600a081f38f5cfaa1d0669d9049f278fb2f0fb4f36dced86bf9b7e9ef59af082cc5a5b2458cae490ab23c0c8c5b9361499ae2e2</span></span><br><span class="line">enc = long_to_bytes(c)</span><br><span class="line">flag = [flag1,flag2,flag3]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    enc = xor(enc, hashlib.sha512(flag[i]).digest())</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;db1ebd0c-1cac-55d5-763e-b05f3d9af423&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="SSSMMM"><a href="#SSSMMM" class="headerlink" title="SSSMMM"></a>SSSMMM</h3><p>题目来源：2023福建省工控赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = pad(flag, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">ecc_table = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span></span><br><span class="line">         <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TSM2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sk, ecc_table</span>):</span><br><span class="line">        self.ecc_table = ecc_table</span><br><span class="line">        self.n = <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        self.para_len = <span class="built_in">len</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">        self.ecc_a3 = (<span class="built_in">int</span>(ecc_table[<span class="string">&#x27;a&#x27;</span>], base=<span class="number">16</span>) +</span><br><span class="line">                       <span class="number">3</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.pk = self._kg(self.sk, ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, data, K</span>):</span><br><span class="line">        e = data</span><br><span class="line">        d = self.sk</span><br><span class="line">        k = K</span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(k, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        R = ((e + x) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> R == <span class="number">0</span> <span class="keyword">or</span> R + k == <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        d_1 = <span class="built_in">pow</span>(</span><br><span class="line">            d+<span class="number">1</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        S = (d_1*(k + R) - R) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> S == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (R, S)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, Sign, data</span>):</span><br><span class="line">        r = <span class="built_in">int</span>(Sign[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(Sign[self.para_len:<span class="number">2</span> * self.para_len], <span class="number">16</span>)</span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.n</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(s, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        P2 = self._kg(t, self.pk)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> P1 == P2:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._add_point(P1, P2)</span><br><span class="line">            P1 = self._convert_jacb_to_nor(P1)</span><br><span class="line"> </span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> r == ((e + x) % self.n)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_kg</span>(<span class="params">self, k, Point</span>):</span><br><span class="line">        <span class="keyword">if</span> (k % self.n) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span></span><br><span class="line">        Point = <span class="string">&#x27;%s%s&#x27;</span> % (Point, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        mask_str = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len - <span class="number">1</span>):</span><br><span class="line">            mask_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        mask = <span class="built_in">int</span>(mask_str, <span class="number">16</span>)</span><br><span class="line">        Temp = Point</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len * <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                Temp = self._double_point(Temp)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; mask) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    Temp = self._add_point(Temp, Point)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    Temp = Point</span><br><span class="line">            k = k &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self._convert_jacb_to_nor(Temp)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_double_point</span>(<span class="params">self, Point</span>):</span><br><span class="line">        l = <span class="built_in">len</span>(Point)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        <span class="keyword">if</span> l &lt; self.para_len * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y1 = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l == len_2:</span><br><span class="line">                z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z1 = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T6 = (z1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y1 * y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (x1 - T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (y1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * <span class="number">8</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (x1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * <span class="number">3</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (T6 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (self.ecc_a3 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            z3 = (T3 + T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            x3 = (T3 - T5) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (T5 % <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">                T4 = (T5 + ((T5 + <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)) &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(</span><br><span class="line">                    self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T4 = (T5 + (T5 &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (T1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (x3, y3, z3)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_point</span>(<span class="params">self, P1, P2</span>):</span><br><span class="line">        <span class="keyword">if</span> P1 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P2, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> P2 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        l1 = <span class="built_in">len</span>(P1)</span><br><span class="line">        l2 = <span class="built_in">len</span>(P2)</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt; len_2) <span class="keyword">or</span> (l2 &lt; len_2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X1 = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            Y1 = <span class="built_in">int</span>(P1[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l1 == len_2:</span><br><span class="line">                Z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Z1 = <span class="built_in">int</span>(P1[len_2:], <span class="number">16</span>)</span><br><span class="line">            x2 = <span class="built_in">int</span>(P2[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y2 = <span class="built_in">int</span>(P2[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (Z1 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y2 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x2 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T3 - X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 + X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 - Y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Z3 = (Z1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (X1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            X3 = (T5 - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (Y1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T4 - X3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (X3, Y3, Z3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>):</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        x = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">        z = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line">        z_inv = <span class="built_in">pow</span>(</span><br><span class="line">            z, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        z_invSquar = (z_inv * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_invQube = (z_invSquar * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        x_new = (x * z_invSquar) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        y_new = (y * z_invQube) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_new = (z * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> z_new == <span class="number">1</span>:</span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> form % (x_new, y_new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">start, bits, k</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">bin</span>(k)[<span class="number">2</span>:][-start-bits:-start],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sk = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">sm2 = TSM2(sk, ecc_table)</span><br><span class="line">start = <span class="number">130</span></span><br><span class="line">bits = <span class="number">7</span></span><br><span class="line">num = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">sigs = []</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    msg = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    k = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    leaks=leak(start, bits, k)</span><br><span class="line">    L.append(leaks)</span><br><span class="line">    sigs.append(sm2.sign(msg, k))</span><br><span class="line"></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(sigs)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;1de6f33a8366acbdd0b87ec7beb59e429936b43bae9b8ee2538d2b97d6640c70143fa04e7f1880d22b0e9cbce938edd880d69fc4ed9a6315abd905880a8d38f7&#x27;, &#x27;9d5f8a16fe8d951cbab0a6dca86427286ca389aca6497f20ca3421fa0aa27f4ddf2db6c58229182eaccca41bfebf56961ff1f683ba94b81137c41f61c98c1368&#x27;, &#x27;4d20e1aa4e4f6a4948158fabbdadec3c4d6049b6439981efcb70900d954d0a8f18bce67831d426c12726c321e6eb69e8708739fc74bfde6ad601433bcd896ca7&#x27;, &#x27;e5358c986a12ec11bcd495e8822c5a71b2545dc11ce09521edaa47c11b739b12bbe76ca89bd08beb969355dec56dfcdd6cff121bb61eaea148d25e9a6e428145&#x27;, &#x27;fb06d41eafbcc77d464fe41ca356641cbb92289d28b0ff37caad95619c34557969acf9f615214f3ecf6c15943fc63470da0785687ae535045145d5e161a69210&#x27;, &#x27;2e97f02e82642c033af0fc9686788c1acd8841b65228fab3e66f5328e790d702edadb13e99ed1d411482cd913ec6730803e6fcff29206d9e1fc1b68e1f631e25&#x27;, &#x27;4f1ffd080380e945b24596135e5772058ee8adc26272ed3147f0701063b4b9f435e5ac679ef2cd950332ea5139d64ffee7f1211ea64c5beffa162bb942683fac&#x27;, &#x27;0882c54ba0409f28ab3907831eedab320bf3645fd70888266393704f81998ed57778912ededb54c58efd6fc9f22188566824ae312d4585f87d37339fd87827e6&#x27;, &#x27;9dafe7cee839389cbd5a72ac17befad3228b47192ed3a94a319eef67704c094adfeca2f14a1cea54540e7d69c6033c53fdbe60969cc910b31b1fce8c9d6a9d5b&#x27;, &#x27;627357126622ad1b76354b4f6974120f670baf035e24599e36c9f14527f225e6acb0e00482c3ab7442858070181eb3a7fc4acd8de5e5411aa482b094c6e1a1fa&#x27;, &#x27;a9c7c29b800677ac44427204bc2137f0641465a411a521d3567911ab364c426c7a340ad1dcddb2330667bc78925bbec8bfd47cbf8031496e468f5ff3f9cc8a71&#x27;, &#x27;23429d961d3bcf2e4873379afba581b351441c2d33c37c1fb5e84cdc22045a99bac91b3d8e3c90de3d56d443e439246872ab8fbd4ff42fbbd37509f79ccedd6e&#x27;, &#x27;2847983b8f9492fe88c988d04b8086b94d8f827684e10cf2d4db1f5c65c1a7354c6e15df548df379ea5a56b57de9e36faf36c8d05270dc4bf69577ecbb5c1300&#x27;, &#x27;c684e4714cd002abea6fa5bd23014a152cf358ab848179fdc29f1b79b090b42c550ea43718e3e2c4bea2ece080db41fb9433539cac0b8ac8e419bcdbb6477017&#x27;, &#x27;34e969156c0ff98ccff9dbe2757a365e24e81857937cc3056a1b837d67a5bc0215c99aa15ac8150c6cee089623000104017ac535ef3a7fd10bb46b008e64bf12&#x27;, &#x27;b79275b644dd73661b947fb786054b114fc90bcdf19cdd2a4cc96c426a3581d854619d95c3b9864534f9fe66445336e55c1a79527825706500527392ebac7ba6&#x27;, &#x27;f7302bd4f492be0537536a5327dab593b903346a5e32bf0262f494f11bb3968a736ae1a90abebe7ab600d899b001e8e4704117b862cf7787df29b1b8cda76227&#x27;, &#x27;e7d378b1f273baaaab041d3d81d669a351abe21d5987403fbb7d35f957a82ebcf0ffbbef77a08c1807d6e19d33053a62801f151bb81d0179bdb09fefd45a845d&#x27;, &#x27;8c8dddfe7c2ee295c4aad0f207517cb00a5870c93c38af0e7438510f80b6788f7e863da10ec0650ab661ead1ae799dc63d3f7115c018a1d1961a068cff25ff21&#x27;, &#x27;7382adaeab3aaed04178cf90bcb2750e11498f17dda2e058bbed931e9ff55faaa3fcc5af423ac139fd936fff916c78a5de316e67b5226d804e2590c65ad191c8&#x27;, &#x27;70385b3c8fa2fd47be6963683256ebcbf2eb0a81f76856cb9524d59dcc1f910f98b0c37687857da008c6901fd78a9cf3b8b0ea9d744c8ab3b3d1b70277372572&#x27;, &#x27;13f510e214b5bb7dbb81fadd772835f6fd0f082252ab775ab72c1b62b1573466a39d634f428202dd67bb4cdbb692a2a5dd148a49504d021d4aa5d903fac02cb1&#x27;, &#x27;0910c842616b8b4c7f2ab265172e1d682a89b79f97019473d517b606dd43999e343ad4b08a71b69a1f4ffc8db39f7deb0a3c51c44652b1c63e090d901f43b33d&#x27;, &#x27;7129bd6c31cc1e7f480fa713d9ba5386fdac580593229ca77baf96ea41e87fcd5b4c83693fc4b6b37959fc80391e05b279acad320fbd03e1c332e4cedc86a5b7&#x27;, &#x27;b6b80ce7dfe5a9fe066fce563a486c4a5f07611ab484131faf9381dc794a329390c60b53080d8360903f5759a18a1eca1b265655ef43ca213544c31e99fe0087&#x27;, &#x27;7bfdca43b8d21d48e18dae387ea95c4ba690bff5fe22f3a29637c196a2288fdde98ec73554123dc33c8af567c7b98f9775600a0e34f32eae62655b47a0182171&#x27;, &#x27;b93eb6af65de700306b7a22816a1d461451c694de5ce55464be57cce89e8349f81a6d3fcc52da72c5d14df88bbe5ff683b591788d3edc91006a99ed1171ecce0&#x27;, &#x27;1ab26e7f8a1e8854a73f2904d781f9f551d5b325fea4ec3f7ec45a03fc8d0b087b054f6475c21a473f5b47d6a980539b6a0aaf207bf89b3cc46eaf7fbf63411d&#x27;, &#x27;bea21a265e48c2624ba85137392dde1971325909fdfb97f57397f422cd6a152ef75c99b0634d6863aa4d7b4f07648d10c7ed3eeb210dc86691d0e2b463471ba8&#x27;, &#x27;e49e1b08e4865d8da0a278c049b2826a6b97911adbdaa836fd57f509f96db436327318bbf82c98b8d9f607e99c48db663473e4e941eb6109b174375a157eeb60&#x27;, &#x27;72f00c548fc2539a8914b135b80a37e5137fa267579bcf11b566d4c44ee57defced7d0d3a2ec9923aa2790e80ac61a151b79e7b2dd17accbc7dd66c8e41d7489&#x27;, &#x27;c0d86918879d4ccfa4adf3fbd449c9b26a17b61073221a15d576e9528e0e29fcf3b164020043ac2a5752768ac996fa15e551c36dfd6c1dbf0d24d81d2e5b6724&#x27;, &#x27;ffd6eca8075af0c4fe4f38d4b3950ed76a4cc1474eadbd65b38484138456a98a4f4cc697c2d455d386e432679722f32cc59d1aa5135eb72cb10b5a82380b4e71&#x27;, &#x27;a3407cb209c1a6788ba1ca992a7b6cc04ef1130f92be63b9738dae873f3e407b440788115edd81ef3c2e791e10798c3fd1830ca5b4773523ef246cf13fbd5a5c&#x27;, &#x27;3b1fe148835ebeece99b0df444cb2705e195d5d364fdbaf2fa754797c8f7484461327d471b258f9b0b5dcfb757a08d50b0ac334154fd6d4d0d68c2a846de4163&#x27;, &#x27;cc12da7bed20a53b5af9eebae5a94177f745ed5d48c4690cb462c498019e6a516b52cc9953620c04e12a79b45e99fc8164a79f00268c648801824a690a01b78f&#x27;, &#x27;e4e36894a7323e5fb1dc54366acd4fd3f6d9ec2817bd1c153d3d84ed544893d6f5c8a7fe839acf4880eb8df6c8ced3f2f7d947835a496da7b010bf6c5b04d669&#x27;, &#x27;a365dd19731e2d0ad844856da269d53a895ddcf5195b16f4e858ba4f83d99f2bbc49f7e7f61a431297545a3c9f3b99815a5a9645f83b1ac3acf1ca61481812fd&#x27;, &#x27;0feb0860a5f6f2eaffc35e02a63633335b702e8bb1ef5c24dc82848cf3145149f4cede4352366db459784fa843ba0a20cec648b2674704bfe8facc2eb97a0fc5&#x27;, &#x27;47c15d55e9a7f31ad5566213f8d0bdb6c4082b3dc2506f6d9d55af00fefe41a8c7ebe0255430efc5f6e7f5858fadd8478959afaf23ed57871ff78c676d0a1cd0&#x27;, &#x27;c15d5a156453862bd6d7d3634dbbc711fcbe38e04a71cec69ff936347417fe439343f93a0a0a0d51712ce44fa277861cee82c350341fe00c28448e3fc6956cfa&#x27;, &#x27;42a93a785ff208608b4deeac184a7f882e75c9d45e5c1fec6c4cd08f5efe08c27d5a670676e4c8697ad0813b02fe50f19e7a0bf189716a2796b9804f737d5a98&#x27;, &#x27;33e06326cc15e21e9a7d2f5b45facd397d9ef13315bb792356432fcb63e22ce15f1da0a8db378660ee1b8ce9286f772663f16da0cf6bbce149392d50e24096cc&#x27;, &#x27;1c11c1cbd0b3e468b7671c2ad1030506542935716c27cd0e241bc68144390a615f50af737bc2da9a72872ebae750e962a225d0dff561d879f919d187f95e4878&#x27;, &#x27;d96905497145789b9734797625ede70eafcb8fc5eedbac4278091aba0d7c4b2bfe74e97ef5f966c1a3b408d91a36290a94027677c8b02d62e1a2b6498550c61a&#x27;, &#x27;ab5accec0103e2809ff5a59c8b3ac3d1426441981f8c6413003c4b69494f54d1cc7d6bf352373c2d60f8aa3b0b2236d2ae150b02bea2f5d353e9b3400519be8e&#x27;, &#x27;341cd45d80593cf158aac070433333500633f6bca596ea07b758729f7f1c2c9391a9dfa56bfd6810b2e21b0009fc84e4a309805288ace599b80eabe35feaebc7&#x27;, &#x27;944769dafb279eb7998d136427e894cba7fb2fbc7f13e4137eabfaaec26f0bdc0779c212756e5c0ac849d285a5b6900174d2042759eeb1d3f5b0e49c58176e2c&#x27;, &#x27;2dfaea9976d6d33109c778e28acb0647a01a4abff01df29b35d51b2359cccc75bac8772de117a47c64821566087de13bd8ab16f72e189c7a934b19b56734fee0&#x27;, &#x27;c613ddab5dd81096088f185a1ead16ea0e6d99facd0249535b4327e11bd53fac5fd1b3807fef181a93cc048dbd4387e64c8281ead7bf2a28970739900633b7ad&#x27;]</span></span><br><span class="line"><span class="string">[87, 18, 88, 63, 30, 66, 60, 85, 13, 82, 35, 28, 21, 74, 47, 6, 30, 111, 97, 51, 42, 61, 92, 70, 113, 43, 7, 21, 68, 10, 99, 57, 87, 51, 43, 44, 60, 39, 117, 6, 88, 48, 47, 51, 56, 91, 6, 29, 92, 82]</span></span><br><span class="line"><span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目实现了一个代码很长的椭圆曲线类，不过注意到类中某个函数名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>)</span><br></pre></td></tr></table></figure>
<p>而从其他地方了解过，椭圆曲线有一种基于雅可比坐标的计算，可以增加运算效率。具体可以参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/87490028">椭圆曲线—雅可比坐标 - 知乎 (zhihu.com)</a></p>
<p>那么这些函数应该就是雅可比坐标意义下的点加法和倍乘法的实现，所以可以不用去理解坐标的计算过程，直接把这个ecc_table中的各参数用sage中的标准ECC表示即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc1 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">g1 = ecc1((<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br></pre></td></tr></table></figure>
<p>而可以验证，给出的g点是一个满足阶等于曲线阶的生成元，n也就是曲线的阶，并且是一个素数。把ECC这一层理解清楚之后，就明白其实很长一段代码都是不太需要理解的。</p>
<p>因此我们直接来看题目核心的加密任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">start, bits, k</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">bin</span>(k)[<span class="number">2</span>:][-start-bits:-start],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sk = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">sm2 = TSM2(sk, ecc_table)</span><br><span class="line">start = <span class="number">130</span></span><br><span class="line">bits = <span class="number">7</span></span><br><span class="line">num = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">sigs = []</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    msg = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    k = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    leaks=leak(start, bits, k)</span><br><span class="line">    L.append(leaks)</span><br><span class="line">    sigs.append(sm2.sign(msg, k))</span><br><span class="line"></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(sigs)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure>
<p>可以看到，给出了一个leak函数，它可以泄露一个数k的中间130-136比特，共7比特。然后题目给出了如下加密过程：</p>
<ul>
<li>随机生成一个数sk，并以其作为私钥生成一个TSM2的类对象sm2</li>
<li>进行50次基于ECC的变种签名操作，并给出每一次的临时密钥(nonce)k的leak，以及每一次的签名值(R,S)</li>
<li>用私钥sk作为AES密钥，对flag进行加密，并给出密文</li>
</ul>
<p>那么思路就是从50次签名操作的泄露信息中，还原出私钥sk，并解AES得到flag。因此我们主要关注签名操作：</p>
<ul>
<li>计算kg的横坐标作为x，其中g为给定的生成元，k为该次签名的临时密钥(nonce)</li>
<li>计算</li>
</ul>
<script type="math/tex; mode=display">
R = msg + x \quad (mod\;n)</script><ul>
<li>计算(n是一个素数，所以可以由费马小定理推出下式)</li>
</ul>
<script type="math/tex; mode=display">
d_1 = (sk+1)^{-1} \quad(mod\;n)</script><ul>
<li>计算</li>
</ul>
<script type="math/tex; mode=display">
S = (sk+1)^{-1}(k+R) - R \quad(mod\;n)</script><p>然后将(R,S)作为本次签名值返回，并每次泄漏k的中间7比特。</p>
<p>其实看到比特泄漏就能想到应该是构造HNP求解，那么什么是我们需要的短向量呢？</p>
<p>首先注意到，每一次的临时密钥k可以写成如下形式：</p>
<script type="math/tex; mode=display">
k_i = 2^{137}k_{hi} + 2^{130}k_{leaki} + k_{li}</script><p>也就是把k分成三部分，高位、leak位和低位，其中高位和低位是未知的，其比特数大概为119比特和130比特。而这就是我们构造HNP的关键，<strong>短向量中要有每个临时密钥的高位和低位！</strong>而我们只要能恢复任何一个临时密钥k，我们就可以通过S的签名式，计算出sk的值。</p>
<p>而显然我们需要根据S的这个等式构造格：</p>
<script type="math/tex; mode=display">
S = (sk+1)^{-1}(k+R) - R \quad(mod\;n)</script><p>如何构造呢？我们简单变形一下：</p>
<p>移项，并乘逆元至左端：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(sk+1) = k_i+R_i \quad(mod\;n)</script><p>再移个项，这样做是为了把k置于一端，其他置于另一端：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(sk+1)-R_i = k_i \quad(mod\;n)</script><p>然后我们知道，sk是一个256比特的量，我们是不希望他出现在规约后的结果中的，因此想办法联立两个式子把他消去，这里我们取i=0与i!=0的式子做消除，如下：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(sk+1)-R_0 = k_0 \quad(mod\;n)</script><script type="math/tex; mode=display">
(S_i+R_i)(sk+1)-R_i = k_i \quad(mod\;n)</script><p>上下各自乘上对应系数：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(S_0+R_0)(sk+1)-(S_i+R_i)R_0 = (S_i+R_i)k_0 \quad(mod\;n)</script><script type="math/tex; mode=display">
(S_0+R_0)(S_i+R_i)(sk+1)-(S_0+R_0)R_i = (S_0+R_0)k_i \quad(mod\;n)</script><p>作差：</p>
<script type="math/tex; mode=display">
R_i(S_0+R_0)-(S_i+R_i)R_0 = (S_i+R_i)k_0 - (S_0+R_0)k_i \quad(mod\;n)</script><p>左边是个已知的数字，为了表示方便，我们把这个先写成一个简单形式bi：</p>
<script type="math/tex; mode=display">
b_i = R_i(S_0+R_0)-(S_i+R_i)R_0</script><p>即：</p>
<script type="math/tex; mode=display">
b_i= (S_i+R_i)k_0 - (S_0+R_0)k_i \quad(mod\;n)</script><p>然后为了找到HNP的形式，我们继续移一下项：</p>
<script type="math/tex; mode=display">
(S_0+R_0)k_i = (S_i+R_i)k_0 - b_i \quad(mod\;n)</script><p>此时我们把k展开为三部分形式：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + 2^{130}k_{leaki} + k_{li}) = (S_i+R_i)(2^{137}k_{h0} + 2^{130}k_{leak0} + k_{l0}) - b_i \quad(mod\;n)</script><p>然后由于kleak已知，那么又可以剔出一部分常量：</p>
<script type="math/tex; mode=display">
2^{130}k_{leaki}(S_0+R_0) + (S_0+R_0)(2^{137}k_{hi} + k_{li}) = 2^{130}k_{leak0}(S_i+R_i) + (S_i+R_i)(2^{137}k_{h0} + k_{l0}) - b_i \quad(mod\;n)</script><p>移项：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + k_{li}) =  (S_i+R_i)(2^{137}k_{h0} + k_{l0}) + 2^{130}k_{leak0}(S_i+R_i) - 2^{130}k_{leaki}(S_0+R_0) - b_i \quad(mod\;n)</script><p>然后为了表示方便，更新一下bi：</p>
<script type="math/tex; mode=display">
b_i = 2^{130}k_{leak0}(S_i+R_i) - 2^{130}k_{leaki}(S_0+R_0) - b_i</script><p>那么又有：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + k_{li}) = (S_i+R_i)(2^{137}k_{h0} + k_{l0}) + b_i \quad(mod\;n)</script><p>然后我们把(S0+R0)乘到右边去：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) = (S_i+R_i)(S_0+R_0)^{-1}(2^{137}k_{h0} + k_{l0}) + b_i(S_0+R_0)^{-1} \quad(mod\;n)</script><p>此时，应该可以发现HNP形式了，我们令：</p>
<script type="math/tex; mode=display">
A_i = (S_i+R_i)(S_0+R_0)^{-1}</script><script type="math/tex; mode=display">
B_i = b_i(S_0+R_0)^{-1}</script><p>则有：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) = A_i(2^{137}k_{h0} + k_{l0}) + B_i \quad(mod\;n)</script><p>把模n去掉，写成等式形式：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) + t_in = A_i(2^{137}k_{h0} + k_{l0}) + B_i</script><p>那么我们就可以根据这个等式构造格，请注意我们构造格的目的是想要kh与kl在规约出的向量中，因此构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   n  &   & &   &0&&&&&&\\
   &n &  &  &&0&&&&& \\
   &  &...&& &&...&&&&\\
   &  &&n &&&&&&&0  \\

   2^{137}&&&&2^{11}&&&&&&\\
   &2^{137}&&&&2^{11}&&&&&\\
   &&...&&&&...&&&&\\
   &&&2^{137}&&&&2^{11}&&&\\

   -2^{137}A_1&-2^{137}A_2&...&-2^{137}A_{49}&&&&&2^{11}&&\\
   -A_1&-A_2&...&-A_{49}&&&...&&&1&\\
   -B_1&-B_2&...&-B_{49}&&&...&&&&2^{130}\\
  \end{matrix}
  \right)</script><p>这样写可能有点不太清楚，直接上分块矩阵的代码好明白一点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">length = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">O = matrix(ZZ,(length-<span class="number">1</span>),(length-<span class="number">1</span>)+<span class="number">3</span>)</span><br><span class="line">E = diagonal_matrix([<span class="number">2</span>^<span class="number">11</span>]*((length-<span class="number">1</span>)+<span class="number">3</span>))</span><br><span class="line">T1 = diagonal_matrix([n]*((length-<span class="number">1</span>)))</span><br><span class="line">T2 = matrix(ZZ,(length-<span class="number">1</span>)+<span class="number">3</span>,length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    T2[i,i] = <span class="number">2</span>^<span class="number">137</span></span><br><span class="line">    T2[-<span class="number">1</span>,i] = -B[i]</span><br><span class="line">    T2[-<span class="number">2</span>,i] = -A[i]</span><br><span class="line">    T2[-<span class="number">3</span>,i] = -A[i] * <span class="number">2</span>^<span class="number">137</span></span><br><span class="line"></span><br><span class="line">L = block_matrix(ZZ,[[T1,O],[T2,E]])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">130</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">2</span>^<span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>把刚才的格记为L，对该格有如下线性关系：</p>
<script type="math/tex; mode=display">
(t_1,t_2,...,t_{49},k_{h1},k_{h2},...k_{h49},k_{h0},k_{l0},1)L = (k_{l1},k_{l2},...,k_{49},2^{11}k_{h1},2^{11}k_{h2},...2^{11}k_{h49},2^{11}k_{h0},k_{l0},2^{130})</script><p>如此一来规约出的向量数量级相当，均为2^130比特左右，因此对L进行规约有机会找到这个向量，从而恢复k，进而解密出sk。</p>
<p>事实上，采用BKZ算法，该向量会出现在每项均非0的第一行，问题得解</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc1 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">g1 = ecc1((<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">sigs = [<span class="string">&#x27;1de6f33a8366acbdd0b87ec7beb59e429936b43bae9b8ee2538d2b97d6640c70143fa04e7f1880d22b0e9cbce938edd880d69fc4ed9a6315abd905880a8d38f7&#x27;</span>, <span class="string">&#x27;9d5f8a16fe8d951cbab0a6dca86427286ca389aca6497f20ca3421fa0aa27f4ddf2db6c58229182eaccca41bfebf56961ff1f683ba94b81137c41f61c98c1368&#x27;</span>, <span class="string">&#x27;4d20e1aa4e4f6a4948158fabbdadec3c4d6049b6439981efcb70900d954d0a8f18bce67831d426c12726c321e6eb69e8708739fc74bfde6ad601433bcd896ca7&#x27;</span>, <span class="string">&#x27;e5358c986a12ec11bcd495e8822c5a71b2545dc11ce09521edaa47c11b739b12bbe76ca89bd08beb969355dec56dfcdd6cff121bb61eaea148d25e9a6e428145&#x27;</span>, <span class="string">&#x27;fb06d41eafbcc77d464fe41ca356641cbb92289d28b0ff37caad95619c34557969acf9f615214f3ecf6c15943fc63470da0785687ae535045145d5e161a69210&#x27;</span>, <span class="string">&#x27;2e97f02e82642c033af0fc9686788c1acd8841b65228fab3e66f5328e790d702edadb13e99ed1d411482cd913ec6730803e6fcff29206d9e1fc1b68e1f631e25&#x27;</span>, <span class="string">&#x27;4f1ffd080380e945b24596135e5772058ee8adc26272ed3147f0701063b4b9f435e5ac679ef2cd950332ea5139d64ffee7f1211ea64c5beffa162bb942683fac&#x27;</span>, <span class="string">&#x27;0882c54ba0409f28ab3907831eedab320bf3645fd70888266393704f81998ed57778912ededb54c58efd6fc9f22188566824ae312d4585f87d37339fd87827e6&#x27;</span>, <span class="string">&#x27;9dafe7cee839389cbd5a72ac17befad3228b47192ed3a94a319eef67704c094adfeca2f14a1cea54540e7d69c6033c53fdbe60969cc910b31b1fce8c9d6a9d5b&#x27;</span>, <span class="string">&#x27;627357126622ad1b76354b4f6974120f670baf035e24599e36c9f14527f225e6acb0e00482c3ab7442858070181eb3a7fc4acd8de5e5411aa482b094c6e1a1fa&#x27;</span>, <span class="string">&#x27;a9c7c29b800677ac44427204bc2137f0641465a411a521d3567911ab364c426c7a340ad1dcddb2330667bc78925bbec8bfd47cbf8031496e468f5ff3f9cc8a71&#x27;</span>, <span class="string">&#x27;23429d961d3bcf2e4873379afba581b351441c2d33c37c1fb5e84cdc22045a99bac91b3d8e3c90de3d56d443e439246872ab8fbd4ff42fbbd37509f79ccedd6e&#x27;</span>, <span class="string">&#x27;2847983b8f9492fe88c988d04b8086b94d8f827684e10cf2d4db1f5c65c1a7354c6e15df548df379ea5a56b57de9e36faf36c8d05270dc4bf69577ecbb5c1300&#x27;</span>, <span class="string">&#x27;c684e4714cd002abea6fa5bd23014a152cf358ab848179fdc29f1b79b090b42c550ea43718e3e2c4bea2ece080db41fb9433539cac0b8ac8e419bcdbb6477017&#x27;</span>, <span class="string">&#x27;34e969156c0ff98ccff9dbe2757a365e24e81857937cc3056a1b837d67a5bc0215c99aa15ac8150c6cee089623000104017ac535ef3a7fd10bb46b008e64bf12&#x27;</span>, <span class="string">&#x27;b79275b644dd73661b947fb786054b114fc90bcdf19cdd2a4cc96c426a3581d854619d95c3b9864534f9fe66445336e55c1a79527825706500527392ebac7ba6&#x27;</span>, <span class="string">&#x27;f7302bd4f492be0537536a5327dab593b903346a5e32bf0262f494f11bb3968a736ae1a90abebe7ab600d899b001e8e4704117b862cf7787df29b1b8cda76227&#x27;</span>, <span class="string">&#x27;e7d378b1f273baaaab041d3d81d669a351abe21d5987403fbb7d35f957a82ebcf0ffbbef77a08c1807d6e19d33053a62801f151bb81d0179bdb09fefd45a845d&#x27;</span>, <span class="string">&#x27;8c8dddfe7c2ee295c4aad0f207517cb00a5870c93c38af0e7438510f80b6788f7e863da10ec0650ab661ead1ae799dc63d3f7115c018a1d1961a068cff25ff21&#x27;</span>, <span class="string">&#x27;7382adaeab3aaed04178cf90bcb2750e11498f17dda2e058bbed931e9ff55faaa3fcc5af423ac139fd936fff916c78a5de316e67b5226d804e2590c65ad191c8&#x27;</span>, <span class="string">&#x27;70385b3c8fa2fd47be6963683256ebcbf2eb0a81f76856cb9524d59dcc1f910f98b0c37687857da008c6901fd78a9cf3b8b0ea9d744c8ab3b3d1b70277372572&#x27;</span>, <span class="string">&#x27;13f510e214b5bb7dbb81fadd772835f6fd0f082252ab775ab72c1b62b1573466a39d634f428202dd67bb4cdbb692a2a5dd148a49504d021d4aa5d903fac02cb1&#x27;</span>, <span class="string">&#x27;0910c842616b8b4c7f2ab265172e1d682a89b79f97019473d517b606dd43999e343ad4b08a71b69a1f4ffc8db39f7deb0a3c51c44652b1c63e090d901f43b33d&#x27;</span>, <span class="string">&#x27;7129bd6c31cc1e7f480fa713d9ba5386fdac580593229ca77baf96ea41e87fcd5b4c83693fc4b6b37959fc80391e05b279acad320fbd03e1c332e4cedc86a5b7&#x27;</span>, <span class="string">&#x27;b6b80ce7dfe5a9fe066fce563a486c4a5f07611ab484131faf9381dc794a329390c60b53080d8360903f5759a18a1eca1b265655ef43ca213544c31e99fe0087&#x27;</span>, <span class="string">&#x27;7bfdca43b8d21d48e18dae387ea95c4ba690bff5fe22f3a29637c196a2288fdde98ec73554123dc33c8af567c7b98f9775600a0e34f32eae62655b47a0182171&#x27;</span>, <span class="string">&#x27;b93eb6af65de700306b7a22816a1d461451c694de5ce55464be57cce89e8349f81a6d3fcc52da72c5d14df88bbe5ff683b591788d3edc91006a99ed1171ecce0&#x27;</span>, <span class="string">&#x27;1ab26e7f8a1e8854a73f2904d781f9f551d5b325fea4ec3f7ec45a03fc8d0b087b054f6475c21a473f5b47d6a980539b6a0aaf207bf89b3cc46eaf7fbf63411d&#x27;</span>, <span class="string">&#x27;bea21a265e48c2624ba85137392dde1971325909fdfb97f57397f422cd6a152ef75c99b0634d6863aa4d7b4f07648d10c7ed3eeb210dc86691d0e2b463471ba8&#x27;</span>, <span class="string">&#x27;e49e1b08e4865d8da0a278c049b2826a6b97911adbdaa836fd57f509f96db436327318bbf82c98b8d9f607e99c48db663473e4e941eb6109b174375a157eeb60&#x27;</span>, <span class="string">&#x27;72f00c548fc2539a8914b135b80a37e5137fa267579bcf11b566d4c44ee57defced7d0d3a2ec9923aa2790e80ac61a151b79e7b2dd17accbc7dd66c8e41d7489&#x27;</span>, <span class="string">&#x27;c0d86918879d4ccfa4adf3fbd449c9b26a17b61073221a15d576e9528e0e29fcf3b164020043ac2a5752768ac996fa15e551c36dfd6c1dbf0d24d81d2e5b6724&#x27;</span>, <span class="string">&#x27;ffd6eca8075af0c4fe4f38d4b3950ed76a4cc1474eadbd65b38484138456a98a4f4cc697c2d455d386e432679722f32cc59d1aa5135eb72cb10b5a82380b4e71&#x27;</span>, <span class="string">&#x27;a3407cb209c1a6788ba1ca992a7b6cc04ef1130f92be63b9738dae873f3e407b440788115edd81ef3c2e791e10798c3fd1830ca5b4773523ef246cf13fbd5a5c&#x27;</span>, <span class="string">&#x27;3b1fe148835ebeece99b0df444cb2705e195d5d364fdbaf2fa754797c8f7484461327d471b258f9b0b5dcfb757a08d50b0ac334154fd6d4d0d68c2a846de4163&#x27;</span>, <span class="string">&#x27;cc12da7bed20a53b5af9eebae5a94177f745ed5d48c4690cb462c498019e6a516b52cc9953620c04e12a79b45e99fc8164a79f00268c648801824a690a01b78f&#x27;</span>, <span class="string">&#x27;e4e36894a7323e5fb1dc54366acd4fd3f6d9ec2817bd1c153d3d84ed544893d6f5c8a7fe839acf4880eb8df6c8ced3f2f7d947835a496da7b010bf6c5b04d669&#x27;</span>, <span class="string">&#x27;a365dd19731e2d0ad844856da269d53a895ddcf5195b16f4e858ba4f83d99f2bbc49f7e7f61a431297545a3c9f3b99815a5a9645f83b1ac3acf1ca61481812fd&#x27;</span>, <span class="string">&#x27;0feb0860a5f6f2eaffc35e02a63633335b702e8bb1ef5c24dc82848cf3145149f4cede4352366db459784fa843ba0a20cec648b2674704bfe8facc2eb97a0fc5&#x27;</span>, <span class="string">&#x27;47c15d55e9a7f31ad5566213f8d0bdb6c4082b3dc2506f6d9d55af00fefe41a8c7ebe0255430efc5f6e7f5858fadd8478959afaf23ed57871ff78c676d0a1cd0&#x27;</span>, <span class="string">&#x27;c15d5a156453862bd6d7d3634dbbc711fcbe38e04a71cec69ff936347417fe439343f93a0a0a0d51712ce44fa277861cee82c350341fe00c28448e3fc6956cfa&#x27;</span>, <span class="string">&#x27;42a93a785ff208608b4deeac184a7f882e75c9d45e5c1fec6c4cd08f5efe08c27d5a670676e4c8697ad0813b02fe50f19e7a0bf189716a2796b9804f737d5a98&#x27;</span>, <span class="string">&#x27;33e06326cc15e21e9a7d2f5b45facd397d9ef13315bb792356432fcb63e22ce15f1da0a8db378660ee1b8ce9286f772663f16da0cf6bbce149392d50e24096cc&#x27;</span>, <span class="string">&#x27;1c11c1cbd0b3e468b7671c2ad1030506542935716c27cd0e241bc68144390a615f50af737bc2da9a72872ebae750e962a225d0dff561d879f919d187f95e4878&#x27;</span>, <span class="string">&#x27;d96905497145789b9734797625ede70eafcb8fc5eedbac4278091aba0d7c4b2bfe74e97ef5f966c1a3b408d91a36290a94027677c8b02d62e1a2b6498550c61a&#x27;</span>, <span class="string">&#x27;ab5accec0103e2809ff5a59c8b3ac3d1426441981f8c6413003c4b69494f54d1cc7d6bf352373c2d60f8aa3b0b2236d2ae150b02bea2f5d353e9b3400519be8e&#x27;</span>, <span class="string">&#x27;341cd45d80593cf158aac070433333500633f6bca596ea07b758729f7f1c2c9391a9dfa56bfd6810b2e21b0009fc84e4a309805288ace599b80eabe35feaebc7&#x27;</span>, <span class="string">&#x27;944769dafb279eb7998d136427e894cba7fb2fbc7f13e4137eabfaaec26f0bdc0779c212756e5c0ac849d285a5b6900174d2042759eeb1d3f5b0e49c58176e2c&#x27;</span>, <span class="string">&#x27;2dfaea9976d6d33109c778e28acb0647a01a4abff01df29b35d51b2359cccc75bac8772de117a47c64821566087de13bd8ab16f72e189c7a934b19b56734fee0&#x27;</span>, <span class="string">&#x27;c613ddab5dd81096088f185a1ead16ea0e6d99facd0249535b4327e11bd53fac5fd1b3807fef181a93cc048dbd4387e64c8281ead7bf2a28970739900633b7ad&#x27;</span>]</span><br><span class="line">leak = [<span class="number">87</span>, <span class="number">18</span>, <span class="number">88</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">85</span>, <span class="number">13</span>, <span class="number">82</span>, <span class="number">35</span>, <span class="number">28</span>, <span class="number">21</span>, <span class="number">74</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">61</span>, <span class="number">92</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">43</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">57</span>, <span class="number">87</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">39</span>, <span class="number">117</span>, <span class="number">6</span>, <span class="number">88</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">91</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">92</span>, <span class="number">82</span>]</span><br><span class="line">enc = <span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<span class="number">16</span>)</span><br><span class="line">R = []</span><br><span class="line">S = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sigs:</span><br><span class="line">    R.append(<span class="built_in">int</span>(i[:<span class="number">64</span>],<span class="number">16</span>))</span><br><span class="line">    S.append(<span class="built_in">int</span>(i[<span class="number">64</span>:],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">length = <span class="number">50</span></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = inverse((S[<span class="number">0</span>]+R[<span class="number">0</span>]),n) * (S[i]+R[i])</span><br><span class="line">    temp = temp % n</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = R[<span class="number">0</span>]*(S[i]+R[i]) - R[i]*(S[<span class="number">0</span>]+R[<span class="number">0</span>]) + <span class="number">2</span>^<span class="number">130</span>*leak[<span class="number">0</span>]*(S[i]+R[i])  - <span class="number">2</span>^<span class="number">130</span>*leak[i]*(S[<span class="number">0</span>]+R[<span class="number">0</span>])</span><br><span class="line">    temp = temp * inverse((S[<span class="number">0</span>]+R[<span class="number">0</span>]),n) % n</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line">O = matrix(ZZ,(length-<span class="number">1</span>),(length-<span class="number">1</span>)+<span class="number">3</span>)</span><br><span class="line">E = diagonal_matrix([<span class="number">2</span>^<span class="number">11</span>]*((length-<span class="number">1</span>)+<span class="number">3</span>))</span><br><span class="line">T1 = diagonal_matrix([n]*((length-<span class="number">1</span>)))</span><br><span class="line">T2 = matrix(ZZ,(length-<span class="number">1</span>)+<span class="number">3</span>,length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    T2[i,i] = <span class="number">2</span>^<span class="number">137</span></span><br><span class="line">    T2[-<span class="number">1</span>,i] = -B[i]</span><br><span class="line">    T2[-<span class="number">2</span>,i] = -A[i]</span><br><span class="line">    T2[-<span class="number">3</span>,i] = -A[i] * <span class="number">2</span>^<span class="number">137</span></span><br><span class="line"></span><br><span class="line">L = block_matrix(ZZ,[[T1,O],[T2,E]])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">130</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">2</span>^<span class="number">11</span></span><br><span class="line"></span><br><span class="line">temp = L.BKZ()</span><br><span class="line"><span class="comment">#print(temp)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#从上面的格中找到满足要求的一行</span></span><br><span class="line">k0h = <span class="number">127539877108597124515923590046076573696</span> // (<span class="number">2</span>**<span class="number">11</span>)    </span><br><span class="line">k0l = <span class="number">62747361493076885745985101978595693282</span></span><br><span class="line">k0leak = <span class="number">87</span></span><br><span class="line"></span><br><span class="line">k0 = k0h*<span class="number">2</span>**<span class="number">137</span> + k0leak*<span class="number">2</span>**<span class="number">130</span> + k0l</span><br><span class="line">S0 = <span class="number">9158674732422433584753600528499586749789902603207175171281211487385948076279</span></span><br><span class="line">R0 = <span class="number">13525126135691078619994352845806011492310052282990714228513050055938589068400</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sk = ((k0+R0)*inverse(S0+R0,n) - <span class="number">1</span>) % n</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">dec = aes.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;cfe090d0-2888-a84d-ac6e-0e6aef017744&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>2023-香山杯-wp-crypto</title>
    <url>/post/183fe2bb.html</url>
    <content><![CDATA[<p>*代表赛中未解出的题目</p>
<span id="more"></span>
<h3 id="lift"><a href="#lift" class="headerlink" title="lift"></a>lift</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s,l</span>):</span><br><span class="line">    <span class="keyword">return</span> s + os.urandom(l - <span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    g = getPrime(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = g * random.getrandbits(<span class="number">138</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = g * random.getrandbits(<span class="number">138</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    N = p ** <span class="number">5</span> * q</span><br><span class="line">    phi = p ** <span class="number">4</span> * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">    e = inverse(d, phi)</span><br><span class="line">    E = e * g</span><br><span class="line">    hint = gmpy2.gcd(E, phi)</span><br><span class="line">    <span class="keyword">return</span> N, E, hint</span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n,e,hint = gen()</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># hint = 251</span></span><br><span class="line"><span class="comment"># n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line"><span class="comment"># e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line"><span class="comment"># c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br></pre></td></tr></table></figure>
<p>首先要弄清楚gen()函数返回的几个参数究竟是什么：</p>
<script type="math/tex; mode=display">
n = p^5q</script><script type="math/tex; mode=display">
e = e*g</script><script type="math/tex; mode=display">
hint = gcd(e*g,phi)</script><p>其中，p、q参数生成方式如下：</p>
<script type="math/tex; mode=display">
p = g*a1+1</script><script type="math/tex; mode=display">
q = g*a2+1</script><p>即表明phi与g不互素，接下来进入题目分析：</p>
<p>首先有：</p>
<script type="math/tex; mode=display">
phi = p^4(p-1)(q-1) = p^4(g*a1)(g*a2) = g^2p^4a1a2</script><script type="math/tex; mode=display">
e = e*g</script><p>所以hint一定是g的整数倍，而251本身就是素数，因此得到g=251。</p>
<p>而由于题目是多素数n且d为256比特，因此可以考虑采用coppersmith找到d，原理如下(此处的e为gen内部的小写e，而非大写E)，由于：</p>
<script type="math/tex; mode=display">
e*d \equiv 1 \quad (mod\;p^4(p-1)(q-1))</script><p>所以由同余性质：</p>
<script type="math/tex; mode=display">
e*d \equiv 1 \quad (mod\;p^4)</script><p>因此把d看作未知小量，使用coppersmith即可求解模n的参数p^4下的小根。求解出d后，求解gcd(ed-1,n)即可得到p^4，进而还原出p、q。</p>
<p>还原出p、q后，由于密文c是由以下方式得到：</p>
<script type="math/tex; mode=display">
c \equiv m^{eg} \quad (mod\;n)</script><p>而由于g与phi不互素，因此只能先用d求解出：</p>
<script type="math/tex; mode=display">
c1 \equiv c^d \equiv m^g \quad (mod\;n)</script><p>然后继续使用同余性质，将问题转化到模p、q下：</p>
<script type="math/tex; mode=display">
c_p \equiv m^g \quad(mod\;p)</script><script type="math/tex; mode=display">
c_q \equiv m^g \quad(mod\;q)</script><p>使用AMM算法可以得到：</p>
<script type="math/tex; mode=display">
mp \equiv m \quad (mod\;p)</script><script type="math/tex; mode=display">
mq \equiv m \quad (mod\;q)</script><p>但是由于题目将flag填充到了512比特，因此直接做中国剩余定理，只能得出模 p*q 下的解，位数是不够的。</p>
<p>可能这个时候会想，为什么刚才AMM算法不直接转到模p^5下开根，而只能转到模p下开根？事实上是因为AMM算法一般只适用于模数为素数时的有限域开根，因此这里只能得到模p下的解，而无法直接得到模p^5下的解。</p>
<p>那么该怎么办呢？有一种专门用于将模p^k下的解提升至模p^(k+i)下的解的方法，称作Hensel Lifting。而这正好与题目名字相对应。这里有一篇比较好理解的文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/367203571">Hensel’s lemma (1) - 知乎 (zhihu.com)</a></p>
<p>大概了解到，Hensel Lifting一般用于解高次多项式同余方程，而在本题中，我们恰好有一个高次多项式同余方程如下(c1如何得来见前方推导)：</p>
<script type="math/tex; mode=display">
f(x) = x^g - c1 \quad (mod\; n)</script><p>仍然使用同余定理把他转到模p^5下:</p>
<script type="math/tex; mode=display">
f(x) = x^g - c1 \quad (mod\; p^5)</script><p>显然，明文m就是这个高次多项式的根，而模p^5下的根m已经满足了512比特的要求，因此我们只需要使用Hensel Lifting，将刚才AMM求得的模p下的所有可能根提升到模p^5下，并根据flag头进行判别即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">hint = <span class="number">251</span></span><br><span class="line">n = <span class="number">108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line">e = <span class="number">3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line">c = <span class="number">72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find d</span></span><br><span class="line">g = hint</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (e//g) * x - <span class="number">1</span></span><br><span class="line">d = <span class="built_in">int</span>(f.monic().small_roots(X=<span class="number">2</span>**<span class="number">256</span>,beta=<span class="number">0.66</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#find p,q,c1</span></span><br><span class="line">pr = GCD(e//g*d-<span class="number">1</span>,n)</span><br><span class="line">p = <span class="built_in">int</span>(iroot(pr,<span class="number">4</span>)[<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">int</span>(n // (p**<span class="number">5</span>))</span><br><span class="line">phi = <span class="built_in">int</span>(p ** <span class="number">4</span> * (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#AMM</span></span><br><span class="line">cp = c1 % p</span><br><span class="line">mp = AMM_rth(cp, g, p)</span><br><span class="line">rt1 = ALL_ROOT2(g, p)</span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hensel lifting(sage求有点问题，不知道原因)</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> amp:</span><br><span class="line">    m = <span class="built_in">int</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b):</span><br><span class="line">        _dx = -inverse(g*m**(g-<span class="number">1</span>),p) % p**(i+<span class="number">1</span>)</span><br><span class="line">        mod_temp = (m**g-c1)//(p**i) % p**(i+<span class="number">1</span>)</span><br><span class="line">        t = _dx * mod_temp % p</span><br><span class="line">        m = m + p**i*t % (p**(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> long_to_bytes(m)):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>但是呢，sage在实现这个自己写的Hensel Lifting时一直报错，脑子也不太清醒，暂时没找出原因。所以最后还需要手动把AMM求出的所有可能根粘贴出来，用python实现Hensel Lifting。</p>
<p>因此最终exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">g = <span class="number">251</span></span><br><span class="line">n = <span class="number">108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line">e = <span class="number">3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line">c = <span class="number">72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Copper解方程得到这些数值</span></span><br><span class="line">p = <span class="number">69367143733862710652791985332025152581988181</span></span><br><span class="line">q = <span class="number">67842402383801764742069883032864699996366777</span></span><br><span class="line">phi = p ** <span class="number">4</span> * (p - <span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e//g, phi)</span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">c1 = <span class="number">65942580064916339360370107869124805065379278407453423807322070174933076533175126747570263707923877730828981200462382452332851764309132627867196012329998008639862606922074733109347253946308226346992240834103573312752632998287455123587460568157234254421846676210189</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#AMM求出的根，满足 amp[i] = m % p，过长就不粘贴了</span></span><br><span class="line">amp = </span><br><span class="line"></span><br><span class="line"><span class="comment"># hensel lifting</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> amp:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b):</span><br><span class="line">        _dx = -inverse(g*m**(g-<span class="number">1</span>),p) % p**(i+<span class="number">1</span>)</span><br><span class="line">        mod_temp = (m**g-c1)//(p**i) % p**(i+<span class="number">1</span>)</span><br><span class="line">        t = _dx * mod_temp % p</span><br><span class="line">        m = m + p**i*t % (p**(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> long_to_bytes(m)):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;4b68c7eece6be865f6da2a4323edd491&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="strange-hash"><a href="#strange-hash" class="headerlink" title="*strange_hash"></a>*strange_hash</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">18446744073709551557</span></span><br><span class="line">M = [[<span class="number">8</span>, <span class="number">56</span>, <span class="number">280</span>], [<span class="number">18446744073709551543</span>, <span class="number">18446744073709551467</span>, <span class="number">18446744073709551123</span>], [<span class="number">7</span>, <span class="number">35</span>, <span class="number">155</span>]]</span><br><span class="line">ConInv = [<span class="number">0x39a3f978106bac2d</span>,<span class="number">0x2940e055f4a33725</span>,<span class="number">0xfda9a7a293fb5bc9</span>]</span><br><span class="line">Con = [[<span class="number">0x9c52c2de7a9373c4</span>,<span class="number">0xf2135cb886d0fa21</span>,<span class="number">0x957df7f3cd4879e9</span>], [<span class="number">0xd54f837d2738d717</span>,<span class="number">0x400ddf1ffaae436d</span>,<span class="number">0xc2abb601d9a26b07</span>], [<span class="number">0x1904359f1deb3495</span>,<span class="number">0xc21aa09ba52b157b</span>,<span class="number">0x3d45525db1b19a0c</span>], [<span class="number">0xed66cf26a65afc73</span>,<span class="number">0x1cee569b29ffa476</span>,<span class="number">0x3da45abf4304849</span>], [<span class="number">0x1c1a642fa0f3d96d</span>,<span class="number">0x59a1c4fbb96aec86</span>,<span class="number">0xa18e9ca93163f63d</span>], [<span class="number">0x9621ec9fbcb402be</span>,<span class="number">0xd69468353c31bee0</span>,<span class="number">0x50655b3f20fee3b8</span>], [<span class="number">0x109cde7a61c2c195</span>,<span class="number">0x5ebbd9e98be60c59</span>,<span class="number">0x334d2d15f6e43190</span>], [<span class="number">0x47af2b0d63901977</span>,<span class="number">0x67ace097bf8c6f34</span>,<span class="number">0xb87da3296b70d64b</span>], [<span class="number">0x52d6344b38f49899</span>,<span class="number">0xad5773add31420e1</span>,<span class="number">0xecd0b7480f8c8095</span>], [<span class="number">0xe2afb6d20f5decda</span>,<span class="number">0xb1767d8be7d1371</span>,<span class="number">0x902fd6806a0ef4db</span>]]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(Con) == <span class="number">10</span></span><br><span class="line">Inv = inverse(<span class="number">3</span>, p-<span class="number">1</span>)</span><br><span class="line">Round = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> [(a + b)%p <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, M</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M[<span class="number">0</span>])):</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            temp += x[j] * M[j][i]</span><br><span class="line">        result.append(temp%p)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rescue_Prime</span>(<span class="params">R, P</span>):</span><br><span class="line">    X = add(P, ConInv)</span><br><span class="line">    Y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    Z = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    U = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(R):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            Y[i] = <span class="built_in">pow</span>(X[i], <span class="number">3</span>, p)</span><br><span class="line">            </span><br><span class="line">        Z = add(Con[<span class="number">2</span>*r%<span class="number">10</span>], multiply(Y, M))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            U[i] = <span class="built_in">pow</span>(Z[i], Inv, p)</span><br><span class="line"></span><br><span class="line">        X = add(Con[(<span class="number">2</span>*r+<span class="number">1</span>)%<span class="number">10</span>], multiply(U, M))</span><br><span class="line">    <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    encrypt_history = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">            random.choice(string.ascii_letters + string.digits)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line">        ])</span><br><span class="line">        digest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send_line(</span><br><span class="line">            <span class="built_in">str</span>.encode((<span class="string">&quot;sha256(XXXX + %s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))))</span><br><span class="line">        self.send_line(<span class="built_in">str</span>.encode(<span class="string">&#x27;Give me XXXX:&#x27;</span>))</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = (x.strip()).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(</span><br><span class="line">                (x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_line</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_line</span>(<span class="params">self</span>):</span><br><span class="line">        body = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ch = self.request.recv(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            body = body + ch</span><br><span class="line">        <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.dosend(<span class="string">b&#x27;You must pass the PoW!&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">            self.send_line(<span class="string">b&#x27;Send your input:&#x27;</span>)</span><br><span class="line">            input_str = self.read_line().decode()</span><br><span class="line">            num_tuple = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, input_str.strip(<span class="string">&#x27;()&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)))  </span><br><span class="line">            <span class="keyword">if</span> num_tuple[-<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;The third number is not zero!&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">            output = Rescue_Prime(Round, num_tuple)</span><br><span class="line">            <span class="keyword">if</span> output[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;congratulate! Here is the flag:&#x27;</span>)</span><br><span class="line">                self.send_line(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;Oops! Find collision failed.&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.send_line(<span class="string">b&#x27;What\&#x27;s wrong???&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span></span><br><span class="line">server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>题目的大致要求如下：</p>
<ul>
<li>通过proof</li>
<li>提供一组输入(x,y,0)，要求该输入通过自定义哈希函数Rescue_Prime后，生成的输出是(x’,y’,0)。也就是说，要求哈希函数的输入输出的最后一位均为0</li>
</ul>
<p>其中，自定义的哈希函数Rescue_Prime生成过程如下(其中三次方意义是三元组的每一个数字进行三次方，是为了方便而这样表示)：</p>
<script type="math/tex; mode=display">
output = ((((Input+Coninv)^3M+Con[0])^{-3}M+Con[1])^3M+Con[2])^{-3}M+Con[3]</script><p>看上去似乎很复杂，不过仔细一看，这怎么会是个哈希函数呢？因为哈希函数具有单向性，而他进行的每一步都是可逆的。比如如果加Con向量，逆操作就是对应减回去；如果是右乘M，逆操作就是对应解一个矩阵方程；如果是乘3次方或者-3次方，逆操作就是对应乘指数逆元。</p>
<p>因此，我们完全可以自定义一个输出，就定为(1,1,0)，然后就可以按如下操作反解出对应的哈希函数的输入，步骤如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minus</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> [(a - b)%p <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)]</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reveal</span>(<span class="params">R,P</span>):</span><br><span class="line">    X = minus(P,Con[<span class="number">3</span>])</span><br><span class="line">    <span class="built_in">print</span>(X)</span><br><span class="line">    X = [<span class="number">1515850589463500072</span>, <span class="number">12720000879441077924</span>, <span class="number">13358055339402620049</span>]</span><br><span class="line">    Y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,<span class="number">3</span>,p)</span><br><span class="line">        Y.append(temp)</span><br><span class="line">    Y = minus(Y,Con[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(Y)</span><br><span class="line">    Y = [<span class="number">3174461340829758314</span>, <span class="number">3934956789177085137</span>, <span class="number">11015113952396946596</span>]</span><br><span class="line">    Z = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Y:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,Inv,p)</span><br><span class="line">        <span class="comment">#print(pow(temp,3,p) == i)</span></span><br><span class="line">        Z.append(temp)</span><br><span class="line">    Z = minus(Z,Con[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(Z)</span><br><span class="line">    Z = [<span class="number">17548701131591609521</span>, <span class="number">14710429855691795808</span>, <span class="number">236055829718743711</span>]</span><br><span class="line">    X = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Z:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,<span class="number">3</span>,p)</span><br><span class="line">        <span class="comment">#print(pow(temp,3,p) == i)</span></span><br><span class="line">        X.append(temp)</span><br><span class="line">    X = minus(X,Con[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(X)</span><br><span class="line">    X = [<span class="number">1356636556594689318</span>, <span class="number">3037182169075815915</span>, <span class="number">14113359553476699425</span>]</span><br><span class="line">    Y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,Inv,p)</span><br><span class="line">        Y.append(temp)</span><br><span class="line">    Y = minus(Y,ConInv)</span><br><span class="line">    <span class="built_in">print</span>(Y)</span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span></span><br><span class="line">In = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">reveal(<span class="number">2</span>,In)</span><br></pre></td></tr></table></figure>
<p>其中，每个矩阵是由sage解矩阵方程解的，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">18446744073709551557</span></span><br><span class="line">M = [[<span class="number">8</span>, <span class="number">56</span>, <span class="number">280</span>], [-<span class="number">14</span>, -<span class="number">90</span>, -<span class="number">434</span>], [<span class="number">7</span>, <span class="number">35</span>, <span class="number">155</span>]]</span><br><span class="line">Inv = inverse(<span class="number">3</span>, p-<span class="number">1</span>)</span><br><span class="line">Round = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前需解的右向量</span></span><br><span class="line">c = [<span class="number">11785826738904333038</span>, <span class="number">1444931144810824421</span>, <span class="number">13360052317957358486</span>]</span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">3</span>,<span class="number">3</span>,M)</span><br><span class="line">a1 = m.solve_left(c)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure>
<p>所以我们可以得到如下关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input = [<span class="number">5329202944861711021</span>, <span class="number">10075872277090249537</span>, <span class="number">6598944197421011167</span>]</span><br><span class="line">Rescue_Prime(R,Input) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>但是题目要求需要传入一个末尾为0的输入才行，这怎么办呢？比赛中也就停在这里了，不知道如何解决这个问题。</p>
<p>然后赛后有师傅告诉了我思路，问题出在这里(估计不是预期解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.send_line(<span class="string">b&#x27;Send your input:&#x27;</span>)</span><br><span class="line">input_str = self.read_line().decode()</span><br><span class="line">num_tuple = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, input_str.strip(<span class="string">&#x27;()&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)))  </span><br><span class="line"><span class="keyword">if</span> num_tuple[-<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">    self.send_line(<span class="string">b&#x27;The third number is not zero!&#x27;</span>)</span><br><span class="line">    self.request.close()</span><br><span class="line">output = Rescue_Prime(Round, num_tuple)</span><br><span class="line"><span class="keyword">if</span> output[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">    self.send_line(<span class="string">b&#x27;congratulate! Here is the flag:&#x27;</span>)</span><br><span class="line">    self.send_line(flag)</span><br></pre></td></tr></table></figure>
<p>这是题目的交互部分，非常仔细的看的话，可以看出，他没有限制输入长度，而只对输入输出的-1项进行是否为0的检查，也就是说，我们可以把刚才反解(1,1,0)得到的输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5329202944861711021, 10075872277090249537, 6598944197421011167]</span><br></pre></td></tr></table></figure>
<p>写成这种形式传给服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5329202944861711021, 10075872277090249537, 6598944197421011167,0)</span><br></pre></td></tr></table></figure>
<p>这样就能满足最后一项为0的检查，算出来的输出自然也是(1,1,0)，就能得到flag了。</p>
<p>exp(比赛结束没环境了，可能会出错)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX + &quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.231.185&quot;</span>,<span class="number">38630</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot; input:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;(5329202944861711021, 10075872277090249537, 6598944197421011167,0)&quot;</span>.encode())</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>………………</p>
<p>确实有一点无语，不过确实也怪自己不够细心。这个赛题提供的宝贵经验就是：<strong>一定要先检查交互部分本身有没有漏洞，有可能就能直接跳过一个很复杂的问题！</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-Oracle</title>
    <url>/post/601c0957.html</url>
    <content><![CDATA[<p>这篇文章主要记录一下有趣的交互题</p>
<span id="more"></span>
<h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><p>题目来源：NCTF 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        n = p*q</span><br><span class="line">        e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">        signal.alarm(<span class="number">120</span>)</span><br><span class="line">        self.send(<span class="string">b&#x27;Try to factor n within 120 seconds&#x27;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;n = &#123;&#125;\ne = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n, e).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;And solve the proof-of-work below to begin the challenge.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        signal.alarm(<span class="number">12</span>)</span><br><span class="line">        secret = os.urandom(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.send(<span class="string">&quot;c&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">pow</span>(bytes_to_long(secret[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]), e, n)).encode())</span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&quot;Give me the secret:&quot;</span>)</span><br><span class="line">        s = self.recv()</span><br><span class="line">        <span class="keyword">if</span> secret.<span class="built_in">hex</span>().encode() == s:</span><br><span class="line">            self.send(<span class="string">b&quot;Congratulations! Your flag is: &quot;</span>+flag.encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&quot;Wrong secret&quot;</span>)</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10002</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>代码比较长，但是大多数是交互相关的代码，所以不用管，先把交互剥离掉来分析这个题。</p>
<h4 id="脱离交互，单独分析"><a href="#脱离交互，单独分析" class="headerlink" title="脱离交互，单独分析"></a>脱离交互，单独分析</h4><p>那么就不管靶机的其他交互流程，我们只看要解决的核心任务代码，在这里我把与靶机交互的部分简化成普通input、print等形式，然后展示出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">secret = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">pow</span>(bytes_to_long(secret[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]), e, n)).encode())</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;Give me the secret:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> secret.<span class="built_in">hex</span>().encode() == s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;Congratulations! Your flag is: &quot;</span>+flag.encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;Wrong secret&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>代码的意思就是：</p>
<ul>
<li>生成一组RSA的密钥p，q，n，e，并给出公钥(n，e)</li>
<li>随机生成 16 个字节，并切为4块，每组4个字节，作为待加密的明文</li>
<li>对每一组明文分别进行RSA加密，并给出密文</li>
<li>要求从4组密文还原出完整明文</li>
</ul>
<p>首先很快就能明白，这里的n是没有办法分解的，因为没有任何关于p、q、d的泄漏信息。那么怎么还原出明文呢，就要注意到以下两点：</p>
<ul>
<li>明文分成了4组，每组4个字节，也就是32bit，是个很小的明文</li>
<li>这题是个交互题</li>
</ul>
<p>这两点分别有什么作用就是接下来要详细说明的地方。</p>
<p>首先要明白，这里的明文如果不分组，直接进行加密，那么其本质上就是一个纯粹的RSA加密，就当前的密码技术来说，我们如果没有私钥的话，自然没有任何机会还原出明文。</p>
<p>而分组最直观的效果，就是每一组被加密的明文变小了，那么也就说明<strong>可能有机会爆破！</strong>打个比方，如果你已知明文就是一个字节，那么他可能的范围也就在(0,256)之间，要还原明文，你只需要将(0,256)之间的所有数逐个进行加密。如果加密后的密文与给定的密文相等，那么对应的明文即为所求。</p>
<p>但是这个题目中明文即使分了组，每一组的明文仍然是个32bit的随机数，直接爆破还是不太现实的，因此需要采取一定方法。</p>
<p>那么我们需要注意到，这个32bit的随机数有很大概率是个合数，这是因为，在n个正整数中，质数出现的概率大约为：</p>
<script type="math/tex; mode=display">
\frac{1}{\ln n}</script><p>因此，对于n取2^32，其概率经计算大约是 0.045084220027780106，概率相当小。所以明文m大概率能写成两个整数的乘积形式：</p>
<script type="math/tex; mode=display">
m = i*j</script><p>而由于m是(0,2^32)之间的数，所以我们可以概率性的界定 i、j 两数的范围。</p>
<p>什么叫概率性的界定范围呢？比如说，i、j 都在(0,2^16)这个范围里，概率有多大？其实这个问题等价于m的因子全部小于2^16的概率，因此可以用如下的程序简单验证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span>    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1000</span>)):        </span><br><span class="line">    m = bytes_to_long(os.urandom(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">while</span>(m % j == <span class="number">0</span>):</span><br><span class="line">            m //= j</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>经计算概率大概在0.32左右，这说明什么，这说明m有0.32的概率写为两个(0,2^16)之间的数的乘积，这对我们的爆破有什么帮助呢？首先，加密过程就可以改写成：</p>
<script type="math/tex; mode=display">
m^e\equiv (i*j)^e \equiv i^e*j^e \equiv c\quad(mod\;n)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
c^{-1}*j^e\equiv i^{-e}\quad (mod\;n)</script><p>此时你会发现，如果m能够写为(0,2^16)内的 i，j 两数的乘积的形式，那么类似于中间相遇攻击，我们就可以用如下方式爆破：</p>
<ul>
<li>把所有(0,2^16)中的 $ i^{-e}\quad (mod\;n)$ 提前存储在一个字典内</li>
<li>接下来，只需要爆破(0,2^16)中的 j，验证 $ c^{-1}*j^e\quad (mod\;n)$ 在刚才的字典中，则对应的 i，j 乘积即为需求的明文</li>
</ul>
<p>容易明白，这种攻击方式成功的概率，就等同于m能写为这样的 i，j 乘积的概率，也就是0.32左右。那么连续4次均成功，概率大约为:</p>
<script type="math/tex; mode=display">
(0.32)^4 = 0.01048576</script><p>因此，不考虑题目其他限制的话，每一次攻击大约有1%的概率成功，而可以用以下程序计算出，交互66次，就有大于50%的概率至少成功一次：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fre = <span class="number">0.01048576</span></span><br><span class="line">success = <span class="number">1</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    success *= (<span class="number">1</span>-fre)</span><br><span class="line">    <span class="keyword">if</span>(success &lt; <span class="number">0.5</span>):</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="回到交互"><a href="#回到交互" class="headerlink" title="回到交互"></a>回到交互</h4><p>但是实际上，这题对交互时间是有一定限制的：</p>
<ul>
<li>从连接上靶机开始，计时120s，超时会退出</li>
<li>从完成proof_of_work开始，计时12s，超时会退出</li>
</ul>
<p>而注意到我们连接上靶机后，靶机端就会发送给我们公钥(n，e)，而获得了(n，e)之后，我们就可以开始建立字典。一直到proof_of_work完成后，我们才需要进行字典的查询来搜索出4组明文。</p>
<p>也就是说，我们有更充足的时间建立字典，而查询字典的时间更有限。因此，我们要适当增大 i 的范围，但是对应的，搜索j的范围不能变小，仍然要考虑搜索2^16内的所有数。所以我们测试以下几种新的乘积划分：</p>
<script type="math/tex; mode=display">
i \in (0,2^{17}),j \in (0,2^{15})</script><script type="math/tex; mode=display">
i \in (0,2^{18}),j \in (0,2^{14})</script><script type="math/tex; mode=display">
i \in (0,2^{19}),j \in (0,2^{13})</script><script type="math/tex; mode=display">
i \in (0,2^{20}),j \in (0,2^{12})</script><script type="math/tex; mode=display">
i \in (0,2^{21}),j \in (0,2^{11})</script><p>经计算，几种划分对应的攻击成功概率依次是：0.36、0.45、0.52、0.55、0.62，理论上来说当然是越后面的划分越好，但是同时，建立字典的耗时也需要考虑进去。你可以用以下程序简单测试出，字典大小最大也就只能取到2^20，否则就会直接超出120s的限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">20</span>))&#125;</span><br></pre></td></tr></table></figure>
<p>因此，思路就是：接收到公钥(n，e)后，建立一个大小为2^20的字典，然后再进行proof_of_work，进行完毕后开始查表。如此与靶机交互多次后，就有大概率得到flag。理论上来说八次就有大于50%的概率得到flag了，不过运气不好确实可能需要很久很久。</p>
<p>但同时你也可以注意到，m并不一定就是32bit的数，他的前几个bit完全可能是0，因此相信自己运气的话，可以适当缩小划分范围来节省耗时，比如划分为：</p>
<script type="math/tex; mode=display">
i \in (0,2^{19}),j \in (0,2^{12})</script><script type="math/tex; mode=display">
i \in (0,2^{18}),j \in (0,2^{12})</script><p>等等缩小后的范围，都是有可能成功的。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">	r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28803</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#part1</span></span><br><span class="line">	r.recvline()</span><br><span class="line">	n = <span class="built_in">int</span>(r.recvline().strip()[<span class="number">3</span>:])</span><br><span class="line">	e = <span class="number">65537</span></span><br><span class="line">	S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">19</span>))&#125;</span><br><span class="line">	proof_of_work()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#part2</span></span><br><span class="line">	secret = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">		c = <span class="built_in">int</span>(r.recvline().split(<span class="string">b&#x27;=&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">		inv_c = inverse(c,n)</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">			s = inv_c*(<span class="built_in">pow</span>(j,e,n))%n</span><br><span class="line">			<span class="keyword">if</span>(s <span class="keyword">in</span> S):</span><br><span class="line">				<span class="built_in">print</span>(i)</span><br><span class="line">				secret += <span class="built_in">hex</span>(S[s]*j)[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	r.sendline(secret.encode())</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	<span class="built_in">print</span>(temp)</span><br><span class="line">	r.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#flag暂时还没有，靶机有一点小问题</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Lost-Modulus"><a href="#Lost-Modulus" class="headerlink" title="Lost Modulus"></a>Lost Modulus</h3><p>题目来源：SEETF 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    FLAG = f.read()</span><br><span class="line"></span><br><span class="line">n = bytes_to_long(FLAG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#make sure i have a big modulus</span></span><br><span class="line"><span class="keyword">while</span> n.bit_length() &lt; <span class="number">2048</span>:</span><br><span class="line">    n *= n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m1, m2</span>):</span><br><span class="line">    e = getPrime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">assert</span> m1.bit_length() &gt;= <span class="number">1600</span> <span class="keyword">and</span> long_to_bytes(m1).startswith(<span class="string">b&quot;SEE&#123;&quot;</span>), <span class="string">&#x27;first message must be at least 1600 bits and begin with &quot;SEE&#123;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">500</span> &lt;= m2.bit_length() &lt;= <span class="number">600</span>, <span class="string">&#x27;second message must be within 500 to 600 bits&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m1, e, n), <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Message 1 (as integer) : &quot;</span>).strip())</span><br><span class="line">        m2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Message 2 (as integer) : &quot;</span>).strip())</span><br><span class="line">        c1, c2 = encrypt(m1, m2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\nCiphers: \n<span class="subst">&#123;[c1,c2]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程：</p>
<ul>
<li>将flag转为大整数n，反复乘方直至n大于2048bit</li>
<li>允许我们输入两个整数m1、m2，要求满足：</li>
<li><ul>
<li>m1转为字节串后要求以”SEE{“开头，并且大于1600bit</li>
<li>m2大小要在500-600bit之间</li>
</ul>
</li>
<li>随机生成一个256bit的素数e，并使用公钥(n,e)对m1、m2分别进行RSA加密，并给出密文</li>
</ul>
<p>题目要求我们恢复模数n，而有关模数的恢复一般都会用到gcd。因此本题的关键就在于如何利用被限制了的明文m1、m2，构造出模数n的倍数。</p>
<p>首先观察到，m1的二进制长度可以为m2的三倍以上，也就是说，我们可以利用立方关系进行构造。而如何构造出m1恰为一个数的3次方，并且开头还是”SEE{“呢？很容易，只需要先构造出一个符合条件的m1，然后开立方根，取整作为m2，再取m2的立方作为新的m1即可。这是因为，开立方根、取整后再立方回来，对m1的影响均在低位，不会影响到其高位的”SEE{“</p>
<p>所以此时我们就有明文关系如下：</p>
<script type="math/tex; mode=display">
m_1^e \equiv (m_2^3)^e \equiv c_1\quad (mod\;n)</script><script type="math/tex; mode=display">
m_2^e \equiv  c_2\quad (mod\;n)</script><p>所以有：</p>
<script type="math/tex; mode=display">
c_2^3-c_1 = kn</script><p>因此多连接几次靶机，取多组kn后求解gcd，就能去除小因子得到n，再爆破具体是m的几次方即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    m1 = bytes_to_long(<span class="string">b&quot;SEE&#123;&quot;</span> + os.urandom(<span class="number">200</span>))</span><br><span class="line">    m2 = iroot(m1,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">    m1 = m2**<span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> (m1,m2)</span><br><span class="line"></span><br><span class="line">kn = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28625</span>)</span><br><span class="line">    m1,m2 = gen()</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Message 1 (as integer) : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(m1).encode())</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Message 2 (as integer) : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(m2).encode())</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Ciphers:&quot;</span>)</span><br><span class="line">    c = <span class="built_in">eval</span>(r.recvuntil(<span class="string">&quot;]&quot;</span>).decode())</span><br><span class="line">    c1 = c[<span class="number">0</span>]</span><br><span class="line">    c2 = c[<span class="number">1</span>]</span><br><span class="line">    kn.append(c2**<span class="number">3</span>-c1)</span><br><span class="line">    r.close()</span><br><span class="line">n = kn[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> kn[<span class="number">1</span>:]:</span><br><span class="line">    n = GCD(n,i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span>(iroot(n,i)[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(iroot(n,i)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;1affebef-9c23-45f1-b88e-406f9611c614&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="welcomesigner2"><a href="#welcomesigner2" class="headerlink" title="welcomesigner2"></a>welcomesigner2</h3><p>题目来源：WMCTF 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;***********************************&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="string">b&quot;\x00&quot;</span>*((<span class="number">16</span>-<span class="built_in">len</span>(message)%<span class="number">16</span>)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">m,d,N,j,N_</span>):</span><br><span class="line">    A = <span class="number">1</span></span><br><span class="line">    B = m</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    N = N</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> d[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            A = A * B % N</span><br><span class="line">        <span class="comment">#  a fault occurs j steps before the end of the exponentiation</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= n-<span class="number">1</span>-j:</span><br><span class="line">            N = N_</span><br><span class="line">        B = B**<span class="number">2</span> % N</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,key</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br><span class="line">    enc = AES.new(key,mode=AES.MODE_ECB)</span><br><span class="line">    c   = enc.encrypt(pad(message))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">border = <span class="string">&quot;|&quot;</span></span><br><span class="line"><span class="built_in">print</span>(border*<span class="number">75</span>)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;Hi all, I have another algorithm that can quickly calculate powers. &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;But still there&#x27;s something wrong with it. Your task is to get      &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;its private key,and decrypt the cipher to cat the flag ^-^          &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border*<span class="number">75</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment"># generate</span></span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">17</span></span><br><span class="line">    <span class="keyword">if</span> GCD(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">        d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        n_ = n </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n_ = n</span><br><span class="line">msg = bytes_to_long(<span class="string">b&quot;Welcome_come_to_WMCTF&quot;</span>)</span><br><span class="line">sig = <span class="built_in">pow</span>(msg,d,n)</span><br><span class="line"><span class="keyword">assert</span> sig == myfastexp(msg,d,n,<span class="number">0</span>,n_)</span><br><span class="line">CHANGE = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ans = <span class="built_in">input</span>(<span class="string">&quot;| Options: \n|\t[G]et data \n|\t[S]ignatrue \n|\t[F]ault injection \n|\t[Q]uit\n&quot;</span>).lower().strip()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ans == <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> CHANGE:</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">&quot;You have one chance to change one byte of N. &quot;</span>)</span><br><span class="line">                temp,index = <span class="built_in">input</span>(<span class="string">&quot;bytes, and index:&quot;</span>).strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">                <span class="keyword">assert</span> <span class="number">0</span>&lt;= <span class="built_in">int</span>(temp) &lt;=<span class="number">255</span></span><br><span class="line">                <span class="keyword">assert</span> <span class="number">0</span>&lt;= <span class="built_in">int</span>(index) &lt;= <span class="number">1023</span> </span><br><span class="line">                n_ = n ^ (<span class="built_in">int</span>(temp)&lt;&lt;<span class="built_in">int</span>(index))</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">f&quot;[+] update: n_ -&gt; \&quot;<span class="subst">&#123;n_&#125;</span>\&quot;&quot;</span>)</span><br><span class="line">                CHANGE = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">&quot;Greedy...&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;flag_ciphertext = <span class="subst">&#123;encrypt(flag,d).<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            index = <span class="built_in">input</span>(<span class="string">&quot;Where your want to interfere:&quot;</span>).strip()</span><br><span class="line">            sig_ = myfastexp(msg,d,n,<span class="built_in">int</span>(index),n_)</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;signature of \&quot;Welcome_come_to_WMCTF\&quot; is <span class="subst">&#123;sig_&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            quit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(border,<span class="string">&quot;Err...&quot;</span>)</span><br><span class="line">        quit()</span><br></pre></td></tr></table></figure>
<p>我觉得很有意思的一个错误注入题目，在这里记录一下思路。</p>
<p>首先梳理题目任务，在连接上靶机后，题目随机生成长度为512比特的素数p、q，并以p、q、e=17生成RSA加解密的剩余参数n、d。同时生成一个n_，在开始时其值与n相等。</p>
<p>然后，题目以一个已知的msg计算了其正确解密值pow(msg,d,n)作为sig，然后进入交互环节。</p>
<p>靶机提供的操作有:</p>
<ul>
<li>输入”f”，可以更改模数n的任意8比特为自定义值，并且该操作在全程仅能进行一次</li>
<li>输入”g”，可以获得正确的初始模数n，并获得AES加密后的flag值，其中AES的密钥为私钥d</li>
<li>输入”s”，可以指定位置进行一次错误注入，错误注入具体是怎样的稍后讲</li>
<li>输入”q”，退出交互</li>
</ul>
<p>所以我们要完成的任务是：改变n的某8个比特，使其更容易被我们利用；并使用题目提供的错误注入操作还原私钥d，之后AES解密密文。</p>
<p>那么主要问题就有两个：</p>
<ul>
<li>如何改变n？</li>
<li>如何利用错误注入还原d？</li>
</ul>
<p>接下来就开始题目分析。首先会介绍一点前置知识。</p>
<h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><p>题目提供的错误注入就是基于快速幂的，因此要完成题目先要知道快速幂的基本原理。</p>
<p>首先，如果按正常思路进行模幂运算，那么如果要计算pow(c,d,n)，就需要先令m = c，然后进行d次下列运算：</p>
<script type="math/tex; mode=display">
m = m*c \quad (mod\; n)</script><p>而如果d的数量级较大，这种运算的效率是不可接受的，因此需要应用快速幂。</p>
<p>快速幂的基本思想是：先把幂次转为二进制表示，在这里我们举个简单例子，假设d = 23，那么就有其二进制为：</p>
<script type="math/tex; mode=display">
bin(d) = 10111</script><p>而c的d次方模n其实就可以利用二进制转化为如下运算：</p>
<script type="math/tex; mode=display">
m = (1*c) * (1*c^2) * (1*c^{2^2}) * (0*c^{2^3}) * (1*c^{2^4}) \quad(mod\;n)</script><p>其中，每一项的系数是d的二进制逆过来后对应位置的值，乘数是c的对应次平方。这样做为什么减少了次数呢？这是因为c的对应次平方，只需要在前一个c的对应次平方的基础上再做一次平方就好。因此，用快速幂可以把模幂运算的复杂度减少到logn的数量级。其代码形式用直观一点的方式实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">c,d,n</span>):</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    m = [c]</span><br><span class="line">    temp = c</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)-<span class="number">1</span>):</span><br><span class="line">        temp = temp ** <span class="number">2</span> % n</span><br><span class="line">        m.append(temp)</span><br><span class="line">    final = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            final = final * m[i] % n</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>
<p>这个函数中m数组存放c的各次平方的数值，然后与b的二进制逆序对应相乘，最终返回pow(c,d,n)的计算值，与我们刚才说的过程完全相同。而更一般的，会写成如下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">normal_fastexp</span>(<span class="params">c,d,n</span>):</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    final = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            final = final * c % n</span><br><span class="line">        c = c**<span class="number">2</span> % n</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>
<p>只是精简了代码，实际进行的操作依然是完全相同的。</p>
<h4 id="错误注入"><a href="#错误注入" class="headerlink" title="错误注入"></a>错误注入</h4><p>了解了快速幂后，再来看题目提供的错误注入代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">m,d,N,j,N_</span>):</span><br><span class="line">    A = <span class="number">1</span></span><br><span class="line">    B = m</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    N = N</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> d[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            A = A * B % N</span><br><span class="line">        <span class="comment">#  a fault occurs j steps before the end of the exponentiation</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= n-<span class="number">1</span>-j:</span><br><span class="line">            N = N_</span><br><span class="line">        B = B**<span class="number">2</span> % N</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure>
<p>可以发现，我们可以提供一个错误注入位置，在快速幂运算到错误注入位置之前，其模数是正确的n；而快速幂运算到错误注入位置的时候，模数会改变为我们改变了一个字节的n_，并且在之后都按照这个被改变的模数进行快速幂。</p>
<p>我们假设d为1023比特，其二进制序列为1xxx…xxxx，我们当前提供的注入位置是0，我们画一下题目的错误注入如何得到结果：</p>
<p><img src="/post/601c0957/image-20231019160100082.png" alt="image-20231019160100082"></p>
<p>注意到到错误注入位置时，题目的快速幂仍然是先计算乘，再改变模数，也就是说，注入位置为0时，最后的结果其实是正确结果。而图中的红色部分就是由于错误注入、模数改变导致的m的对应次方幂计算错误，在这里，红色部分等于：</p>
<script type="math/tex; mode=display">
(m^{2^{1021}})^2 \quad (mod\;n')</script><p>n’就是n_，因为我的hexo转义有问题，公式块里一直打不出下划线，所以用n’代替。</p>
<p>那么当注入位置是1时，得到的结果如下：</p>
<p><img src="/post/601c0957/image-20231019160120731.png" alt="image-20231019160120731"></p>
<p>此时可以发现，在计算最后一次快速幂的结果时，我们错误的使用了n_而非n下的m对应次方，因此结果产生了错误。而这个错误结果可以写成如下形式：</p>
<script type="math/tex; mode=display">
sig' = fault * right</script><p>right指快速幂在注入位置及之前的正确结果，fault指在注入位置之后的错误结果，他们是可以以乘积形式体现在最终结果里的。我们以此为依据把d的二进制串分为高位dhigh和低位dlow，则right等于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(m,<span class="built_in">int</span>(dlow,<span class="number">2</span>),n)</span><br></pre></td></tr></table></figure>
<p>fault等于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(Bad,<span class="built_in">int</span>(dhigh,<span class="number">2</span>),n_)</span><br></pre></td></tr></table></figure>
<p>其中，Bad就是由于错误注入产生的错误m的对应次方幂，也就是倒数第二个红色块的模n’下的平方。而这个值是可以计算出来的，因为我们拥有d的高位1、n’以及m；而我们又拥有靶机返回的sig’，因此我们可以用之前的等式计算出right在模n下的值。</p>
<p>用处在哪里呢？我们继续往后推进一位：</p>
<p><img src="/post/601c0957/image-20231019160254754.png" alt="image-20231019160254754"></p>
<p>那么假设d的第二高位为0，那么就有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(dhigh,<span class="number">2</span>) = <span class="number">2</span>*<span class="built_in">int</span>(dhigh,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">int</span>(dlow,<span class="number">2</span>) = <span class="built_in">int</span>(dlow,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>那么由于dlow不变，所以这一次我们计算出的right应该与前一次相等，而如果不等，就说明d的第二高位为1.</p>
<p>以此类推，我们就能还原出d的所有二进制位。</p>
<p>需要注意的是，d不一定是1023位，因此可能需要多次连接靶机，直到随机到某次d是1023位时才能正确解密。而之所以选择1023，是因为测试下来d是1023比特概率最大，能达到40%左右，因此成功率最大。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">message,key</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br><span class="line">    enc = AES.new(key,mode=AES.MODE_ECB)</span><br><span class="line">    c   = enc.decrypt(message)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28015</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part1 get c,n</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;g&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;n =&quot;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;flag_ciphertext =&quot;</span>)</span><br><span class="line">    c = long_to_bytes(<span class="built_in">int</span>(r.recvline().strip().decode(),<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2 get n_</span></span><br><span class="line">    change_byte = <span class="number">0</span></span><br><span class="line">    ind = <span class="number">0</span></span><br><span class="line">    find = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(find):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">            n_ = n ^ (temp&lt;&lt;index)</span><br><span class="line">            <span class="keyword">if</span> isPrime(n_):</span><br><span class="line">                change_byte = temp</span><br><span class="line">                ind = index</span><br><span class="line">                find = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    sendnum = <span class="built_in">str</span>(change_byte) + <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(ind)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;f&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;and index:&quot;</span>)</span><br><span class="line">    r.sendline(sendnum.encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;n_ -&gt; &quot;</span>)</span><br><span class="line">    n_ = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part3 get d</span></span><br><span class="line">    len_d = <span class="number">1023</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getm</span>(<span class="params">m,n,n_</span>):</span><br><span class="line">        final = []</span><br><span class="line">        c = m</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_d):</span><br><span class="line">            final.append(c)</span><br><span class="line">            c = c**<span class="number">2</span> % n</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line">    msg = bytes_to_long(<span class="string">b&quot;Welcome_come_to_WMCTF&quot;</span>)</span><br><span class="line">    m = getm(msg,n,n_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">d,siglist,n_,m</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1</span>,len_d-<span class="number">1</span>):</span><br><span class="line">            current = siglist[i]</span><br><span class="line">            inv_Bad = inverse(<span class="built_in">pow</span>(m[len_d-<span class="number">1</span>-i]**<span class="number">2</span>%n_,<span class="built_in">int</span>(d,<span class="number">2</span>),n_),n_)</span><br><span class="line">            cur = current * inv_Bad % n_</span><br><span class="line">            </span><br><span class="line">            nextsig = siglist[i+<span class="number">1</span>]</span><br><span class="line">            next_inv_Bad = inverse(<span class="built_in">pow</span>(m[len_d-<span class="number">2</span>-i]**<span class="number">2</span>%n_,<span class="number">2</span>*<span class="built_in">int</span>(d,<span class="number">2</span>),n_),n_)</span><br><span class="line">            inv_next = nextsig * next_inv_Bad % n_</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(inv_next == cur):</span><br><span class="line">                d += <span class="string">&quot;0&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d += <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">    siglist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(len_d):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;s&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;interfere:&quot;</span>)</span><br><span class="line">        index = i</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot; is &quot;</span>)</span><br><span class="line">        sig_ = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">        siglist.append(sig_)</span><br><span class="line"></span><br><span class="line">    init_d = <span class="string">&quot;1&quot;</span></span><br><span class="line">    d = getd(init_d,siglist,n_,m) + <span class="string">&quot;1&quot;</span></span><br><span class="line">    d = <span class="built_in">int</span>(d,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part4 getflag</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;NSSCTF&quot;</span> <span class="keyword">in</span> decrypt(c,d)):</span><br><span class="line">        <span class="built_in">print</span>(decrypt(c,d))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;f89d3e5c-138b-4d6d-8da9-cbe1a9dad5cd&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中，选择一个素数n_是为了保证计算出逆元。</p>
<p>而另一道WMCTF的welcomesigner1，其实也是异曲同工，变化非常小，可以尝试练习。</p>
<p><br></p>
<p><br></p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>题目来源：EIS 2019</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b2n</span>(<span class="params">b</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        res *= <span class="number">2</span></span><br><span class="line">        res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n, length</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    tmp = <span class="string">&#x27;0&#x27;</span>*(length-<span class="built_in">len</span>(tmp)) + tmp</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2n</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(binascii.hexlify(s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = n2b(s2n(msg), <span class="built_in">len</span>(msg)*<span class="number">8</span>)</span><br><span class="line">    msg += b1</span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)-<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> msg[shift]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                msg[shift+i] ^= b2[i]</span><br><span class="line">    res = msg[-<span class="number">64</span>:]</span><br><span class="line">    <span class="keyword">return</span> b2n(res)</span><br><span class="line"></span><br><span class="line">b1 = n2b(<span class="number">0xdeadbeeffeedcafe</span>, <span class="number">64</span>)</span><br><span class="line">b2  = n2b(<span class="number">0x10000000247f43cb7</span>, <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    signal.alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/ctf/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome to the Signature Challenge!&quot;</span>)</span><br><span class="line">        raw = os.urandom(<span class="number">256</span>)</span><br><span class="line">        pos = random.randint(<span class="number">0</span>, <span class="number">248</span>)</span><br><span class="line">        raw_hex = <span class="built_in">bytearray</span>(binascii.hexlify(raw))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            raw_hex[(pos+i)*<span class="number">2</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">            raw_hex[(pos+i)*<span class="number">2</span>+<span class="number">1</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">        raw_hex = <span class="built_in">bytes</span>(raw_hex)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is the message: <span class="subst">&#123;raw_hex.decode(<span class="string">&#x27;ascii&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        ans = <span class="built_in">input</span>(<span class="string">&quot;Please fill the blank: &quot;</span>)</span><br><span class="line">        ans = <span class="built_in">bytes</span>.fromhex(ans)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ans) == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        raw = <span class="built_in">bytearray</span>(raw)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            raw[pos+i] = ans[i]</span><br><span class="line">        raw = <span class="built_in">bytes</span>(raw)</span><br><span class="line">        <span class="keyword">if</span> sign(raw) == <span class="number">0x1337733173311337</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Great! Here is your flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Wrong! Bye~&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>题目的前几个函数无非就是字节流与数字、数字与二进制、二进制与列表的转化，稍微看看传递参数以及返回值就好。接下来主要分析题目任务：</p>
<ul>
<li>连接上靶机后，开始限时60s</li>
<li>靶机随机生成256字节raw，并将其转为16进制字符串，然后随机生成一个0-248的位置pos</li>
<li>将16进制串中以pos开头的连续十六个字符以”_”代替，相当于抹掉了十六个十六进制字符</li>
<li>靶机发送抹掉后的十六进制串给我们，我们可以在抹掉的位置填充上16个十六进制字符</li>
<li>靶机会将经我们填充后的十六进制串转化为字节，并进行sign操作，如果sign操作得到的结果为0x1337733173311337，则得到flag</li>
</ul>
<p>那么主要要关注的就是这个sign函数到底对msg进行了什么操作：</p>
<ul>
<li>将传入的字节流msg转化为二进制列表，并在后面连接上b1的二进制列表</li>
<li>对上述二进制列表的msg对应部分进行遍历。如果当前位置为1，则将以该位置开头的65位二进制与b2进行异或</li>
<li>遍历完成后，b1对应位置的二进制串转为数字，作为sign的返回值</li>
</ul>
<p>而可以发现，这个sign的过程完全是可以逆推回去的。比如，连接上b1后的二进制列表的最后一位，最多只异或了一次，倒数第二位最多只异或了两次，依此类推。而最后一次异或是否进行，可以由b1的最后一个二进制位是否与目标0x1337733173311337的最后一个二进制位相等来判断。如果不相等说明进行了异或，就把最后六十五个二进制位与b2对应异或回去；相等则不用管。</p>
<p>那么我们就完成了对最后一位二进制的处理，然后将处理过后得到的倒数第二个二进制位看作需要处理的最后一个二进制位，问题就转化为了刚才的问题，依次类推就可以得到填充部分的值。</p>
<p>然而，解出来的填充部分仍然会受到填充部分之前字节异或的影响，因此还需要处理一下。但是有一个比较简单的办法：由于pos是0-248的随机数，因此我们可以反复连接靶机，随机到pos为0时就不需要再进行额外处理了。并且由生日攻击的思想可以知道，连接248次就有大于50的概率随机到至少一次pos为0，也并不费什么时间。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b2n</span>(<span class="params">b</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        res *= <span class="number">2</span></span><br><span class="line">        res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n, length</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    tmp = <span class="string">&#x27;0&#x27;</span>*(length-<span class="built_in">len</span>(tmp)) + tmp</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2n</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(binascii.hexlify(s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = n2b(s2n(msg), <span class="built_in">len</span>(msg)*<span class="number">8</span>)</span><br><span class="line">    msg += b1</span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)-<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> msg[shift]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                msg[shift+i] ^= b2[i]</span><br><span class="line">    res = msg[-<span class="number">64</span>:]</span><br><span class="line">    <span class="keyword">return</span> b2n(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">msg</span>):</span><br><span class="line">    final = <span class="string">&quot;0000000000000000&quot;</span> + msg[<span class="number">16</span>:] + <span class="string">&quot;deadbeeffeedcafe&quot;</span></span><br><span class="line">    aim = <span class="string">&quot;1337733173311337&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(final)*<span class="number">4</span></span><br><span class="line">    temp = n2b(<span class="built_in">int</span>(final,<span class="number">16</span>),length)</span><br><span class="line">    aim = n2b(<span class="built_in">int</span>(aim,<span class="number">16</span>),length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(length-<span class="number">1</span>,<span class="number">64</span>-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(temp[i] != aim[i]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                aim[i-j] ^= b2[-j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aim)):</span><br><span class="line">        aim[i] = <span class="built_in">str</span>(aim[i])</span><br><span class="line"></span><br><span class="line">    tt = <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(aim),<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> tt[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">b1 = n2b(<span class="number">0xdeadbeeffeedcafe</span>, <span class="number">64</span>)</span><br><span class="line">b2 = n2b(<span class="number">0x10000000247f43cb7</span>, <span class="number">65</span>)</span><br><span class="line">b3 = n2b(<span class="number">0x1337733173311337</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28634</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;message: &quot;</span>)</span><br><span class="line">    msg = r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">if</span>(msg[<span class="number">0</span>] != <span class="string">&quot;_&quot;</span>):</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;blank: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    r.sendline(calc(msg))</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;9e8b2a1a-ad77-4ef3-a161-2f8693c7a0ac&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-hash</title>
    <url>/post/923bfbdd.html</url>
    <content><![CDATA[<p>该文章主要记录一些哈希函数相关的趣题</p>
<span id="more"></span>
<h3 id="babyhash"><a href="#babyhash" class="headerlink" title="babyhash"></a>babyhash</h3><p>题目来源：ISG 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> ecdsa <span class="keyword">import</span> SigningKey</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">digest</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">bytes</span>(self.data)</span><br><span class="line">        data = pad(data, <span class="number">16</span>)</span><br><span class="line">        text = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        hash_result = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">16</span>):</span><br><span class="line">            key = data[i:i+<span class="number">16</span>]</span><br><span class="line">            text = AES.new(key, AES.MODE_ECB).encrypt(text)</span><br><span class="line">            hash_result += text</span><br><span class="line">        <span class="keyword">return</span> hash_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&quot;&quot;</span>.join(</span><br><span class="line">            [random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">        )</span><br><span class="line">        digest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.dosend(<span class="string">&quot;sha256(XXXX + &#123;&#125;) == &#123;&#125;&quot;</span>.<span class="built_in">format</span>(proof[<span class="number">4</span>:], digest))</span><br><span class="line">        self.dosend(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = (x.strip()).decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dosend</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg.encode(<span class="string">&quot;latin-1&quot;</span>) + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, sk, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> sk.sign(msg, hashfunc=Hash)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, vk, msg, signature</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            vk.verify(signature, msg, hashfunc=Hash)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid signature&quot;</span>&#125;</span><br><span class="line">        msg = json.loads(msg.decode())</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg.get(<span class="string">&quot;admin&quot;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are not admin&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are admin&quot;</span>, <span class="string">&quot;flag&quot;</span>: flag&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">self, sk, vk</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.dosend(<span class="string">&quot;Input your choice:\n[1] Sign in\n [2] Verify\n [3] Exit&quot;</span>)</span><br><span class="line">            choice = self.request.recv(<span class="number">2</span>).strip()</span><br><span class="line">            choice = <span class="built_in">int</span>(choice.decode())</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                self.dosend(<span class="string">&quot;Input your username:&quot;</span>)</span><br><span class="line">                buf = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(buf) &lt; <span class="number">1000</span>:</span><br><span class="line">                    buf += self.request.recv(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> buf[-<span class="number">1</span>:] == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                name = <span class="string">&quot;&quot;</span>.join( <span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> buf <span class="keyword">if</span> <span class="built_in">chr</span>(x).isalnum())</span><br><span class="line">                msg_to_sign = &#123;<span class="string">&quot;admin&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;username&quot;</span>: name&#125;</span><br><span class="line">                msg_to_sign = json.dumps(msg_to_sign).encode()</span><br><span class="line">                sig = self.sign(sk, msg_to_sign).<span class="built_in">hex</span>()</span><br><span class="line">                info = &#123;<span class="string">&quot;sig&quot;</span>: sig&#125;</span><br><span class="line">                self.dosend(<span class="string">&quot;Your signature: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(json.dumps(info)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">2</span>:</span><br><span class="line">                self.dosend(<span class="string">&quot;Input your msg and sigature in JSON form:&quot;</span>)</span><br><span class="line">                buf = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(buf) &lt; <span class="number">1000</span>:</span><br><span class="line">                    buf += self.request.recv(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> buf[-<span class="number">1</span>:] == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                buf = buf.decode()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;buf&#x27;</span>, buf)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    info = json.loads(buf)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    self.dosend(<span class="string">&quot;Invalid JSON&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                msg = info[<span class="string">&#x27;msg&#x27;</span>].encode()</span><br><span class="line">                sig = <span class="built_in">bytes</span>.fromhex(info[<span class="string">&#x27;sig&#x27;</span>])</span><br><span class="line">                send_info = self.verify(vk, msg, sig)</span><br><span class="line">                self.dosend(json.dumps(send_info))</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">3</span>:</span><br><span class="line">                self.request.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">            signal.alarm(<span class="number">60</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.dosend(<span class="string">&quot;You must solve proof of work&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            signal.alarm(<span class="number">60</span>)</span><br><span class="line">            </span><br><span class="line">            sk = SigningKey.generate()</span><br><span class="line">            vk = sk.get_verifying_key()</span><br><span class="line">            self.challenge(sk, vk)</span><br><span class="line">             </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.dosend(<span class="string">&quot;Timeout&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.dosend(<span class="string">&quot;WTF?&quot;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">10500</span></span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>梳理一下题目任务：</p>
<ul>
<li>通过proof</li>
<li>用现有库ecdsa生成一个签名对象sk，同时生成对应的验签对象vk后，进入challenge</li>
<li>在challenge中，输入1，可以输入一个username，对 <code>&#123;&quot;admin&quot;: False, &quot;username&quot;: name&#125;</code>形式的msg进行签名，靶机返回签名值；输入2，可以输入一个JSON形式的数据对象如：<code>&#123;&#39;msg&#39;: &#39;&#123;&quot;admin&quot;: false, &quot;username&quot;: name&#125;&#39;, &#39;sig&#39;: sig&#125;</code>，靶机将对输入的数据对象进行验签。</li>
<li>如果验签通过，且”admin”值不为false，则得到flag。</li>
</ul>
<p>而在本题的签名流程中，哈希函数是自定义的，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">digest</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">bytes</span>(self.data)</span><br><span class="line">        data = pad(data, <span class="number">16</span>)</span><br><span class="line">        text = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        hash_result = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">16</span>):</span><br><span class="line">            key = data[i:i+<span class="number">16</span>]</span><br><span class="line">            text = AES.new(key, AES.MODE_ECB).encrypt(text)</span><br><span class="line">            hash_result += text</span><br><span class="line">        <span class="keyword">return</span> hash_result</span><br></pre></td></tr></table></figure>
<p>也就是把msg的内容分为长度为16的若干组，并分别当作AES的key并对b”\x00” * 16进行AES加密，得到的结果拼接起来就是哈希值。</p>
<p>也就是说，我们的任务就是构造一个msg，使得其自定义哈希值与<code>&#123;&quot;admin&quot;: false, &quot;username&quot;: name&#125;</code>相同，同时满足”admin”的值不为false。</p>
<p>首先有一点就很奇怪：这个哈希函数长度会随着data的长度变化而变化。也就是说，如果给一个足够长的data，就会产生一个足够大的哈希值，现有的ecdsa库是否会对这种情况进行处理？</p>
<p>结果发现真的会处理，如下图中所示，allow_truncate在sign函数中是默认为true的，而baselen经测验是24，也就是说，如果哈希超长，他只会取前24个作为摘要值：</p>
<p><img src="/post/923bfbdd/image-20231018171953594.png" alt="image-20231018171953594"></p>
<p>这也就是说，题目中自定义的哈希函数不管产生多长的字节流，由于哈希摘要只取24个，因此只有前两个分组的data会对最终被使用到签名里的哈希值产生影响,也就是说我们传入的JSON对象的第三十二个以后的字符都不会影响验签。而观察verify函数，他其实是先把传入的msg当作字节串进行验签，再把其当作JSON对象检验是否”admin”为false：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, vk, msg, signature</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            vk.verify(signature, msg, hashfunc=Hash)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid signature&quot;</span>&#125;</span><br><span class="line">        msg = json.loads(msg.decode())</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg.get(<span class="string">&quot;admin&quot;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are not admin&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are admin&quot;</span>, <span class="string">&quot;flag&quot;</span>: flag&#125;</span><br></pre></td></tr></table></figure>
<p>但是JSON对象是可以覆盖前面的”admin”的值的，也就是说，我们将msg的值设置成下面这种形式，再传给靶机：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;admin&quot;</span>: false, <span class="string">&quot;username&quot;</span>: name, <span class="string">&quot;admin&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>
<p>那么对于服务器来说，其验签是用的上面这个<strong>字符串</strong>的自定义哈希的前32位来进行验签，因此当然能验签通过。而在验签通过后，他把这个字符串通过loads转成JSON对象，”admin”的值就被覆盖成为了name，因此就能得到flag！哈哈，有点卑鄙。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX + &quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line">					</span><br><span class="line">r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28234</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;[3] Exit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Input your username:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;Tiffany&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;signature: &quot;</span>)</span><br><span class="line">sig = r.recvline().strip().decode()[<span class="number">9</span>:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;[3] Exit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;JSON form:&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#123;&quot;admin&quot;: false, &quot;username&quot;: &quot;Tiffany&quot;, &quot;admin&quot;: &quot;Tiffany&quot;&#125;&#x27;</span></span><br><span class="line">msg_to_sign = &#123;<span class="string">&quot;msg&quot;</span>: msg, <span class="string">&quot;sig&quot;</span>: sig&#125;</span><br><span class="line"><span class="built_in">print</span>(msg_to_sign)</span><br><span class="line">msg_to_sign = json.dumps(msg_to_sign).encode()</span><br><span class="line"></span><br><span class="line">r.sendline(msg_to_sign)</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;e90c5b52-3eb4-4f69-a8ec-7f6e5fe0617f&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Ezhash"><a href="#Ezhash" class="headerlink" title="Ezhash"></a>Ezhash</h3><p>题目来源：强网拟态 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, random, hashlib, string</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHash</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cipher = AES.new(<span class="string">b&quot;a&quot;</span>*<span class="number">32</span>,AES.MODE_ECB)</span><br><span class="line">        self.state = <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self,m</span>):</span><br><span class="line">        <span class="keyword">return</span> self.cipher.encrypt(m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upadteState</span>(<span class="params">self,m</span>):</span><br><span class="line">        m += <span class="string">b&quot;\x00&quot;</span> * <span class="number">5</span></span><br><span class="line">        state = <span class="built_in">bytes</span>([(a+b+<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(self.state,m)])</span><br><span class="line">        self.state = self.enc(state)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finalUpdateState</span>(<span class="params">self,m</span>):</span><br><span class="line">        padding_len = <span class="number">11</span> - <span class="built_in">len</span>(m) % <span class="number">11</span></span><br><span class="line">        m += <span class="built_in">bytes</span>([<span class="number">0x80</span>] + [padding_len - <span class="number">1</span>] * (padding_len - <span class="number">1</span>))</span><br><span class="line">        self.upadteState(m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">genResult</span>(<span class="params">self</span>):</span><br><span class="line">        result = hashlib.sha256(self.state[:<span class="number">11</span>]).digest() + self.state[<span class="number">11</span>:]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self,msg</span>):</span><br><span class="line">        self.state = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        length = <span class="built_in">len</span>(msg) // <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            subMsg = msg[<span class="number">11</span>*i:<span class="number">11</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            self.upadteState(subMsg)</span><br><span class="line">        finalMsg = msg[length*<span class="number">11</span>:]</span><br><span class="line">        self.finalUpdateState(finalMsg)</span><br><span class="line">        <span class="keyword">return</span> self.genResult()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    alarm(<span class="number">10</span>)</span><br><span class="line">    TARGET = <span class="string">b&quot;I think the hash function has no weakness!&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        h = MyHash()</span><br><span class="line">        h1 = h.<span class="built_in">hash</span>(TARGET)</span><br><span class="line">        anotherHash = unhexlify(<span class="built_in">input</span>(<span class="string">&quot;Please your hash (hex) : &quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> anotherHash != TARGET:</span><br><span class="line">            h2 = h.<span class="built_in">hash</span>(anotherHash)</span><br><span class="line">            <span class="keyword">if</span> h1 == h2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Success! Here is your flag : <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t input TARGET!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>题目内容为：</p>
<ul>
<li>通过proof</li>
<li>输入一个字节串的十六进制编码，该字节串不能等于TARGET</li>
<li>若该字节串的MyHash()值与TARGET相等，则得到flag</li>
</ul>
<p>也就是说我们要找到一个满足要求的自定义哈希函数的碰撞，那么就要分析一下这个哈希函数。简单来说，该哈希函数首先完成下列准备工作：</p>
<ul>
<li>把输入的字节串按长度为11分为若干组，最后一组不足11的单独列出</li>
<li>设置固定密钥为b”a”*32的AES</li>
<li>设置初始状态state，为b”\x00”*16</li>
</ul>
<p>准备工作完成后，每一轮做如下加密：</p>
<p>对于非最后一组：</p>
<ul>
<li>依次取分组中的每个长度为11的字节串，在后面填5个b”\x00”使得长度为16</li>
<li>将该分组与当前state逐字节相加后再加2(模256加法)</li>
<li>用AES对上述值加密，作为新的state</li>
</ul>
<p>对于最后一组：</p>
<ul>
<li><p>计算待填充长度 padding_len = 11 - len(m)</p>
</li>
<li><p>填充一个b”\x80”，然后填充(padding_len-1)个(padding_len-1)</p>
</li>
<li>然后同之前非最后一组的加密，得到最终state</li>
<li>取最终state的前11个字节做SHA256，并将结果与最终state的后5个字节连接作为最终MyHash函数返回值</li>
</ul>
<p>那么哈希函数就分析完了，接下来就是找出哪里能操作一下，从而产生碰撞。</p>
<h4 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h4><p>首先想的是，最后的填充能不能进行操作。已知TARGET的最后一个分组长度为9字节，那么其填充就为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;weakness!&quot;</span> + <span class="string">b&quot;\x80&quot;</span> + <span class="string">b&quot;\x01&quot;</span></span><br></pre></td></tr></table></figure>
<p>那么就发现长度方面没什么操作的办法，因为一改变长度，最后一字节就不一样了，那么就肯定不能期望AES后还能得到相同结果。</p>
<h4 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h4><p>那么就只能从非最后一组的加密入手，画一下对于TARGET的加密流程图：</p>
<p><img src="/post/923bfbdd/image-20231027092301982.png" alt="image-20231027092301982"></p>
<p>其中，m1、m2、m3、m4是TARGET的分组，h1、h2、h3、h4是每个state，这些都是可以求出的。</p>
<p>而看图容易看出，我们只要让任何一次加密开始前的state与给定的h1、h2、h3或h4相等，那么在之后的加密过程中就会保持完全一致。而h1、h2、h3、h4是AES得到的，没有办法直接操作，那么要使其相等，就只能让AES加密前的t1、t2、t3或t4相等。</p>
<p>所以第一个朴素的想法就是：有没有办法通过改变m1，使得改变后得到的t1’仍然与t1相等？显然这完全不可能，因为要让t1=t1’，就必须有m1=m1’(mod 256)，而要有m1=m1’(mod 256)其实就必须有m1=m1’，所以m1一点都不能动。</p>
<p>然后就想到，既然只要让t1’与t1相等即可，我们完全可以在第一组之前添加分组，而h1之后分组的我们已经完全不需要关心了。比如我们添加m0，使得：</p>
<p><img src="/post/923bfbdd/image-20231027093057026.png" alt="image-20231027093057026"></p>
<p>有没有机会同时改变m0和m1，使得这样得到的t1’与原t1相等呢？那么要确认以下两点：</p>
<ul>
<li>h0是不可控的，因为经过了AES加密</li>
<li>t1是已知的</li>
</ul>
<p>那么要得到h0，我们其实只能采取随机生成m0的方式来得到不同的h0，但是我们可以通过改变m1，来取到不同的t1’，期望其最终与原t1相同。那么其实很明显，只有生成的h0满足下面的性质，我们才能取得符合要求的t1：</p>
<ul>
<li>h0的后五个字节为全0</li>
</ul>
<p>这是因为，原初始state为16字节全0，而m1本身长度只有11，后五个字节也为填充的0。也就是说，前面11个字节我们可以通过得到的h0，去对应改变m1得到，但是后面五个字节是我们控制不了的，我们只能通过随机产生的方式，去爆破出一组AES加密后后五个字节均为0的h0.如果把AES加密得到的串视为随机生成的字节的话，那么随机生成，得到的串满足要求的概率也就是五个字节为0的概率，也就是1/2^40。而以生日攻击的理论，我们要产生2^40个随机串m0，才有大于50的概率获得满足要求的h0，这个范围显然过大了。</p>
<p>同理，如果想要生成t2’、t3’之类，使其与原t2或t3相等，要求也是一样的：生成的前一组h’的最后五个字节需要与计算得到的完全相同，概率都是1/2^40。</p>
<p>这个方法虽然看上去可行，但由于复杂度过大而不可接受的，因此还要想其他办法。</p>
<h4 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h4><p>把问题再具体化一点，我们其实可以在初始的TARGET中加任意个分组(每组长度为11)，只要满足如下要求就可以实现哈希碰撞：</p>
<ul>
<li>进入加的分组前的h与分组加密完成后的h完全相等</li>
</ul>
<p>什么意思呢？比如我们在初始TARGET的加密流程中，往箭头处加入几个新的明文分组：</p>
<p><img src="/post/923bfbdd/image-20231027153810351.png" alt="image-20231027153810351"></p>
<p>可以看到，对于新加入的几个明文分组，其输入的state值是h1，而我们只要保证这几个明文分组的最终输出也是h1，后续的加密state就完全一样了，因此能够得到哈希碰撞。</p>
<p>而如果复现过前几天的CBCTF的CB_cipher一题的话，就容易反应过来这也可以用中间相遇攻击来缩小复杂度。具体来说，刚才我们想要通过新加入两组m，并控制这两组m的值，来得到一个相同的t，从而保证后续哈希相等。而现在我们完全可以在箭头处加入三组m，然后用第一组m和第三组m进行中间相遇攻击，从而计算出中间的满足要求的第二组m，这样一来，本身需要2^40次才有大于50的概率找到一组符合要求的m，现在可以用2*2^20次就可以达到这个概率。</p>
<p>具体来说，我们用如下方式控制三组生成的m(分别叫做m1、m2、m3，请注意与本身TARGET的分组做区别)，则输入这个分组的state为h1，需要输出的state也为h1：</p>
<ul>
<li>随机生成2^20个m1，并加密其得到2^20个不同的temp1，并建立字典</li>
<li>随机生成2^20个m3，并AES解密h1后，减去m3再减去2；对这个值再进行AES解密，得到2^20个不同的temp2</li>
<li>如果第二步得到的某个值temp2与第一步的字典中的某个值temp1的后五个字节满足：temp2 = temp1 + 2，那么我们就可以由这一组值计算出符合要求的m2。这是因为，m2长度为11字节，进行加密时后五个字节需要填充全0，因此只要后五个字节满足temp2 = temp1 + 2就是合法的m2</li>
</ul>
<p>如此一来我们就可以用能够接受的复杂度找出一组哈希碰撞了。需要注意的是，通过proof后只有10s的时间提交哈希碰撞，但是由于TARGET是定死的，所以我们完全可以先找好碰撞，再连接提交。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_collision</span></span><br><span class="line">TARGET = <span class="string">b&quot;I think the hash function has no weakness!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#state</span></span><br><span class="line">h1,h2,h3,h4 = [<span class="string">b&#x27;\x82R&gt;?XAY&gt;\xf4\x98\xdd\x1f(\x81&#123;\x15&#x27;</span>,<span class="string">b&#x27;o0(;Xf\xea\xe4s\xbf\xab\xd7S\x1b\x02\xca&#x27;</span>,<span class="string">b&#x27;\x8a\xb5z\xf9\xca9u&lt;\x82\x81\xe4&lt;\x11\tJ\xbd&#x27;</span>,<span class="string">b&#x27;\x8f\xe3\xd9\xbf3\xc2\x11b\xa3\x19\xbeA\xec\xad`J&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#MITM</span></span><br><span class="line">msg = <span class="string">b&quot;&quot;</span></span><br><span class="line">cipher = AES.new(<span class="string">b&quot;a&quot;</span>*<span class="number">32</span>,AES.MODE_ECB)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">state,m</span>):</span><br><span class="line">    m = m + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    state = <span class="built_in">bytes</span>([(a+b+<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(state,m)])</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">state,m</span>):</span><br><span class="line">    temp = cipher.decrypt(state)</span><br><span class="line">    state = <span class="built_in">bytes</span>([(a-b-<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(temp,m)])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    m1_ = urandom(<span class="number">11</span>) + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    dic[enc(h1,m1_)[-<span class="number">5</span>:]] = m1_</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    m3_ = urandom(<span class="number">11</span>) + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    temp = dec(h1,m3_)</span><br><span class="line">    temp = cipher.decrypt(temp)</span><br><span class="line">    temp = <span class="built_in">bytes</span>([(a-<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a <span class="keyword">in</span> temp])</span><br><span class="line">    <span class="keyword">if</span>(temp[-<span class="number">5</span>:] <span class="keyword">in</span> dic.keys()):</span><br><span class="line">        m1_ = dic[temp[-<span class="number">5</span>:]]</span><br><span class="line">        h2_ = enc(h1,m1_)</span><br><span class="line">        m2_ = <span class="built_in">bytes</span>([(a-b)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(temp,h2_)])</span><br><span class="line">        msg = m1_[:-<span class="number">5</span>] + m2_[:-<span class="number">5</span>] + m3_[:-<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">msg = TARGET[:<span class="number">11</span>] + msg + TARGET[<span class="number">11</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 get_flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>, <span class="number">28947</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line"><span class="comment">#hash</span></span><br><span class="line">r.recvline(<span class="string">b&quot;(hex) : &quot;</span>)</span><br><span class="line">r.sendline(msg.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;d6ee4b86-b882-43b3-937e-680b97500462&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-RSA</title>
    <url>/post/ea445335.html</url>
    <content><![CDATA[<p>该文章主要记录一些RSA相关的趣题</p>
<span id="more"></span>
<h3 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h3><p>题目来源：2023江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1, q1 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1*q1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p2, q2 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n2 = p2*q2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;<span class="built_in">pow</span>(n1-m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line"><span class="comment"># n2 = 68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line"><span class="comment"># c1 = 42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line"><span class="comment"># c2 = 62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br></pre></td></tr></table></figure>
<p>题目意图很明确：明文线性相关，所以直接求解多项式gcd是可以做出来的。</p>
<p>不过问题在于，本题e很大，所以如果直接求解gcd，时间会花的较长(约30-40分钟)。因此学习了一波Half-gcd，这是一种能有效减少求解多项式的公因式所需时间的方法。</p>
<p><a href="https://www.cnblogs.com/whx1003/p/16217087.html">多项式 gcd 的正确姿势：Half-GCD 算法 - whx1003 - 博客园 (cnblogs.com)</a></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * b.degree() &lt;= a.degree() <span class="keyword">or</span> a.degree() == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    m = a.degree() // <span class="number">2</span></span><br><span class="line">    a_top, a_bot = a.quo_rem(x^m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x^m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    <span class="keyword">return</span> RET00, RET01, RET10, RET11</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a.degree(), b.degree())</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> GCD(d, r)</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">500000</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line">n2 = <span class="number">68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line">c1 = <span class="number">42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line">c2 = <span class="number">62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">f = x^e - c1</span><br><span class="line">g = (n1 - x)^e - c2</span><br><span class="line"></span><br><span class="line">res = GCD(f,g)</span><br><span class="line"></span><br><span class="line">m = -res.monic().coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>CnHongKe{Fr4nkl1n_R31ter_4nd_gcD}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="BUAA-AITMCLAB-amp-Level4"><a href="#BUAA-AITMCLAB-amp-Level4" class="headerlink" title="BUAA^AITMCLAB&amp;Level4"></a>BUAA^AITMCLAB&amp;Level4</h3><p>题目来源：BUAA^AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nextprime</span>(<span class="params">n</span>):</span><br><span class="line">    n = (n + <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(n):</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;********************&quot;</span></span><br><span class="line"></span><br><span class="line">m = s2n(flag)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The getPrime() may not function properly, </span></span><br><span class="line"><span class="string">but it does not affect your understanding of the problem.</span></span><br><span class="line"><span class="string">lzh hopes you could attack successfully!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = nextprime(p + randint(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">421</span>))</span><br><span class="line">        n = p * q</span><br><span class="line">        phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">        d = randint(<span class="number">0</span>, n ** <span class="number">0.32</span>)</span><br><span class="line">        e = invmod(d, phi)</span><br><span class="line">        c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = %d&quot;</span> % e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = %d&quot;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = 127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line"><span class="string">n = 132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line"><span class="string">c = 37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># try to find the 「flag」</span></span><br><span class="line"><span class="comment"># and don&#x27;t forget to submit it to the platform</span></span><br></pre></td></tr></table></figure>
<p>题目最有用的信息是：</p>
<ul>
<li>p和q高位相近</li>
<li>d小于n^0.32</li>
</ul>
<p>看到卡了d的界，第一反应就是低解密指数攻击，可以采用wiener attack或者boneh and durfee attack。但是问题在于：</p>
<ul>
<li>wiener attack：要求d小于$ \frac{1}{3}n^{\frac{1}{4}}$</li>
<li>boneh and durfee attack：要求d小于n^0.292</li>
</ul>
<p>而题目只界定了0.32，超过了两种攻击的范围。不过不要紧，首先试一试boneh and durfee attack，因为有不到1/8的概率成功(d在(0,n^0.32)随机生成，因此有1/8概率落在(0,n^0.29)的区间，因此可能会成功)</p>
<p>可惜的是失败了，那么就只能另寻他法。由题目条件可知，p、q高位相同这个额外信息肯定是需要用上的，以此来扩大能攻击的d的上界，但是并不知道怎么用。最后从Xenny师傅那里得到一篇论文：</p>
<p><a href="http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf">http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf</a></p>
<p>关键部分：</p>
<p><img src="/post/ea445335/image-20231001174839341.png" alt="image-20231001174839341"></p>
<p><img src="/post/ea445335/image-20231001174939785.png" alt="image-20231001174939785"></p>
<p>这篇论文证明了：当p、q高位接近到一定程度时，$\frac{e}{n-2\sqrt{n}+1}$ 是 $\frac{k}{d}$ 的收敛子，并且拓宽了可以进行wiener attack攻击的d的上界。</p>
<p>因此只需要把wiener attack中的 n 改为 $n-2\sqrt{n}+1$ 即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line">n = <span class="number">132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line">c = <span class="number">37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        self.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n-<span class="number">2</span>*iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;aitmc&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>aitmc{W0Oo!!Y0u_3re_a_m3ster_of_W1ener_H3ck!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="AITMCLAB-quiz2"><a href="#AITMCLAB-quiz2" class="headerlink" title="AITMCLAB quiz2"></a>AITMCLAB quiz2</h3><p>题目来源：AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Welcome to quiz2!!!</span></span><br><span class="line"><span class="keyword">from</span> AITMCLab.libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line">n = p * q</span><br><span class="line">flag = s2n(<span class="string">&#x27;flag&#123;************&#125;&#x27;</span>)</span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, flag, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span> (c)</span><br><span class="line"><span class="comment"># 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br></pre></td></tr></table></figure>
<p>题目本身应该还需要求一下p、q的，但是直接给好了那就用给好的做吧。</p>
<p>发现加密就一步，如下：</p>
<script type="math/tex; mode=display">
c\equiv (n+1)^{flag}*r^n\quad(mod\;n^2)</script><p>其中，r是一个随机数，且题目未给出。</p>
<p>首先，由于模 $ n^2$ 的缘故，$ (n+1)^{flag}$ 可以用二项式定理展开，然后消掉大部分项：</p>
<script type="math/tex; mode=display">
(n+1)^{flag} \equiv n*flag+1\quad(mod\;n^2)</script><p>因此有：</p>
<script type="math/tex; mode=display">
c\equiv (n*flag+1)*r^n\quad(mod\;n^2)</script><p>r 是未知的随机数，因此要消掉，消掉 r 的方式类似于 RSA 的解密过程，如下：</p>
<p>因为：</p>
<script type="math/tex; mode=display">
\phi(n^2) = \phi(p^2q^2) = \phi(p^2)\phi(q^2) = pq(p-1)(q-1)</script><p>所以 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv ((n*flag+1)*r^n)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>即 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)}*r^{n(p-1)(q-1)} \quad(mod\;n^2)</script><p>注意到上式中：</p>
<script type="math/tex; mode=display">
r^{n(p-1)(q-1)}\equiv r^{\phi(n^2)}\equiv 1\quad(mod\;n^2)</script><p>因此就消掉了 r，得到：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>右侧的式子又可以用二项式定理展开，得到：</p>
<script type="math/tex; mode=display">
(n*flag+1)^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>因此：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>减一，除以n后，再求(p-1)(q-1)对n^2的逆元即可，但是会发现求出的模 n^2 下的并不是最终的 flag，猜测可能题目原本题面还有额外信息界定了 flag 的范围，那么转到模 n 下即可得到最终flag。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c,(p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) - <span class="number">1</span>) // n * inverse((p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{can_you_find_me??}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="2048bit-e"><a href="#2048bit-e" class="headerlink" title="2048bit e"></a>2048bit e</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, getStrongPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p, q = getStrongPrime(<span class="number">1024</span>), getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RSAgen</span>(<span class="params">e = <span class="literal">None</span></span>):</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> e:</span><br><span class="line">        <span class="keyword">while</span>(d.bit_length() &lt; <span class="number">2047</span>):</span><br><span class="line">            e = getPrime(<span class="number">2047</span>)</span><br><span class="line">            d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> (p*q, p, q, e, d)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key = RSAgen()</span><br><span class="line">k = randint(<span class="number">600</span>, <span class="number">1200</span>)</span><br><span class="line">f = factorial(k)</span><br><span class="line"></span><br><span class="line">leak = (<span class="built_in">pow</span>(key[<span class="number">3</span>], <span class="number">2</span>) + (key[<span class="number">3</span>]*key[<span class="number">4</span>] - <span class="number">1</span>)*f)*getPrime(<span class="number">256</span>) + k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048 bit e is very expensive, i should use standard e for my encryption   </span></span><br><span class="line"></span><br><span class="line">key = RSAgen(<span class="number">65537</span>)</span><br><span class="line">e = key[<span class="number">3</span>]</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#OUTPUT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#n = 26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line"><span class="comment">#c = 14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line"><span class="comment">#leak = 8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程，题目首先用了默认参数 e=None 生成了一组 RSA 密钥，并基于此密钥泄露了一个信息 leak 。泄漏 leak 之后，用 e=65537 生成了另一组公私钥，并且用另一组公私钥加密明文后，给出密文。</p>
<p>注意到两次 RSAgen() 过程中，n、p、q三个量是不变的。因此解题的思路就是：由第一组 e、d 泄漏的信息 leak，获取 n 的分解，从而解密第二组密文。</p>
<p>那么 leak 究竟泄露了什么？先把表达式写出来：</p>
<script type="math/tex; mode=display">
leak = (e_1^2+(e_1d_1-1)(k!))a+k</script><p>其中，</p>
<ul>
<li>a是一个256比特的随机素数，未给出</li>
<li>k是一个(600,1200)之间的整数，未给出</li>
</ul>
<p>整个 leak 式子里就没有一个参数是知道的，那怎么办？首先就会观察到 k 可能的范围比较小，只有 600 种可能，因此突破口应该在于先找到一种合适的爆破思路，求解出 k。为了达到求解 k 的目的，先把 leak 的表达式拆成更容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = ae_1^2+a(e_1d_1-1)(k!)+k</script><p>我们在(600,1200)之间取 i 进行爆破，那么当 i 取(600,k) 之间的数时，下面的等式成立：</p>
<script type="math/tex; mode=display">
ae_1^2 = leak -i \quad (mod\;i!)</script><p>这是因为，由于 i &lt; k，所以有 $ i! \mid k!$ </p>
<p>而当取的 i 大于 k 时， $ i! \nmid k!$ ，因此模 $ i!$ 无法模掉leak中 $a(e_1d_1-1)(k!)$ 这一部分。这也就是说，如果 $ leak -i \quad (mod\;i!) $ 的计算值发生了变化，就说明我们取得了正确的 k。并且在爆破过程中，我们早就拥有了正确的 $ ae_1^2$</p>
<p>求得了 k 之后，就要想办法求出剩下几个参数，而由于拥有 $ ae_1^2$ ，所以容易想到继续从 a 下手。此时，我们再把 leak 的表达式写成另一个容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = (a(e_1d_1-1))(k!)+(ae_1^2+k)</script><p>为什么说他更容易理解？因为这就写成了一个标准的带余除法形式：</p>
<script type="math/tex; mode=display">
a=kb+c\quad,\quad c<b</script><p>而对这个带余除法，显然有：</p>
<script type="math/tex; mode=display">
a \div b = k</script><p>而放在 leak 组成的带余除法中，由于 $k!$ 的数量级显然大于 $ (ae_1^2+k)$ ，因此就有：</p>
<script type="math/tex; mode=display">
leak \div (k!) = a(e_1d_1-1)</script><p>将得到的值与 $ae_1^2$ 求gcd即可得到 a ，接下来就能恢复 $e_1，d_1$，然后就转化成已知 e，d 分解 n 的问题了。分解出 n 后就可以顺利求解密文。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = <span class="number">26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line">c = <span class="number">14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line">leak = <span class="number">8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确定 k = 1000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for k in range(600,1200):</span></span><br><span class="line"><span class="string">    t = factorial(k)</span></span><br><span class="line"><span class="string">    ae2 = int((leak-k) % t)</span></span><br><span class="line"><span class="string">    if(len(bin(ae2)) != 4351):</span></span><br><span class="line"><span class="string">        print(k-1)</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">1000</span></span><br><span class="line">ae2 = <span class="built_in">int</span>((leak-k) % factorial(k))</span><br><span class="line">temp = leak // factorial(k)</span><br><span class="line">a = GCD(ae2,temp)</span><br><span class="line"></span><br><span class="line">e = iroot(ae2//a,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">d = (((leak - k)//a - e**<span class="number">2</span>) // factorial(k) + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#已知e，d分解n</span></span><br><span class="line">t = e*d - <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    s += <span class="number">1</span></span><br><span class="line">    t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">    c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t), n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t), n)</span><br><span class="line">    <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">        p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{gcd_is_always_useful}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="hardrsa"><a href="#hardrsa" class="headerlink" title="hardrsa"></a>hardrsa</h3><p>感谢几位师傅对我提供的帮助，通过这一道题收获了很多。</p>
<p>题目来源：江苏省数据安全竞赛 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> message</span><br><span class="line"></span><br><span class="line">p, q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> msg + long_to_bytes(<span class="built_in">len</span>(msg) &amp; <span class="number">0xff</span>) * (<span class="number">2048</span> // <span class="number">8</span> - <span class="built_in">len</span>(msg) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([</span><br><span class="line">        poly[i] * <span class="built_in">pow</span>(x, i, n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poly))</span><br><span class="line">    ]) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commit</span>(<span class="params">m: <span class="built_in">int</span>, d: <span class="built_in">int</span>, key: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">int</span>):</span><br><span class="line">    sig = <span class="built_in">pow</span>(m, d, n)</span><br><span class="line">    c1 = (sig + <span class="built_in">pow</span>(key, <span class="number">8</span>, n) + <span class="built_in">pow</span>(key, <span class="number">4</span>, n) + <span class="built_in">pow</span>(key, <span class="number">2</span>, n)) % n</span><br><span class="line">    c2 = f(key, poly)</span><br><span class="line">    <span class="keyword">return</span> c1, c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reveal</span>(<span class="params">comm: (<span class="params"><span class="built_in">int</span>, <span class="built_in">int</span></span>), e: <span class="built_in">int</span>, key: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    c1, c2 = comm</span><br><span class="line">    <span class="keyword">assert</span> f(key, poly) == c2</span><br><span class="line">    sig = (c1 - <span class="built_in">pow</span>(key, <span class="number">8</span>, n) - <span class="built_in">pow</span>(key, <span class="number">4</span>, n) - <span class="built_in">pow</span>(key, <span class="number">2</span>, n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sig, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part1</span>(<span class="params">msg</span>):</span><br><span class="line">    e = <span class="number">233</span></span><br><span class="line">    <span class="keyword">assert</span> GCD(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(pad(msg))</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;# Part1: RSA-Encrypted Ciphertext\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part2</span>(<span class="params">msg</span>):</span><br><span class="line">    e = getPrime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">assert</span> GCD(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    key = getPrime(<span class="number">1024</span>)</span><br><span class="line">    poly = [randint(n // <span class="number">2</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(msg)</span><br><span class="line">    comm = commit(m, d, key, poly)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;# Part2: RSA-Committed Promise\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;poly = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;comm = &#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">part1(message)</span><br><span class="line">part2(message)</span><br></pre></td></tr></table></figure>
<p>数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Part1: RSA-Encrypted Ciphertext</span></span><br><span class="line">e = <span class="number">233</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">c = <span class="number">4236463649246394372490570028773321531426122440354351428997745409269923078428264643984899276198044684405861411922920531424639487584475747440112668094733950281377813868988540407013967573584191516922420060508458881142111648007775541541206593622564564631875373635260315932740995440619035591722675173125322220642392862827996987221780888705796026865917969313975598350208578877195524822778355327253625950282635041414028859491576352297298051077024341409125083650148374909480761558443601847884116325029903499801566422663448734010004472905405209374692154735955178855634936508017264189084568424915164265136679303107745093554391</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Part2: RSA-Committed Promise</span></span><br><span class="line">e = <span class="number">99181398864848350371016820825262886005052515653150198897546275436659368873943</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">poly = [<span class="number">11693140800527031176333218506340138430240732192854115958431704393516665671354696442539228569575338743555295185742126489158430815263152939757778849261704565332700814864041988371030487621611557506812653488873444536543143499111306076278080422306914610758456202844384883419669780999835836102076447921204517046598938140064244383099665415296806730515287813702062130475281955202867695799707516205462251852912274330831232375362037653669046715539164625549785400699583991291522758317569231805551847554593188947041531361947659444681456741424693383958548943092649257246992511287359572983628972516677506780721131000304618999959240</span>, <span class="number">8649833849514355009128561581797540267452805179286553003531347469534976088903045945255322948772127884435044654450320045837146400545547035413423698519877318250595578140049443137749594587635124784776640002144869420735353810166877391696732603701567388813523929688499591774843294322221335666734637085035509293762539158494372418206937167893545676403532672666734540153869114591107560124251452526082108870638702356111887843199439729119638581693415233654435010304861838471514755642714031294943492873471199466178392719343340089957082809543276507257853855309815913146064538017999492250838671852901021723088900839652630087246141</span>, <span class="number">10438652195883831412435505413668253747222376993835057512571018586886172468948369796145782100970559858131410652399919261454018181151110711244715955202406007064700539815605400586293839962095578425689125884220411946405356203770630361655071021743875660757465221991116870667245627142015074048387044977823496726850652712591020608153928488470683315016742274925734216097962308837642472645606961264797331661105479206824511239562468503777960135923781994521205671697654968415294210654160582131094288074290198995839634141037654146239631046959485219534841518635072303135929794463631818179287771643492272214514760725403082404954077</span>, <span class="number">6299797573437298253264628040275849948907328879976403409079992234253896659195171862234483958852183317706433020249500667696777456584466888790659866599735145200280792478137705987287433143791976037155630359309176772317673958151640355448435973240969550879845354695745860375206302178000370970096709147495071090575765018242388707621300316998885753178573503094652529005706228511805022756376570371219075764243214260191102332714962783026379460713478294288812651004299398765770489801066856526467071118037951998756053462219010773133084404686760087508480150118199064293552990969966284945601004840346771690026959557356854894243142</span>, <span class="number">5983820380221904115440358005660480412823344425839483679019674090060688612423646544886814493835896810583739677554610487986153726859924027361158809156736196645803178995096319914672180274662462472664438431485027075620562484665653780178408855146763748596173882017604170478152671447791422988271913561725716787175269110153429606771827175728957339646431861352878283239969487426243742285835160804730331718691578524218241320715981666141098574100230167376734068738383108974392515927882240711793555447542821660698352614753928088082506778754171275154966436158307349089886252792151153113074617130452582559608047038630881997177039</span>, <span class="number">8645965524213201512342533940160639034615963495013466945596780273953897799745861434427630308300521898525016597999525817531163934211570038600077012713829688089842641388807750705270930654414851381582193662566863633088157205775657627097344504719056435375579887356258011212827309329133255360061251120340523712584772477488197868145839887008419529501177350232970834479788126170916738231188284692568626261063508315725550701926154671018704631776622326225119240790109750932269682399309418540027656506064831086635915646225839228991353015865676434534451013307891476809505965003364463706502868834742525815830814492484165778659587</span>, <span class="number">8166140295702705700395932322789090244824428366114951893911644134774959163562810185361333621863609139128772766004899397707351421904667080061768039818505350911041979508989714659275009135159974367690971928143915291585444591471643654394998052988522554930699706249604920467869677602144648519540475773077094544621879816388166112425971849485960827238183936548150306573608653859245355573339051077997289111414512279487536882904628267661230723738630443448632824642827281459881525198877210749057510831197018233179399730814958129875964180438394548470264377690208812256581197996134290095012248199229098363134875105995583143456168</span>, <span class="number">7886150187486607733887128114395381216280632497989629748521639744973030901762862876238518693357844959238094796545062411041606956447558438012468158689781248611833577676585338278147089873855656470245899229225464314602079901728048645256171396517696354087510327916826422932730522688556064550363916637523771395744826680925934243060230500845916621676929436788265600433752247152028066595489876401981088262668869028915433063354318691392248675089923289405167438193023160255479805758334680481491101176946904940583407560870907209114968515837974428072735042388612237381596523708101955987248270337329833158967647159556534902013893</span>]</span><br><span class="line">comm = (<span class="number">9026467857515594907139807322545643350722792398333959966810869076838279879742354562376888810480050803270079309674260152449220680190968011586239815898932783620194546687257066163982003360839627375768650529178687560019057911732404297565185448089372452182330617296119274984700102752558018626083227105916899465707167123429214371669495986051607781832508462509001195586237627932854012820647829936908023798167666909963391041754465967388417732502397794744032988693994711566201865393143230144593516438201799281519569197057042946810458619730130134659584342739598850633062984339223231306255977280483664354044871774659593149033209</span>, <span class="number">5887596182170973664955287957462647377802905573127495764035296813527168813405478740764981971139443147816701320451276508908764320611456709375484716332728626903126128547418401252520849124559671921918551772662755206548324883488334170067283423978156495671895979491847768306791576421069205614999618915580196468910801165217204877300901375945537974466575619851388784172797986385425693707736028155214422059085724499916277733254676564775837649200298391496783417808690237433893136207762575843230800924871422368332950754364751040187058272878178869385694948947692002564148365094951441755961075673329949416511183562799400968841515</span>)</span><br></pre></td></tr></table></figure>
<p>简单梳理一下题目的已知信息，可以表达成以下两个式子：</p>
<script type="math/tex; mode=display">
(pad(m))^{233} \equiv c\quad(mod\;n) \tag{1}</script><script type="math/tex; mode=display">
m^{d_2}+key^8+key^4+key^2 \equiv commit[0] \quad (mod\;n) \tag{2}</script><p>然后还有：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^7poly[i]*key^i \equiv commit[1] \quad (mod\;n) \tag{3}</script><p>首先，对于m的pad操作，只有少于256种可能，因此可以用爆破操作求解。</p>
<p>一个比较朴素的思路是：想办法求解出(2)中的d2，然后求(1)(2)两式的Gröbner基，从而直接解出key与m。但是从已知的信息好像并不能简单有效地得出关于d2的信息，因此这个方法作罢。</p>
<p>但是消元是势在必行的，观察到三个式子均在模n环上，因此主要就要想如何消元。首先，根据(2)(3)两式，可以用resultant消去key，转化成一个关于m^d的单变量多项式，然后由(1)(2)两式求gcd就能得到m。</p>
<p>但是，还是老问题，没有d2怎么求gcd呢？所以无论怎么样，这个d2是绕不开的一个问题，而我们能利用的关于d2信息就只有一条：</p>
<script type="math/tex; mode=display">
e_2*d_2 \equiv 1 \quad (mod\;\phi(n))</script><p>关键就在于怎么利用，因为我们现在有的是一个关于m^d2的模n下的多项式，而并不是一个数字，因此没有办法简单的直接求e2次幂。然后在几位师傅的帮助下，学习了一下伴随矩阵的使用：在sage中，如果拥有一个monic的多项式f(x)，那么可以用companion_matrix函数将其转化为一个伴随矩阵F，并且矩阵F的特征多项式就是f(x)。那你可以想到，在这题目里,我们直接把m^d2看作变量x，那么f(x)有根m^d2，而m^d2既是f(x)的根，也是F的特征值。</p>
<p>而矩阵是可以求幂次的，F^e2次方的特征值就是m^(d2*e2)，那么在模n的环下，该特征值就是m，此时我们再用charpoly函数求F^e2的特征多项式，就得到了一个根为m的多项式了。</p>
<p>那么接下来的工作就很容易，把该多项式和(1)式求解gcd，就能得到(x-m)，就能得到明文m了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Part1: RSA-Encrypted Ciphertext</span></span><br><span class="line">e1 = <span class="number">233</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">c1 = <span class="number">4236463649246394372490570028773321531426122440354351428997745409269923078428264643984899276198044684405861411922920531424639487584475747440112668094733950281377813868988540407013967573584191516922420060508458881142111648007775541541206593622564564631875373635260315932740995440619035591722675173125322220642392862827996987221780888705796026865917969313975598350208578877195524822778355327253625950282635041414028859491576352297298051077024341409125083650148374909480761558443601847884116325029903499801566422663448734010004472905405209374692154735955178855634936508017264189084568424915164265136679303107745093554391</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Part2: RSA-Committed Promise</span></span><br><span class="line">e2 = <span class="number">99181398864848350371016820825262886005052515653150198897546275436659368873943</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">poly = [<span class="number">11693140800527031176333218506340138430240732192854115958431704393516665671354696442539228569575338743555295185742126489158430815263152939757778849261704565332700814864041988371030487621611557506812653488873444536543143499111306076278080422306914610758456202844384883419669780999835836102076447921204517046598938140064244383099665415296806730515287813702062130475281955202867695799707516205462251852912274330831232375362037653669046715539164625549785400699583991291522758317569231805551847554593188947041531361947659444681456741424693383958548943092649257246992511287359572983628972516677506780721131000304618999959240</span>, <span class="number">8649833849514355009128561581797540267452805179286553003531347469534976088903045945255322948772127884435044654450320045837146400545547035413423698519877318250595578140049443137749594587635124784776640002144869420735353810166877391696732603701567388813523929688499591774843294322221335666734637085035509293762539158494372418206937167893545676403532672666734540153869114591107560124251452526082108870638702356111887843199439729119638581693415233654435010304861838471514755642714031294943492873471199466178392719343340089957082809543276507257853855309815913146064538017999492250838671852901021723088900839652630087246141</span>, <span class="number">10438652195883831412435505413668253747222376993835057512571018586886172468948369796145782100970559858131410652399919261454018181151110711244715955202406007064700539815605400586293839962095578425689125884220411946405356203770630361655071021743875660757465221991116870667245627142015074048387044977823496726850652712591020608153928488470683315016742274925734216097962308837642472645606961264797331661105479206824511239562468503777960135923781994521205671697654968415294210654160582131094288074290198995839634141037654146239631046959485219534841518635072303135929794463631818179287771643492272214514760725403082404954077</span>, <span class="number">6299797573437298253264628040275849948907328879976403409079992234253896659195171862234483958852183317706433020249500667696777456584466888790659866599735145200280792478137705987287433143791976037155630359309176772317673958151640355448435973240969550879845354695745860375206302178000370970096709147495071090575765018242388707621300316998885753178573503094652529005706228511805022756376570371219075764243214260191102332714962783026379460713478294288812651004299398765770489801066856526467071118037951998756053462219010773133084404686760087508480150118199064293552990969966284945601004840346771690026959557356854894243142</span>, <span class="number">5983820380221904115440358005660480412823344425839483679019674090060688612423646544886814493835896810583739677554610487986153726859924027361158809156736196645803178995096319914672180274662462472664438431485027075620562484665653780178408855146763748596173882017604170478152671447791422988271913561725716787175269110153429606771827175728957339646431861352878283239969487426243742285835160804730331718691578524218241320715981666141098574100230167376734068738383108974392515927882240711793555447542821660698352614753928088082506778754171275154966436158307349089886252792151153113074617130452582559608047038630881997177039</span>, <span class="number">8645965524213201512342533940160639034615963495013466945596780273953897799745861434427630308300521898525016597999525817531163934211570038600077012713829688089842641388807750705270930654414851381582193662566863633088157205775657627097344504719056435375579887356258011212827309329133255360061251120340523712584772477488197868145839887008419529501177350232970834479788126170916738231188284692568626261063508315725550701926154671018704631776622326225119240790109750932269682399309418540027656506064831086635915646225839228991353015865676434534451013307891476809505965003364463706502868834742525815830814492484165778659587</span>, <span class="number">8166140295702705700395932322789090244824428366114951893911644134774959163562810185361333621863609139128772766004899397707351421904667080061768039818505350911041979508989714659275009135159974367690971928143915291585444591471643654394998052988522554930699706249604920467869677602144648519540475773077094544621879816388166112425971849485960827238183936548150306573608653859245355573339051077997289111414512279487536882904628267661230723738630443448632824642827281459881525198877210749057510831197018233179399730814958129875964180438394548470264377690208812256581197996134290095012248199229098363134875105995583143456168</span>, <span class="number">7886150187486607733887128114395381216280632497989629748521639744973030901762862876238518693357844959238094796545062411041606956447558438012468158689781248611833577676585338278147089873855656470245899229225464314602079901728048645256171396517696354087510327916826422932730522688556064550363916637523771395744826680925934243060230500845916621676929436788265600433752247152028066595489876401981088262668869028915433063354318691392248675089923289405167438193023160255479805758334680481491101176946904940583407560870907209114968515837974428072735042388612237381596523708101955987248270337329833158967647159556534902013893</span>]</span><br><span class="line">comm = (<span class="number">9026467857515594907139807322545643350722792398333959966810869076838279879742354562376888810480050803270079309674260152449220680190968011586239815898932783620194546687257066163982003360839627375768650529178687560019057911732404297565185448089372452182330617296119274984700102752558018626083227105916899465707167123429214371669495986051607781832508462509001195586237627932854012820647829936908023798167666909963391041754465967388417732502397794744032988693994711566201865393143230144593516438201799281519569197057042946810458619730130134659584342739598850633062984339223231306255977280483664354044871774659593149033209</span>, <span class="number">5887596182170973664955287957462647377802905573127495764035296813527168813405478740764981971139443147816701320451276508908764320611456709375484716332728626903126128547418401252520849124559671921918551772662755206548324883488334170067283423978156495671895979491847768306791576421069205614999618915580196468910801165217204877300901375945537974466575619851388784172797986385425693707736028155214422059085724499916277733254676564775837649200298391496783417808690237433893136207762575843230800924871422368332950754364751040187058272878178869385694948947692002564148365094951441755961075673329949416511183562799400968841515</span>)</span><br><span class="line"></span><br><span class="line">P.&lt;x, y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">x, y = P.gens()</span><br><span class="line">f = <span class="built_in">sum</span>([poly[i] * x^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poly))]) - comm[<span class="number">1</span>]</span><br><span class="line">g = x^<span class="number">2</span> + x^<span class="number">4</span> + x^<span class="number">8</span> + y - comm[<span class="number">0</span>]</span><br><span class="line">h = f.sylvester_matrix(g, x).det().univariate_polynomial().monic()</span><br><span class="line">h_coefficients = h.coefficients()</span><br><span class="line">Hd2 = companion_matrix(h_coefficients)</span><br><span class="line">H = Hd2^e2</span><br><span class="line">final = H.charpoly()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">200</span>,<span class="number">255</span>):</span><br><span class="line">    length = (<span class="number">2048</span> // <span class="number">8</span> - i - <span class="number">1</span>)</span><br><span class="line">    f1 = ((x * <span class="number">256</span>^length + bytes_to_long(long_to_bytes(i) * length))^e1 - c1).univariate_polynomial()</span><br><span class="line">    mm = GCD(final, f1)</span><br><span class="line">    <span class="keyword">if</span> mm <span class="keyword">not</span> <span class="keyword">in</span> ZZ:</span><br><span class="line">        m = <span class="built_in">int</span>(-mm.monic()[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag&#123;07ba38d7a9affba269a613da6d99a7ff&#125;</span></span><br></pre></td></tr></table></figure>
<p>其实很多细节我懂的并不透彻，包括各种sage函数的使用，需要多多学习了。</p>
<p><br></p>
<p><br></p>
<h3 id="easycrt"><a href="#easycrt" class="headerlink" title="easycrt"></a>easycrt</h3><p>题目来源：广东强网杯 2021 个人决赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd,invmod</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n&quot;</span>,n)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + sha1(long_to_bytes(q)).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = getPrime(<span class="number">18</span>)</span><br><span class="line">r2 = getPrime(<span class="number">18</span>)</span><br><span class="line">r3 = getPrime(<span class="number">18</span>)</span><br><span class="line">pad = getPrime(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">d = invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">iq = invmod(q*r2,p*r1)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m = randint(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> m % <span class="number">7</span> == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m&quot;</span>,m)</span><br><span class="line"></span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">dq = d % (q - <span class="number">1</span>)</span><br><span class="line">Sp = <span class="built_in">pow</span>(m + pad, dp, p * r1)</span><br><span class="line">S1 = <span class="built_in">pow</span>(m, dp % (r1 - <span class="number">1</span>), r1)</span><br><span class="line">Sq = <span class="built_in">pow</span>(m, dq, q * r2)</span><br><span class="line">S2 = <span class="built_in">pow</span>(m, dq % (r2 - <span class="number">1</span>), r2)</span><br><span class="line">S = Sq + (q * r2) * (iq * (Sp - Sq) % (p * r1))</span><br><span class="line">c1 = (S - S1 + <span class="number">1</span>) % r1</span><br><span class="line">c2 = (S - S2 + <span class="number">1</span>) % r2</span><br><span class="line">y = (r3 * c1 + (<span class="number">2</span>**<span class="number">18</span> - r3) * c2) // <span class="number">2</span>**<span class="number">18</span></span><br><span class="line"></span><br><span class="line">sig = <span class="built_in">pow</span>(S, y, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig&quot;</span>,sig)</span><br></pre></td></tr></table></figure>
<p>enc.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 15607652517362093645325317106793899509049466286289406123011562305732952834110025278707770877710387511133525615547749067167022163144871246026729711471170089144091842130735468670759804996736436114870014417745362424832770744726487119356277902631543992047543702092569479132696642375458263796132196310174835558347436349470015821172039278202738123606756327018331739326913099131587338291813228001362150294270185257672772964543656446660394264977076202429526267205338019235884610484301330863633308326891900441046466311908648695612469874605299959023321039907455357375512719105021644958752946075704546448277530349374124925552999</span><br><span class="line">sig = 10529383690563626041913943912548148193819837348659016705087283692659198195639818226546674852244543732342882844923086010181839287638468160452876441986475739097061958400475370429389938633409459705321551413680888540996412276373484717577799632143058273282184901897121998551083953391761808538319274041663569149845813852812460215349964039044454715161276326154052689106577168080671792457943959674009099696029742287088741014864890643610109608810518217249714342499311259749863368245284452473571531519289299316677019474225948437231068806941146456877792741550185160112281625929417877458463803652501300748844407304985956111227832</span><br><span class="line">m = 9221389214846452074650198574187733045048782681343858755771769264298997816865330014844850679483076796014601281496675756079954850050104766792742802672859212829451854911463986483312887597249074612447791144976425525708325445215521780736722325242438897188724275411273730095000042905697065812817717123169837477587937321878898881598591204738992809905166463654289137499334014194236642634848110827034366887478823691109550776819273014443942468214983033609722152912395399288856874022406788892463061718806118721777027702827433908594054906653446257493698282318911042247500866249480426304090761922444970044089807749920717682404402</span><br></pre></td></tr></table></figure>
<p>题目的信息很多，完成这一题的关键就是要注意到其中真正有用的几个信息，如下：</p>
<script type="math/tex; mode=display">
S_q = m^{dq} \quad (mod\; r_2q)</script><script type="math/tex; mode=display">
S = S_q + r_2q*(iq*(S_p-S_q) \;mod \;(r_1p))</script><script type="math/tex; mode=display">
sig = S^{y} \quad (mod\;n)</script><p>这几个信息有用在哪里呢？首先，S其实就是对Sp、Sq的中国剩余定理组合，呼应题目crt。不过没看出来也不重要，我们把这几个式子均放在模q下分析：</p>
<script type="math/tex; mode=display">
S_q \equiv m^{dq} \quad (mod\;q)</script><script type="math/tex; mode=display">
S \equiv S_q \quad (mod\;q)</script><script type="math/tex; mode=display">
sig \equiv S^y \quad(mod\;q)</script><p>首先有：</p>
<script type="math/tex; mode=display">
S_q^e \equiv m \quad(mod\;q)</script><p>因此：</p>
<script type="math/tex; mode=display">
sig^e \equiv m^y \quad (mod\;q)</script><p>而注意到y由如下方式产生：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = (r3 * c1 + (<span class="number">2</span>**<span class="number">18</span> - r3) * c2) // <span class="number">2</span>**<span class="number">18</span></span><br></pre></td></tr></table></figure>
<p>其中的几个参数均较小，因此y的数量级大约也就在2^18以内，因此我们可以爆破y，从而有：</p>
<script type="math/tex; mode=display">
sig^e - m^y = kq</script><p>求解该式与n的gcd就能得到q，进而恢复flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">15607652517362093645325317106793899509049466286289406123011562305732952834110025278707770877710387511133525615547749067167022163144871246026729711471170089144091842130735468670759804996736436114870014417745362424832770744726487119356277902631543992047543702092569479132696642375458263796132196310174835558347436349470015821172039278202738123606756327018331739326913099131587338291813228001362150294270185257672772964543656446660394264977076202429526267205338019235884610484301330863633308326891900441046466311908648695612469874605299959023321039907455357375512719105021644958752946075704546448277530349374124925552999</span></span><br><span class="line">sig = <span class="number">10529383690563626041913943912548148193819837348659016705087283692659198195639818226546674852244543732342882844923086010181839287638468160452876441986475739097061958400475370429389938633409459705321551413680888540996412276373484717577799632143058273282184901897121998551083953391761808538319274041663569149845813852812460215349964039044454715161276326154052689106577168080671792457943959674009099696029742287088741014864890643610109608810518217249714342499311259749863368245284452473571531519289299316677019474225948437231068806941146456877792741550185160112281625929417877458463803652501300748844407304985956111227832</span></span><br><span class="line">m = <span class="number">9221389214846452074650198574187733045048782681343858755771769264298997816865330014844850679483076796014601281496675756079954850050104766792742802672859212829451854911463986483312887597249074612447791144976425525708325445215521780736722325242438897188724275411273730095000042905697065812817717123169837477587937321878898881598591204738992809905166463654289137499334014194236642634848110827034366887478823691109550776819273014443942468214983033609722152912395399288856874022406788892463061718806118721777027702827433908594054906653446257493698282318911042247500866249480426304090761922444970044089807749920717682404402</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(sig,<span class="number">65537</span>,n)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span>(GCD(c1-<span class="built_in">pow</span>(m,i,n),n) != <span class="number">1</span>):</span><br><span class="line">        q = GCD(c1-<span class="built_in">pow</span>(m,i,n),n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NSSCTF&#123;&quot;</span> + sha1(long_to_bytes(q)).hexdigest() + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;947d9f457b224fb7779b84158ea72861b4e72af3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="BABY-RSA"><a href="#BABY-RSA" class="headerlink" title="BABY RSA"></a>BABY RSA</h3><p>题目来源：HITCTF 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">4096</span></span><br><span class="line">next_state = getRandomInteger(size // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">size</span>):</span><br><span class="line">    q = getPrime(size)</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = q * k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    g = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(g, q, p) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line">    A = getRandomInteger(size) % q</span><br><span class="line">    B = getRandomInteger(size) % q</span><br><span class="line">    d = getRandomInteger(size) % q</span><br><span class="line">    h = <span class="built_in">pow</span>(g, d, p)</span><br><span class="line">    <span class="keyword">return</span> (g, h, A, B, p, q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">A, B, M</span>):</span><br><span class="line">    <span class="keyword">global</span> next_state</span><br><span class="line">    next_state, ret = (B * next_state + A) % M, next_state</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">pubkey, m</span>):</span><br><span class="line">    g, h, A, B, p, q = pubkey</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt; m &lt;= p</span><br><span class="line">    r = rand(A, B, q)</span><br><span class="line">    e = <span class="number">0xfaab</span></span><br><span class="line">    c1 = (<span class="built_in">pow</span>(m,e,p) * <span class="built_in">pow</span>(h, r, p)) % p</span><br><span class="line">    r = rand(A, B, q)</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(h, r, p)) % p</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pubkey= keygen(size)</span><br><span class="line"><span class="built_in">print</span>(pubkey)</span><br><span class="line"></span><br><span class="line">secret = bytes_to_long(<span class="string">&quot;HITCTF2021(xxxxxxxxxxxxxxxxxxx)&quot;</span>)</span><br><span class="line">c1,c2= enc(pubkey, secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pk = (52, </span></span><br><span class="line"><span class="comment">#47782489586021221729935382562238217213800826152327617948974334325027793433971508995399461776417812670604694882926777607105164020070178881963632306169611641854448509182837621758791538269408388860349616761041456174827996858614494726877767399938809515247000929894281600963992080920650256329287847887064428158469516438206831721224607859023980203694210651902538562842945949404149023836218548894116477022953606370852246884414011363477543284815671096832245521762246149180260936985618856296642080245029837974725521906177900378634071571992373478242159162403228753252168867425697897820696887070051128304178291193132322824455442092893684929701869625045112839344191126228806117685809636908190595562295591835629941512331963039016185366202513504464795106031092314892430859175307526232632986110464780357940552264674214665391043812843917461961230679207586174459563057178720743465356337218948534837994061644332424634750340190113117958830588820626581860957277456320434445207368613679418733984291985618038226928033006640791987978775285182325347153201516936002001839296455263977479446850434913069389565277028444638437387429263495729274142916464752814676819557878779855996225208596159171827854923873570163767937947956753277454486339143489103105750331110111L,</span></span><br><span class="line"><span class="comment">#433229619560374735022060612660487139311547277564407316269466855779330930804160973325703376198605206390912154427123102710354958367692760474727012214464298979098489170777185729836132968187705068687678796437447631516334893543456227545790012358063578349956636488453355182971532300478038635153420232589545761194907476691636706445176390661463152150169542241304542401678253873515488446133330974312465916350895130227137954122794991542025930903127027608739905609108321738139103065645651901833223353774916656293079960486497159730921219805951217073283062070931854507016733789164315751827862830668829125950364981217520865411859759718244136420504507997449935455788230060974032741364271601426191469331266168231203426316280988734802654397014768828735251891167507794161264913387252048434549271931367148180980260205843989153008044839641263127846901551223167574691783927938948745126094512037792728067785201012834153473172824948188352810070916677679450209134179624791196123158336411804834221293611075447043002901607162001357780058394706516204775756666576041740010288970758149528406172022049389998133360726123682741312251431519423867620962951022993364287241463507027520966721930799696555390707280246584903566049326608205785466271642132178515338520410658L, </span></span><br><span class="line"><span class="comment">#594494499417894774789048451572687632660208181953899084791149805130704950465573064455173172705283156011806901684972459390817538594318847879599780068410149543731305374894040638491310362570467887919519584736646557258917947483658649575357363123407313011773027073062592473100264464401987309633458687673513776139455296286685115396610808047870099635374955339289799615102534094497730932884838674370338192153202045642565170696704452991192684466848026383861073123033948004049599266417667125680356386669226827901570782628388996520826906941293858994180130505009152517646592286697346622724843482147801718703310671546709185342317509441259927498881276856470161174444209513355803640646947368551446328198695259259829546707119878154837158880677882305548928799964929213106969848547576414765380870575558771867763848114411251654245747231121164090765647221739709450477815688276801154266722035408374135871417564206013020997849375553619152730479571927135850379285559873197371293312934173379820835252091990919727655797413411368987930118553258247264348519581466374312010472449698571319621067244494880512957538208007914329691196084901181642263713183616896210154681618376310287185315262021479758282631576946335858068664109425856174388362174761355148787245515144L, </span></span><br><span class="line"><span class="comment">#261181509476485410165375351178418657075805043256124045823778754055035546150122155335065215645750231604267318872693494310557376958843829685914382636208107544361140482291909865660810395856913449414106045946602124226832733980696161639105193768954092281635195760991693212657816181524313660831938528737461195472275606167593968953647934279724693129491600232382201769523725243272086370087058597321533767924008747705935388941121530345216164771817150616453601212026925759807092457510188966636612860912597984231762129535299227711879953931847880037605415987083573556274570400085013894504645789376654166259691075373526751505971657856429187752015665407876751018316490729668209646098952144838144486106489379202197360745365239628186669447122272538227142855706247593556669905666428363734481409983627496127639634726855140379146669911302677456457202808949896992958886949162850488164457334796828240069980922051762068458877051063958308363343196940785994299643315504146607392461323382470475501119070077564995866998018505817611171892860136485534016608294708527673407517876647349723758712907513973353401204912431800080247493896815299218218930415151745986776831977527196435124521552249406640177674130330651411672455343809240941664288436809369136070604763156723L, </span></span><br><span class="line"><span class="comment">#781980567294866497501123805923409152921571985796778580310714832500106425599168129745704238460330034743315325966148186558555020834861765526689768371880561510063294857161406783415599987595549249742832472894018336008481239463162160596123334637587102639626334613747584469035377788994951080335145295621141303809208401699383140579784234370433212962549701294557490327915345039736785539182810171621358586598828585945914338147070450135377738837775900049262279077924927424572133106317931037834170242253287377939407573458979723688263335125293054004806634691866986695432845509236568546421095177774413671436200824471636980556801370827632298658729537149331589875199074040922783371553748936641151156007453231144303475285524669545469070200964887839003421723671399980708592531935414262678088053843196096190537828523518384368702604524858315737895816793263164649577505835816917629234902199990503712784374018119048109158314524143587749590847895032293396106716513485468884408566836474462501500356497238218550499994067382687458598481617175106389271282319486609800621311007926196777720697327886147764674266204885628982776927834776344964727336572310616726876742447686216871630304048650918084364293803385183867282800430566589645701462385656793820570672943583L)</span></span><br><span class="line"><span class="comment">#c1,c2 = (94439884067875866926510480826480805218086956848743547499198006820458557396798764306362789177343865957780128049481100649740991723046823411381255593998762330282701428367295145704749575923764033888430043419432755523895502809914793389377786178823780078298402526077689075100615167801149188073166609798060195606072633000544828049766057724062947725409167355039403877440527580919770561607036599124342541749265192021823491918944278440530549040290346018294412510920437610359378345321588108996817523300112050660236797578506114472897358316471445079369284771733206616722439988368610144077799745808242486800244677553898369876207696781377538070465563883203111584722721805287175889444151342208592141472448213468221732504380079996468560634932304003913239528756529682825338927264423302712140156109639630352986070846491530710979222740690647201189995078959423441714667664068681190006816257273563900319001844315873583504406793282181337548468252678860728542345494826571860793722889527787190697802307747398283993641414712543326007228545296721676768940364724157476527100408795556913732012808496296586935767075610857696900781575977854898411278115773743046743452254128886824788564219765260031723480676483312846917497210349237445933078576069670523680684713623446L, 36397082263544765924779841921119370016762339442058655416586193728619075025998163340396086334077244844310435402140631243689371206933579011146142036715931618067708305508617210563902014072058872403638202493268214994615135134434419245572034705984431586848768861656760831721539666418749603708776469542844144251059399582543923184073020411373179905155719536662312209785364646479188735299232303697790049147771382959302788060004896713986087257232599766636580823138965201801581260077589060485570410897810958498454358737888682940093471597533949463149992040055832220962541050083923086389598838921222167415555331634007862804183991931445726265293675584802614392692457772587297132115782027787479633548163420352103982803350538152059924978489540395956166707435927694988026192837010341182919501051673735679100778154041581361254807291072654267471473503037873994575370262350787611333206450177404857861689910339996980215797433744385047164909022377659304404477322770853683922772248965438499817404000913895236832920522508813098567854697829563333570746651008308539370730448094601234580689549622502198266967939450827346984012446321546195185770288650359658551649011648788273482810013579385313367223458143686448798406205345442061625590854243243883117300950978940L)</span></span><br></pre></td></tr></table></figure>
<p>题目参数较多，因此需要梳理一下各个参数的产生方式以及各个函数的作用。</p>
<p>首先是参数：</p>
<ul>
<li>p、q均为素数，且有 p = kq+1</li>
<li>选取一个阶为q的数g</li>
<li>随机生成三个小于q的参数A、B、d</li>
<li>计算h=g^d % p，返回参数(g, h, A, B, p, q)</li>
</ul>
<p>然后是函数：</p>
<ul>
<li>rand函数，实现一个LCG功能</li>
<li>enc函数，将flag进行如下加密，并返回c1、c2：</li>
</ul>
<script type="math/tex; mode=display">
c1 \equiv m^eh^r \quad(mod\;p)</script><script type="math/tex; mode=display">
c2 \equiv mh^{Br+A \;(mod\;q)} \quad(mod\;p)</script><p>首先观察到c1、c2中未知的参数一共只有m与r，而m是我们需要求解的flag，因此需要想办法消掉r。而r在指数上并且模了q，所以要先判断出这个模q的作用。</p>
<p>而在参数生成中，我们分析过g是一个阶为q的元素，而h=g^d % p，那么由元素的阶的相关知识可以知道，h的阶为：</p>
<script type="math/tex; mode=display">
\frac{q}{gcd(d,q)}</script><p>而由于q是个素数，因此h也是一个阶为q的素数，所以满足：</p>
<script type="math/tex; mode=display">
h^q \equiv 1 \quad(mod\;p)</script><p>这样说只是为了了解的更清楚一点，实际上只需要将h=g^d代入计算也能发现上式。而这个式子的作用就是消除模q在指数上的影响，如下：</p>
<script type="math/tex; mode=display">
h^{Br+A \;(mod\;q)} \equiv h^{Br+A+kq} \equiv h^{Br+A}*(h^q)^k  \equiv h^{Br+A} \quad (mod\;p)</script><p>所以在消元过程中，我们其实不需要关注q。因此消元分析步骤如下：</p>
<script type="math/tex; mode=display">
c2 \equiv mh^{rB}h^A \quad(mod\;p)</script><script type="math/tex; mode=display">
c1^B \equiv m^{eB}h^{rB} \quad(mod\;p)</script><p>所以：</p>
<script type="math/tex; mode=display">
c1^Bc2^{-1}h^A \equiv m^{eB}h^{rB}*m^{-1}h^{-rB}h^{-A}*h^A \equiv m^{eB-1} \quad (mod\;p)</script><p>因此我们获得了：</p>
<script type="math/tex; mode=display">
m^{eB-1} \quad (mod\;p)</script><p>可以直接RSA解密，但是发现eB-1与p-1有公因子167，因此需要先求解部分逆元后AMM开根。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">(g, h, A, B, p, q) = (<span class="number">52</span>, <span class="number">47782489586021221729935382562238217213800826152327617948974334325027793433971508995399461776417812670604694882926777607105164020070178881963632306169611641854448509182837621758791538269408388860349616761041456174827996858614494726877767399938809515247000929894281600963992080920650256329287847887064428158469516438206831721224607859023980203694210651902538562842945949404149023836218548894116477022953606370852246884414011363477543284815671096832245521762246149180260936985618856296642080245029837974725521906177900378634071571992373478242159162403228753252168867425697897820696887070051128304178291193132322824455442092893684929701869625045112839344191126228806117685809636908190595562295591835629941512331963039016185366202513504464795106031092314892430859175307526232632986110464780357940552264674214665391043812843917461961230679207586174459563057178720743465356337218948534837994061644332424634750340190113117958830588820626581860957277456320434445207368613679418733984291985618038226928033006640791987978775285182325347153201516936002001839296455263977479446850434913069389565277028444638437387429263495729274142916464752814676819557878779855996225208596159171827854923873570163767937947956753277454486339143489103105750331110111</span>,<span class="number">433229619560374735022060612660487139311547277564407316269466855779330930804160973325703376198605206390912154427123102710354958367692760474727012214464298979098489170777185729836132968187705068687678796437447631516334893543456227545790012358063578349956636488453355182971532300478038635153420232589545761194907476691636706445176390661463152150169542241304542401678253873515488446133330974312465916350895130227137954122794991542025930903127027608739905609108321738139103065645651901833223353774916656293079960486497159730921219805951217073283062070931854507016733789164315751827862830668829125950364981217520865411859759718244136420504507997449935455788230060974032741364271601426191469331266168231203426316280988734802654397014768828735251891167507794161264913387252048434549271931367148180980260205843989153008044839641263127846901551223167574691783927938948745126094512037792728067785201012834153473172824948188352810070916677679450209134179624791196123158336411804834221293611075447043002901607162001357780058394706516204775756666576041740010288970758149528406172022049389998133360726123682741312251431519423867620962951022993364287241463507027520966721930799696555390707280246584903566049326608205785466271642132178515338520410658</span>, <span class="number">594494499417894774789048451572687632660208181953899084791149805130704950465573064455173172705283156011806901684972459390817538594318847879599780068410149543731305374894040638491310362570467887919519584736646557258917947483658649575357363123407313011773027073062592473100264464401987309633458687673513776139455296286685115396610808047870099635374955339289799615102534094497730932884838674370338192153202045642565170696704452991192684466848026383861073123033948004049599266417667125680356386669226827901570782628388996520826906941293858994180130505009152517646592286697346622724843482147801718703310671546709185342317509441259927498881276856470161174444209513355803640646947368551446328198695259259829546707119878154837158880677882305548928799964929213106969848547576414765380870575558771867763848114411251654245747231121164090765647221739709450477815688276801154266722035408374135871417564206013020997849375553619152730479571927135850379285559873197371293312934173379820835252091990919727655797413411368987930118553258247264348519581466374312010472449698571319621067244494880512957538208007914329691196084901181642263713183616896210154681618376310287185315262021479758282631576946335858068664109425856174388362174761355148787245515144</span>, <span class="number">261181509476485410165375351178418657075805043256124045823778754055035546150122155335065215645750231604267318872693494310557376958843829685914382636208107544361140482291909865660810395856913449414106045946602124226832733980696161639105193768954092281635195760991693212657816181524313660831938528737461195472275606167593968953647934279724693129491600232382201769523725243272086370087058597321533767924008747705935388941121530345216164771817150616453601212026925759807092457510188966636612860912597984231762129535299227711879953931847880037605415987083573556274570400085013894504645789376654166259691075373526751505971657856429187752015665407876751018316490729668209646098952144838144486106489379202197360745365239628186669447122272538227142855706247593556669905666428363734481409983627496127639634726855140379146669911302677456457202808949896992958886949162850488164457334796828240069980922051762068458877051063958308363343196940785994299643315504146607392461323382470475501119070077564995866998018505817611171892860136485534016608294708527673407517876647349723758712907513973353401204912431800080247493896815299218218930415151745986776831977527196435124521552249406640177674130330651411672455343809240941664288436809369136070604763156723</span>, <span class="number">781980567294866497501123805923409152921571985796778580310714832500106425599168129745704238460330034743315325966148186558555020834861765526689768371880561510063294857161406783415599987595549249742832472894018336008481239463162160596123334637587102639626334613747584469035377788994951080335145295621141303809208401699383140579784234370433212962549701294557490327915345039736785539182810171621358586598828585945914338147070450135377738837775900049262279077924927424572133106317931037834170242253287377939407573458979723688263335125293054004806634691866986695432845509236568546421095177774413671436200824471636980556801370827632298658729537149331589875199074040922783371553748936641151156007453231144303475285524669545469070200964887839003421723671399980708592531935414262678088053843196096190537828523518384368702604524858315737895816793263164649577505835816917629234902199990503712784374018119048109158314524143587749590847895032293396106716513485468884408566836474462501500356497238218550499994067382687458598481617175106389271282319486609800621311007926196777720697327886147764674266204885628982776927834776344964727336572310616726876742447686216871630304048650918084364293803385183867282800430566589645701462385656793820570672943583</span>)</span><br><span class="line">c1,c2 = (<span class="number">94439884067875866926510480826480805218086956848743547499198006820458557396798764306362789177343865957780128049481100649740991723046823411381255593998762330282701428367295145704749575923764033888430043419432755523895502809914793389377786178823780078298402526077689075100615167801149188073166609798060195606072633000544828049766057724062947725409167355039403877440527580919770561607036599124342541749265192021823491918944278440530549040290346018294412510920437610359378345321588108996817523300112050660236797578506114472897358316471445079369284771733206616722439988368610144077799745808242486800244677553898369876207696781377538070465563883203111584722721805287175889444151342208592141472448213468221732504380079996468560634932304003913239528756529682825338927264423302712140156109639630352986070846491530710979222740690647201189995078959423441714667664068681190006816257273563900319001844315873583504406793282181337548468252678860728542345494826571860793722889527787190697802307747398283993641414712543326007228545296721676768940364724157476527100408795556913732012808496296586935767075610857696900781575977854898411278115773743046743452254128886824788564219765260031723480676483312846917497210349237445933078576069670523680684713623446</span>, <span class="number">36397082263544765924779841921119370016762339442058655416586193728619075025998163340396086334077244844310435402140631243689371206933579011146142036715931618067708305508617210563902014072058872403638202493268214994615135134434419245572034705984431586848768861656760831721539666418749603708776469542844144251059399582543923184073020411373179905155719536662312209785364646479188735299232303697790049147771382959302788060004896713986087257232599766636580823138965201801581260077589060485570410897810958498454358737888682940093471597533949463149992040055832220962541050083923086389598838921222167415555331634007862804183991931445726265293675584802614392692457772587297132115782027787479633548163420352103982803350538152059924978489540395956166707435927694988026192837010341182919501051673735679100778154041581361254807291072654267471473503037873994575370262350787611333206450177404857861689910339996980215797433744385047164909022377659304404477322770853683922772248965438499817404000913895236832920522508813098567854697829563333570746651008308539370730448094601234580689549622502198266967939450827346984012446321546195185770288650359658551649011648788273482810013579385313367223458143686448798406205345442061625590854243243883117300950978940</span>)</span><br><span class="line">e = <span class="number">0xfaab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c = pow(m,eB-1,p)</span></span><br><span class="line">c = <span class="built_in">pow</span>(c1,B%q,p)*inverse(c2,p)*<span class="built_in">pow</span>(h,A%q,p) % p</span><br><span class="line">E = e*B-<span class="number">1</span></span><br><span class="line">d = inverse(E//<span class="number">167</span>,p-<span class="number">1</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c1 % p</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">167</span>, p)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">167</span>, p)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">167</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp:</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;HITCTF&quot;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(i))):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(i)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#HITCTF2021&#123;Numb3r_Th30ry_1s_Funny!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="ISITDTU-RSA"><a href="#ISITDTU-RSA" class="headerlink" title="ISITDTU_RSA"></a>ISITDTU_RSA</h3><p>题目来源：ISITDTU CTF 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">401327687854144602104262478345650053155149834850813791388612732559616436344229998525081674131271</span></span><br><span class="line">p2 = <span class="number">500233813775302774885494989064149819654733094475237733501199023993441312997760959607567274704359</span></span><br><span class="line">p3 = <span class="number">969568679903672924738597736880903133415133378800072135853678043226600595571519034043189730269981</span></span><br><span class="line">e1 = <span class="number">398119</span></span><br><span class="line">e2 = <span class="number">283609</span></span><br><span class="line">e3 = <span class="number">272383</span></span><br><span class="line"></span><br><span class="line">c = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e1, p1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e2, p2)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e3, p3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c = 104229015434394780017196823454597012062804737684103834919430099907512793339407667578022877402970</span></span><br></pre></td></tr></table></figure>
<p>题目将flag依次用类似RSA加密的方式连续加密了三次每次使用一个不同的素数ei作为加密指数，使用一个不同的素数pi作为模数。最直接的想法自然就是直接求解解密指数di，然后连续解密三次就能得到明文。</p>
<p>但是，实际操作时发现，任何一个解密指数都不存在，这是因为每一个ei都被pi-1整除，因此无法求解逆元。而这个时候，正常思路来想的话自然马上就会想到AMM算法。</p>
<p>但是直接用AMM算法会遇到一些问题：</p>
<ul>
<li>指数数量级相对较大，可能AMM速度会比较慢</li>
<li>每一次AMM开根会开出ei个根，而下一次进行AMM开根时，需要对上一次AMM开根得到的所有根再进行一次开根。比如第二次开根时，我们需要对第一次AMM得到的272383个根均进行一次AMM算法，在第三次开根时则更多，这个数量级是不可接受的</li>
</ul>
<p>不管怎么样先开一次根试试，实际操作一下会发现，AMM开几十万次方根并得到所有解其实也只需要三四分钟，因此第一个问题并不用特别关心，主要就是要解决第二个问题：如何处理这个三个加密指数相乘的超大复杂度？</p>
<p>要解决这一点需要注意到以下事实，由于：</p>
<script type="math/tex; mode=display">
c1 = m^{e1} \quad(mod\;p1)</script><script type="math/tex; mode=display">
c2 = c1^{e2} \quad(mod\;p2)</script><script type="math/tex; mode=display">
c3 = c2^{e3} \quad(mod\;p3)</script><p>也就是说，在我们AMM算法开出的e3个根中，正确的根需要满足是模p2下的e2次剩余；同理，第二次AMM算法后，正确的根需要满足是模p1下的e1次剩余。</p>
<p>而一个数是否是模p下的k次剩余这个问题，可以通过类似于判断模p下的二次剩余的方法，也就是运用欧拉判别式如下：</p>
<script type="math/tex; mode=display">
a^{\frac{p-1}{k}} \equiv 1 \quad (mod\;p)</script><p>如果一个数a满足上式，那么他就是模p下的k次剩余。那么有了这个判别方式后，对于第一次AMM算法得到的e3个根，我们可以先判断其是否是模p2下的e2次剩余，然后找到符合要求的根，再对其进行AMM算法开e2次根，以此类推，最后由于flag头未知(做出来前不知道这是什么比赛的什么题，别的师傅问我的)，最后一次AMM得到的e1个根中，可以采用判断字节流转成的字符串中没有”\x”来确定是flag串。</p>
<p>那么实际耗时也就是三次独立的AMM算法的总耗时，约10分钟。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">401327687854144602104262478345650053155149834850813791388612732559616436344229998525081674131271</span></span><br><span class="line">p2 = <span class="number">500233813775302774885494989064149819654733094475237733501199023993441312997760959607567274704359</span></span><br><span class="line">p3 = <span class="number">969568679903672924738597736880903133415133378800072135853678043226600595571519034043189730269981</span></span><br><span class="line">e1 = <span class="number">398119</span></span><br><span class="line">e2 = <span class="number">283609</span></span><br><span class="line">e3 = <span class="number">272383</span></span><br><span class="line">c = <span class="number">53439232235483323845772940768628860612955240528996700091904547428796321356639732497361321352956</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp3 = c % p3</span><br><span class="line">mp3 = AMM_rth(cp3, e3, p3)</span><br><span class="line">rt3 = ALL_ROOT2(e3, p3)</span><br><span class="line">amp3 = ALL_Solution(mp3, p3, rt3, cp3, e3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp3:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),(p2-<span class="number">1</span>)//e2,p2)==<span class="number">1</span>):</span><br><span class="line">        c2 = <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3 Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">cp2 = c % p2</span><br><span class="line">mp2 = AMM_rth(cp2, e2, p2)</span><br><span class="line">rt2 = ALL_ROOT2(e2, p2)</span><br><span class="line">amp2 = ALL_Solution(mp2, p2, rt2, cp2, e2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp2:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),(p1-<span class="number">1</span>)//e1,p1)==<span class="number">1</span>):</span><br><span class="line">        c1 = <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2 Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">cp1 = c % p1</span><br><span class="line">mp1 = AMM_rth(cp1, e1, p1)</span><br><span class="line">rt1 = ALL_ROOT2(e1, p1)</span><br><span class="line">amp1 = ALL_Solution(mp1, p1, rt1, cp1, e1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp1:</span><br><span class="line">    temp = <span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(i)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;\\x&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ISITDTU&#123;s0_m4ny_m0dul4r_r00t5&#125;</span></span><br></pre></td></tr></table></figure>
<p>同时注意，正常来说应该把所有符合条件的ei次剩余都进行一次AMM算法，但是这个题实际做下来每次AMM后都确实只有一个根符合要求，因此可以这么写。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-其他</title>
    <url>/post/97bbcbc9.html</url>
    <content><![CDATA[<p>该文章主要记录一些特殊的趣题</p>
<span id="more"></span>
<h3 id="Shamir门限"><a href="#Shamir门限" class="headerlink" title="Shamir门限"></a>Shamir门限</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公司使用Shamir门限密钥设计了一个秘密保存方案，将fag保存了起来，最终的设计效果如下密钥总共有<span class="number">9</span>份，拿到任意<span class="number">5</span>个密钥即可解出保存的flag.现在我们知道公共的密钥:</span><br><span class="line">p=<span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">以及如下<span class="number">5</span>个密钥:</span><br><span class="line"><span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span></span><br><span class="line"><span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span></span><br><span class="line"><span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span></span><br><span class="line"><span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span></span><br><span class="line"><span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span></span><br><span class="line">请恢复flag</span><br></pre></td></tr></table></figure>
<p>题目明确说了这是一个Shamir门限方案，先来简单梳理一下Shamir门限方案的基本实施方式，大概分为以下几步:</p>
<p>1、<strong>根据恢复秘密最小人数及秘密消息，生成秘密多项式</strong></p>
<ul>
<li>将秘密消息转化为整数，记为 secret</li>
<li>首先，设置一个需恢复秘密的最小人数 t ，而题目中说”拿到任意5个密钥即可解出保存的flag”，因此t=5</li>
<li>设置一个公钥 p ，作为之后生成的多项式所处的有限域</li>
<li>生成一个 t-1 次的多项式，满足：</li>
</ul>
<script type="math/tex; mode=display">
f(x) = a_{t-1}*x^{t-1}+a_{t-2}*x^{t-2}+...+a_{2}*x^{2}+a_{1}*x^{1}+a_0 \quad(mod\;p)</script><script type="math/tex; mode=display">
其中，a_1、a_2、...、a_{t-2}、a_{t-1}为随机数，a0=secret</script><ul>
<li>因此可以看出，当多项式取 x=0 时，对应的 f(x)=f(0)=a0=secret，即秘密消息</li>
</ul>
<p><br></p>
<p>2、<strong>根据秘密多项式，进行密钥分发</strong></p>
<ul>
<li>设实际参与密钥分发的人数为 n ，则将 1~n(有时也可能是n个不同的随机数)依次代入秘密多项式 f(x)，便得到n组密钥：</li>
</ul>
<script type="math/tex; mode=display">
(1，f(1))、(2,f(2))、...(n-1,f(n-1))、(n,f(n))</script><ul>
<li>将生成的 n 个密钥分发给 n 个人</li>
</ul>
<p><br></p>
<p>3、<strong>销毁秘密多项式</strong></p>
<p><br></p>
<p>至此，Shamir门限方案便实施完成了，这种分法方案涉及到两个数字，一个是需恢复秘密的最小人数 t ，一个是实际参与密钥分发的人数 n ，因此可以称为 (t,n) - 门限方案。</p>
<p>需要注意到的是，在完成密钥分发之后，秘密多项式便随之被销毁了。那么在拥有足够数量的密钥(&gt;=t)的情况下，怎么恢复秘密信息 secret呢？这就需要用到拉格朗日插值公式，我们不妨先把密钥记为:</p>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><p>则插值多项式如下：</p>
<script type="math/tex; mode=display">
f(x) = \sum_{i=1}^{t}[{f(x_i)}*\prod_{j=1,j\neq i}^{t}{\frac{x-x_j}{x_i-x_j}}]\quad(mod\;p)</script><p>直观一点可以展开写成下式：</p>
<script type="math/tex; mode=display">
f(x) = f(x_1)\frac{(x-x_2)(x-x_3)...(x-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x-x_1)(x-x_3)...(x-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x-x_1)(x-x_2)...(x-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><p>观察一下这个多项式的性质：</p>
<ul>
<li>是一个 t-1 次多项式</li>
<li>分发的密钥均是多项式上的点：</li>
</ul>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><ul>
<li>这是因为，代入其中任意一个密钥的横坐标，则只有代入的那一项不为0，而其他全为0，拿 x1 举例：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)\frac{(x_1-x_2)(x_1-x_3)...(x_1-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x_1-x_1)(x_1-x_3)...(x_1-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x_1-x_1)(x_1-x_2)...(x_1-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><ul>
<li>即：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)*1 + f(x_2)*0 + ... +
f(x_t)*0
\quad(mod\;p)</script><script type="math/tex; mode=display">
所以有 f(x_1) = f(x_1)
\quad(mod\;p)</script><p>所以当有足够多的点( t-1 次多项式需要 t 个点)进行插值时，就可以代入 0 进入插值多项式，解出的常数项即为秘密消息 secret</p>
<p><br></p>
<p>完全了解了Shamir门限方案后再来看这个题，就可以发现密钥数量是完全足够的，但是不清楚5个人具体分到的是9个密钥中的哪一个密钥，因此还需要全排列爆破处理。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">c = [<span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span>,<span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span>,<span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span>,<span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span>,<span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span>]</span><br><span class="line"></span><br><span class="line">m = ([<span class="number">0</span>, c[<span class="number">0</span>]],[<span class="number">0</span>, c[<span class="number">1</span>]],[<span class="number">0</span>, c[<span class="number">2</span>]],[<span class="number">0</span>, c[<span class="number">3</span>]],[<span class="number">0</span>, c[<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> permutations(<span class="built_in">range</span>(<span class="number">9</span>),<span class="number">5</span>):</span><br><span class="line">        m[<span class="number">0</span>][<span class="number">0</span>] = i[<span class="number">0</span>]</span><br><span class="line">        m[<span class="number">1</span>][<span class="number">0</span>] = i[<span class="number">1</span>]</span><br><span class="line">        m[<span class="number">2</span>][<span class="number">0</span>] = i[<span class="number">2</span>]</span><br><span class="line">        m[<span class="number">3</span>][<span class="number">0</span>] = i[<span class="number">3</span>]</span><br><span class="line">        m[<span class="number">4</span>][<span class="number">0</span>] = i[<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (</span><br><span class="line">                m[<span class="number">0</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">1</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">2</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">3</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">4</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * inverse((m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]), p)</span><br><span class="line">                ) % p</span><br><span class="line">            temp = <span class="built_in">str</span>(long_to_bytes(r))</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag&#123;b14f4963671a457cf22ec271356e0f78&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><p>题目来源：bricsctf-2023-Quals</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">P = Permutations(<span class="number">256</span>).random_element()</span><br><span class="line"><span class="built_in">print</span>(P**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())])</span><br></pre></td></tr></table></figure>
<p>密文txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span><br><span class="line">[18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span><br></pre></td></tr></table></figure>
<p>题目非常简短，流程如下：</p>
<ul>
<li>将256个元素进行全排列，并随机抽取其中一个排列，记为 P</li>
<li>打印出该排列的平方</li>
<li>将该排列 P 的 sha512 值与flag明文相异或，打印出密文</li>
</ul>
<p>因此，任务就只有一个：根据排列的平方，还原出该排列，并与密文异或就能还原flag</p>
<p>有一个概念一定要先理解清楚，排列的平方是什么意思？用代码可以如下表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C[i] = P[P[i]]</span><br></pre></td></tr></table></figure>
<p>也就是说，一组排列可以看作是一个置换，那么排列的平方就是进行二重置换。</p>
<p>那么怎么还原呢，我们用图的方式来理解，图上一个节点指向另一个节点，代表的就是经过一次置换后，该节点置换到指向节点的位置，比如下面这张图就可以表示一个置换：</p>
<p><strong>(偶数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926104953693.png" alt="image-20230926104953693"></p>
<p>这张图代表：0置换到1、1置换到2、…5置换到0，这很好理解</p>
<p>那么这个置换平方后会是什么样子？很简单，只需要把一个节点指向节点所指向的节点作为新的置换即可，说起来有点绕，还是举个例子：0指向1，1指向2，所以平方后，0指向2，这就很容易明白了。</p>
<p>所以上面的置换平方后会变成如下形式：</p>
<p><img src="/post/97bbcbc9/image-20230926105347447.png" alt="image-20230926105347447"></p>
<p>那么还原的方式就是将两个环并排，然后挨个插入，如下：</p>
<p><img src="/post/97bbcbc9/image-20230926105546460.png" alt="image-20230926105546460"></p>
<p>但是显然，由于插入的相对位置不同，这样还原就可能会得到多个不同的初始置换，而他们平方后都是满足要求的。</p>
<p>上面的例子是偶数个点的情况，想一想奇数个点平方后会如何：</p>
<p><strong>(奇数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926105945860.png" alt="image-20230926105945860"></p>
<p>继续利用<strong>把一个节点指向节点所指向的节点作为新的置换</strong>这一点，可以看出平方后，环并没有裂开，只是交换了位置：</p>
<p><img src="/post/97bbcbc9/image-20230926110200084.png" alt="image-20230926110200084"></p>
<p>仔细想想就能明白，这种形式的还原是唯一的，不会有多种情况。</p>
<p>想清楚置换与图的关系后，回到题目本身来，按如下步骤分析：</p>
<p>1、<strong>首先就要把平方后的排列先转化为若干个环：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印环</span></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">P2 = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(P2[<span class="number">204</span>])</span><br><span class="line">lenlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    <span class="built_in">len</span> = <span class="number">1</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    loc = P2[i]</span><br><span class="line">    chain = [loc]</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        t = P2[loc]</span><br><span class="line">        loc = t</span><br><span class="line">        chain.append(loc)</span><br><span class="line">        <span class="built_in">len</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(t == i):</span><br><span class="line">            <span class="comment">#print(i,&quot;,&quot;,len)</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(chain)</span><br><span class="line">                <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#print(lenlist.count(2))</span></span><br><span class="line"><span class="comment">#2*82 + 75 + 3*3 + 1*8</span></span><br></pre></td></tr></table></figure>
<p>可以发现，平方后的置换可以拆分为 ：</p>
<ul>
<li>2个长为 82 的环</li>
<li>1个长为75的环</li>
<li>3个长为3的环</li>
<li>8个单元环</li>
</ul>
<p><br></p>
<p>2、<strong>接下来就是分析如何还原：</strong></p>
<ul>
<li>对于长为 82 的环，他一定是长为 164 的环拆分而成</li>
<li>长为 75 的环一定是本身长就为 75 的环</li>
<li>3个长为3的环，可能本身就是 3 个长为 3 的环；也可能本身是一个长为 3 的环加上一个长为 6 的环拆分而成</li>
<li>8个单元环，可能本身就是 8 个单元环，也可能是 1-4 个 2 元环加上剩下的单元环</li>
</ul>
<p>因此，要考虑上述的所有可能情况，求出所有符合要求的排列，并与密文异或做爆破。按理来说，一般爆破需要的是flag头，但是由于我并不知道flag头是什么(别的师傅问的)，所以采用全为可见字符来爆破。</p>
<p>复杂度经计算应该是 ：(对哪一部分复杂度不清楚可以问我) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">82*1*4*C(8,2)*C(6,2)*C(4,2)*16</span><br></pre></td></tr></table></figure>
<p>约为一千多万，大概跑五分钟左右可以全部完成。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印环</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = [18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">P2 = [41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    P2[i] -= 1</span></span><br><span class="line"><span class="string">print(P2[204])</span></span><br><span class="line"><span class="string">lenlist = []</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    len = 1</span></span><br><span class="line"><span class="string">    t = 0</span></span><br><span class="line"><span class="string">    loc = P2[i]</span></span><br><span class="line"><span class="string">    chain = [loc]</span></span><br><span class="line"><span class="string">    while(1):</span></span><br><span class="line"><span class="string">        t = P2[loc]</span></span><br><span class="line"><span class="string">        loc = t</span></span><br><span class="line"><span class="string">        chain.append(loc)</span></span><br><span class="line"><span class="string">        len += 1</span></span><br><span class="line"><span class="string">        if(t == i):</span></span><br><span class="line"><span class="string">            #print(i,&quot;,&quot;,len)</span></span><br><span class="line"><span class="string">            if(len == 2):</span></span><br><span class="line"><span class="string">                print(chain)</span></span><br><span class="line"><span class="string">                print(i+1)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">#print(lenlist.count(2))</span></span><br><span class="line"><span class="string">#2*82 + 75 + 3*3 + 1*8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        tt = [0 for k in range(256)]</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            tt[k] = P[P[k]] + 1</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            if(tt[k]!= c[k]):</span></span><br><span class="line"><span class="string">                print(k)</span></span><br><span class="line"><span class="string">        exit()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line">group_size = <span class="number">2</span></span><br><span class="line">num_groups = <span class="number">4</span></span><br><span class="line">all_groupings = <span class="built_in">list</span>(combinations(chain1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_groupings</span>(<span class="params">chain1, group_size, num_groups</span>):</span><br><span class="line">    <span class="keyword">if</span> num_groups == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> [chain1]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> combinations(chain1, group_size):</span><br><span class="line">            remaining_chain1 = [e <span class="keyword">for</span> e <span class="keyword">in</span> chain1 <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> combo]</span><br><span class="line">            <span class="keyword">for</span> rest_grouping <span class="keyword">in</span> generate_groupings(remaining_chain1, group_size, num_groups - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> [<span class="built_in">list</span>(combo)] + rest_grouping</span><br><span class="line"></span><br><span class="line">chain1r = <span class="built_in">list</span>(generate_groupings(chain1, group_size, num_groups))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line">c = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">chain821 = [<span class="number">193</span>, <span class="number">222</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">96</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">68</span>, <span class="number">201</span>, <span class="number">172</span>, <span class="number">157</span>, <span class="number">145</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">230</span>, <span class="number">36</span>, <span class="number">149</span>, <span class="number">141</span>, <span class="number">24</span>, <span class="number">99</span>, <span class="number">212</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">46</span>, <span class="number">158</span>, <span class="number">151</span>, <span class="number">135</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">150</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">64</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">85</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">167</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">53</span>, <span class="number">29</span>, <span class="number">95</span>, <span class="number">122</span>, <span class="number">176</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">136</span>, <span class="number">109</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">108</span>, <span class="number">20</span>, <span class="number">114</span>, <span class="number">203</span>, <span class="number">161</span>, <span class="number">61</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">196</span>, <span class="number">236</span>, <span class="number">240</span>, <span class="number">187</span>, <span class="number">106</span>, <span class="number">2</span>, <span class="number">255</span>]</span><br><span class="line">chain822 = [<span class="number">125</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">159</span>, <span class="number">139</span>, <span class="number">142</span>, <span class="number">69</span>, <span class="number">202</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">5</span>, <span class="number">92</span>, <span class="number">184</span>, <span class="number">163</span>, <span class="number">16</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">210</span>, <span class="number">74</span>, <span class="number">146</span>, <span class="number">216</span>, <span class="number">174</span>, <span class="number">62</span>, <span class="number">156</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">226</span>, <span class="number">79</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">50</span>, <span class="number">134</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">180</span>, <span class="number">170</span>, <span class="number">133</span>, <span class="number">118</span>, <span class="number">81</span>, <span class="number">206</span>, <span class="number">54</span>, <span class="number">83</span>, <span class="number">179</span>, <span class="number">19</span>, <span class="number">248</span>, <span class="number">245</span>, <span class="number">175</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">197</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">130</span>, <span class="number">48</span>, <span class="number">124</span>, <span class="number">71</span>, <span class="number">209</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">181</span>, <span class="number">138</span>, <span class="number">34</span>, <span class="number">66</span>, <span class="number">104</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">60</span>, <span class="number">215</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">229</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">249</span>]</span><br><span class="line">chain75 = [<span class="number">90</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">224</span>, <span class="number">14</span>, <span class="number">164</span>, <span class="number">147</span>, <span class="number">119</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">65</span>, <span class="number">171</span>, <span class="number">155</span>, <span class="number">35</span>, <span class="number">43</span>, <span class="number">208</span>, <span class="number">253</span>, <span class="number">91</span>, <span class="number">128</span>, <span class="number">198</span>, <span class="number">160</span>, <span class="number">192</span>, <span class="number">178</span>, <span class="number">213</span>, <span class="number">45</span>, <span class="number">231</span>, <span class="number">242</span>, <span class="number">217</span>, <span class="number">143</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">153</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">52</span>, <span class="number">75</span>, <span class="number">88</span>, <span class="number">227</span>, <span class="number">234</span>, <span class="number">42</span>, <span class="number">152</span>, <span class="number">188</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">186</span>, <span class="number">235</span>, <span class="number">191</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">162</span>, <span class="number">177</span>, <span class="number">33</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">223</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">127</span>, <span class="number">182</span>, <span class="number">225</span>, <span class="number">169</span>, <span class="number">228</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">76</span>, <span class="number">38</span>, <span class="number">254</span>]</span><br><span class="line">chain31 = [<span class="number">15</span>, <span class="number">165</span>, <span class="number">247</span>]</span><br><span class="line">chain32 = [<span class="number">207</span>, <span class="number">116</span>, <span class="number">238</span>]</span><br><span class="line">chain33 = [<span class="number">120</span>, <span class="number">22</span>, <span class="number">70</span>]</span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line"></span><br><span class="line">locdic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain3(四种情况)</span></span><br><span class="line"><span class="comment">#情况1：3个三环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain32r = [<span class="number">207</span>, <span class="number">238</span>, <span class="number">116</span>]</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#情况2:1个三环,1个六环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain32[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain32r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain32[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain75(确定)</span></span><br><span class="line">chain75r = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    chain75r[<span class="number">2</span>*i%<span class="number">75</span>] = chain75[i]</span><br><span class="line"><span class="comment">#添加入位置字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    locdic[chain75r[i]] = chain75r[(i+<span class="number">1</span>)%<span class="number">75</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#嗯造剩下两种环的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">82</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="comment">#造一个副本</span></span><br><span class="line">    locdic1 = locdic</span><br><span class="line">    chain164r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain164r[j] = chain821[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain164r[j] = chain822[(j//<span class="number">2</span> + i) % <span class="number">82</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        locdic1[chain164r[i]] = chain164r[(i+<span class="number">1</span>)%<span class="number">164</span>]</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#4个二元环（包含单环情况）</span></span><br><span class="line">    <span class="keyword">for</span> mm <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        ttt = <span class="built_in">bin</span>(mm)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain1r)):</span><br><span class="line">            locdic2 = locdic1</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">0</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">2</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">3</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">            P = [locdic2[j]+<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">            </span><br><span class="line">            t = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), n):</span><br><span class="line">                <span class="keyword">if</span>((x^y)&gt;=<span class="number">32</span> <span class="keyword">and</span> (x^y)&lt;=<span class="number">127</span>):</span><br><span class="line">                    t+=<span class="built_in">chr</span>(x^y)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(t) &gt; <span class="number">10</span>):</span><br><span class="line">                <span class="built_in">print</span>(t)</span><br><span class="line">                exit()</span><br><span class="line">                </span><br><span class="line"><span class="comment">#brics+&#123;ab99943f6dae4f20595c8645fcf8289e&#125;</span></span><br></pre></td></tr></table></figure>
<p>脚本比较丑，只能就题论题，不能作为该类求平方根置换的通解。</p>
<p><br></p>
<p><br></p>
<h3 id="prng-加强版"><a href="#prng-加强版" class="headerlink" title="prng(加强版)"></a>prng(加强版)</h3><p>(题目具体名称并不是这个，只是我还没有找到对应题目名，就先用着)</p>
<p>题目来源：江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>(<span class="params">n, l</span>):</span><br><span class="line">    bb = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, r = <span class="built_in">divmod</span>(n, l)</span><br><span class="line">        bb.append(r)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> bb[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prng</span>(<span class="params">secret</span>):</span><br><span class="line">	seed = base(secret, <span class="number">5</span>)</span><br><span class="line">	seed = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(seed)]</span><br><span class="line">	length = <span class="built_in">len</span>(seed)</span><br><span class="line">	R = [[ random.randint(<span class="number">0</span>,<span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length**<span class="number">2</span>)]</span><br><span class="line">	S = []</span><br><span class="line">	<span class="keyword">for</span> r <span class="keyword">in</span> R:</span><br><span class="line">		s = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">			s += (r[index] + seed[index]) % <span class="number">5</span></span><br><span class="line">		s %= <span class="number">2</span></span><br><span class="line">		S.append(s)</span><br><span class="line">	<span class="keyword">return</span> R, S</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">R, S = prng(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(<span class="string">f&#x27;R = <span class="subst">&#123;R&#125;</span>\nS = <span class="subst">&#123;S&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理加密流程：</p>
<ul>
<li>将flag转为大整数后，将该整数转为五进制数，并转为列表，作为seed</li>
<li>记列表seed长度为n</li>
<li>生成一个 $ n^2*n$ 的矩阵R，其中每个元素为0-4的随机数</li>
<li>利用R矩阵，对seed矩阵做如下加密：(其中，$ i=1,2…n^2$)</li>
</ul>
<script type="math/tex; mode=display">
s_i=\sum_{j=1}^{n}{(({r_{ij}+seed_i})(mod\;5))} \quad(mod\;2)</script><ul>
<li>将 $ s_i$ 拼接为S向量后，提供R与S，求解明文</li>
</ul>
<p>自己做是一点思路都没有，最终找到了 ZM.J 师傅的一篇wp，发现题目是类似的：</p>
<p><a href="https://zhuanlan.zhihu.com/p/643573246">[CryptoCTF] CryptoCTF 2023 tough分类 团队解题writeup - 知乎 (zhihu.com)</a></p>
<p>于是就可以迁移到这道题目中来：</p>
<p>首先，由于seed中每个数字都是0-4之中的某个数m，我们可以先对其进行编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>此时，我们相当于把一个0-4的数转化为了五个变量组成的一个向量：</p>
<script type="math/tex; mode=display">
m = \left(
 \begin{matrix}
   x_{0} \\
   x_{1} \\
   x_{2} \\
   x_{3}  \\
   x_{4}  \\
  \end{matrix}
  \right)</script><p>其中，每个变量 $ x_i$ 只有0或1两种取值，并且对于任意一个0-4的数m， $ x_i$ 有且仅有一个变量为1，其他均为0</p>
<p>这么做的意义是什么？是让我们能够将这个先模5再模2的没有办法解的线性方程组，变化到一个可以解的形式。</p>
<p>为什么这样变换后就可以解？由加密流程知道，$ r_{ij},seed_i$ 均为0-4之间的数，因此相加后模5模2的结果完全可以用一张表加以表示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>表的含义是，当 r 取 i ，seed 取 j 时，表中第 i 行第 j 列即为$ (r+seed)\;(mod\;5)\;(mod\;2)$ 的值</p>
<p>然后在这里举个简单的例子来看一下如何变换原题目的线性方程到这种形式下：</p>
<p>假设$ s = (2+m_0)+(3+m_1)+(4+m_2) \;(mod\;5)\;(mod\;2)$，</p>
<p>第一步，把每个 $ m_i$ 表示为五个变量的形式：</p>
<script type="math/tex; mode=display">
m_0 = \left(
 \begin{matrix}
   x_{00} \\
   x_{01} \\
   x_{02} \\
   x_{03}  \\
   x_{04}  \\
  \end{matrix}
  \right),
  m_1 = \left(
 \begin{matrix}
   x_{10} \\
   x_{11} \\
   x_{12} \\
   x_{13}  \\
   x_{14}  \\
  \end{matrix}
  \right),
  m_2 = \left(
 \begin{matrix}
   x_{20} \\
   x_{21} \\
   x_{22} \\
   x_{23}  \\
   x_{24}  \\
  \end{matrix}
  \right)</script><p>第二步，把每一个r转化成对应系数矩阵：</p>
<p>比如，r=2时，看上表的取2的行，需要变量1或4取1就能得到1，否则为0；r=3时，看上表的取3的行，需要变量0或3取1就能得到1，否则为0；r=4时，看上表的取4的行，需要变量2或4取1就能得到1，否则为0</p>
<p>这又是什么意思呢？比如 $ (2+1) \;(mod\;5)\;(mod\;2)$，由真值表可知，他就完全等价于下面的形式：</p>
<script type="math/tex; mode=display">
(0,1,0,0,1)*\left(
 \begin{matrix}
   0 \\
   1 \\
   0 \\
   0  \\
   0  \\
  \end{matrix}
  \right) \quad(mod\;2)</script><p>这么做的好处就是：</p>
<ul>
<li>去除了模5的影响</li>
<li>由加法转成了乘法，变成了矩阵可解的形式</li>
</ul>
<p>因此，刚才的等式$ s = (2+m_0)+(3+m_1)+(4+m_2) \;(mod\;5)\;(mod\;2)$就彻底去除了与模5的关系，而只剩下模2下的线性关系与变量，变成了下面这种形式：</p>
<script type="math/tex; mode=display">
s = (0,1,0,0,1)*\left(
 \begin{matrix}
   x_{00} \\
   x_{01} \\
   x_{02} \\
   x_{03}  \\
   x_{04}  \\
  \end{matrix}
  \right)
  + (1,0,0,1,0)*\left(
 \begin{matrix}
   x_{10} \\
   x_{11} \\
   x_{12} \\
   x_{13}  \\
   x_{14}  \\
  \end{matrix}
  \right)
  + (0,0,1,0,1) * \left(
 \begin{matrix}
   x_{20} \\
   x_{21} \\
   x_{22} \\
   x_{23}  \\
   x_{24}  \\
  \end{matrix}
  \right)
  \quad(mod\;2)</script><p>而把这种形式应用于我们需要求解的问题之中，就可以把seed中原本的n个变量转化成5n个变量，因此只需要从n^2个线性方程中拿出5n个线性线性方程即可解得所有的变量取值，再用刚才对m的编码还原即可。</p>
<p>你可能会发现求解后的向量并不全是刚才的编码形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>而出现了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1,1,1,1,0)</span><br></pre></td></tr></table></figure>
<p>事实上，这是因为我们并没有把刚才说的这一点加入到线性方程组的约束中：</p>
<ul>
<li>对于任意一个0-4的数m， $ x_i$ 有且仅有一个变量为1，其他均为0</li>
</ul>
<p>但是影响不大了，因为你大概也能猜到(1,1,1,1,0)对应的就是不加该限制时4的编码，因此对应还原就好</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\output4.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(R[<span class="number">0</span>])</span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span> * n):</span><br><span class="line">    a = []</span><br><span class="line">    B.append(S[i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (R[i][j] == <span class="number">0</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> ,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">1</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">2</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">3</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">4</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    A.append(a)</span><br><span class="line"></span><br><span class="line">A = matrix(GF(<span class="number">2</span>), A)</span><br><span class="line">B = vector(GF(<span class="number">2</span>), B)</span><br><span class="line">x = A.solve_right(B)</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">1</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(flag, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CnHongKe&#123;179bdc38ea135c35f1f973c039a422a7&#125;</span></span><br></pre></td></tr></table></figure>
<p>(有不懂的地方欢迎与我交流！)</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-剪枝</title>
    <url>/post/342113ee.html</url>
    <content><![CDATA[<p>该文章主要记录一些深搜剪枝相关的趣题</p>
<span id="more"></span>
<h3 id="首尾剪枝"><a href="#首尾剪枝" class="headerlink" title="首尾剪枝"></a>首尾剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line"><span class="string">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line"><span class="string">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>已知条件：</strong></p>
<ul>
<li>p 与 q 的反方向二进制的异或值，共256bit，记为pxorq</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从两端向中间搜索</p>
</li>
<li><p>每一次搜索，需利用当前 pxorq 两端的bit位。这是因为，pxorq 的当前最高位对应p的最高位及q的最低位，pxorq 的当前最低位对应p的最低位及q的最高位 (其中最高、最低均是对于当前搜索而言)</p>
</li>
<li>如果当前需搜索的最高位为”1”，则对应两种可能：p该位为1，q对应低位为0；p该位为0，q对应低位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p、q未搜索到的位全填0，乘积应小于n</li>
<li>将p、q未搜索到的位全填1，乘积应大于n</li>
<li>p、q 低 k 位乘积再取低 k 位，应与 n 的低 k 位相同</li>
</ul>
<p>如此进行剪枝即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line">n = <span class="number">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line">c = <span class="number">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n//pp0</span><br><span class="line">            phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{f55a2740-c15d-af88-1815-a1b4aab19ccf}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="特殊剪枝"><a href="#特殊剪枝" class="headerlink" title="特殊剪枝"></a>特殊剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">q1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">a1 = p1 ^ q1</span><br><span class="line">b1 = p1 * q1</span><br><span class="line">c1 = <span class="built_in">pow</span>(bytes_to_long(flag[:<span class="number">19</span>]),e,p1*q1)</span><br><span class="line">p2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">q2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">a2 = (p2 * q2) ^ (p2 + q2)</span><br><span class="line">b2 = (p2 * q2) ^ (p2 - q2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(bytes_to_long(flag[<span class="number">19</span>:]),e,p2*q2)</span><br><span class="line">f= <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c2)+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>题目txt：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br></pre></td></tr></table></figure>
<p>可以明显看出，题目分为两部分，均是利用剪枝：</p>
<h4 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>p1 与 q1 的异或值，共1024bit，记为a1</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从高位向低位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a1 的最高位</p>
</li>
<li>若当前 a1 的最高位为”1”，则对应两种可能：p该位为1，q该位为0；p该位为0，q该位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p1、q1未搜索到的位全填0，乘积应小于n</li>
<li>将p1、q1未搜索到的位全填1，乘积应大于n</li>
<li>p1 &gt; q1（这是因为，p1和q1肯定一个比另一个大，因此可以减少一半复杂度）</li>
</ul>
<h4 id="第二部分："><a href="#第二部分：" class="headerlink" title="第二部分："></a>第二部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>(p2 * q2)与(p2 + q2)的异或值，记为a2</li>
<li>(p2 * q2)与(p2 - q2)的异或值，记为b2</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从低位向高位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a2、b2 的最低位</p>
</li>
<li>硬搜索当前位的所有四种可能：00、01、10、11</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>若当前已搜索了 k 位，则需满足：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)</span><br></pre></td></tr></table></figure>
<p>按照此方式就可以递归深搜出p2、q2</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1,剪枝</span></span><br><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a1 = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(a1)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; b1):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; b1):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c1,d,pp*qq))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 硬剪枝</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q,k</span>):</span><br><span class="line">    mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(p,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(q,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c2,d,pp*qq))</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(m) &lt; <span class="number">20</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)):</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;1&quot;</span></span><br><span class="line">q = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">find(p,q,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>大概需要十几秒。</p>
<p>flag：</p>
<p><strong>flag{u2w6tnettv2a9fbo5qh73k8082h2q9j3}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-分组密码</title>
    <url>/post/a5bd8c0d.html</url>
    <content><![CDATA[<p>这篇文章主要记录一些分组密码相关的趣题</p>
<span id="more"></span>
<h3 id="EASY-dfa"><a href="#EASY-dfa" class="headerlink" title="EASY_dfa"></a>EASY_dfa</h3><p>最近做到的我觉得相当有意思的一个题，在这里记录一下解题过程</p>
<p>题目来源：川渝网络安全竞赛 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample, choice</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"></span><br><span class="line">logo = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> _______   ________  ________       ___    ___ </span></span><br><span class="line"><span class="string">|\  ___ \ |\   __  \|\   ____\     |\  \  /  /|</span></span><br><span class="line"><span class="string">\ \   __/|\ \  \|\  \ \  \___|_    \ \  \/  / /</span></span><br><span class="line"><span class="string"> \ \  \_|/_\ \   __  \ \_____  \    \ \    / / </span></span><br><span class="line"><span class="string">  \ \  \_|\ \ \  \ \  \|____|\  \    \/  /  /  </span></span><br><span class="line"><span class="string">   \ \_______\ \__\ \__\____\_\  \ __/  / /    </span></span><br><span class="line"><span class="string">    \|_______|\|__|\|__|\_________\\\___/ /    </span></span><br><span class="line"><span class="string">                       \|_________\|___|/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     ________  ________ ________         </span></span><br><span class="line"><span class="string">    |\   ___ \|\  _____\\\   __  \        </span></span><br><span class="line"><span class="string">    \ \  \_|\ \ \  \__/\ \  \|\  \       </span></span><br><span class="line"><span class="string">     \ \  \ \\\ \ \   __\\\ \   __  \      </span></span><br><span class="line"><span class="string">      \ \  \_\\\ \ \  \_| \ \  \ \  \     </span></span><br><span class="line"><span class="string">       \ \_______\ \__\   \ \__\ \__\    </span></span><br><span class="line"><span class="string">         \|_______|\|__|    \|__|\|__|    </span></span><br><span class="line"><span class="string">                                                                                                                                 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_memu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. Encrypt</span></span><br><span class="line"><span class="string">2. Get flag</span></span><br><span class="line"><span class="string">3. Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span>.join([choice(hexdigits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br><span class="line">    s = sha256(plain.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sha256(<span class="subst">&#123;plain[:<span class="number">16</span>]&#125;</span>xxxx) = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">    xxxx = <span class="built_in">input</span>(<span class="string">&quot;plz enter the xxxx: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> xxxx != plain[<span class="number">16</span>:]:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x = rotl(x, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.K = key</span><br><span class="line">        self.S = sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)], <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        B = List2Int(B)</span><br><span class="line">        B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">        T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">        T = Int2List(rev(List2Int(T)))</span><br><span class="line">        T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">        T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>():</span><br><span class="line">    plain = <span class="built_in">input</span>(<span class="string">&quot;plz enter your plaintext: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher = <span class="subst">&#123;C.encrypt(unhexlify(plain))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_Flag</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher = <span class="subst">&#123;f&#125;</span>&quot;</span>)</span><br><span class="line">    plain = <span class="built_in">input</span>(<span class="string">&quot;plz enter your plaintext: &quot;</span>)</span><br><span class="line">    c = C.encrypt(unhexlify(plain))</span><br><span class="line">    <span class="keyword">if</span> c == f:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">memu</span>():</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        E()</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        Get_Flag()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bye~&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proof()</span><br><span class="line">    <span class="built_in">print</span>(logo)</span><br><span class="line">    key = urandom(<span class="number">8</span>)</span><br><span class="line">    C = Enc(key)</span><br><span class="line">    f = C.encrypt(urandom(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sbox: <span class="subst">&#123;C.S&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(_memu)</span><br><span class="line">    alarm(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        memu()</span><br></pre></td></tr></table></figure>
<p>代码略有点长，一步一步来，还是从分析加密流程开始：</p>
<p>首先，要过一个proof，为爆破一个十六进制串的末四位哈希，这个本来没什么好讲的，但是仔细看可以发现题目这里锅了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span>.join([choice(hexdigits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br><span class="line">    s = sha256(plain.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sha256(<span class="subst">&#123;plain[:<span class="number">16</span>]&#125;</span>xxxx) = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">    xxxx = <span class="built_in">input</span>(<span class="string">&quot;plz enter the xxxx: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> xxxx != plain[<span class="number">16</span>:]:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure>
<p>可以看到，他直接print了明文串，因此只需要接受明文串，并把末四个十六进制数发送回去即可通过proof。其实这也没什么，不过是一个小失误。但之所以我要特地讲出来，在这篇wp后面会说明原因。</p>
<p>过了proof后，加密正式开始：</p>
<ul>
<li>生成一个8字节的随机密钥key</li>
<li>用这个key初始化一个Enc对象C</li>
<li>生成一个4字节的随机明文，记作plain，并用Enc对象C进行加密，得到f</li>
<li>给出C中的S盒</li>
<li>给我们10s时间，可以选择进行以下两种操作：</li>
<li><ul>
<li>输入”1”，可以自行构造一组明文进行加密，靶机端会返回加密后的密文</li>
<li>输入”2”，可以输入一个明文，如果输入的明文被加密后与f相等，则核验通过，发放flag</li>
</ul>
</li>
</ul>
<p>这是靶机端需完成的任务的逻辑，再来看看Enc对象具体是怎么加密的，也就是encrypt函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">    T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">    T = Int2List(rev(List2Int(T)))</span><br><span class="line">    T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">    T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>生成一个S盒，是一个(0,256)之间的随机置换</li>
<li>将明文与key的前四个字节作异或，得到T</li>
<li>第二行，做完了题也不知道有什么用，估计是出题没删干净</li>
<li>将T作S盒置换后，调用l函数，得到更新后的T</li>
<li>将T与key的后半段异或，并给出十六进制密文</li>
</ul>
<p>其中，l函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br></pre></td></tr></table></figure>
<p>你应该可以感觉到，如果能够知道l函数的密文，那么这种级别的加密对于z3来说，求解出明文不是难事。</p>
<p>至此，题目加密流程就梳理结束了，接下来进行到分析环节。</p>
<h4 id="思路一：生日攻击"><a href="#思路一：生日攻击" class="headerlink" title="思路一：生日攻击"></a>思路一：生日攻击</h4><p>刚才我特意说，题目的proof锅了，不需要实际爆破，作用就在这里。节省下来的爆破时间给生日攻击提供了一点可能性。</p>
<p>你可以发现，题目实质上就是要求给出正确的4个明文字节。而4个字节一共有2^32次方种可能性，因此我们随便输入四个字节给靶机，也有 $ \frac{1}{2^{32}}$ 的机会成功。而失败了的话，就重新连接靶机，再随便输入四个字节，如此重复。根据生日攻击理论，如果能够反复进行2^32次，我们就有超过50%的几率至少成功攻击一次，那么就能拿到flag。</p>
<p>当然，即使proof锅了，真的要进行2^32次方次的话，可以用tqdm测试一下大概需要600000个小时，仍然是不现实的。但是这确实是个思路，一点办法都没有的时候，可以拼拼运气。</p>
<h4 id="思路二：构造明文"><a href="#思路二：构造明文" class="headerlink" title="思路二：构造明文"></a>思路二：构造明文</h4><p>生日攻击只能说有非常微小的成功的机会。真正要做的话，还是得分析一下加密流程，以及如何构造出可用的明文。</p>
<p>首先要注意到，我们只有10s时间，这是个非常重要的信息。经过我用tqdm测试，我们大概最多能构造30-40组明文让服务器加密。并且，考虑到还需要用构造出的明文信息对f进行解密，实际上来说可能最多只能构造10-20组明文。</p>
<p>这个用处挺大的，直接完全排除了中间相遇攻击、建立字典查找等思路。因此现在的主要目标就是：如何用有限的、少量的明文，去泄露Enc对象C的信息，从而解密密文。</p>
<p>你应该能看出来，如果你能获得密钥key的完整8个字节，那么解密是很容易的，只需要对应异或、逆置换、z3解方程就可以解密出明文。</p>
<p>因此，重心放在求解key上也就是自然而然的思路。很容易想到，如果发送四个字节的”\x00”给靶机端，那么再观察encrypt函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">    T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">    T = Int2List(rev(List2Int(T)))</span><br><span class="line">    T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">    T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>
<p>那么第一步得到的T其实就是key的前四个字节，在之后也是key的前四个字节进行置换、调用l函数等。</p>
<p>而第二次，考虑发送下面这样的字节串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x00&quot;</span> * <span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以发现，第一部得到的T，前面三个字节并没有受到影响，仍然是key的前三个字节，只有最后一字节的最后一比特取了反。因此，到第三步置换时，前三个字节的置换仍然是不变的，变的只有第四个字节。也就是说，经过这两次明文的发送，l函数输入的参数列表只有最后一个发生了改变！</p>
<p>而我们再看l函数加密过程，为了直观我画个图像：</p>
<p><img src="/post/a5bd8c0d/image-20231007231119071.png" alt="image-20231007231119071"></p>
<p>红色部分代表两次构造的明文在调l函数时的不同量，黄色部分代表得到密文，线条表示该线条与另一线条之间的五个部分异或得到下方的密文。</p>
<p>那么你仔细看这个图，你会发现，第二块密文和第三块密文，对于红色块异或的量是相同的！那么我们将两次服务器返回的密文异或，会发生什么呢？在下面的分析过程中，我们把key的前半部分记作key1，后半部分记作key2.</p>
<p>首先，我们把m经置换后的列表记作P(m)，经l函数后的列表记作l(P(m))，也就是m经第三步变换后，记作(l(P(m)))。那么两次构造明文到第三步前分别是key1、key1’，则有：</p>
<script type="math/tex; mode=display">
c1 \oplus c2 = (l(P(key_1)) \oplus key_2) \oplus (l(P(key_1')) \oplus key_2)</script><p>那么就可以消掉key2，即：</p>
<script type="math/tex; mode=display">
c1 \oplus c2 = l(P(key_1) \oplus l(P(key_1'))</script><p>而根据刚才的画图分析，密文中间两块对红色的异或利用是相同的，因此我们可以单独分析上式的中间两块，得到：</p>
<script type="math/tex; mode=display">
中间两块异或 = 两次明文的不同红色量异或</script><p>这一部分一定要结合图多理解理解，我没有想到讲的特别清楚的办法，如果哪里不明白可以与我交流。</p>
<p>而两次不同的红色量分别是(key1)和(key1^1)经置换得到的最后一字节，而我们拥有这个异或值以及S盒，因此可以反查到所有可能的解。一般来说会有1-4组。</p>
<p>那么通过上述方法，我们就获得了key1的一个字节，而类似的，通过构造下面几组明文并发送，可以通过相同的分析得到key1的剩下三个字节：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span></span><br><span class="line"><span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span></span><br><span class="line"><span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>而有了key1后，我们就可以发送key1作为明文，那么经第一步异或后得到的T就是四个全零字节，那么也就自然的可以得到第三步置换以及加密后的值，再与服务器返回的密文异或就能得到key2.</p>
<p>得到key2后，解密相对来说就很容易了，可以自行逆序实现。</p>
<p>需要注意的是，有一个地方导致我们可能不成功：</p>
<ul>
<li>每次获得的key1的某字节可能有多解</li>
</ul>
<p>但是没关系，我们只需要多与靶机交互几次，直到满足key1的四个字节都是正确解即可。这一段可以用下面的代码本地调试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample, choice</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x = rotl(x, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">B</span>):</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">K,cipher</span>):</span><br><span class="line">    T = List2Int(xorl(K[<span class="number">4</span>:],cipher))</span><br><span class="line">    s = Solver() </span><br><span class="line">    B = BitVec(<span class="string">&#x27;B&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s.add(B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>) == T)</span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:    <span class="comment">#检测是否有解</span></span><br><span class="line">        result = <span class="built_in">str</span>(s.model()) </span><br><span class="line">        T = Int2List(<span class="built_in">int</span>(result[<span class="number">5</span>:-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">            T[i] = inv_S[T[i]]</span><br><span class="line">    T = List2Int(xorl(K[:<span class="number">4</span>],T))</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.K = key</span><br><span class="line">        self.S = sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)], <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        B = List2Int(B)</span><br><span class="line">        B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">        T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">        T = Int2List(rev(List2Int(T)))</span><br><span class="line">        temp = [self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T]</span><br><span class="line">        T = self.l(temp)</span><br><span class="line">        T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(T)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">m</span>):</span><br><span class="line">    plain = hexlify(m)</span><br><span class="line">    <span class="keyword">return</span> C.encrypt(unhexlify(plain))</span><br><span class="line"></span><br><span class="line">fin = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            key = urandom(<span class="number">8</span>)</span><br><span class="line">            C = Enc(key)</span><br><span class="line">            x = []</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">4</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span>))</span><br><span class="line">            c = urandom(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">            S = C.S</span><br><span class="line">            inv_S = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                inv_S[S[i]] = i</span><br><span class="line"></span><br><span class="line">            <span class="comment">#获取key</span></span><br><span class="line">            key_prefix = []</span><br><span class="line"></span><br><span class="line">            <span class="comment">#1.获取key[:4]</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                    temp = (xorl(x[<span class="number">0</span>],x[i]))[i-<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">elif</span>(i % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">                    temp = (xorl(x[<span class="number">0</span>],x[i]))[i]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                    t1 = (S[j]&gt;&gt;<span class="number">6</span>) + ((S[j]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                    t2 = (S[j^<span class="number">1</span>]&gt;&gt;<span class="number">6</span>) + ((S[j^<span class="number">1</span>]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">if</span>(t1^t2 == temp):</span><br><span class="line">                        key_prefix.append(inv_S[S[j]])</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            key_prefix = key_prefix[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            key_suffix = Int2List(bytes_to_long(E(long_to_bytes(List2Int(key_prefix)))))</span><br><span class="line">            T = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            temp = l([S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">            key_suffix = xorl(temp, key_suffix)</span><br><span class="line">            key_final = long_to_bytes(List2Int(key_prefix)) + long_to_bytes(List2Int(key_suffix))</span><br><span class="line"></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(decrypt(key_final,E(c)) == c.<span class="built_in">hex</span>()):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    fin += count</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fin//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>可以计算出，平均需要180次左右，能获得一次key1的完全正确的解。运气好的话几组就能出，运气不好接近一千组也有可能，不过没事，交互挂着跑就好。</p>
<p>而本地能正确解密的话，我们就能顺利编写靶机代码了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">B</span>):</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">K,cipher,inv_S</span>):</span><br><span class="line">    T = List2Int(xorl(K[<span class="number">4</span>:],cipher))</span><br><span class="line">    s = Solver() </span><br><span class="line">    B = BitVec(<span class="string">&#x27;B&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s.add(B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>) == T)</span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:    <span class="comment">#检测是否有解</span></span><br><span class="line">        result = <span class="built_in">str</span>(s.model()) </span><br><span class="line">        T = Int2List(<span class="built_in">int</span>(result[<span class="number">5</span>:-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">            T[i] = inv_S[T[i]]</span><br><span class="line">    T = List2Int(xorl(K[:<span class="number">4</span>],T))</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28579</span>)</span><br><span class="line">                temp = r.recvline().strip().decode()[-<span class="number">4</span>:]</span><br><span class="line">                r.sendline(temp.encode())</span><br><span class="line">                r.recvuntil(<span class="string">b&quot;sbox: &quot;</span>)</span><br><span class="line">                S = <span class="built_in">eval</span>(r.recvline())</span><br><span class="line">                inv_S = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                    inv_S[S[i]] = i</span><br><span class="line"></span><br><span class="line">                x = []</span><br><span class="line">                <span class="comment">#0</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">4</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#1</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)		</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#2</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#3</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#4</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#获取key</span></span><br><span class="line">                key_prefix = []</span><br><span class="line"></span><br><span class="line">                <span class="comment">#1.获取key[:4]</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        temp = (xorl(x[<span class="number">0</span>],x[i]))[i-<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">elif</span>(i % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">                        temp = (xorl(x[<span class="number">0</span>],x[i]))[i]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">                        t1 = (S[j]&gt;&gt;<span class="number">6</span>) + ((S[j]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                        t2 = (S[j^<span class="number">1</span>]&gt;&gt;<span class="number">6</span>) + ((S[j^<span class="number">1</span>]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">if</span>(t1^t2 == temp):</span><br><span class="line">                            key_prefix.append(inv_S[S[j]])</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                key_prefix = key_prefix[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment">#2.获取key[4:]</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(long_to_bytes(List2Int(key_prefix))))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                key_suffix = Int2List(bytes_to_long(unhexlify(r.recvline().strip())))</span><br><span class="line">                T = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                temp = l([S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">                key_suffix = xorl(temp, key_suffix)</span><br><span class="line">                key_final = long_to_bytes(List2Int(key_prefix)) + long_to_bytes(List2Int(key_suffix))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#获取flag</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                cipher = unhexlify(r.recvline().strip())</span><br><span class="line">                t = decrypt(key_final,cipher,inv_S)</span><br><span class="line">                r.sendline(t)</span><br><span class="line">                temp = r.recvline()</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">b&quot;wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                r.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">getflag()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;4f9d3982-be4b-4c4a-8ca0-db1a69b28b03&#125;</span></span><br></pre></td></tr></table></figure>
<p>就这一题而言，还是有不少不是很好讲清楚的地方，可能我的做法也并不简洁。如果看了这篇文章你有任何想说的，都欢迎与我交流！</p>
<p><br></p>
<p><br></p>
<h3 id="newAES"><a href="#newAES" class="headerlink" title="newAES"></a>newAES</h3><p>题目来源：羊城杯 2023 决赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">SboxOriginal = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Rcon = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    text = <span class="built_in">int</span>(text.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2text</span>(<span class="params">matrix</span>):</span><br><span class="line">    text = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text |= (matrix[i][j] &lt;&lt; (<span class="number">120</span> - <span class="number">8</span> * (<span class="number">4</span> * i + j)))</span><br><span class="line">    <span class="keyword">return</span> text.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master_key, Sbox=SboxOriginal</span>):</span><br><span class="line">        self.Sbox = Sbox</span><br><span class="line">        self.InvSbox = [<span class="number">0</span>]* <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            self.InvSbox[self.Sbox[i]] = i</span><br><span class="line">        self.change_key(master_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_key</span>(<span class="params">self, master_key</span>):</span><br><span class="line">        self.round_keys = text2matrix(master_key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">            self.round_keys.append([])</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                byte = self.round_keys[i - <span class="number">4</span>][<span class="number">0</span>]        \</span><br><span class="line">                     ^ self.Sbox[self.round_keys[i - <span class="number">1</span>][<span class="number">1</span>]]  \</span><br><span class="line">                     ^ Rcon[i // <span class="number">4</span>]</span><br><span class="line">                self.round_keys[i].append(byte)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">                    byte = self.round_keys[i - <span class="number">4</span>][j]    \</span><br><span class="line">                         ^ self.Sbox[self.round_keys[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">4</span>]]</span><br><span class="line">                    self.round_keys[i].append(byte)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    byte = self.round_keys[i - <span class="number">4</span>][j]    \</span><br><span class="line">                         ^ self.round_keys[i - <span class="number">1</span>][j]</span><br><span class="line">                    self.round_keys[i].append(byte)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        self.plain_state = text2matrix(plaintext)</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.plain_state, self.round_keys[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            self.__round_encrypt(self.plain_state, self.round_keys[<span class="number">4</span> * i : <span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        self.__sub_bytes(self.plain_state)</span><br><span class="line">        self.__shift_rows(self.plain_state)</span><br><span class="line">        self.__add_round_key(self.plain_state, self.round_keys[<span class="number">40</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.plain_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        self.cipher_state = text2matrix(ciphertext)</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.cipher_state, self.round_keys[<span class="number">40</span>:])</span><br><span class="line">        self.__inv_shift_rows(self.cipher_state)</span><br><span class="line">        self.__inv_sub_bytes(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.__round_decrypt(self.cipher_state, self.round_keys[<span class="number">4</span> * i : <span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.cipher_state, self.round_keys[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add_round_key</span>(<span class="params">self, s, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] ^= k[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_encrypt</span>(<span class="params">self, state_matrix, key_matrix</span>):</span><br><span class="line">        self.__sub_bytes(state_matrix)</span><br><span class="line">        self.__shift_rows(state_matrix)</span><br><span class="line">        self.__mix_columns(state_matrix)</span><br><span class="line">        self.__add_round_key(state_matrix, key_matrix)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_decrypt</span>(<span class="params">self, state_matrix, key_matrix</span>):</span><br><span class="line">        self.__add_round_key(state_matrix, key_matrix)</span><br><span class="line">        self.__inv_mix_columns(state_matrix)</span><br><span class="line">        self.__inv_shift_rows(state_matrix)</span><br><span class="line">        self.__inv_sub_bytes(state_matrix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.Sbox[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.InvSbox[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_single_column</span>(<span class="params">self, a</span>):</span><br><span class="line">        t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">        u = a[<span class="number">0</span>]</span><br><span class="line">        a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">        a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">        a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">        a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.__mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">            s[i][<span class="number">0</span>] ^= u</span><br><span class="line">            s[i][<span class="number">1</span>] ^= v</span><br><span class="line">            s[i][<span class="number">2</span>] ^= u</span><br><span class="line">            s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">        self.__mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybox = [<span class="number">105</span>, <span class="number">121</span>, <span class="number">73</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">233</span>, <span class="number">249</span>, <span class="number">201</span>, <span class="number">217</span>, <span class="number">169</span>, <span class="number">185</span>, <span class="number">137</span>, <span class="number">153</span>, <span class="number">104</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">232</span>, <span class="number">248</span>, <span class="number">200</span>, <span class="number">216</span>, <span class="number">168</span>, <span class="number">184</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">107</span>, <span class="number">123</span>, <span class="number">75</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">59</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">235</span>, <span class="number">251</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">171</span>, <span class="number">187</span>, <span class="number">139</span>, <span class="number">155</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">74</span>, <span class="number">90</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">234</span>, <span class="number">250</span>, <span class="number">202</span>, <span class="number">218</span>, <span class="number">170</span>, <span class="number">186</span>, <span class="number">138</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">125</span>, <span class="number">77</span>, <span class="number">93</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">253</span>, <span class="number">205</span>, <span class="number">221</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">141</span>, <span class="number">157</span>, <span class="number">108</span>, <span class="number">124</span>, <span class="number">76</span>, <span class="number">92</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">252</span>, <span class="number">204</span>, <span class="number">220</span>, <span class="number">172</span>, <span class="number">188</span>, <span class="number">140</span>, <span class="number">156</span>, <span class="number">111</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">95</span>, <span class="number">47</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">175</span>, <span class="number">191</span>, <span class="number">143</span>, <span class="number">159</span>, <span class="number">110</span>, <span class="number">126</span>, <span class="number">78</span>, <span class="number">94</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">206</span>, <span class="number">222</span>, <span class="number">174</span>, <span class="number">190</span>, <span class="number">142</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">225</span>, <span class="number">241</span>, <span class="number">193</span>, <span class="number">209</span>, <span class="number">161</span>, <span class="number">177</span>, <span class="number">129</span>, <span class="number">145</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">192</span>, <span class="number">208</span>, <span class="number">160</span>, <span class="number">176</span>, <span class="number">128</span>, <span class="number">144</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">227</span>, <span class="number">243</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">163</span>, <span class="number">179</span>, <span class="number">131</span>, <span class="number">147</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">226</span>, <span class="number">242</span>, <span class="number">194</span>, <span class="number">210</span>, <span class="number">162</span>, <span class="number">178</span>, <span class="number">130</span>, <span class="number">146</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">229</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">181</span>, <span class="number">133</span>, <span class="number">149</span>, <span class="number">100</span>, <span class="number">116</span>, <span class="number">68</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">244</span>, <span class="number">196</span>, <span class="number">212</span>, <span class="number">164</span>, <span class="number">180</span>, <span class="number">132</span>, <span class="number">148</span>, <span class="number">103</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">199</span>, <span class="number">215</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">135</span>, <span class="number">151</span>, <span class="number">102</span>, <span class="number">118</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">230</span>, <span class="number">246</span>, <span class="number">198</span>, <span class="number">214</span>, <span class="number">166</span>, <span class="number">182</span>, <span class="number">134</span>, <span class="number">150</span>]</span><br><span class="line">plaintext = <span class="string">b&quot;I will give you some hint: &quot;</span> + flag</span><br><span class="line">plaintext = pad(plaintext,<span class="number">16</span>,<span class="string">&quot;pkcs7&quot;</span>)</span><br><span class="line">ciphertext = <span class="string">b&quot;&quot;</span> </span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES(key, Sbox=mybox)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(plaintext) &gt; <span class="number">0</span>:</span><br><span class="line">    ciphertext += aes.encrypt(plaintext[:<span class="number">16</span>])</span><br><span class="line">    plaintext = plaintext[<span class="number">16</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;ciphertext.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 26ec146dddda72b791585e5ecbc6a947bd6159d4de35df6c7717cd8eca1acd319f07803d8127f41b7ac7cdadc250ec8bb66f3661d772665a1622ffeba82996551463b738a997cd2c7081894fa9a5246c</span></span><br></pre></td></tr></table></figure>
<p>题目代码不短，不过大部分是AES的具体实现，所以不用管。题目真正有用的信息其实就两点：</p>
<ul>
<li>更换了一个AES的S盒</li>
<li>给了两组明文，以及AES加密后的对应密文</li>
</ul>
<p>第一感觉应该是AES的某一部分作了小改动，然后导致产生了漏洞。但是把S盒换成普通的S盒之后，用自己构造的key，将明文分别用这个AES和cyberchef的AES进行加密，结果是完全一样的！说明这个AES真的就是完整、普通的AES加密，没有改动任何地方。</p>
<p>然后就懵了很久，因为好像没听说过AES还能已知明文攻击。但是题目目的其实已经很清楚了：根据这个更换的S盒以及两组明密文对，对AES进行已知明文攻击。</p>
<p>那肯定就是这个S盒设计的有问题，查阅后发现针对S盒确实有一种差分密码分析方式，然后就学习了一波：</p>
<p><a href="https://blog.csdn.net/weixin_43734797/article/details/124055427">密码分析（一）：差分密码分析-CSDN博客</a></p>
<p>简单说明一下我的理解，在这里我把差分分析的相关概念根据题目具体化一下：</p>
<p><strong>差分：</strong>两组明文的异或值，就是明文差分；同理，两组密文的异或值，就是密文差分。</p>
<p><strong>差分分析的依据：</strong>与密钥异或，不会改变差分</p>
<p>什么叫不会改变差分？我们把AES的行移位、列混淆都先不管，先单独看一下用到S盒的部分，也就是字节代换以及进行代换前的轮密钥加。这样的话，简单画个草图：</p>
<p><img src="/post/a5bd8c0d/image-20231010101627908.png" alt="image-20231010101627908"></p>
<p>那么不会改变差分就体现在下面的式子中：若有</p>
<script type="math/tex; mode=display">
m_1 \oplus m_2 = t</script><p>则：</p>
<script type="math/tex; mode=display">
m_1' \oplus m_2'  = (m_1\oplus roundkey) \oplus (m_2\oplus roundkey) = t</script><p>也就是说，轮密钥其实是对差分没有任何影响的，那么我们怎么利用这个事实进行攻击呢？</p>
<p>再回到刚才加密的那个图，可以看到，m1’经S盒代换后变成c1，m2’经S盒代换后变成c2，那么假设c1,c2的密文差分是r，那么我们就拥有了一个S盒的差分对 (t,r) 。</p>
<p>而S盒是一个字节代换操作，因此输入一共就有一个字节种可能，也就是256种，而对应的，所有可能的(m1,m2)明文对也就有256*256种，因此我们可以根据所有的(m1,m2)，用已知的S盒求出所有的(c1,c2)，从而求出所有明文差分及对应的密文差分，然后建立出一张S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        t[i^j][sbox[i]^sbox[j]] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>那你应该要想到，这种差分对于一个设计良好的S盒来说，要显得很随机，因为S盒的字节代换本身是一个非线性操作，如果随机性不够，那么会让这个S盒有较大的概率暴露线性特征。</p>
<p>这么说可能还是有点抽象，直接列出两种S盒的差分表就直观了，简单打印一下前几行看看：</p>
<p>正常S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>这个题目的S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>能感受到区别了吧，这个题目的S盒的差分表完全就没有任何随机性，明文差分与密文差分完全是固定的！而这个固定的差分就不会受轮密钥加的影响，因此我们完全不需要密钥，把对应密钥的操作剔除掉即可。</p>
<p>也就是说，我们只需要将已知密文与未知密文求差分，然后将这个差分用AES解密(去除轮密钥加)，求出初始的明文差分，然后将这个差分与已知明文再求差分，就能得到未知的明文了。</p>
<p>需要注意的是，由于是对差分进行AES解密，所以用的并不是题目给的S盒，而是由S盒求出的差分S盒。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Rcon = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    text = <span class="built_in">int</span>(text.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2text</span>(<span class="params">matrix</span>):</span><br><span class="line">    text = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text |= (matrix[i][j] &lt;&lt; (<span class="number">120</span> - <span class="number">8</span> * (<span class="number">4</span> * i + j)))</span><br><span class="line">    <span class="keyword">return</span> text.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Sbox</span>):</span><br><span class="line">        self.Sbox = Sbox</span><br><span class="line">        self.InvSbox = [<span class="number">0</span>]* <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            self.InvSbox[self.Sbox[i]] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        self.cipher_state = text2matrix(ciphertext)</span><br><span class="line">        self.__inv_shift_rows(self.cipher_state)</span><br><span class="line">        self.__inv_sub_bytes(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.__round_decrypt(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_decrypt</span>(<span class="params">self, state_matrix</span>):</span><br><span class="line">        self.__inv_mix_columns(state_matrix)</span><br><span class="line">        self.__inv_shift_rows(state_matrix)</span><br><span class="line">        self.__inv_sub_bytes(state_matrix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.InvSbox[s[i][j]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_single_column</span>(<span class="params">self, a</span>):</span><br><span class="line">        t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">        u = a[<span class="number">0</span>]</span><br><span class="line">        a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">        a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">        a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">        a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.__mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">            s[i][<span class="number">0</span>] ^= u</span><br><span class="line">            s[i][<span class="number">1</span>] ^= v</span><br><span class="line">            s[i][<span class="number">2</span>] ^= u</span><br><span class="line">            s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">        self.__mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sbox_diff</span>(<span class="params">sbox</span>):          </span><br><span class="line">    t = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            t[i^j][sbox[i]^sbox[j]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    sbox_diff = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> t[i][j] == <span class="number">256</span>:</span><br><span class="line">                sbox_diff[i] = j</span><br><span class="line">    <span class="keyword">return</span> sbox_diff</span><br><span class="line"></span><br><span class="line">sbox = [<span class="number">105</span>, <span class="number">121</span>, <span class="number">73</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">233</span>, <span class="number">249</span>, <span class="number">201</span>, <span class="number">217</span>, <span class="number">169</span>, <span class="number">185</span>, <span class="number">137</span>, <span class="number">153</span>, <span class="number">104</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">232</span>, <span class="number">248</span>, <span class="number">200</span>, <span class="number">216</span>, <span class="number">168</span>, <span class="number">184</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">107</span>, <span class="number">123</span>, <span class="number">75</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">59</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">235</span>, <span class="number">251</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">171</span>, <span class="number">187</span>, <span class="number">139</span>, <span class="number">155</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">74</span>, <span class="number">90</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">234</span>, <span class="number">250</span>, <span class="number">202</span>, <span class="number">218</span>, <span class="number">170</span>, <span class="number">186</span>, <span class="number">138</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">125</span>, <span class="number">77</span>, <span class="number">93</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">253</span>, <span class="number">205</span>, <span class="number">221</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">141</span>, <span class="number">157</span>, <span class="number">108</span>, <span class="number">124</span>, <span class="number">76</span>, <span class="number">92</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">252</span>, <span class="number">204</span>, <span class="number">220</span>, <span class="number">172</span>, <span class="number">188</span>, <span class="number">140</span>, <span class="number">156</span>, <span class="number">111</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">95</span>, <span class="number">47</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">175</span>, <span class="number">191</span>, <span class="number">143</span>, <span class="number">159</span>, <span class="number">110</span>, <span class="number">126</span>, <span class="number">78</span>, <span class="number">94</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">206</span>, <span class="number">222</span>, <span class="number">174</span>, <span class="number">190</span>, <span class="number">142</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">225</span>, <span class="number">241</span>, <span class="number">193</span>, <span class="number">209</span>, <span class="number">161</span>, <span class="number">177</span>, <span class="number">129</span>, <span class="number">145</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">192</span>, <span class="number">208</span>, <span class="number">160</span>, <span class="number">176</span>, <span class="number">128</span>, <span class="number">144</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">227</span>, <span class="number">243</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">163</span>, <span class="number">179</span>, <span class="number">131</span>, <span class="number">147</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">226</span>, <span class="number">242</span>, <span class="number">194</span>, <span class="number">210</span>, <span class="number">162</span>, <span class="number">178</span>, <span class="number">130</span>, <span class="number">146</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">229</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">181</span>, <span class="number">133</span>, <span class="number">149</span>, <span class="number">100</span>, <span class="number">116</span>, <span class="number">68</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">244</span>, <span class="number">196</span>, <span class="number">212</span>, <span class="number">164</span>, <span class="number">180</span>, <span class="number">132</span>, <span class="number">148</span>, <span class="number">103</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">199</span>, <span class="number">215</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">135</span>, <span class="number">151</span>, <span class="number">102</span>, <span class="number">118</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">230</span>, <span class="number">246</span>, <span class="number">198</span>, <span class="number">214</span>, <span class="number">166</span>, <span class="number">182</span>, <span class="number">134</span>, <span class="number">150</span>]</span><br><span class="line">m = <span class="string">b&quot;I will give you some hint: DASCT&quot;</span></span><br><span class="line">ciphertext = <span class="string">b&quot;&quot;</span> </span><br><span class="line">aes = AES(Sbox=get_sbox_diff(sbox))</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;26ec146dddda72b791585e5ecbc6a947bd6159d4de35df6c7717cd8eca1acd319f07803d8127f41b7ac7cdadc250ec8bb66f3661d772665a1622ffeba82996551463b738a997cd2c7081894fa9a5246c&quot;</span></span><br><span class="line">c1 = long_to_bytes(<span class="built_in">int</span>(c[:<span class="number">64</span>],<span class="number">16</span>))</span><br><span class="line">c2 = long_to_bytes(<span class="built_in">int</span>(c[<span class="number">64</span>:],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DASCT&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c2)//<span class="number">16</span>):</span><br><span class="line">    diff1 = xor(c1[:<span class="number">16</span>],c2[<span class="number">16</span>*i:<span class="number">16</span>*i+<span class="number">16</span>])</span><br><span class="line">    temp1 = aes.decrypt(diff1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(xor(temp1,m[:<span class="number">16</span>]))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;de423c9aa5df7e683bd4b08bbca2a3409c018867&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="aes"><a href="#aes" class="headerlink" title="aes"></a>aes</h3><p>题目来源：EIS 2019</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg, key</span>):</span><br><span class="line">    ctr = Counter.new(<span class="number">128</span>,  initial_value=<span class="built_in">sum</span>(msg))</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CTR, counter=ctr)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    signal.alarm(<span class="number">60</span>)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/ctf/flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read()</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">30</span></span><br><span class="line">    enc_flag = enc(flag, key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the our AES encryption system!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Here is your encrypted flag: <span class="subst">&#123;enc_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Please input your plaintext: &quot;</span>)</span><br><span class="line">            plaintext = <span class="built_in">bytes</span>.fromhex(plaintext)</span><br><span class="line">            ciphertext = enc(plaintext, key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Here is your ciphertext: <span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error!&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye~&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>靶机提供了如下操作：</p>
<ul>
<li>连接上靶机后，开始计时60s</li>
<li>随机生成十六字节作为AES密钥</li>
<li>使用AES_CTR模式对flag进行加密，其中Counter由flag的所有字节和生成，并给出flag的加密值</li>
<li>可以与服务器进行三十次交互，每一次交互中，可以输入一段明文，并获得其AES_CTR模式的加密值，对应Counter仍然由输入明文的字节和产生</li>
</ul>
<p>首先就注意到用了一个平时不怎么见的AES_CTR模式，那么问题肯定也出在这里，先了解一波CTR模式是什么：</p>
<p><a href="https://wumansgy.github.io/2018/11/03/AES的CTR模式加密解密详解/">AES的CTR模式加密解密详解 | Wuman’s Blog (wumansgy.github.io)</a></p>
<p>其核心如下：</p>
<p><img src="/post/a5bd8c0d/image-20231019210651725.png" alt="image-20231019210651725"></p>
<p>可以看到，他的AES加密是作用于Counter而非明文。也就是说，其加密流程是将被AES加密的Counter与明文异或得到密文。</p>
<p>而这道题显然提供了Counter的额外信息，也就是其initial_value是传入明文的字节和。而flag固定为30个字节，因此其和只有256*30种可能性，完全可以爆破。而当我们取的明文值字节和正好等于flag的字节和时，其AES加密的结果相同，因此有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = flag_enc ^ input ^ input_enc</span><br></pre></td></tr></table></figure>
<p>至于限时60s以及限30次，完全不重要，因为可以反复连接靶机而flag不会变。当然注意输入明文长度应与flag一致，均为30。</p>
<p>然而，在NSS上复现本题时，爆破完所有范围依然没有结果，此时打印出传回的flag_enc，发现是45字节，说明题目改动了flag与容器镜像的附件，但是下发的附件忘记改了，因此需要扩大范围至256*45。并且由于改动过flag，那么flag头应该考虑”NSSCTF”。同时，考虑到flag均为可见字符，因此复现时还可以进一步缩小一点范围。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> trange(<span class="number">256</span>//<span class="number">2</span>*<span class="number">3</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28353</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;flag:&quot;</span>)</span><br><span class="line">    flag_enc = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;plaintext: &quot;</span>)</span><br><span class="line">        num = <span class="number">30</span> * count + i</span><br><span class="line">        input1 = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">255</span>):</span><br><span class="line">            num -= <span class="number">255</span></span><br><span class="line">            input1 += <span class="string">b&quot;\xff&quot;</span></span><br><span class="line">        input1 += long_to_bytes(num)</span><br><span class="line">        pad = (<span class="number">45</span>-<span class="built_in">len</span>(input1))*<span class="string">b&quot;\x00&quot;</span></span><br><span class="line">        input1 += pad           </span><br><span class="line">        r.sendline(input1.<span class="built_in">hex</span>())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;ciphertext:&quot;</span>)</span><br><span class="line">        input_c = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line">        flag = long_to_bytes(bytes_to_long(input_c) ^ bytes_to_long(flag_enc) ^ bytes_to_long(input1))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;NSSCTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;b93abc9b-7972-4c46-b13f-5eed06787edc&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-后量子密码</title>
    <url>/post/65473b07.html</url>
    <content><![CDATA[<p>该文章主要记录一些后量子密码相关的趣题</p>
<span id="more"></span>
<h3 id="sound"><a href="#sound" class="headerlink" title="sound"></a>sound</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secert import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params"><span class="built_in">len</span>, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  s = r2_distribution(<span class="built_in">len</span>)</span><br><span class="line">  a = rz_distribution(z, <span class="built_in">len</span>)</span><br><span class="line">  e = gass_distribution(<span class="built_in">len</span>)</span><br><span class="line">  b = poly_add(poly_mul(-a, s, z, poly_mod), -e, z, poly_mod)</span><br><span class="line"></span><br><span class="line">  key = [a, b, s]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, lent, q, t, poly_mod, message</span>):</span><br><span class="line">    lm = []</span><br><span class="line">    mg = <span class="built_in">hex</span>(message)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mg)):</span><br><span class="line">        lm.append(<span class="built_in">ord</span>(mg[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(lm + [<span class="number">0</span>] * (lent - <span class="built_in">len</span>(lm)), dtype=np.int64) % t</span><br><span class="line">    delta = q // t</span><br><span class="line">    delta_m = delta * m % q</span><br><span class="line">    e1 = gass_distribution(lent)</span><br><span class="line">    e2 = gass_distribution(lent)</span><br><span class="line">    u = r2_distribution(lent)</span><br><span class="line">    a = key[<span class="number">0</span>]</span><br><span class="line">    b = key[<span class="number">1</span>]</span><br><span class="line">    c0 = poly_add(poly_add(poly_mul(b, u, q, poly_mod), e1, q, poly_mod), delta_m, q, poly_mod)</span><br><span class="line">    c1 = poly_add(poly_mul(a, u, q, poly_mod), e2, q, poly_mod)</span><br><span class="line"></span><br><span class="line">    c = [c0, c1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">q = <span class="number">2</span>**<span class="number">60</span></span><br><span class="line">t = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">poly_mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line">key = keygen(n, q, poly_mod)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># m = bytes_to_long(&quot;test&quot;)</span></span><br><span class="line"><span class="comment"># c = encrypt(key, n, q, t, poly_mod, m)</span></span><br><span class="line"><span class="comment"># print(&quot;c0 =&quot;, c[0].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;c1 =&quot;, c[1].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;a =&quot;, key[0].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;b =&quot;, key[1].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;s =&quot;, key[2].tolist())</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c0 = [561582066946621440, 817928620285456128, 42443557674760704, 394102843794633984, 72227332717773568, 670192568490572288, 1124338053013283584, 280137744525874176, 63888555088669696, 208355146401743872, 301595565562120704, 50991331858064384, 686628375362950656, 584548366308243456, 1133668516727752192, 474240047688777728, 985154171217232384, 501564712591768576, 914588095025884160, 746830802337096704, 459209143204393984, 603634479787543552, 69069089375354880, 473248420863702016, 754603248638489600, 883576336602057728, 644743636485886976, 319901457654988800, 89793303522564096, 1090071466212856832, 369690536666460160, 1082593341867948032, 441359938321465344, 496386518207440896, 863575421687413760, 811516483959451648, 205996965699836928, 170811895655694336, 335832012272743424, 402108133996681216, 222897130593269760, 317187616437233664, 202919598933315584, 750395341955145728, 366873741733378048, 117730747288055808, 298767968401977344, 923270470424109056, 1076698083295752192, 926422812303050752, 216450081157644288, 981499274968659968, 349655761329862656, 557140442005530624, 858566688669024256, 1149813151825131520, 553370166035001344, 493722732465334272, 732590954557634560, 1052906163890288640, 1021790009160361984, 796011853108049920, 978483522580508672, 894955797433884672, 203559391733489664, 1062410754780596224, 452371485913219072, 651736133029277696, 313976115776903168, 31756099628290048, 71787963926824960, 1109713454413903872, 1112298691994664960, 539132530906077184, 435437107964127232, 833705546252720128, 928849583016886272, 526205130688186368, 1121288102191632384, 536933088453670912, 924962525849556992, 241106313851269120, 717238131918897152, 452642326250387456, 354673268076457984, 16428317258336256, 1061713751710105600, 1139952509444370432, 146561032291504128, 944139817563172864, 670119880592367616, 424458702156075008, 26734611035709440, 552311974354061312, 252009367779129344, 362515232289822720, 942674829586386944, 444916638598115328, 931633333648844800, 54609902697099264, 831316650858829824, 113431421994166272, 907245098202316800, 89326594807300096, 1016570475364521984, 175954756550047744, 53317212366995456, 49595714294925312, 490302383520435200, 260454924258463744, 713597063793843200, 759813046691484672, 491213271622251520, 861532845783883776, 1001029896578621440, 1017093991719427072, 901303193624896512, 85708980918313472, 1094723859831225856, 978173121944355840, 1074912611780537344, 816683396743236608, 406912122093641728, 326181480111288320, 644075764054597632, 114416502291357696, 543109737210728448, 311623753071517696]</span></span><br><span class="line"><span class="string">c1 = [91790686412574976, 744110810763883904, 864964412801026560, 548689841412167296, 740051294265845504, 57902427994320256, 1068935585666797056, 625707146907438848, 551559740589006848, 233440834921673728, 108552546335437312, 166310503165480448, 267060328550531584, 735758245725702656, 712188529675013632, 386374530222726144, 823764165634433536, 123823217368593408, 1004488834478358528, 177477850679225344, 882498511506926592, 5562190320664577, 1106414131124581376, 327516552070835200, 1028475201394497536, 847983498883162112, 1095687065391010816, 706624008349679616, 204676471898160128, 926864853752850432, 152748692869394432, 326128165710331904, 237842086203092992, 1057799799477599232, 345130623233955840, 790672249565697024, 523310000234446848, 840615312867051520, 924979087214993408, 979878291879419904, 115424422845719552, 884924921252442112, 579700963339163648, 1097673093701288960, 704450636638808064, 556078232166107136, 600772693891751936, 905676852758437888, 33621101477464064, 962348719049031680, 925511116990984192, 722520866171662336, 84706802559584256, 530104859095961600, 586276707214465024, 1037552671549552640, 47697269444673536, 210690498450145280, 65070464261654528, 550494166683250688, 777902097764929536, 490832146778818560, 229195607527737344, 767464696299196416, 237315984854040576, 836604288237121536, 507968614131243008, 1146549269233274880, 947811005289312256, 415029326696218624, 73794452197351424, 1111805188636655616, 574425125131241472, 1077883538301097984, 1093417286225403904, 860646266870226944, 238318354083344384, 200921121541777408, 896691473408880640, 794971973394204672, 128454122568243200, 1048391326124871680, 811035464481740800, 922934079239356416, 1033337101914234880, 253445566297591808, 820899412762693632, 51737950452322304, 115554283493984256, 1013231171511318528, 887144973891745792, 903483706965391360, 1100501053366775808, 691065365527990272, 265415356256839680, 969461346065672192, 719496129535698944, 177295085227089920, 860427351595780096, 125812051803891712, 852658796584968192, 487770283774704640, 1070758201904617472, 696983558330196992, 911281563710520320, 676402547272127488, 240686574930634752, 412323376183429120, 619325898981327872, 551028995171842048, 124379235049986048, 649110127901071360, 453922531021119488, 1022481642604582912, 637680606991188992, 51749356430436352, 388350126415356928, 335267552976254464, 960188628024263168, 1088514924986558976, 1094423617550431488, 451833526251570688, 870461009339176704, 697351158038040832, 536089791190207360, 1118146398557536256, 518612046112251904, 241398597936840704]</span></span><br><span class="line"><span class="string">a = [219983724512243970, 752269838678521187, 480509403910281428, 133185208045420765, 490932722804543133, 372886136396692359, 354557330633882122, 678374399146208018, 960245804475102275, 806115518790255556, 828442613098615970, 544833163224524043, 101022959319030935, 117082421755238805, 461182355875216799, 1056119810024896502, 1082000166040876591, 738717114032361767, 578460771662302172, 21556920074594644, 708384954866463679, 1128876901552996333, 874708202228666633, 1092990784029535155, 705415640472089353, 29671570923717836, 386333436179138094, 279081567858606603, 358852578576320987, 847350768179480795, 817603347707592640, 378977756047386392, 201769345485693076, 1063632060034171765, 1015775208741323787, 365127265851837110, 895275437758090601, 901913451551062231, 86419657119953320, 1149882820426142461, 157964525788076127, 631235061398583563, 470949966047613817, 180994349394944987, 228238609714444899, 73624200469844200, 521149905985689963, 19697681380014322, 233461826565515880, 891353264527116993, 1132362343348330909, 719302772676639611, 816690530086729127, 612858319654028202, 1029240232500231324, 266903296429217560, 66793172770160368, 836559325488504608, 1112595888239841739, 1115401337078198049, 261716078450833148, 235662011088480216, 24855917687216082, 619578281956001818, 589359800577838713, 780827177034370452, 62331996978291742, 757201723755709445, 325754948905836705, 298782045417610682, 958766007892311371, 474147826024027639, 1070490722277174646, 190459580153148093, 575005416421018885, 1120664053122918701, 982594533717886793, 252358471190638150, 869750160966337040, 1014322228871199234, 665558545558521628, 105433885394318337, 377027901347400638, 858616841227650075, 1043520529148794434, 1011002490399424434, 207664442877510988, 871194434207030706, 43210520355326250, 602232789264907632, 474051046305769969, 184712552380050689, 795080413713622552, 69957213032924047, 528473007846250043, 169221743016746138, 455880753546244419, 329225658406843642, 1150659098485422471, 626876298585651008, 490793379497608670, 933534706184661647, 467052917787037730, 1075596724935302342, 633000416730524162, 1090163205445120705, 72568659182243843, 571233962016655997, 1038522694640247261, 1025630622605696194, 553753007953333627, 231471906689387866, 558788723869154294, 673804202648107772, 232283327890481849, 39742925179368561, 135909458983766175, 192124298319965985, 839263496419016075, 162231894553173376, 661693215639557019, 655784289160683355, 1062416543453873451, 319938129595811007, 1002025365666496902, 272017768612866462, 482130564327357100, 982163056351966292]</span></span><br><span class="line"><span class="string">b = [820893636450185216, 1088723008695521024, 563505788571372160, 225792174390707712, 531991982654429312, 676436714054308864, 74314379213871872, 78960436919170688, 744901196366641920, 556510129527018752, 71967857250009600, 714820946954724352, 1047939442957058048, 475133098260006400, 764020773208596992, 495337689359947776, 969475874903125504, 132719289181729792, 301591784012423168, 886113347782835200, 477381121894258688, 843499387721308160, 508541992967101440, 135898603458110464, 373248303372987392, 696522694584843264, 22397882759483392, 867189773938512896, 231922357411858432, 452886634658905088, 337138259452950528, 246330467020038144, 336880752906045440, 712110254503864320, 1109022090563764224, 736941976050098176, 340820746543463424, 319152585759258624, 627473838419951616, 724549720670470144, 941976447076147200, 284306369459089408, 474986938990024704, 169392264058798080, 425082943668336640, 780502226419180544, 534812953559536640, 307991466712799232, 256772641512932352, 954565062645100544, 642433129475169280, 554579429440409600, 492586567437330432, 504243514518411264, 559583345168955392, 1047970717391220736, 354007966625097728, 944087368508420096, 48593600443238400, 412546108591775744, 371798716943661056, 109603610083078144, 912962403831732224, 493593202496430080, 435411737100828672, 416258656632209408, 41271759105748992, 547450588221173760, 1019985813100816384, 1133270880179824640, 416184705628168192, 1002938666972422144, 131467088438026240, 730507494540156928, 1122116292811296768, 179931222600130560, 704668788433995776, 693568343631073280, 159315312318967808, 228151058164389888, 78591434106697728, 1101441417145767936, 1011500470535821312, 103335769958184960, 723984495516817408, 421553904096403456, 1009636649059076096, 880471059436941312, 1017699541008359424, 880891531629418496, 1001214838765556736, 584549630850997248, 63724037422592000, 984435711617449984, 737723590588489728, 235901319105159168, 867142310717528064, 62598429756019712, 135623731618318336, 103508320292760576, 714343001741491200, 384031562306680832, 620521749068774400, 562199194838183936, 137440949282672640, 105902179785320448, 76984505248291840, 81968680790070272, 932887350172256256, 162426306785337344, 248707672736583680, 338911851801801216, 664174993098860032, 590418449833950720, 668934689108922112, 1050363471682760704, 627510981430159872, 157201265188110848, 332191804534742528, 610005938211220480, 789419961205813248, 350516436368000512, 135054071035246848, 1103634020293607168, 851221988945015936, 339941701245870080, 810615510791110656, 1139102409849577472]</span></span><br><span class="line"><span class="string">s = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目给的函数有点多，先理清每个函数具体作用是什么：</p>
<h4 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h4><h5 id="poly-mul"><a href="#poly-mul" class="headerlink" title="poly_mul"></a>poly_mul</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br></pre></td></tr></table></figure>
<p>输入：</p>
<ul>
<li>x、y：多项式系数列表</li>
<li>z：模数</li>
<li>poly_mod：模多项式系数列表</li>
</ul>
<p>具体来说，该函数实现x、y多项式相乘后，每项系数模z，再将整个多项式模poly_mod。</p>
<h5 id="poly-add"><a href="#poly-add" class="headerlink" title="poly_add"></a>poly_add</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br></pre></td></tr></table></figure>
<p>这个函数的输入参数列表与poly_add完全一样，它实现的是x、y多项式相加后，每项系数模z，再将整个多项式模poly_mod。</p>
<h5 id="r2-distribution"><a href="#r2-distribution" class="headerlink" title="r2_distribution"></a>r2_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br></pre></td></tr></table></figure>
<p>该函数生成一个长度为len，元素为0或1的随机数列表</p>
<h5 id="rz-distribution"><a href="#rz-distribution" class="headerlink" title="rz_distribution"></a>rz_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br></pre></td></tr></table></figure>
<p>该函数生成一个长度为len，元素为0-z之间的随机数列表</p>
<h5 id="gass-distribution"><a href="#gass-distribution" class="headerlink" title="gass_distribution"></a>gass_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br></pre></td></tr></table></figure>
<p>该函数返回一个长度为len，随机数从给定正态分布中抽取的列表，各个参数意义详见：</p>
<p><a href="https://blog.csdn.net/wzy628810/article/details/103807829">numpy.random.normal详解-CSDN博客</a></p>
<p>自己测试一下就可以知道，其实可以认为他就是一个小噪声：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">length = <span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(gass_distribution(length))</span><br><span class="line"></span><br><span class="line">[-<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">4</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span> -<span class="number">2</span>  <span class="number">3</span> -<span class="number">1</span>  <span class="number">3</span> -<span class="number">4</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">3</span> -<span class="number">3</span>  <span class="number">2</span>  <span class="number">2</span>  <span class="number">0</span> -<span class="number">4</span> <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span> -<span class="number">3</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span> -<span class="number">2</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">2</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">4</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span> <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">3</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">3</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">2</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">1</span> <span class="number">2</span>  <span class="number">0</span>  <span class="number">3</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>以上就是五个加密需要用到的基本函数，总结一下，其实他就是定义了一个多项式的商环，运算也均在这个商环上进行。而这些随机生成的列表，也就可以看作是这个商环上的多项式系数列表，这个商环如下：</p>
<script type="math/tex; mode=display">
F_q[x]=Z_q[x]/f(x)</script><p>其中，f(x)就是题目中的poly_mod，Zq[x]指模q下的多项式环。</p>
<p>那么从这里开始，本文后续的多项式运算都定义在该商环上。</p>
<p>再看keygen函数，就可以知道几个多项式的关系：</p>
<script type="math/tex; mode=display">
b(x) = -s(x)a(x) - e(x)</script><p>其中，s的系数均为0或1，e的系数为一个正态分布的小噪声，而a、b的系数则应该是由较大的数构成的。</p>
<p>然后对于encrypt函数，其加密流程如下：</p>
<ul>
<li>把flag转为十六进制字符串，然后把每个十六进制字符转为ASCII码，然后在后面填充足够的0使得m也是一个同长度的多项式系数列表(这些东西自己生成数据测试一下就明白了)</li>
<li>定义一个较大的数delta，题目中是2^28，然后将m的多项式系数乘delta。这里就可以想到，对于m来说，只有前面非0的部分乘上了delta而显著变大，后面的填充0是不变的</li>
<li>生成两个满足正态分布的小噪声e1、e2，再生成一个系数均为0或1的随机临时密钥u，计算下面两个多项式作为密文并返回(其中dm表示乘上了delta的m系数列表)：</li>
</ul>
<script type="math/tex; mode=display">
c_0(x) = b(x)u(x) + e_1(x) + dm(x)</script><script type="math/tex; mode=display">
c_1(x) = a(x)u(x) + e_2(x)</script><p>那么加密流程就分析完了，接下来进入解密。</p>
<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>其实见过的话，差不多就能反应过来这其实是RLWE加密，而题目实现的其实就是RLWE的标准加密过程，具体可以参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/348311060">格密码之Ring-LWE (section 1) - 知乎 (zhihu.com)</a></p>
<p>了解了加解密流程的话，会发现其实这个题目已经给好了我们私钥s，而有了私钥s我们就可以用如下方式解密(为了表示方便，多项式后面就不写(x)了)：</p>
<p>由于有：</p>
<script type="math/tex; mode=display">
b = -as+e</script><p>所以：</p>
<script type="math/tex; mode=display">
bu = -asu + eu</script><script type="math/tex; mode=display">
c_0 + s*c_1 = (bu+e_1+dm) + s(au+e_2) = -asu + eu +e_1 +dm+asu +se_2 = dm +(eu+e_1+se_2)</script><p>也就是：</p>
<script type="math/tex; mode=display">
c_0 + s*c_1 = dm +(eu+e_1+se_2)</script><p>可以发现，后面的(eu+e1+se2)仍然是个小噪声，因此我们直接对(c0 + s*c1)模delta，就能得到m。然后有一点需要注意，噪声(eu+e1+se2)可能有负值，而为负值的时候，模delta会导致最终结果小1，需要对应添加回去。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secert import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params"><span class="built_in">len</span>, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  s = r2_distribution(<span class="built_in">len</span>)</span><br><span class="line">  a = rz_distribution(z, <span class="built_in">len</span>)</span><br><span class="line">  e = gass_distribution(<span class="built_in">len</span>)</span><br><span class="line">  b = poly_add(poly_mul(-a, s, z, poly_mod), -e, z, poly_mod)</span><br><span class="line"></span><br><span class="line">  key = [a, b, s]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, lent, q, t, poly_mod, message</span>):</span><br><span class="line">    lm = []</span><br><span class="line">    mg = <span class="built_in">hex</span>(message)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mg)):</span><br><span class="line">        lm.append(<span class="built_in">ord</span>(mg[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(lm + [<span class="number">0</span>] * (lent - <span class="built_in">len</span>(lm)), dtype=np.int64) % t</span><br><span class="line">    delta = q // t</span><br><span class="line">    delta_m = delta * m % q</span><br><span class="line">    e1 = gass_distribution(lent)</span><br><span class="line">    e2 = gass_distribution(lent)</span><br><span class="line">    u = r2_distribution(lent)</span><br><span class="line">    a = key[<span class="number">0</span>]</span><br><span class="line">    b = key[<span class="number">1</span>]</span><br><span class="line">    c0 = poly_add(poly_add(poly_mul(b, u, q, poly_mod), e1, q, poly_mod), delta_m, q, poly_mod)</span><br><span class="line">    c1 = poly_add(poly_mul(a, u, q, poly_mod), e2, q, poly_mod)</span><br><span class="line"></span><br><span class="line">    c = [c0, c1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">q = <span class="number">2</span>**<span class="number">60</span></span><br><span class="line">t = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">poly_mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c0 = [<span class="number">561582066946621440</span>, <span class="number">817928620285456128</span>, <span class="number">42443557674760704</span>, <span class="number">394102843794633984</span>, <span class="number">72227332717773568</span>, <span class="number">670192568490572288</span>, <span class="number">1124338053013283584</span>, <span class="number">280137744525874176</span>, <span class="number">63888555088669696</span>, <span class="number">208355146401743872</span>, <span class="number">301595565562120704</span>, <span class="number">50991331858064384</span>, <span class="number">686628375362950656</span>, <span class="number">584548366308243456</span>, <span class="number">1133668516727752192</span>, <span class="number">474240047688777728</span>, <span class="number">985154171217232384</span>, <span class="number">501564712591768576</span>, <span class="number">914588095025884160</span>, <span class="number">746830802337096704</span>, <span class="number">459209143204393984</span>, <span class="number">603634479787543552</span>, <span class="number">69069089375354880</span>, <span class="number">473248420863702016</span>, <span class="number">754603248638489600</span>, <span class="number">883576336602057728</span>, <span class="number">644743636485886976</span>, <span class="number">319901457654988800</span>, <span class="number">89793303522564096</span>, <span class="number">1090071466212856832</span>, <span class="number">369690536666460160</span>, <span class="number">1082593341867948032</span>, <span class="number">441359938321465344</span>, <span class="number">496386518207440896</span>, <span class="number">863575421687413760</span>, <span class="number">811516483959451648</span>, <span class="number">205996965699836928</span>, <span class="number">170811895655694336</span>, <span class="number">335832012272743424</span>, <span class="number">402108133996681216</span>, <span class="number">222897130593269760</span>, <span class="number">317187616437233664</span>, <span class="number">202919598933315584</span>, <span class="number">750395341955145728</span>, <span class="number">366873741733378048</span>, <span class="number">117730747288055808</span>, <span class="number">298767968401977344</span>, <span class="number">923270470424109056</span>, <span class="number">1076698083295752192</span>, <span class="number">926422812303050752</span>, <span class="number">216450081157644288</span>, <span class="number">981499274968659968</span>, <span class="number">349655761329862656</span>, <span class="number">557140442005530624</span>, <span class="number">858566688669024256</span>, <span class="number">1149813151825131520</span>, <span class="number">553370166035001344</span>, <span class="number">493722732465334272</span>, <span class="number">732590954557634560</span>, <span class="number">1052906163890288640</span>, <span class="number">1021790009160361984</span>, <span class="number">796011853108049920</span>, <span class="number">978483522580508672</span>, <span class="number">894955797433884672</span>, <span class="number">203559391733489664</span>, <span class="number">1062410754780596224</span>, <span class="number">452371485913219072</span>, <span class="number">651736133029277696</span>, <span class="number">313976115776903168</span>, <span class="number">31756099628290048</span>, <span class="number">71787963926824960</span>, <span class="number">1109713454413903872</span>, <span class="number">1112298691994664960</span>, <span class="number">539132530906077184</span>, <span class="number">435437107964127232</span>, <span class="number">833705546252720128</span>, <span class="number">928849583016886272</span>, <span class="number">526205130688186368</span>, <span class="number">1121288102191632384</span>, <span class="number">536933088453670912</span>, <span class="number">924962525849556992</span>, <span class="number">241106313851269120</span>, <span class="number">717238131918897152</span>, <span class="number">452642326250387456</span>, <span class="number">354673268076457984</span>, <span class="number">16428317258336256</span>, <span class="number">1061713751710105600</span>, <span class="number">1139952509444370432</span>, <span class="number">146561032291504128</span>, <span class="number">944139817563172864</span>, <span class="number">670119880592367616</span>, <span class="number">424458702156075008</span>, <span class="number">26734611035709440</span>, <span class="number">552311974354061312</span>, <span class="number">252009367779129344</span>, <span class="number">362515232289822720</span>, <span class="number">942674829586386944</span>, <span class="number">444916638598115328</span>, <span class="number">931633333648844800</span>, <span class="number">54609902697099264</span>, <span class="number">831316650858829824</span>, <span class="number">113431421994166272</span>, <span class="number">907245098202316800</span>, <span class="number">89326594807300096</span>, <span class="number">1016570475364521984</span>, <span class="number">175954756550047744</span>, <span class="number">53317212366995456</span>, <span class="number">49595714294925312</span>, <span class="number">490302383520435200</span>, <span class="number">260454924258463744</span>, <span class="number">713597063793843200</span>, <span class="number">759813046691484672</span>, <span class="number">491213271622251520</span>, <span class="number">861532845783883776</span>, <span class="number">1001029896578621440</span>, <span class="number">1017093991719427072</span>, <span class="number">901303193624896512</span>, <span class="number">85708980918313472</span>, <span class="number">1094723859831225856</span>, <span class="number">978173121944355840</span>, <span class="number">1074912611780537344</span>, <span class="number">816683396743236608</span>, <span class="number">406912122093641728</span>, <span class="number">326181480111288320</span>, <span class="number">644075764054597632</span>, <span class="number">114416502291357696</span>, <span class="number">543109737210728448</span>, <span class="number">311623753071517696</span>]</span><br><span class="line">c1 = [<span class="number">91790686412574976</span>, <span class="number">744110810763883904</span>, <span class="number">864964412801026560</span>, <span class="number">548689841412167296</span>, <span class="number">740051294265845504</span>, <span class="number">57902427994320256</span>, <span class="number">1068935585666797056</span>, <span class="number">625707146907438848</span>, <span class="number">551559740589006848</span>, <span class="number">233440834921673728</span>, <span class="number">108552546335437312</span>, <span class="number">166310503165480448</span>, <span class="number">267060328550531584</span>, <span class="number">735758245725702656</span>, <span class="number">712188529675013632</span>, <span class="number">386374530222726144</span>, <span class="number">823764165634433536</span>, <span class="number">123823217368593408</span>, <span class="number">1004488834478358528</span>, <span class="number">177477850679225344</span>, <span class="number">882498511506926592</span>, <span class="number">5562190320664577</span>, <span class="number">1106414131124581376</span>, <span class="number">327516552070835200</span>, <span class="number">1028475201394497536</span>, <span class="number">847983498883162112</span>, <span class="number">1095687065391010816</span>, <span class="number">706624008349679616</span>, <span class="number">204676471898160128</span>, <span class="number">926864853752850432</span>, <span class="number">152748692869394432</span>, <span class="number">326128165710331904</span>, <span class="number">237842086203092992</span>, <span class="number">1057799799477599232</span>, <span class="number">345130623233955840</span>, <span class="number">790672249565697024</span>, <span class="number">523310000234446848</span>, <span class="number">840615312867051520</span>, <span class="number">924979087214993408</span>, <span class="number">979878291879419904</span>, <span class="number">115424422845719552</span>, <span class="number">884924921252442112</span>, <span class="number">579700963339163648</span>, <span class="number">1097673093701288960</span>, <span class="number">704450636638808064</span>, <span class="number">556078232166107136</span>, <span class="number">600772693891751936</span>, <span class="number">905676852758437888</span>, <span class="number">33621101477464064</span>, <span class="number">962348719049031680</span>, <span class="number">925511116990984192</span>, <span class="number">722520866171662336</span>, <span class="number">84706802559584256</span>, <span class="number">530104859095961600</span>, <span class="number">586276707214465024</span>, <span class="number">1037552671549552640</span>, <span class="number">47697269444673536</span>, <span class="number">210690498450145280</span>, <span class="number">65070464261654528</span>, <span class="number">550494166683250688</span>, <span class="number">777902097764929536</span>, <span class="number">490832146778818560</span>, <span class="number">229195607527737344</span>, <span class="number">767464696299196416</span>, <span class="number">237315984854040576</span>, <span class="number">836604288237121536</span>, <span class="number">507968614131243008</span>, <span class="number">1146549269233274880</span>, <span class="number">947811005289312256</span>, <span class="number">415029326696218624</span>, <span class="number">73794452197351424</span>, <span class="number">1111805188636655616</span>, <span class="number">574425125131241472</span>, <span class="number">1077883538301097984</span>, <span class="number">1093417286225403904</span>, <span class="number">860646266870226944</span>, <span class="number">238318354083344384</span>, <span class="number">200921121541777408</span>, <span class="number">896691473408880640</span>, <span class="number">794971973394204672</span>, <span class="number">128454122568243200</span>, <span class="number">1048391326124871680</span>, <span class="number">811035464481740800</span>, <span class="number">922934079239356416</span>, <span class="number">1033337101914234880</span>, <span class="number">253445566297591808</span>, <span class="number">820899412762693632</span>, <span class="number">51737950452322304</span>, <span class="number">115554283493984256</span>, <span class="number">1013231171511318528</span>, <span class="number">887144973891745792</span>, <span class="number">903483706965391360</span>, <span class="number">1100501053366775808</span>, <span class="number">691065365527990272</span>, <span class="number">265415356256839680</span>, <span class="number">969461346065672192</span>, <span class="number">719496129535698944</span>, <span class="number">177295085227089920</span>, <span class="number">860427351595780096</span>, <span class="number">125812051803891712</span>, <span class="number">852658796584968192</span>, <span class="number">487770283774704640</span>, <span class="number">1070758201904617472</span>, <span class="number">696983558330196992</span>, <span class="number">911281563710520320</span>, <span class="number">676402547272127488</span>, <span class="number">240686574930634752</span>, <span class="number">412323376183429120</span>, <span class="number">619325898981327872</span>, <span class="number">551028995171842048</span>, <span class="number">124379235049986048</span>, <span class="number">649110127901071360</span>, <span class="number">453922531021119488</span>, <span class="number">1022481642604582912</span>, <span class="number">637680606991188992</span>, <span class="number">51749356430436352</span>, <span class="number">388350126415356928</span>, <span class="number">335267552976254464</span>, <span class="number">960188628024263168</span>, <span class="number">1088514924986558976</span>, <span class="number">1094423617550431488</span>, <span class="number">451833526251570688</span>, <span class="number">870461009339176704</span>, <span class="number">697351158038040832</span>, <span class="number">536089791190207360</span>, <span class="number">1118146398557536256</span>, <span class="number">518612046112251904</span>, <span class="number">241398597936840704</span>]</span><br><span class="line">a = [<span class="number">219983724512243970</span>, <span class="number">752269838678521187</span>, <span class="number">480509403910281428</span>, <span class="number">133185208045420765</span>, <span class="number">490932722804543133</span>, <span class="number">372886136396692359</span>, <span class="number">354557330633882122</span>, <span class="number">678374399146208018</span>, <span class="number">960245804475102275</span>, <span class="number">806115518790255556</span>, <span class="number">828442613098615970</span>, <span class="number">544833163224524043</span>, <span class="number">101022959319030935</span>, <span class="number">117082421755238805</span>, <span class="number">461182355875216799</span>, <span class="number">1056119810024896502</span>, <span class="number">1082000166040876591</span>, <span class="number">738717114032361767</span>, <span class="number">578460771662302172</span>, <span class="number">21556920074594644</span>, <span class="number">708384954866463679</span>, <span class="number">1128876901552996333</span>, <span class="number">874708202228666633</span>, <span class="number">1092990784029535155</span>, <span class="number">705415640472089353</span>, <span class="number">29671570923717836</span>, <span class="number">386333436179138094</span>, <span class="number">279081567858606603</span>, <span class="number">358852578576320987</span>, <span class="number">847350768179480795</span>, <span class="number">817603347707592640</span>, <span class="number">378977756047386392</span>, <span class="number">201769345485693076</span>, <span class="number">1063632060034171765</span>, <span class="number">1015775208741323787</span>, <span class="number">365127265851837110</span>, <span class="number">895275437758090601</span>, <span class="number">901913451551062231</span>, <span class="number">86419657119953320</span>, <span class="number">1149882820426142461</span>, <span class="number">157964525788076127</span>, <span class="number">631235061398583563</span>, <span class="number">470949966047613817</span>, <span class="number">180994349394944987</span>, <span class="number">228238609714444899</span>, <span class="number">73624200469844200</span>, <span class="number">521149905985689963</span>, <span class="number">19697681380014322</span>, <span class="number">233461826565515880</span>, <span class="number">891353264527116993</span>, <span class="number">1132362343348330909</span>, <span class="number">719302772676639611</span>, <span class="number">816690530086729127</span>, <span class="number">612858319654028202</span>, <span class="number">1029240232500231324</span>, <span class="number">266903296429217560</span>, <span class="number">66793172770160368</span>, <span class="number">836559325488504608</span>, <span class="number">1112595888239841739</span>, <span class="number">1115401337078198049</span>, <span class="number">261716078450833148</span>, <span class="number">235662011088480216</span>, <span class="number">24855917687216082</span>, <span class="number">619578281956001818</span>, <span class="number">589359800577838713</span>, <span class="number">780827177034370452</span>, <span class="number">62331996978291742</span>, <span class="number">757201723755709445</span>, <span class="number">325754948905836705</span>, <span class="number">298782045417610682</span>, <span class="number">958766007892311371</span>, <span class="number">474147826024027639</span>, <span class="number">1070490722277174646</span>, <span class="number">190459580153148093</span>, <span class="number">575005416421018885</span>, <span class="number">1120664053122918701</span>, <span class="number">982594533717886793</span>, <span class="number">252358471190638150</span>, <span class="number">869750160966337040</span>, <span class="number">1014322228871199234</span>, <span class="number">665558545558521628</span>, <span class="number">105433885394318337</span>, <span class="number">377027901347400638</span>, <span class="number">858616841227650075</span>, <span class="number">1043520529148794434</span>, <span class="number">1011002490399424434</span>, <span class="number">207664442877510988</span>, <span class="number">871194434207030706</span>, <span class="number">43210520355326250</span>, <span class="number">602232789264907632</span>, <span class="number">474051046305769969</span>, <span class="number">184712552380050689</span>, <span class="number">795080413713622552</span>, <span class="number">69957213032924047</span>, <span class="number">528473007846250043</span>, <span class="number">169221743016746138</span>, <span class="number">455880753546244419</span>, <span class="number">329225658406843642</span>, <span class="number">1150659098485422471</span>, <span class="number">626876298585651008</span>, <span class="number">490793379497608670</span>, <span class="number">933534706184661647</span>, <span class="number">467052917787037730</span>, <span class="number">1075596724935302342</span>, <span class="number">633000416730524162</span>, <span class="number">1090163205445120705</span>, <span class="number">72568659182243843</span>, <span class="number">571233962016655997</span>, <span class="number">1038522694640247261</span>, <span class="number">1025630622605696194</span>, <span class="number">553753007953333627</span>, <span class="number">231471906689387866</span>, <span class="number">558788723869154294</span>, <span class="number">673804202648107772</span>, <span class="number">232283327890481849</span>, <span class="number">39742925179368561</span>, <span class="number">135909458983766175</span>, <span class="number">192124298319965985</span>, <span class="number">839263496419016075</span>, <span class="number">162231894553173376</span>, <span class="number">661693215639557019</span>, <span class="number">655784289160683355</span>, <span class="number">1062416543453873451</span>, <span class="number">319938129595811007</span>, <span class="number">1002025365666496902</span>, <span class="number">272017768612866462</span>, <span class="number">482130564327357100</span>, <span class="number">982163056351966292</span>]</span><br><span class="line">b = [<span class="number">820893636450185216</span>, <span class="number">1088723008695521024</span>, <span class="number">563505788571372160</span>, <span class="number">225792174390707712</span>, <span class="number">531991982654429312</span>, <span class="number">676436714054308864</span>, <span class="number">74314379213871872</span>, <span class="number">78960436919170688</span>, <span class="number">744901196366641920</span>, <span class="number">556510129527018752</span>, <span class="number">71967857250009600</span>, <span class="number">714820946954724352</span>, <span class="number">1047939442957058048</span>, <span class="number">475133098260006400</span>, <span class="number">764020773208596992</span>, <span class="number">495337689359947776</span>, <span class="number">969475874903125504</span>, <span class="number">132719289181729792</span>, <span class="number">301591784012423168</span>, <span class="number">886113347782835200</span>, <span class="number">477381121894258688</span>, <span class="number">843499387721308160</span>, <span class="number">508541992967101440</span>, <span class="number">135898603458110464</span>, <span class="number">373248303372987392</span>, <span class="number">696522694584843264</span>, <span class="number">22397882759483392</span>, <span class="number">867189773938512896</span>, <span class="number">231922357411858432</span>, <span class="number">452886634658905088</span>, <span class="number">337138259452950528</span>, <span class="number">246330467020038144</span>, <span class="number">336880752906045440</span>, <span class="number">712110254503864320</span>, <span class="number">1109022090563764224</span>, <span class="number">736941976050098176</span>, <span class="number">340820746543463424</span>, <span class="number">319152585759258624</span>, <span class="number">627473838419951616</span>, <span class="number">724549720670470144</span>, <span class="number">941976447076147200</span>, <span class="number">284306369459089408</span>, <span class="number">474986938990024704</span>, <span class="number">169392264058798080</span>, <span class="number">425082943668336640</span>, <span class="number">780502226419180544</span>, <span class="number">534812953559536640</span>, <span class="number">307991466712799232</span>, <span class="number">256772641512932352</span>, <span class="number">954565062645100544</span>, <span class="number">642433129475169280</span>, <span class="number">554579429440409600</span>, <span class="number">492586567437330432</span>, <span class="number">504243514518411264</span>, <span class="number">559583345168955392</span>, <span class="number">1047970717391220736</span>, <span class="number">354007966625097728</span>, <span class="number">944087368508420096</span>, <span class="number">48593600443238400</span>, <span class="number">412546108591775744</span>, <span class="number">371798716943661056</span>, <span class="number">109603610083078144</span>, <span class="number">912962403831732224</span>, <span class="number">493593202496430080</span>, <span class="number">435411737100828672</span>, <span class="number">416258656632209408</span>, <span class="number">41271759105748992</span>, <span class="number">547450588221173760</span>, <span class="number">1019985813100816384</span>, <span class="number">1133270880179824640</span>, <span class="number">416184705628168192</span>, <span class="number">1002938666972422144</span>, <span class="number">131467088438026240</span>, <span class="number">730507494540156928</span>, <span class="number">1122116292811296768</span>, <span class="number">179931222600130560</span>, <span class="number">704668788433995776</span>, <span class="number">693568343631073280</span>, <span class="number">159315312318967808</span>, <span class="number">228151058164389888</span>, <span class="number">78591434106697728</span>, <span class="number">1101441417145767936</span>, <span class="number">1011500470535821312</span>, <span class="number">103335769958184960</span>, <span class="number">723984495516817408</span>, <span class="number">421553904096403456</span>, <span class="number">1009636649059076096</span>, <span class="number">880471059436941312</span>, <span class="number">1017699541008359424</span>, <span class="number">880891531629418496</span>, <span class="number">1001214838765556736</span>, <span class="number">584549630850997248</span>, <span class="number">63724037422592000</span>, <span class="number">984435711617449984</span>, <span class="number">737723590588489728</span>, <span class="number">235901319105159168</span>, <span class="number">867142310717528064</span>, <span class="number">62598429756019712</span>, <span class="number">135623731618318336</span>, <span class="number">103508320292760576</span>, <span class="number">714343001741491200</span>, <span class="number">384031562306680832</span>, <span class="number">620521749068774400</span>, <span class="number">562199194838183936</span>, <span class="number">137440949282672640</span>, <span class="number">105902179785320448</span>, <span class="number">76984505248291840</span>, <span class="number">81968680790070272</span>, <span class="number">932887350172256256</span>, <span class="number">162426306785337344</span>, <span class="number">248707672736583680</span>, <span class="number">338911851801801216</span>, <span class="number">664174993098860032</span>, <span class="number">590418449833950720</span>, <span class="number">668934689108922112</span>, <span class="number">1050363471682760704</span>, <span class="number">627510981430159872</span>, <span class="number">157201265188110848</span>, <span class="number">332191804534742528</span>, <span class="number">610005938211220480</span>, <span class="number">789419961205813248</span>, <span class="number">350516436368000512</span>, <span class="number">135054071035246848</span>, <span class="number">1103634020293607168</span>, <span class="number">851221988945015936</span>, <span class="number">339941701245870080</span>, <span class="number">810615510791110656</span>, <span class="number">1139102409849577472</span>]</span><br><span class="line">s = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">_c1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1)):</span><br><span class="line">   _c1[i] = (q - c1[i]) % q</span><br><span class="line">final = poly_add(c0 , poly_mul(s, c1, q, poly_mod), q, poly_mod)</span><br><span class="line"></span><br><span class="line">temp = (final//(<span class="number">2</span>**<span class="number">28</span>))[:<span class="number">76</span>]</span><br><span class="line">temp1 = (final%(<span class="number">2</span>**<span class="number">28</span>))[:<span class="number">76</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">  <span class="keyword">if</span>(temp1[i] &gt; <span class="number">100000</span>):</span><br><span class="line">    c += <span class="built_in">chr</span>(temp[i]+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    c += <span class="built_in">chr</span>(temp[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;32fd349072a04dab71a3f2c78e24b9c0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-古典密码</title>
    <url>/post/165cec8c.html</url>
    <content><![CDATA[<p>该文章主要记录一些古典密码相关的趣题</p>
<span id="more"></span>
<h3 id="Ex-Viginere"><a href="#Ex-Viginere" class="headerlink" title="Ex Viginere?"></a>Ex Viginere?</h3><p>题目来源：MoeCTF 2021</p>
<h4 id="加密流程解读"><a href="#加密流程解读" class="headerlink" title="加密流程解读"></a>加密流程解读</h4><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这难道是维吉尼亚吗？</span><br><span class="line">text is a plain English text which only consists of lowercase letters (without any symbol)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a, b, text, key, flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> key <span class="keyword">in</span> text</span><br><span class="line"><span class="keyword">assert</span> a * b &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;moectf&#123;&#x27;</span> + key.encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> md5(key.encode()+<span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span>).hexdigest() == <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line"></span><br><span class="line">k1 = []</span><br><span class="line">k2 = []</span><br><span class="line"></span><br><span class="line">sequence = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">n = randint(<span class="number">114514</span>,<span class="number">1919810</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):<span class="comment">#2**16</span></span><br><span class="line">    sequence.append((sequence[-<span class="number">1</span>] + sequence[-<span class="number">2</span>]) % n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    k1.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    k2.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span>.join(table[((<span class="built_in">ord</span>(x) - <span class="number">97</span>) * (k1[i % a]) + k2[i % b]) % <span class="number">26</span>] <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(text))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;./cipher&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(c)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>并且给定cipher文件，其中内容为长度为108361的字母文本：</p>
<p><img src="/post/165cec8c/image-20230929101431427.png" alt="image-20230929101431427"></p>
<p>把加密程序一点一点读完，可以提取出以下信息：</p>
<ul>
<li>最终 flag 由 key 组成，其中 key 是被加密的原文中的某个字符串</li>
<li>key 在原文中的位置未知，且长度未知</li>
<li>生成一个随机数 n，作为之后生成 sequence 序列的模数</li>
<li>sequence 序列其实就是模 n 意义下的斐波那契数列，共生成 65536 项</li>
<li>从 sequence 序列中随机选择 a 项并模 26，作为加密所需的 k1 序列</li>
<li>从 sequence 序列中随机选择 b 项并模 26，作为加密所需的 k2 序列</li>
<li>对原文中的每一个字符 m 进行仿射加密得到密文，其中仿射加密的 A 为 k1[i % a]，B 为 k2[i % b]</li>
</ul>
<p>此外还有一些额外信息：</p>
<ul>
<li>一段有关 key 的md5值</li>
<li>a*b &lt; 100</li>
</ul>
<h4 id="引入重合指数"><a href="#引入重合指数" class="headerlink" title="引入重合指数"></a>引入重合指数</h4><p>因为密文很长，所以可以用统计方面的思想来解决题目，因此引入<strong>重合指数</strong>的概念：<strong>重合指数是指字符串中两个随机元素相同的概率。</strong>因此，假如我们仅考虑完全由英文字符组成的文本，那么一个文本的重合指数就按如下方式计算：(重合指数以 In 表示,p(a)表示 a 在文本中出现的频率)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In = p(a)*p(a) + p(b)*p(b) + p(c)*p(c) + ... + p(z)*p(z)</span><br></pre></td></tr></table></figure>
<p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>
<p>那么对于下列两种文本分别计算重合指数，就能看出它们的区别：(文本字符均足够多，符合统计概念)</p>
<p>1、完全随机的英文文本(26个字母均随机生成，因此出现频率相当，均为 1/26)</p>
<p>2、正常的英文文本(26个字符有使用频率上的差别)，一般来说如下：</p>
<p><img src="/post/165cec8c/image-20230930103629784.png" alt="image-20230930103629784"></p>
<p>1、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{(\frac{1}{26})^2} = \frac{1}{26} \approx 0.038</script><p>2、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{p(i)^2}  \approx 0.065</script><p>由此，我们就有了一个区分随机文本与英文文本的重要依据。</p>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><h5 id="part1：找出密钥长度"><a href="#part1：找出密钥长度" class="headerlink" title="part1：找出密钥长度"></a>part1：找出密钥长度</h5><p>重合指数如何应用到题目里呢？首先想明白一点：被同一个密钥(a、b均相同)加密的明文，一定会变成同一个密文。因此我们如果能够找到所有被同一个密钥加密的密文组，那么该密文组的重合指数是符合正常英文文本的(可以仔细想想)</p>
<p>所以我们就需要先由重合指数找到哪些密文是被同一个密钥加密的，实际上这就是在求 gcd(a,b) ,而由题目条件 a*b &lt; 100，因此我们可以很快爆破出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>爆破得到a*b = 77，因此a=7，b=11或a=11，b=7</p>
<h5 id="part2：确定密钥内容"><a href="#part2：确定密钥内容" class="headerlink" title="part2：确定密钥内容"></a>part2：确定密钥内容</h5><p>确定了密钥长度后，现在就需要确定密钥的内容具体是什么，也就是 k1、k2里究竟是什么数字。</p>
<p>首先会发现一个 trick，那就是 sequence 序列的生成根本没什么用，由于最终是在mod 26 下进行计算，因此直接把sequence 当成一个由 0-25 组成的随机序列就可以。那么怎么确定呢，依然是利用重合指数，只是要换一种用法。</p>
<p>先引入一个结论：</p>
<p>假设 $ p1, p2 , p3…, pn$为递减的概率分布( $ p1\geq p2 \geq p3…\geq pn$ )，令$ q1’, q2’ , q3’…, qn’$为 $ q1, q2 , q3…, qn$的任意置换，则当 $ q1’, q2’ , q3’…, qn’$ 恰好也为递减的概率分布时，下式取得最大值：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{26}{pi*qi'}</script><p>这个结论的证明并不复杂，可以自行尝试。</p>
<p>这个结论有什么用呢？我们现在先把密文按长度为 77 分组，并取出每组的第一个字母组成一个新的密文串，那么这个新的密文串的所有字符，都是被k1[0]、k2[0]这个密钥加密的。那么我们爆破的密钥空间大小一共就只有12*26 = 312(参考仿射密码)。</p>
<p>爆破的依据是什么？仍然是重合指数，对于现在被加密的密文，它自身的重合指数是符合0.065的，因为是单表代换；但是加密过后，各个字符的频率发生了错位。比如正常英文文本中频率最高的是 e，而加密后可能变成了 z。那么把正常英文文本的概率分布当作p，把加密文本的概率分布当作q，就能发现可以利用刚才引入的结论来进行爆破了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>之所以只爆破11个而不爆破全部77个，道理也很简单，爆破11个已经能够找出全部的k1、k2了。</p>
<h5 id="part3：爆破md5"><a href="#part3：爆破md5" class="headerlink" title="part3：爆破md5"></a>part3：爆破md5</h5><p>知道了密钥后就很轻松，就是个纯粹的爆破问题了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>完整exp：(记得改一下if条件)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\cipher&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">table = ascii_lowercase</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算与英语字频吻合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In_m</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * dic[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{pieceofchocolate}</strong></p>
<p>一个很纯粹的古典密码分析过程，其实是非常有意思也非常有价值的。</p>
<p><br><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-随机数</title>
    <url>/post/d5230381.html</url>
    <content><![CDATA[<p>该文章主要记录一些随机数相关的趣题</p>
<span id="more"></span>
<h3 id="WeakRandom"><a href="#WeakRandom" class="headerlink" title="WeakRandom"></a>WeakRandom</h3><p>题目来源：强网拟态 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os, random, hashlib, string</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeakRandom</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed,n,s</span>):</span><br><span class="line">        self.x = seed</span><br><span class="line">        self.n = n</span><br><span class="line">        self.s = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = <span class="built_in">int</span>((self.x ** <span class="number">2</span>) // (<span class="number">10</span> ** (self.s // <span class="number">2</span>))) % self.n</span><br><span class="line">        self.x = x</span><br><span class="line">        high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    alarm(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the predict game!&quot;</span>)</span><br><span class="line">    n = <span class="number">10000000000</span></span><br><span class="line">    s = <span class="number">4</span></span><br><span class="line">    seed = os.urandom(<span class="number">4</span>)</span><br><span class="line">    seed = <span class="built_in">int</span>.from_bytes(seed,byteorder = <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    r = WeakRandom(seed,n,s)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x = r.<span class="built_in">next</span>()</span><br><span class="line">            guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please your guess : &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> guess == x:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Fail! The number is <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> count &gt;= <span class="number">20</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;You win! The flag is : <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>题目内容如下：</p>
<ul>
<li>通过proof后，开始限时100s</li>
<li>随机生成4字节作为seed，并初始化一个WeakRandom()对象r</li>
<li>有一百次机会进行随机数猜测，猜错的话，靶机会返回本次的正确值，并生成下一个随机数</li>
<li>一百次中猜对20次就能得到flag</li>
</ul>
<p>那么分析一下这个WeakRandom()如何产生随机数的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WeakRandom</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed,n,s</span>):</span><br><span class="line">        self.x = seed</span><br><span class="line">        self.n = n</span><br><span class="line">        self.s = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = <span class="built_in">int</span>((self.x ** <span class="number">2</span>) // (<span class="number">10</span> ** (self.s // <span class="number">2</span>))) % self.n</span><br><span class="line">        self.x = x</span><br><span class="line">        high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>可以看到，每次调用next，实现的是以下步骤：</p>
<ul>
<li><p>计算 </p>
<script type="math/tex; mode=display">
x = int(\frac{x^2}{100}) \quad (mod\;n)</script></li>
<li><p>取x的sha256值，并右移16位后取低十六位，作为result高位</p>
</li>
<li><p>取x的低十六位作为result低位</p>
</li>
<li><p>返回result</p>
</li>
</ul>
<p>而每次随机数迭代其实也就是与x有关，所以我们如果能获得某一次的x，就能获得这一次之后的所有result，就能准确预测随机数了。</p>
<p>而由题目知道，每一次的x都会模n，也就是说x其实是一个小于n的数，而由每一次返回的result又可以知道x的低16位，那么x的未知部分其实就只有约 n/(2^16) ，可以计算出这个数的数量级为2^18，在可以爆破的范围内。而爆破的依据就是当次返回result的高位，具体来说就是：</p>
<ul>
<li>先随便给靶机传一个错误的result，得到第一次的正确result</li>
<li>得到的result的低16位也即为x的低16位</li>
<li>爆破x的高18位，爆破方式为：将需爆破的x高位与已知的x低位拼接为完整x，然后用next中high的计算方法计算出对应的high，若计算出的high与实际result高16位相等，则本次x即为可能的解</li>
</ul>
<p>而实际上每一次x可能会有多组解，不过一般也就3、4个，从中随便选一个往后计算随机数就行，如果不对就重新连接靶机再重复上述流程即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">x</span>):</span><br><span class="line">    x = <span class="built_in">int</span>((x ** <span class="number">2</span>) // (<span class="number">10</span> ** (s // <span class="number">2</span>))) % n</span><br><span class="line">    high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">    low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">    result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">    <span class="keyword">return</span> (x,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>, <span class="number">28469</span>)</span><br><span class="line">    proof_of_work()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#guess</span></span><br><span class="line">    <span class="comment">#part1 get_first_result</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;guess : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;number is &quot;</span>)</span><br><span class="line">    result = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    x = result</span><br><span class="line">    n = <span class="number">10000000000</span></span><br><span class="line">    s = <span class="number">4</span></span><br><span class="line">    <span class="built_in">hash</span> = x &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // (<span class="number">2</span>**<span class="number">16</span>)):</span><br><span class="line">        temp = i*(<span class="number">2</span>**<span class="number">16</span>) + (x &amp; (<span class="number">2</span>**<span class="number">16</span>-<span class="number">1</span>))</span><br><span class="line">        high = (<span class="built_in">int</span>(sha256(<span class="built_in">str</span>(temp).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(high == <span class="built_in">hash</span>):</span><br><span class="line">            x = temp</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2 get_subsequent_result</span></span><br><span class="line">    right = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        x,result = <span class="built_in">next</span>(x)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(result).encode())</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;Success!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">            right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(right == <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(r.recvline())</span><br><span class="line">        exit()	</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;b41d8883-e328-48a2-8909-7454d57eee62&#125;</span></span><br></pre></td></tr></table></figure>
<p>而实际上调试过程中可以发现一个非预期解法，测试时，可以发现靶机有时会返回两个很特殊的数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">670760960</span></span><br><span class="line"><span class="number">3587999844</span></span><br></pre></td></tr></table></figure>
<p>这两个数字特殊在哪里呢？一旦某次计算出的结果result是这两个值，那么根据next的计算过程，之后的result一定也会是这两个值。也就是说我们只要反复重连靶机，不断提交这两个数的其中一个，也是有机会拿到flag的，并且从测试过程来看这个机会并不小。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>NSSCTF-2nd-wp-crypto</title>
    <url>/post/39588.html</url>
    <content><![CDATA[<p>这次crypto题目总体难度不大，重点是对一些基础知识的理解运用。</p>
<span id="more"></span>
<h2 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h2><p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length()&lt;<span class="number">200</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">kbits = <span class="number">103</span></span><br><span class="line">m = (m &gt;&gt; kbits) &lt;&lt; kbits</span><br><span class="line">Mod = getPrime(<span class="number">1024</span>)</span><br><span class="line">hint1 = (<span class="number">2021</span>-<span class="number">2023</span>*m) % Mod</span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">2023</span>, Mod)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint1 =&#x27;</span>,hint1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint2 =&#x27;</span>,hint2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = ...</span></span><br><span class="line"><span class="string">c = ...</span></span><br><span class="line"><span class="string">hint1 = ...</span></span><br><span class="line"><span class="string">hint2 = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有以下信息:</p>
<ul>
<li>m.bit_length()&lt;200 , 说明明文较小</li>
<li>kbits = 103 , m = (m &gt;&gt; kbits) &lt;&lt; kbits , 隐藏了明文低位</li>
<li>hint1 = (2021-2023*m) % Mod</li>
<li>hint2 = pow(2, 2023, Mod)</li>
</ul>
<p>种种都指向coppersmith , 首先看hint2，</p>
<script type="math/tex; mode=display">
hint2  \equiv  2^{2023}  mod(Mod)</script><p>利用同余关系,</p>
<script type="math/tex; mode=display">
2^{2023} - hint2 = k*Mod</script><p>得到Mod的k倍,因此可以利用k*Mod建立环，解出hint1中的小根m，解得m高位后已知高位攻击即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">c = ...</span><br><span class="line">hint1 = ...</span><br><span class="line">hint2 = ...</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">kM = <span class="number">2</span>**<span class="number">2023</span>-hint2</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(kM))</span><br><span class="line">f = <span class="number">2023</span>*x + hint1 - <span class="number">2021</span></span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    mhigh = roots[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">mhigh = <span class="number">1746716778150027565782467891299010283212636160</span></span><br><span class="line">PR.&lt;y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mhigh + y)^<span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">104</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    m = mhigh + roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="number">1746716778150037336346788439252154990602710653</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{Rea1_Si9n3n}</font>

<p><br></p>
<p>(赛中的时候，这题解数比funnyencrypt还多，当时就感觉有点诡异。赛后才发现因为明密文都很小，所以直接开三次根就可以了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h2><p>题目:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✧✡✭</span><br><span class="line">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span><br><span class="line">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span><br><span class="line">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span><br><span class="line">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span><br><span class="line">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span><br><span class="line">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>见过的图形加密中并没有类似这个的，不过翻看一下马上就能发现文件尾部的这一串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br></pre></td></tr></table></figure>
<p>前缀肯定是nssctf，是对的上的，猜测是简单的替换密码，写个脚本后交给quipqiup即可</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">✧✡✭</span></span><br><span class="line"><span class="string">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span></span><br><span class="line"><span class="string">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span></span><br><span class="line"><span class="string">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span></span><br><span class="line"><span class="string">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span></span><br><span class="line"><span class="string">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span></span><br><span class="line"><span class="string">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125; _-,.&#x27;:&quot;</span></span><br><span class="line">list1 = [<span class="string">&#x27;✧&#x27;</span>, <span class="string">&#x27;✡&#x27;</span>, <span class="string">&#x27;✭&#x27;</span>, <span class="string">&#x27;✮&#x27;</span>, <span class="string">&#x27;✣&#x27;</span>, <span class="string">&#x27;✴&#x27;</span>, <span class="string">&#x27;✯&#x27;</span>, <span class="string">&#x27;✤&#x27;</span>, <span class="string">&#x27;✶&#x27;</span>, <span class="string">&#x27;✬&#x27;</span>, <span class="string">&#x27;✱&#x27;</span>, <span class="string">&#x27;✦&#x27;</span>, <span class="string">&#x27;✢&#x27;</span>, <span class="string">&#x27;✥&#x27;</span>, <span class="string">&#x27;✷&#x27;</span>, <span class="string">&#x27;✰&#x27;</span>, <span class="string">&#x27;❂&#x27;</span>, <span class="string">&#x27;✩&#x27;</span>, <span class="string">&#x27;✸&#x27;</span>, <span class="string">&#x27;✲&#x27;</span>, <span class="string">&#x27;✳&#x27;</span>, <span class="string">&#x27;★&#x27;</span>, <span class="string">&#x27;✵&#x27;</span>, <span class="string">&#x27;✫&#x27;</span>, <span class="string">&#x27;✪&#x27;</span>, <span class="string">&#x27;❋&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))</span><br><span class="line"></span><br><span class="line">cfinal = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">if</span>(c[i] <span class="keyword">not</span> <span class="keyword">in</span> table):</span><br><span class="line">        <span class="keyword">if</span>(c[i] == <span class="string">&quot;\n&quot;</span>):</span><br><span class="line">            cfinal.append(c[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ind = list1.index(c[i])</span><br><span class="line">            cfinal.append(table[ind])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cfinal.append(c[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(cfinal))</span><br><span class="line"></span><br><span class="line"><span class="comment">#quipqiup</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">six</span></span><br><span class="line"><span class="string">in the flood of darkness, hope is the light. it brings comfort, faith, and confidence. it gives us guidance when we are lost, and gives support when we are afraid. and the moment we give up hope, we give up our lives. the world we live in is disintegrating into a place of malice and hatred, where we need hope and find it harder. in this world of fear, hope to find better, but easier said than done, the more meaningful life of faith will make life meaningful.</span></span><br><span class="line"><span class="string">sometimes we think of dreams as fantasies - it&#x27;s easy to do when you have money, rent, and work. but you can&#x27;t prepare yourself </span></span><br><span class="line"><span class="string">and jump off the cliff: you should grow your wings first. a little bit toward the dream. step by step. take a step forward. after all, it&#x27;s your mission.</span></span><br><span class="line"><span class="string">keep faith and hope for the future. make your most sincere dreams, and when the opportunities come, they will fight for them. it may take a season or more, but the ending will not change. ambition, best, become a reality. an uncertain future, only one step at a time, the hope can realize the dream of the highest. we must treasure the dream, to protect it a season, let it in the heart quietly germinal.</span></span><br><span class="line"><span class="string">only when you understand the true meaning of life can you live truly. bittersweet as life is, it&#x27;s still wonderful, and it&#x27;s fascinating even in tragedy. if you&#x27;re just alive, try harder and try to live wonderfully.</span></span><br><span class="line"><span class="string">i believe there is a person who brings sunshine into your life. that person may have enough to spread around. but if you really </span></span><br><span class="line"><span class="string">have to wait for someone to bring you the sun and give you a good feeling, then you may have to wait a long time.</span></span><br><span class="line"><span class="string">in a word,i hope you will like cryptography.this is your flag:nssctf&#123;crypto_is_so_interesting_why_don&#x27;t_you_join_us&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{crypto_is_so_interesting_why_don't_you_join_us}</font>

<p>(前缀居然要大写，这就有点坑了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(flag)</span><br><span class="line">flag1 = flag[:length//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[length//<span class="number">2</span>:]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">p1 = gmpy2.invert(p,q)</span><br><span class="line">q1 = gmpy2.invert(q,p)</span><br><span class="line">c = <span class="built_in">pow</span>(m1,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1=&quot;</span>,p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q1=&quot;</span>,q1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;phi=&quot;</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p1= ...</span></span><br><span class="line"><span class="string">q1= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">phi= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line">hint = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">114514</span>, q, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,hint)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">hint= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目将flag分为两部分分别进行加密，分开来说：</p>
<ul>
<li>第一部分</li>
</ul>
<p>给了p关于q的逆元及q关于p的逆元，hitconctf 2019 quals出过这个题目，具体推导过程参考<a href="[AiDai|HITCON CTF 2019 Quals-Writeup (aidaip.github.io">这一篇</a>](<a href="https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html">https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html</a>))</p>
<ul>
<li>第二部分</li>
</ul>
<p>已知：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod n)</script><p>这种题目显然是构造出p或q的倍数，从而与n求gcd得到分解的。对于这个等式，很容易就能想到利用同余性质先化为一下两个等式：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod p)</script><script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod q)</script><p>乍一看应该是第二个等式更加好用，因为可以利用费马小定理消去指数，变形为:</p>
<script type="math/tex; mode=display">
hint \equiv 2023*p + 114514  (mod q)</script><p>但是这里就卡壳了，因为即使利用同余性质把模等式转化为等式，得到的依然含有p，q两个因子，没有办法与n求gcd。</p>
<p>所以考虑利用另一个等式，由于指数q没有办法消掉了，所以只能利用二项式定理展开。又由于mod p的关系，模等式正好只剩下了最后一项，即：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^q  (mod p)</script><p>怎么利用这个等式呢？这个时候需要敏锐一点察觉到费马小定理(也许刚刚拆分出来的另一个式子的变形就是给我们的提示)，由费马小定理我们知道：</p>
<script type="math/tex; mode=display">
a \equiv a^p  (mod p)</script><p>把 $114514^q$ 看作a，就得到：</p>
<script type="math/tex; mode=display">
(114514^q) \equiv (114514^q)^p \equiv 114514^n (mod p)</script><p>所以有：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^n  (mod p)</script><script type="math/tex; mode=display">
hint = 114514^n + k*p</script><p>也就是说，将$(hint - 114514^n)$与n求gcd，即可得到p，进而求解RSA</p>
<p><br></p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">while</span>(b): </span><br><span class="line">    a,b = b, a % b </span><br><span class="line">  <span class="keyword">return</span> a </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysqrt</span>(<span class="params">d</span>):</span><br><span class="line">  st = <span class="number">1</span></span><br><span class="line">  en = <span class="number">10</span>**<span class="number">1300</span></span><br><span class="line">  <span class="keyword">while</span> st&lt;=en:</span><br><span class="line">    mid = (st+en)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid*mid == d: <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">if</span> mid*mid &lt; d: st=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: en=mid-<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    x1, x2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    y1, y2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a2:</span><br><span class="line">        q = a1 // a2</span><br><span class="line">        a1, a2 = a2, a1 - q * a2</span><br><span class="line">        x1, x2 = x2, x1 - q * x2</span><br><span class="line">        y1, y2 = y2, y1 - q * y2</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, a1)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">ipmq= ...</span><br><span class="line">iqmp= ...</span><br><span class="line">phi= ...</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">enc = ...</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">gg = gcd(iqmp-<span class="number">1</span>,ipmq-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = phi // gg</span><br><span class="line">a = (ipmq-<span class="number">1</span>)//gg</span><br><span class="line">b = (iqmp-<span class="number">1</span>)//gg</span><br><span class="line"><span class="comment"># p*a + q*b = c</span></span><br><span class="line">pmod = inverse(a, b)*c%b</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    p = pmod + j*b</span><br><span class="line">    <span class="keyword">if</span> p &gt; (<span class="number">1</span>&lt;&lt;<span class="number">1024</span>): <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isPrime(p): <span class="keyword">continue</span></span><br><span class="line">    q = (c-p*a)//b</span><br><span class="line">    <span class="keyword">assert</span>(p*a+q*b==c)</span><br><span class="line">    <span class="keyword">if</span> (iqmp*q-<span class="number">1</span>)%p == <span class="number">0</span> <span class="keyword">and</span> (ipmq*p-<span class="number">1</span>)%q == <span class="number">0</span>:</span><br><span class="line">        M = <span class="built_in">pow</span>(enc,d,p*q)</span><br><span class="line">        flag += <span class="built_in">str</span>(long_to_bytes(M))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">n= ...</span><br><span class="line">c= ...</span><br><span class="line">hint= ...</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">114514</span>,n,n)</span><br><span class="line">p = GCD(n,hint-h2)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag += <span class="built_in">str</span>(long_to_bytes(m))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{e713afa4-fcd8-419f-a1a6-959449b4df5a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="LatticeLCG"><a href="#LatticeLCG" class="headerlink" title="LatticeLCG"></a>LatticeLCG</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">512</span>)</span><br><span class="line">seed = getPrime(<span class="number">512</span>)</span><br><span class="line">b = bytes_to_long(flag)</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(a,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(a,e2,n)</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 = &quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 = &quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = [getPrime(<span class="number">128</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">out = []</span><br><span class="line">m = getPrime(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    out.append(<span class="built_in">pow</span>(m,i,n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out=&quot;</span>,out)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c1 = ...</span></span><br><span class="line"><span class="string">c2 = ...</span></span><br><span class="line"><span class="string">output1 = ...</span></span><br><span class="line"><span class="string">output2 = ...</span></span><br><span class="line"><span class="string">e= []</span></span><br><span class="line"><span class="string">out= []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>卡了很久，搜了很多格相关问题也没有搜到类似的，打算放弃这个题去睡觉的时候，突然恍然大悟。这里好好阐述一下我的思路，希望能帮助到一些和我一样刚刚接触格的ctfer。</p>
<p>首先，题目很明显的分成了三个部分：</p>
<ul>
<li>共模攻击</li>
<li>LCG求参数</li>
<li>Lattice</li>
</ul>
<p>首先要明确求解顺序。flag以LCG中参数b的形式存在，因此LCG应该是题目的最后一步。并且要想求解出这个LCG的b，是需要知道a与n的值的，在第一部共模攻击中显然是已知n求解a。所以就明确了如下的解题顺序：</p>
<ol>
<li>Lattice求解模数n</li>
<li>共模攻击求解a</li>
<li>LCG恢复参数b，得到flag</li>
</ol>
<p>后面两个步骤非常容易，主要问题就在第一步：<strong>为什么要利用格求解n？</strong> <strong>怎么用格求解n？</strong>下面是我对这个问题的分析：</p>
<p>先来看看给了些什么条件：一个64bit的小量m，依次产生20个128bit的素数对其进行类似RSA的加密，并且给了我们加密指数的列表以及密文的列表。题目满足两个经典条件：<strong>存在小量</strong> ，<strong>提供多个方程组参数</strong>，这样的问题在很多crypto题目中都是用格方法求解的，所以要想到利用格方法(题目的名字虽然说得很明白，但是如果没有，看到这种形式也应该联想到这个方法)</p>
<p>注意到m不变，模数n也不变，同时加密指数互素，这其实很像共模攻击的情景，只是n未知。回想一下在已知模数n的情况下共模攻击的实施方法，不难产生下面这个解题思路：</p>
<p>取20个方程的前三个如下：</p>
<script type="math/tex; mode=display">
out1 \equiv m^{e1} \; (mod\;  n)</script><script type="math/tex; mode=display">
out2 \equiv m^{e2} \; (mod\;  n)</script><script type="math/tex; mode=display">
out3 \equiv m^{e3} \; (mod\;  n)</script><p>因为e1，e2互素，所以存在a，b，使得：</p>
<script type="math/tex; mode=display">
a*e1+b*e2 = 1</script><p>所以可以得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b}\equiv m^{a*e1+b*e2} \equiv m \quad (mod \;n)</script><p>这有什么用呢？我们同样也对2、3两式，1、3两式进行这样的操作，结合上面这个式子能得到三组模等式：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} \equiv m \quad (mod \;n)\qquad--1</script><script type="math/tex; mode=display">
out2^{c}*out3^{d} \equiv m \quad (mod \;n)\qquad--2</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} \equiv m \quad (mod \;n)\qquad--3</script><p>1、2式作差，2、3式作差，就得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><p>而现在等式左侧已经没有未知量了(a,b,c,d,f,g均能够通过扩展欧几里得求出)，那么就可以求解他们的gcd得到n。</p>
<p>可以说，想到这个思路的时候我为之一振，可惜实际操作的时候这个方法并不能实施，原因也很简单，我们进行的并非模幂运算，而是普通幂运算，<strong>并且a，b这些指数数量级很大(注意这一点)</strong>，所以是完全没有办法照这个思路解下去的。这时候我也没有想到怎么利用格，所以进度也停滞了，一卡卡到了晚上。</p>
<p>晚上我反复思考的时候，又想到了我刚刚说的那一点，也就是实施不了共模攻击的原因，在于<strong>指数的数量级很大，没有办法幂运算</strong>。我也突然联想到了Lattice中LLL算法的重要应用——求解最短向量。那么一切也就说得通了，之所以给20个素数作为加密指数，就是可以应用于格密码中，克服刚才共模攻击中两两组合时计算出的a，b过大的问题。所以构造格的思路就来了：</p>
<p>因为20个指数e均互素，所以一定存在a1，a2，a3…a20，使得</p>
<script type="math/tex; mode=display">
a1*e1+a2*e2+a3*e3+...a20*e20 = 1</script><p>所以可以列出等式：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
a1 & a2 & a3 ... & a20
\end{matrix}\right] 

*
\left[\begin{matrix}
e1 & 1 & 0 & 0 ... & 0\\
e2 & 0 & 1 & 0 ... & 0\\
e3 & 0 & 0 & 1 ... & 0\\
...\\
e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]

=

\left[\begin{matrix}
1 & a1 & a2 ... & a20
\end{matrix}\right]</script><p>很明显，这个格符合我们的要求，我们只需要从规约出来的短向量中挑出两组，按理来说，我们只需要类似的进行刚才的共模攻击即可。</p>
<p>可是实际操作又遇到了问题，这样规约出来的向量组是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ <span class="number">45</span> -<span class="number">58</span>   <span class="number">5</span> -<span class="number">16</span>  <span class="number">12</span>  -<span class="number">7</span> -<span class="number">27</span>  <span class="number">19</span>   <span class="number">6</span>  <span class="number">14</span>  <span class="number">29</span> -<span class="number">23</span> -<span class="number">36</span>  <span class="number">44</span> -<span class="number">15</span>   <span class="number">1</span>   <span class="number">8</span>  <span class="number">14</span>  -<span class="number">7</span>  <span class="number">11</span>  -<span class="number">9</span>]</span><br><span class="line">[-<span class="number">14</span> -<span class="number">27</span>  <span class="number">20</span>   <span class="number">6</span> -<span class="number">40</span>  <span class="number">20</span> -<span class="number">34</span>  -<span class="number">2</span> -<span class="number">16</span>  <span class="number">51</span>  <span class="number">35</span> -<span class="number">23</span> -<span class="number">51</span>  <span class="number">13</span>   <span class="number">3</span> -<span class="number">21</span>   <span class="number">0</span>  <span class="number">17</span>  <span class="number">11</span>  -<span class="number">7</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">15</span> -<span class="number">36</span> -<span class="number">21</span> -<span class="number">13</span>   <span class="number">6</span>  -<span class="number">7</span>  -<span class="number">1</span> -<span class="number">59</span> -<span class="number">23</span>  <span class="number">42</span> -<span class="number">33</span>  <span class="number">15</span> -<span class="number">30</span>  -<span class="number">4</span>  <span class="number">39</span>  <span class="number">26</span>  <span class="number">41</span>   <span class="number">1</span>  <span class="number">19</span>  <span class="number">10</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">23</span>   <span class="number">4</span>  <span class="number">49</span> -<span class="number">19</span>  <span class="number">22</span>  -<span class="number">9</span>  <span class="number">24</span> -<span class="number">20</span> -<span class="number">20</span>   <span class="number">3</span> -<span class="number">24</span>   <span class="number">4</span> -<span class="number">43</span> -<span class="number">86</span>  <span class="number">40</span>  <span class="number">44</span>  -<span class="number">1</span>  -<span class="number">1</span>  <span class="number">26</span>  <span class="number">25</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">72</span>  <span class="number">15</span> -<span class="number">11</span> -<span class="number">19</span>  <span class="number">26</span> -<span class="number">31</span> -<span class="number">56</span> -<span class="number">25</span>   <span class="number">5</span>  <span class="number">33</span> -<span class="number">27</span> -<span class="number">23</span>  <span class="number">12</span>  <span class="number">22</span>  <span class="number">11</span>  -<span class="number">1</span>  <span class="number">21</span> -<span class="number">17</span>  <span class="number">51</span> -<span class="number">31</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">35</span> -<span class="number">73</span>  -<span class="number">8</span>  <span class="number">19</span> -<span class="number">29</span>  <span class="number">23</span>  -<span class="number">3</span>  <span class="number">20</span> -<span class="number">10</span>  <span class="number">18</span>  <span class="number">46</span>  <span class="number">29</span>  -<span class="number">9</span>  <span class="number">69</span> -<span class="number">30</span>   <span class="number">9</span> -<span class="number">64</span>  <span class="number">13</span>  <span class="number">10</span> -<span class="number">26</span>   <span class="number">3</span>]</span><br><span class="line">[ <span class="number">20</span>  <span class="number">46</span>  <span class="number">12</span>  -<span class="number">3</span>  <span class="number">28</span>  -<span class="number">1</span> -<span class="number">68</span>  <span class="number">15</span>   <span class="number">3</span> -<span class="number">21</span> -<span class="number">48</span> -<span class="number">20</span>  <span class="number">43</span>  <span class="number">54</span>   <span class="number">9</span>  <span class="number">14</span>  -<span class="number">5</span>   <span class="number">0</span> -<span class="number">44</span> -<span class="number">24</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">49</span>   <span class="number">0</span> -<span class="number">10</span>   <span class="number">0</span> -<span class="number">46</span> -<span class="number">47</span>  <span class="number">24</span>  -<span class="number">2</span>  <span class="number">13</span>  <span class="number">10</span>  -<span class="number">3</span>  <span class="number">48</span>  <span class="number">43</span> -<span class="number">28</span>  -<span class="number">3</span>  <span class="number">53</span> -<span class="number">15</span>  -<span class="number">6</span>  <span class="number">31</span> -<span class="number">23</span>  <span class="number">12</span>]</span><br><span class="line">[ -<span class="number">6</span>   <span class="number">0</span>   <span class="number">9</span>  <span class="number">42</span> -<span class="number">49</span> -<span class="number">38</span>   <span class="number">8</span>  <span class="number">12</span>   <span class="number">7</span>  <span class="number">39</span>  <span class="number">30</span> -<span class="number">26</span>  <span class="number">18</span>  <span class="number">37</span>  <span class="number">28</span> -<span class="number">28</span>   <span class="number">8</span>   <span class="number">2</span> -<span class="number">67</span> -<span class="number">21</span> -<span class="number">15</span>]</span><br><span class="line">[-<span class="number">56</span>  <span class="number">23</span>  <span class="number">22</span>  <span class="number">29</span>  -<span class="number">7</span> -<span class="number">19</span>  <span class="number">19</span>  -<span class="number">8</span>   <span class="number">6</span>  <span class="number">35</span>   <span class="number">4</span>  -<span class="number">8</span>  <span class="number">22</span>  -<span class="number">2</span> -<span class="number">44</span> -<span class="number">69</span>  <span class="number">16</span>  -<span class="number">8</span>  -<span class="number">7</span> -<span class="number">45</span>  <span class="number">21</span>]</span><br><span class="line">[-<span class="number">21</span>  <span class="number">16</span>  <span class="number">34</span> -<span class="number">39</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">57</span> -<span class="number">30</span>  -<span class="number">2</span>  -<span class="number">2</span> -<span class="number">36</span>  -<span class="number">9</span>   <span class="number">9</span> -<span class="number">27</span>   <span class="number">8</span> -<span class="number">31</span> -<span class="number">31</span>  <span class="number">32</span>  <span class="number">12</span>  -<span class="number">2</span>  <span class="number">15</span>]</span><br><span class="line">[ -<span class="number">9</span>  -<span class="number">7</span>   <span class="number">6</span>  <span class="number">40</span>  <span class="number">32</span> -<span class="number">49</span> -<span class="number">26</span> -<span class="number">60</span>  <span class="number">17</span>   <span class="number">0</span> -<span class="number">13</span>   <span class="number">7</span>  <span class="number">25</span>  <span class="number">57</span> -<span class="number">19</span>  <span class="number">28</span>  -<span class="number">3</span> -<span class="number">34</span>  <span class="number">11</span> -<span class="number">12</span> -<span class="number">17</span>]</span><br><span class="line">[-<span class="number">30</span> -<span class="number">13</span>  <span class="number">28</span> -<span class="number">42</span>   <span class="number">8</span> -<span class="number">46</span>  <span class="number">56</span>  <span class="number">33</span> -<span class="number">56</span> -<span class="number">40</span> -<span class="number">24</span>   <span class="number">4</span>  <span class="number">10</span>  <span class="number">15</span>  <span class="number">46</span>  <span class="number">50</span> -<span class="number">13</span>  <span class="number">18</span> -<span class="number">21</span>  <span class="number">17</span>  <span class="number">16</span>]</span><br><span class="line">[-<span class="number">17</span> -<span class="number">11</span>  -<span class="number">5</span>  <span class="number">29</span>  <span class="number">14</span>   <span class="number">6</span> -<span class="number">13</span>   <span class="number">4</span>  <span class="number">42</span> -<span class="number">69</span>  <span class="number">30</span>   <span class="number">9</span>   <span class="number">3</span> -<span class="number">37</span>   <span class="number">5</span>   <span class="number">7</span> -<span class="number">17</span>  <span class="number">50</span>   <span class="number">6</span>  <span class="number">14</span> -<span class="number">38</span>]</span><br><span class="line">[ <span class="number">53</span> -<span class="number">12</span>  <span class="number">16</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">38</span> -<span class="number">52</span>  <span class="number">25</span> -<span class="number">10</span> -<span class="number">41</span>  -<span class="number">3</span> -<span class="number">37</span>   <span class="number">6</span> -<span class="number">12</span>   <span class="number">1</span>  -<span class="number">4</span> -<span class="number">25</span>  <span class="number">41</span>   <span class="number">5</span>   <span class="number">1</span>  <span class="number">29</span>]</span><br><span class="line">[ -<span class="number">3</span>   <span class="number">1</span>  <span class="number">36</span>  <span class="number">22</span>   <span class="number">7</span>  -<span class="number">5</span> -<span class="number">10</span>  <span class="number">15</span> -<span class="number">10</span> -<span class="number">27</span>  <span class="number">35</span> -<span class="number">60</span> -<span class="number">36</span>   <span class="number">9</span> -<span class="number">57</span>  <span class="number">33</span> -<span class="number">21</span>  <span class="number">43</span>  <span class="number">28</span> -<span class="number">44</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">32</span> -<span class="number">26</span>  <span class="number">18</span>  -<span class="number">9</span>  -<span class="number">5</span>  <span class="number">37</span>  -<span class="number">8</span>   <span class="number">2</span> -<span class="number">36</span> -<span class="number">28</span>  <span class="number">43</span>  <span class="number">10</span> -<span class="number">32</span>  <span class="number">37</span> -<span class="number">24</span> -<span class="number">70</span>  <span class="number">22</span> -<span class="number">35</span>  <span class="number">49</span>  -<span class="number">2</span>  <span class="number">31</span>]</span><br><span class="line">[-<span class="number">33</span>  <span class="number">15</span> -<span class="number">25</span>   <span class="number">1</span> -<span class="number">40</span>   <span class="number">3</span>  -<span class="number">2</span> -<span class="number">32</span>  <span class="number">15</span>   <span class="number">9</span> -<span class="number">20</span> -<span class="number">27</span> -<span class="number">27</span>  <span class="number">35</span>  <span class="number">26</span>  -<span class="number">1</span> -<span class="number">45</span> -<span class="number">12</span>  <span class="number">45</span>  <span class="number">23</span>  <span class="number">36</span>]</span><br><span class="line">[-<span class="number">17</span>   <span class="number">0</span>  <span class="number">18</span> -<span class="number">20</span> -<span class="number">75</span>  -<span class="number">5</span>  <span class="number">55</span>  <span class="number">42</span>  <span class="number">16</span>   <span class="number">8</span> -<span class="number">45</span>   <span class="number">5</span> -<span class="number">24</span> -<span class="number">20</span> -<span class="number">50</span> -<span class="number">11</span>   <span class="number">0</span>  <span class="number">27</span>  <span class="number">40</span>  <span class="number">18</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">11</span>   <span class="number">5</span>  <span class="number">16</span>  <span class="number">37</span>  -<span class="number">2</span>  -<span class="number">6</span>  <span class="number">28</span>  <span class="number">19</span> -<span class="number">21</span>   <span class="number">5</span>  -<span class="number">8</span>  <span class="number">63</span>  -<span class="number">8</span> -<span class="number">21</span>  <span class="number">22</span> -<span class="number">23</span> -<span class="number">57</span>  <span class="number">13</span>  -<span class="number">5</span>  <span class="number">15</span> -<span class="number">39</span>]</span><br></pre></td></tr></table></figure>
<p>第一列并不是我们想要的1，说明第一列是1的向量对比起来长度并不小。再想一下规约的目的，其实很容易就能想通第一列是多少并不重要，重要的是<strong>短向量的第一列相同</strong>(这一点非常容易想通，没理解的话仔细想想)。而要让他们相同，最有效的办法就是让他们均为0，想到这一点后，就可以在格的第一列乘上一个大数K，从而有效的调整一下格，如下：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
K*e1 & 1 & 0 & 0 ... & 0\\
K*e2 & 0 & 1 & 0 ... & 0\\
K*e3 & 0 & 0 & 1 ... & 0\\
...\\
K*e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]</script><p>这样一来，最短向量的第一列就不太可能不是0了(因为会对应的扩大K倍，显著地使规约向量变长)，我测试出取100左右即可，然后就可以求解最大公约数(此时还需注意两点小问题：一是规约出的短向量有负数，普通幂运算中会变成分数形式，通分至等式右侧即可；二是求得的公约数仍有可能是k倍的n，需要去除一些小因子)，最终得到n。</p>
<p><br></p>
<p>recovern.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e= []</span><br><span class="line">c= []</span><br><span class="line"></span><br><span class="line"><span class="comment">#step1</span></span><br><span class="line">L = Matrix(ZZ, <span class="number">20</span>, <span class="number">21</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    L[i,<span class="number">0</span>] = e[i]*<span class="number">1000</span></span><br><span class="line">    L[i,i+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">L = L.LLL()</span><br><span class="line"></span><br><span class="line">alist1 = L[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">k1nl = <span class="number">1</span></span><br><span class="line">k1nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist1[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k1nr *= c[i]**(-alist1[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k1nl *= c[i]**alist1[i]</span><br><span class="line">k1n = k1nl-k1nr</span><br><span class="line"></span><br><span class="line">alist2 = L[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">k2nl = <span class="number">1</span></span><br><span class="line">k2nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist2[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k2nr *= c[i]**(-alist2[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k2nl *= c[i]**alist2[i]</span><br><span class="line">k2n = k2nl-k2nr</span><br><span class="line"></span><br><span class="line">n = gcd(k1n,k2n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">while</span>(n % i == <span class="number">0</span>):</span><br><span class="line">        n //= i</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查一下n的长度是否为1024bit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<p>后两个问题也就迎刃而解，最终得到flag：</p>
<font size="4" color="red">NSSCTF{407f8832-6ffd-43bf-91a0-6900758cdff7}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的说来，对格的应用还不够灵活，还需要加深学习。</p>
<p>如果各位有不懂的地方或者发现了文中的问题，欢迎联系我，一起学习进步。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-crypto</title>
    <url>/post/445800a5.html</url>
    <content><![CDATA[<p>这次比赛Crypto难度比较基础，手速快才是硬道理。</p>
<span id="more"></span>
<p>Rank：2</p>
<p><img src="/post/445800a5/image-20230911152911874.png" alt="image-20230911152911874"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请尝试解密它。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱</span><br></pre></td></tr></table></figure>
<p>第一层很明显是base100，之后的每一层像哪个base用哪个解密即可：</p>
<p>1、 base100：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z</span><br></pre></td></tr></table></figure>
<p>2、 base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UlhoYUdxZTdaY1FCbXFyaWl5S0ZKaW4yN2ZiWkpTZHhOd2hBVk1wNzRvUWE0VWs2RXVqTlpkTHNvYVpxNHRMUDd3dXk4OGJiSlhlTGJnN2dxR2RkTm15dGs1S1RGdlk3TmpRR0wzenFrQ3BCM3lmUTFTUkY0OU13Z0JjZkFxWjFhNng=</span><br></pre></td></tr></table></figure>
<p>3、base64：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RXhaGqe7ZcQBmqriiyKFJin27fbZJSdxNwhAVMp74oQa4Uk6EujNZdLsoaZq4tLP7wuy88bbJXeLbg7gqGddNmytk5KTFvY7NjQGL3zqkCpB3yfQ1SRF49MwgBcfAqZ1a6x</span><br></pre></td></tr></table></figure>
<p>4、 base58：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">G53XC4LIK5DWQ53UIFSGCUTCJFCGM4DSM5UXOYTILBUXU6TXJ5SUUT2DONHTQZ3GJNCFSUDINRXE6MTEINUXOQLVLI4VU===</span><br></pre></td></tr></table></figure>
<p>5、 base32：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7wqqhWGhwtAdaRbIDfprgiwbhXizzwOeJOCsO8gfKDYPhlnO2dCiwAuZ9Z</span><br></pre></td></tr></table></figure>
<p>6、base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;fe853b49-8730-462e-86f5-fc8e9789f077&#125;</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fe853b49-8730-462e-86f5-fc8e9789f077}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">树木新开发了一个加密系统，这个系统会把他的秘密加密很多次然后发送给不同的用户，你能找到其中的漏洞吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n3 = p * q</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m,e,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c3 =&quot;</span>,c3)</span><br></pre></td></tr></table></figure>
<p>经典的广播攻击，思路就是使用中国剩余定理得到$\quad mod \; (n1n2n3)\quad$下的$\quad m^{17}\quad$，再开17次方根即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = </span><br><span class="line">n2 = </span><br><span class="line">n3 = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">c3 = </span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">n = [n1,n2,n3]</span><br><span class="line">c = [c1,c2,c3]</span><br><span class="line">M = crt(n,c)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(M,<span class="number">17</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fdc0afb5-1c81-46b9-a28a-241f5f64419d}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个题目名充分表现了作者由于学CTF导致吃不上饭，明天就打算跑路的心里想法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, message</span><br><span class="line"><span class="comment"># message is a Classic English Story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    tmp = (message[i*<span class="number">30</span>:(i+<span class="number">1</span>)*<span class="number">30</span>].encode())</span><br><span class="line">    <span class="built_in">print</span>(binascii.hexlify(strxor(tmp,flag)).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218</span></span><br><span class="line"><span class="comment"># 3769373b66142f31297f291126410e042b01162d59103a0c005221075013</span></span><br><span class="line"><span class="comment"># 37242c202e1e3f743c36371130410c1e2b491a31574406014505291a550e</span></span><br><span class="line"><span class="comment"># 7f6922742e1a213270372e01264105193004532b1f554e120c1e2a145618</span></span><br><span class="line"><span class="comment"># 7d69143c23156d18392b35183141310e3b49213613590003453a291a555d</span></span><br><span class="line"><span class="comment"># 36273731341e297424372454230e0c0f2c49127f005f020245112718545d</span></span><br><span class="line"><span class="comment"># 26396320295b2531227161273c04430f360d533118444e0f0b1d31554615</span></span><br><span class="line"><span class="comment"># 323d6335660c24373b3a2554350f0a063e05533712101905165e66145f19</span></span><br><span class="line"><span class="comment"># 733e222766152220703e27063508074b300f53371e5d40444735291a555d</span></span><br><span class="line"><span class="comment"># 37283a7432146d2d3f2a6d541808171f330c530d12544e360c162f1b565d</span></span><br></pre></td></tr></table></figure>
<p>很明确的一个Many-Time-Pad，也对应了题目名字MTP，预期来说应该是上一个知名MTP脚本求解。</p>
<p>但是其实完全不需要，因为题目给了这样一个提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># message is a Classic English Story</span><br></pre></td></tr></table></figure>
<p>我们又有flag的前六个字符：<strong>SICTF{</strong></p>
<p>那么拿去异或一下就有：</p>
<p><img src="/post/445800a5/image-20230908224043439.png" alt="image-20230908224043439"></p>
<p>合理猜测这是一个Little开头的英语故事，那么由于异或的可逆性，直接把密文搬上明文的位置，来试几个：</p>
<p>Little Prince（小王子）：</p>
<p><img src="/post/445800a5/image-20230908224223829.png" alt="image-20230908224223829"></p>
<p>不太对，换一个，Little Red Riding Hood：</p>
<p><img src="/post/445800a5/image-20230908224336581.png" alt="image-20230908224336581"></p>
<p>这就成了，又可以看出flag串后面应该是wonderful的变形，那么再把flag串搬上来逐个尝试即可：（因为可以变的其实就大小写、以及形近数字，一个字符一个字符增加，试几次就出来了）：</p>
<p><img src="/post/445800a5/image-20230908224509359.png" alt="image-20230908224509359"></p>
<p>flag：</p>
<p><strong>SICTF{MTP_AtTack_is_w0nderFu1}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你知道CopperSmith吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = p &gt;&gt; <span class="number">230</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"><span class="string">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line"><span class="string">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直白的p高位泄漏，直接解密即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line">p4 = <span class="number">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits=pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>,epsilon = <span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{3f9366ed-b8e4-412f-bbd0-62616a24115c}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">签到题来咯！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = getPrime(<span class="number">10</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c1 = <span class="built_in">pow</span>(<span class="number">114</span>*m+<span class="number">2333</span>,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(<span class="number">514</span>*m+<span class="number">4555</span>,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line"><span class="string">c1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line"><span class="string">c2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>经典的明文相关消息攻击，略做了一点变种。思路如下，列出两个多项式：</p>
<script type="math/tex; mode=display">
(114*x+2333)^{e}\equiv c1\quad (mod\;n)</script><script type="math/tex; mode=display">
(514*x+4555)^{e}\equiv c2\quad (mod\;n)</script><p>又因为明文m显然是两个模多项式的根，因此两个模多项式有公因子：</p>
<script type="math/tex; mode=display">
(x-m)</script><p>因此构造出模n环下的两个多项式，并求公因式即可。至于e是多少，仅需要在指定范围内爆破一下就可以。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line">a1 = <span class="number">114</span></span><br><span class="line">b1 = <span class="number">2333</span></span><br><span class="line">a2 = <span class="number">514</span></span><br><span class="line">b2 = <span class="number">4555</span></span><br><span class="line">elist = [<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (a1*x + b1)^e - c1</span><br><span class="line">    g2 = (a2*x + b2)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> elist:</span><br><span class="line">    m1 = attack(c1, c2, e, n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;SICTF&quot;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(m1))):</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(m1))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{hhh!!franklin_reiter_is_easy}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个低加密指数攻击为什么打不出来哇？是不是题有问题捏？差评！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag=<span class="string">&quot;SICTF&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m1=((m&gt;&gt;<span class="number">60</span>)&lt;&lt;<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;((m&gt;&gt;60)&lt;&lt;60)=&quot;</span>,m1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line"><span class="string">e= 3</span></span><br><span class="line"><span class="string">c= 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line"><span class="string">((m&gt;&gt;60)&lt;&lt;60)= 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>已知明文高位攻击，直接上脚本。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n= <span class="number">23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line">m= <span class="number">11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m + x)^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots()</span><br><span class="line"></span><br><span class="line">m = m + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{2ca8e589-4a31-4909-80f0-9ecfc8f8cb37}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实数学很简单辣！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">hint2 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint1 = <span class="subst">&#123;hint1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint2 = <span class="subst">&#123;hint2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line"><span class="string">hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line"><span class="string">hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line"><span class="string">c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意到hint1、hint2的生成过程：</p>
<script type="math/tex; mode=display">
hint1 = a1*p+b1*q</script><script type="math/tex; mode=display">
hint2 = a2*p+b2*q</script><p>而p前的系数a1、a2很小，因此可以先打印出所有13比特的素数存在一张表内，作为a1、a2的所有可能取值，然后如下操作：</p>
<script type="math/tex; mode=display">
a2*hint1-a1*hint2=a2*(a1*p+b1*q) - a1*(a2*p+b2*q)=(a2*b1-a1*b2)*q</script><p>与n求gcd即可得到q，之后进行RSA解密即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primelist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>,<span class="number">2</span>**<span class="number">13</span>) <span class="keyword">if</span> isPrime(i)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primelist:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primelist:</span><br><span class="line">        <span class="keyword">if</span>(GCD(hint1*i - hint2*j,n) != <span class="number">1</span>):</span><br><span class="line">            q = GCD(hint1*i - hint2*j,n)</span><br><span class="line">p = n//q</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{452aebb6-9c16-441a-ac42-fc608bf6063f}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>越熟练手速就会越快，继续努力！</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-曲线</title>
    <url>/post/187210a7.html</url>
    <content><![CDATA[<p>该文章主要记录一些曲线相关的趣题</p>
<span id="more"></span>
<h3 id="EdRSA"><a href="#EdRSA" class="headerlink" title="EdRSA"></a>EdRSA</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">gx=bytes_to_long(flag)</span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eG = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(mul(e, G)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (602246821311345089174443402780402388933602410138142480089649941718527311147, 17625197557740535449294773567986004828160284887369041337984750097736030549853)</span></span><br></pre></td></tr></table></figure>
<p>简单看一下题目流程，题目定义了一个有限域上一条曲线的点加和点乘操作，其中曲线形式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br></pre></td></tr></table></figure>
<p>写出表达式如下：</p>
<script type="math/tex; mode=display">
ax^2+y^2 = 1+dx^2y^2\quad(mod\;p)</script><p>搜索一下，发现这是标准型的扭曲爱德华曲线：(Twisted Edwards Curves)</p>
<p><a href="https://lazzzaro.github.io/2021/01/20/crypto-曲线/">曲线 | Lazzaro (lazzzaro.github.io)</a></p>
<p>而仔细核对一下点加与点乘，发现都是完全对的上的。因此问题就转化为，已知Edcurve上的一个e倍点，求解该e倍点对应的原点G的横坐标，即为flag。</p>
<p>想一想，如果这是一条常见形式的椭圆曲线，求解方式是什么？步骤如下：</p>
<ul>
<li>用sage中的order()函数求解出该椭圆曲线的阶n</li>
<li>求出e关于阶n的逆元，记为t</li>
<li>求倍点G=t*(eG)，横坐标即为所求</li>
</ul>
<p>那么再回头，这个求解过程对于Edcurve肯定也是类似的，不过问题就在于，sage中没有办法直接求出Edcurve这种形式的曲线的阶，因此确定思路：</p>
<ul>
<li>将Edcurve通过换元映射，变换为常见的椭圆曲线的形式</li>
<li>求解出对应椭圆曲线的阶，记为s</li>
<li>求倍点G’ = s*(eG’)</li>
<li>将求解出的G’再变换回Edcurve上得到G，其横坐标即为所求</li>
</ul>
<p>因此难点就在于如何通过换元进行曲线映射，这里陈述一下换元过程：<strong>(以下除法均为有限域上除法，即乘逆元)</strong></p>
<p><strong>第一步：</strong>转化为蒙哥马利曲线方程(Montgomery)：</p>
<p>参考：<a href="https://christianepeters.files.wordpress.com/2012/10/20080620-rennes.pdf">Edwards Curves (wordpress.com)</a></p>
<script type="math/tex; mode=display">
x' = \frac{1+y}{1-y}</script><script type="math/tex; mode=display">
y'=\frac{1+y}{x(1-y)}</script><script type="math/tex; mode=display">
B=\frac{4}{a-d}</script><script type="math/tex; mode=display">
A=\frac{2(a+d)}{a-d}</script><p>代入到Edcurve的曲线方程之后，曲线会转化为蒙哥马利曲线，其方程形式如下：</p>
<script type="math/tex; mode=display">
B(y')^2 = (x')^3+A(x')^2+(x')\quad(mod\;p)</script><p><strong>第二步：</strong>转化为椭圆曲线方程(Weierstrass)：</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/Montgomery_curve">Montgomery curve - Wikipedia</a></p>
<script type="math/tex; mode=display">
x'' = \frac{3x'+A}{3B}</script><script type="math/tex; mode=display">
y''=\frac{y'}{B}</script><script type="math/tex; mode=display">
a=\frac{3-A^2}{3B^2}</script><script type="math/tex; mode=display">
b=\frac{2A^3-9A}{27B^3}</script><p>此时蒙哥马利曲线就变成了椭圆曲线方程形式：</p>
<script type="math/tex; mode=display">
(y'')^2 = (x'')^3+a(x'')+b\quad(mod\;p)</script><p>然后求该曲线的阶，从而求解出远原点G，并且重新逆变换回Edcurve，得到的横坐标即为flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">P.&lt;z&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">aa = a</span><br><span class="line">dd = (d*c^<span class="number">4</span>)%p</span><br><span class="line">J = (<span class="number">2</span>*(aa+dd)*inverse(aa-dd,p))%p</span><br><span class="line">K = (<span class="number">4</span>*inverse(aa-dd,p))%p</span><br><span class="line">A = ((<span class="number">3</span>-J^<span class="number">2</span>)*inverse(<span class="number">3</span>*K^<span class="number">2</span>,p))%p</span><br><span class="line">B = ((<span class="number">2</span>*J^<span class="number">3</span>-<span class="number">9</span>*J)*inverse(<span class="number">27</span>*K^<span class="number">3</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  P(z^<span class="number">3</span>+A*z+B).roots():</span><br><span class="line">    alpha = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> P(z^<span class="number">2</span>-(<span class="number">3</span>*alpha^<span class="number">2</span>+A)).roots():</span><br><span class="line">        s = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">        s = inverse(s, p)</span><br><span class="line">        <span class="keyword">if</span> J==alpha*<span class="number">3</span>*s%p:</span><br><span class="line">            Alpha = alpha</span><br><span class="line">            S = s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twist_to_weier</span>(<span class="params">x,y</span>):</span><br><span class="line">    v = x*inverse(c,p)%p</span><br><span class="line">    w = y*inverse(c,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*v^<span class="number">2</span>+w^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*v^<span class="number">2</span>*w^<span class="number">2</span>)%p</span><br><span class="line">    s = (<span class="number">1</span>+w)*inverse(<span class="number">1</span>-w,p)%p</span><br><span class="line">    t = s*inverse(v,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (K*t^<span class="number">2</span>)%p==(s^<span class="number">3</span>+J*s^<span class="number">2</span>+s)%p</span><br><span class="line">    xW = (<span class="number">3</span>*s+J) * inverse(<span class="number">3</span>*K, p) % p</span><br><span class="line">    yW = t * inverse(K, p) % p</span><br><span class="line">    <span class="keyword">assert</span> yW^<span class="number">2</span> % p == (xW^<span class="number">3</span>+A*xW+B) % p</span><br><span class="line">    <span class="keyword">return</span> (xW,yW)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weier_to_twist</span>(<span class="params">x,y</span>):</span><br><span class="line">    xM=S*(x-Alpha)%p</span><br><span class="line">    yM=S*y%p</span><br><span class="line">    <span class="keyword">assert</span> (K*yM^<span class="number">2</span>)%p==(xM^<span class="number">3</span>+J*xM^<span class="number">2</span>+xM)%p</span><br><span class="line">    xe = xM*inverse(yM,p)%p</span><br><span class="line">    ye = (xM-<span class="number">1</span>)*inverse(xM+<span class="number">1</span>,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*xe^<span class="number">2</span>+ye^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*xe^<span class="number">2</span>*ye^<span class="number">2</span>)%p</span><br><span class="line">    xq = xe*c%p</span><br><span class="line">    yq = ye*c%p</span><br><span class="line">    <span class="keyword">assert</span> (a*xq^<span class="number">2</span>+yq^<span class="number">2</span>)%p==c^<span class="number">2</span>*(<span class="number">1</span>+d*xq^<span class="number">2</span>*yq^<span class="number">2</span>)%p</span><br><span class="line">    <span class="keyword">return</span> (xq,yq)</span><br><span class="line"> </span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">order = E.order()</span><br><span class="line">eG = (<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line">eG = twist_to_weier(<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line"><span class="comment">#print(eG)</span></span><br><span class="line">eG = E(eG)</span><br><span class="line">t = inverse(e,order)</span><br><span class="line">G = t*eG</span><br><span class="line"><span class="comment">#print(G)</span></span><br><span class="line"><span class="comment">#(36261107889873779109466209751550197981810668464592052789439409682189116521876 , 28177359502202272008748289223947413248814289299639597442379536527477393059697)</span></span><br><span class="line">G = weier_to_twist(<span class="number">36261107889873779109466209751550197981810668464592052789439409682189116521876</span> , <span class="number">28177359502202272008748289223947413248814289299639597442379536527477393059697</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(G[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>DASCTF{y0u_kn0w_edcurv3_w3LL!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="EC-Party-I"><a href="#EC-Party-I" class="headerlink" title="EC_Party-I"></a>EC_Party-I</h3><p>题目来源：“华为杯”第二届中国研究生网络安全创新大赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:]==<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin</span>(<span class="params">m</span>):</span><br><span class="line">    m = m+os.urandom(<span class="number">32</span>)</span><br><span class="line">    p = getPrime(<span class="number">384</span>)</span><br><span class="line">    q = getPrime(<span class="number">384</span>)</span><br><span class="line">    Fp = GF(p)</span><br><span class="line">    Fq = GF(q)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">2</span></span><br><span class="line">    a = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">    Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">    En = EllipticCurve(Zmod(n), [a, b])</span><br><span class="line">    ord_p = Ep.order()</span><br><span class="line">    ord_q = Eq.order()</span><br><span class="line"></span><br><span class="line">    xm = bytes_to_long(m)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Gp = Ep.lift_x(Fp(xm))</span><br><span class="line">            Gq = Eq.lift_x(Fq(xm))</span><br><span class="line">            ym = crt([<span class="built_in">int</span>(Gp.xy()[<span class="number">1</span>]),<span class="built_in">int</span>(Gq.xy()[<span class="number">1</span>])],[p,q])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> :</span><br><span class="line">            xm += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    M = En((xm,ym))</span><br><span class="line">    C = e*M</span><br><span class="line">    pk = [a, b, n, C]</span><br><span class="line">    leak = ord_p*ord_q</span><br><span class="line">    <span class="keyword">return</span> pk, leak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rabin(flag))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733, 4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040, 762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543, (19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965, 728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772), 762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>梳理题目加密流程：</p>
<ul>
<li>题目将flag转化成大整数后，转化为基点M的横坐标</li>
<li>生成两个大素数p、q，n=p*q</li>
<li>生成随机数a、b，并以此生成三条椭圆曲线Ep、Eq、En</li>
<li>求出基点M在Ep、Eq上的倍点，并用中国剩余定理求出组合后的纵坐标</li>
<li>给出泄露信息leak=order(Ep)*order(Eq)</li>
</ul>
<p>那么显然如果能获得n的分解，题目就没有难度了，而泄漏的leak就是n的分解的重要依据。其具体原理可以参考：(因为我其实也并没有理解清楚)</p>
<p><a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/HITCON CTF 2022/Chimera/README.md">My-CTF-Challenges/HITCON CTF 2022/Chimera/README.md at master · maple3142/My-CTF-Challenges (github.com)</a></p>
<p>简单来说，就是先获得leak的因式分解：</p>
<p><img src="/post/187210a7/image-20230930114139546.png" alt="image-20230930114139546"></p>
<p>由于leak=order(Ep)*order(Eq)，因此leak乘任何点都应该是En、Ep、Eq的共同O点(无穷远点)，但是将leak挨个除以其因子，再与C点相乘，就可能会产生倍点在Ep上，而不在Eq上的情况，这会使求解关于n的逆元不存在，sage便会在这时抛出一个报错，而在报错信息中就能看到kp以及n的分解：(这是我的理解，如果有不对的地方欢迎师傅指出)</p>
<p><img src="/post/187210a7/image-20230930114719034.png" alt="image-20230930114719034"></p>
<p>这个数字就是kp，与n求gcd即可得到p，也可以在最后一行报错信息中直接看到n的分解。</p>
<p>其实这种分解方式就是<a href="https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization">Lenstra elliptic-curve factorization</a>.的核心原理，但我没有完全理解。</p>
<p>求解出p、q后，就顺势获得了两条曲线，接下来就是如何由曲线上的倍点(2M)求解出原点的问题，一般有两类解法：</p>
<p>1、如果2与曲线阶互素，则可以直接求解2的逆元，将倍点乘上逆元即得原点</p>
<p>2、如果不互素，则可以联立椭圆曲线本身方程及倍点方程，在有限域下求根</p>
<p>而在本题中，2与Eq的阶互素，因此采用第一种解法；与Ep的阶不互素，因此采用第二种解法，第二种解法联立方程过程如下：(记M为(x1,y1),2M为(x2,y2))</p>
<script type="math/tex; mode=display">
y^2=x^3+ax+b\quad(mod\;p)</script><script type="math/tex; mode=display">
x_2=k^2−2x_1\quad(mod\;p)</script><script type="math/tex; mode=display">
k = \frac{3x_1^2 + a}{2y_1}\quad(mod\;p)</script><p>联立上述三式可得方程：</p>
<script type="math/tex; mode=display">
\frac{(3x_1^2+a)^2}{(2y_1)^2} - 2x_1 - x_2 = 0\quad(mod\;p)</script><p>即：</p>
<script type="math/tex; mode=display">
(3x_1^2+a)^2 - 2x_1*4(x_1^3+ax_1+b) - x_2*4(x_1^3+ax_1+b) = 0\quad(mod\;p)</script><p>此时方程中仅有x1一个未知数，在模p下解方程即可，解完后用中国剩余定理将模p与模q下的解组合即得flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">a,b,n,C,leak = [<span class="number">138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733</span>, <span class="number">4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040</span>, <span class="number">762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543</span>, (<span class="number">19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965</span>, <span class="number">728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772</span>), <span class="number">762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828</span>]</span><br><span class="line">E = EllipticCurve(Zmod(n),[a,b])</span><br><span class="line">C = E(C)</span><br><span class="line"></span><br><span class="line"><span class="comment">#factordb</span></span><br><span class="line"><span class="comment">#2^2,3^4,13,199,307,647,157259,297617,8452217,411927661365999433,1157516701716180046249,1338688620929080207819,31226697952255326809332037614333,581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span></span><br><span class="line">leak_fac = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">199</span>,<span class="number">307</span>,<span class="number">647</span>,<span class="number">157259</span>,<span class="number">297617</span>,<span class="number">8452217</span>,<span class="number">411927661365999433</span>,<span class="number">1157516701716180046249</span>,<span class="number">1338688620929080207819</span>,<span class="number">31226697952255326809332037614333</span>,<span class="number">581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in leak_fac:</span></span><br><span class="line"><span class="string">    temp = leak // i * C</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">kp = <span class="number">422522588482185975632147929645103216180089543839772868484032620301855259044079430236142637458472152787337779544279109415705783248825091269039840404202119229567311048216047356951966653331710686649176005328509793328313264251738045723</span></span><br><span class="line">p = GCD(kp,n)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">ord_p = Ep.order()</span><br><span class="line">ord_q = Eq.order()</span><br><span class="line"><span class="comment">#print(ord_p)</span></span><br><span class="line"><span class="comment">#print(ord_q)</span></span><br><span class="line"></span><br><span class="line">dq = inverse(e,ord_q)</span><br><span class="line">Q = dq*Eq(C)</span><br><span class="line">mq = <span class="built_in">int</span>(Q[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(Ep(C))</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = (<span class="number">3</span>*(x**<span class="number">2</span>)+a)**<span class="number">2</span> - <span class="number">2</span>*x*(<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)) - <span class="built_in">int</span>(C[<span class="number">0</span>])*<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"></span><br><span class="line">n = [p,q]</span><br><span class="line"><span class="keyword">if</span>(res):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),mq]</span><br><span class="line">        m = crt(c,n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{3crab1n_s0unds_go0d}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="strange-curve"><a href="#strange-curve" class="headerlink" title="strange curve"></a>strange curve</h3><p>题目来源：巅峰极客 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">    (x1,y1)=P</span><br><span class="line">    (x2,y2)=Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    x3=(x1+x2)*(<span class="number">1</span>+y1*y2)*invert((<span class="number">1</span>+x1*x2)*(<span class="number">1</span>-y1*y2),p)%p</span><br><span class="line">    y3=(y1+y2)*(<span class="number">1</span>+x1*x2)*invert((<span class="number">1</span>-x1*x2)*(<span class="number">1</span>+y1*y2),p)%p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x3,y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">e,P</span>):</span><br><span class="line">    Q=(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    e=e%p</span><br><span class="line">    <span class="keyword">while</span> e:</span><br><span class="line">        <span class="keyword">if</span> e&amp;<span class="number">1</span>:</span><br><span class="line">            Q=add(Q,P)</span><br><span class="line">        P=add(P,P)</span><br><span class="line">        e&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Legendre</span>(<span class="params">a,p</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>((a%p+p)%p,(p-<span class="number">1</span>)//<span class="number">2</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ts</span>(<span class="params">p</span>):</span><br><span class="line">    p=p-<span class="number">1</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        p=p//<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> count,p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_nonre</span>(<span class="params">p</span>):</span><br><span class="line">    a=random.randint(<span class="number">1</span>,p)</span><br><span class="line">    <span class="keyword">while</span> Legendre(a,p)==<span class="number">1</span>:</span><br><span class="line">        a=random.randint(<span class="number">1</span>,p)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">amm2</span>(<span class="params">a,p</span>):</span><br><span class="line">    t,s=get_ts(p)</span><br><span class="line">    ta=<span class="built_in">pow</span>(get_nonre(p),s,p)</span><br><span class="line">    tb=<span class="built_in">pow</span>(a,s,p)</span><br><span class="line">    h=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,t):</span><br><span class="line">        d=<span class="built_in">pow</span>(tb,<span class="number">2</span>**t-<span class="number">1</span>-i,p)</span><br><span class="line">        <span class="keyword">if</span> d==<span class="number">1</span>:</span><br><span class="line">            k=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k=<span class="number">1</span></span><br><span class="line">        tb=(tb*<span class="built_in">pow</span>(ta,<span class="number">2</span>*k,p))%p</span><br><span class="line">        h=(h*<span class="built_in">pow</span>(ta,k,p))%p</span><br><span class="line">        ta=<span class="built_in">pow</span>(ta,<span class="number">2</span>,p)</span><br><span class="line">    <span class="keyword">return</span> h*<span class="built_in">pow</span>(a,(s+<span class="number">1</span>)//<span class="number">2</span>,p)%p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">a,b,c,p</span>):</span><br><span class="line">    tmpa=<span class="number">1</span></span><br><span class="line">    tmpb=b*inverse(a,p)%p</span><br><span class="line">    tmpc=c*inverse(a,p)%p</span><br><span class="line">    <span class="keyword">assert</span> Legendre(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)==<span class="number">1</span></span><br><span class="line">    res1=(amm2(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="number">2</span>,p))%p</span><br><span class="line">    res2=(-amm2(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="number">2</span>,p))%p</span><br><span class="line">    <span class="keyword">return</span> (res1,res2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lift</span>(<span class="params">x,a,b,p</span>):</span><br><span class="line">    tmp=b*(x**<span class="number">2</span>-<span class="number">1</span>)*inverse(a*x,p)%p</span><br><span class="line">    <span class="keyword">return</span> solve(<span class="number">1</span>,-tmp,-<span class="number">1</span>,p)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">p=<span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class="line">a=<span class="number">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class="line">b=<span class="number">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class="line">x=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        y=lift(x,a,b,p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a*x*(y**<span class="number">2</span>-<span class="number">1</span>)%p==b*y*(x**<span class="number">2</span>-<span class="number">1</span>)%p</span><br><span class="line"></span><br><span class="line">P=(x,y)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">eP=mul(e,P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;P = <span class="subst">&#123;P&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;eP = <span class="subst">&#123;eP&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class="line"><span class="string">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>非预期解很容易，flag就是P的横坐标，最多再需要爆破一下就行，这里主要讲一下预期解。</p>
<p>我认为题目预期应该是不给P，而只给eP的，因此我就以只有eP这个条件开始解题，分析过程如下：</p>
<p>首先，前面的很多函数先不看，先关注题目给的曲线方程：</p>
<script type="math/tex; mode=display">
ax(y^2-1) \equiv by(x^2-1) \quad(mod\;p)</script><p>而就在前几天的2023 DASCTF CBCTF中，出了一道huff曲线题，而huff曲线的一般形式为：</p>
<script type="math/tex; mode=display">
x(ay^2-1) \equiv y(bx^2-1) \quad(mod\;p)</script><p>可以发现其实很像，我们只需要做以下映射就可以把题目曲线变成一个标准huff曲线：</p>
<script type="math/tex; mode=display">
x' = ax</script><script type="math/tex; mode=display">
y' = by</script><p>那么题目曲线就变成了：</p>
<script type="math/tex; mode=display">
x(\frac{y^2}{b^2}-1) \equiv y(\frac{x^2}{a^2}-1) \quad(mod\;p)</script><p>可以发现这就是个标准huff曲线：</p>
<script type="math/tex; mode=display">
x(a'y^2-1) \equiv y(b'x^2-1) \quad(mod\;p)</script><p>其中：</p>
<script type="math/tex; mode=display">
a' = (b^2)^{-1} \quad(mod\;p)</script><script type="math/tex; mode=display">
b' = (a^2)^{-1} \quad(mod\;p)</script><p>而huff曲线又可以通过如下方式映射为一条Weiestrass Curve，也就是常见的椭圆曲线：</p>
<script type="math/tex; mode=display">
(x,y)→(\frac{b'x-a'y}{y-x},\frac{b'-a'}{y-x})</script><p>该Weiestrass Curve方程如下：</p>
<script type="math/tex; mode=display">
y^2≡x^3+(a'+b')x^2+a'b'x \quad mod \quad p</script><p>映射为这样的曲线后，sage就可以直接求出阶。而映射由于是双射所以不会改变曲线阶，所以我们其实也就求得了原huff曲线的阶，然后就可以求e关于阶的逆元d，就有：</p>
<script type="math/tex; mode=display">
d*eP' = P'</script><p>然后再将第一次映射逆回去就能得到原P点坐标了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=<span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class="line">a=<span class="number">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class="line">b=<span class="number">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">eP = (<span class="number">8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005</span>,<span class="number">9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">point</span>):</span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    Ex = (b_*x-a_*y) * inverse(y-x,p) % p</span><br><span class="line">    Ey = (b_-a_) * inverse(y-x,p) % p</span><br><span class="line">    <span class="keyword">return</span> (Ex,Ey)</span><br><span class="line"></span><br><span class="line">a_ = inverse(b**<span class="number">2</span>,p)</span><br><span class="line">b_ = inverse(a**<span class="number">2</span>,p)</span><br><span class="line">E = EllipticCurve(GF(p),[<span class="number">0</span>,a_+b_,<span class="number">0</span>,a_*b_,<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line"></span><br><span class="line">eP_ = (eP[<span class="number">0</span>]*a%p,eP[<span class="number">1</span>]*b%p)</span><br><span class="line">order = <span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570514004897728229958723858012338384995335419723570802793276851855535834618146832</span></span><br><span class="line">d = inverse(e,order)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a_</span><br><span class="line">        self.b = b_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">curve = CB_curve()</span><br><span class="line">P_ = curve.mul(d,eP_)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(inverse(a,p)*P_[<span class="number">0</span>] % p)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;b7f209df-1284-4bdf-b030-28197483c47b&#125;</span></span><br></pre></td></tr></table></figure>
<p>CB_curve其实就是huff曲线的实现，偷懒用了出题师傅的(ᕑᗢᓫ∗)˒</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-misc</title>
    <url>/post/ccf22797.html</url>
    <content><![CDATA[<p>Crypto兼职misc手，浅做点misc娱乐娱乐</p>
<span id="more"></span>
<p><strong>Rank：2</strong></p>
<p><img src="/post/ccf22797/image-20230911152802298.png" alt="image-20230911152802298"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关注微信公众号并发送&quot;SICTF2023&quot;就可以获得flag辣！</span><br></pre></td></tr></table></figure>
<p>签到题，照着做即可。</p>
<p><img src="/post/ccf22797/image-20230908162949748.png" alt></p>
<p>flag：</p>
<p><strong>SICTF{Welcome_to_SICTF2023_#Round2}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这张颜色很奇怪的图片到底是干什么的呢？</span><br></pre></td></tr></table></figure>
<p>下载题目附件，是一个zip压缩包，解密提示需要密码，但是也并没有别的密码提示，所以第一反应就是伪加密。十六进制打开文件：</p>
<p><img src="/post/ccf22797/image-20230908171507928.png" alt="image-20230908171507928"></p>
<p>将这里的1改为0即可解密压缩包，得到图片：</p>
<p><img src="/post/ccf22797/Pixel_art.png" alt="Pixel_art"></p>
<p>并没有发现如题目描述中所说的奇怪的像素点，在stegsolve中打开，切换各种查看方式也没有什么发现。于是想到LSB隐写，可以发现：</p>
<p><img src="/post/ccf22797/image-20230908171812016.png" alt="image-20230908171812016"></p>
<p>果然藏了东西，保存为png文件后查看：</p>
<p><img src="/post/ccf22797/pixel.png" alt="pixel"></p>
<p>这图也太小了，查看其详细信息，果然发现：</p>
<p><img src="/post/ccf22797/image-20230908171941968.png" alt="image-20230908171941968"></p>
<p>大小仅有20*20，不难想到flag被加密进了像素点里。写一个脚本提取像素点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pixel_data)</span><br></pre></td></tr></table></figure>
<p>打印出来的像素点列表是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">33</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">33</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">63</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), ......, (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">46</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>
<p>那么这三个数字显然有特殊含义，当作ASCII码打印出对应字符发现：分别是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">46-. </span><br><span class="line">33-!</span><br><span class="line">63-?</span><br></pre></td></tr></table></figure>
<p>这三个字符不难对应到Ook加密上，写个完整脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pixel_data)):</span><br><span class="line">    <span class="keyword">if</span>(pixel_data[i] == (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pixel_data[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ook&quot;</span>+<span class="built_in">chr</span>(j),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>拿生成的字符串去在线网址解密：</p>
<p><img src="/post/ccf22797/image-20230908172734509.png" alt="image-20230908172734509"></p>
<p>flag：</p>
<p><strong>SICTF{0141ac35-ec19-4cee-a906-22805fdbed77}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻破这个压缩包！</span><br></pre></td></tr></table></figure>
<p>题目给了一个压缩包，首先检查出是真加密，然后尝试ziprello爆破无果，binwalk也没有发现额外文件，那么就只能是深入明文攻击了。</p>
<p>深入明文攻击参考：</p>
<p><a href="https://hasegawaazusa.github.io/zip-crack-note.html#zip-破解">zip压缩包取证笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p>
<p>由参考博客知，进行深入明文攻击需要至少12个已知字节。而由于已知压缩包内为png文件，也就知道文件头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</span><br></pre></td></tr></table></figure>
<p>所以，我们至少知道了16个准确的字节，超过了12个字节，已经满足深入明文攻击的条件了，(多的已知字节可以加快速度)，接下来就使用工具即可。</p>
<p><img src="/post/ccf22797/image-20230909112256733.png" alt="image-20230909112256733"></p>
<p>两步操作分别是：把已知十六进制的字节写入文件key.txt，再进行深入明文攻击即可。跑了接近二十分钟后，出了zip的三段内部密码(上图中最后一行)，直接进行解密即可：</p>
<p><img src="/post/ccf22797/image-20230909112437253.png" alt="image-20230909112437253"></p>
<p>得到图片：</p>
<p><img src="/post/ccf22797/flag1.png" alt="flag1"></p>
<p>十六进制打开末尾即得flag：</p>
<p><img src="/post/ccf22797/image-20230909112540496.png" alt="image-20230909112540496"></p>
<p>flag：</p>
<p><strong>SICTF{3a4998b8-345e-4943-a689-d01e8b08defb}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你为什么还不上号啊？宝！</span><br><span class="line">Hint：你知道CobaltStrike吗？</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量包，导出http流对象，可以发现一个key.zip：</p>
<p><img src="/post/ccf22797/image-20230909142543063.png" alt="image-20230909142543063"></p>
<p>导出该压缩包并解压，得到一个key文件，那现在要做的就是提取出key中的信息，去解密流量中的数据。但是怎么找都没找到这种key文件怎么使用，思路也就暂时停滞了。</p>
<p>直到hint出现，那就直接搜索CobaltStrike，发现一道类似流量分析题，照着一步步做就有了(其中CS_Decrypt中有一个脚本用到M2Crypto库，但是pip不下来，搜索资料发现这个库停止更新很久了，可能python版本对不上，平替为pycryptodome即可)：</p>
<p><a href="https://blog.csdn.net/qq_43264813/article/details/120560209">2021年“绿城杯”网络安全大赛-Misc-流量分析_夜白君的博客-CSDN博客</a></p>
<p>得到flag：</p>
<p><img src="/post/ccf22797/image-20230909142844158.png" alt="image-20230909142844158"></p>
<p>flag：</p>
<p><strong>SICTF{88a39373-e204-43b6-b321-33ac8972fde9}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我就扫码而已啦！为什么要用pwntools？</span><br></pre></td></tr></table></figure>
<p>题目给了一个端口，先用xshell手动交互一下：</p>
<p><img src="/post/ccf22797/image-20230910150031807.png" alt="image-20230910150031807"></p>
<p>可以依稀看出是二维码的定位符，那么思路就是把这些0、1转化为二维码并扫码得到数据，但是粘出来数据想写脚本的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150225007.png" alt="image-20230910150225007"></p>
<p>笑死，vscode右侧的预览直接显示出了二维码的效果，那直接扫码得到数据：</p>
<p><img src="/post/ccf22797/image-20230910150358330.png" alt="image-20230910150358330"></p>
<p>但是上传这串数据的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150429700.png" alt="image-20230910150429700"></p>
<p>超时了，彳亍，那确实得写脚本自动交互，交互一次后发现靶机端还会发送二维码数据，那应该是要循环一定次数后才会给flag了。</p>
<p>之后就是枯燥的debug时间。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;210.44.151.51&quot;</span>,<span class="number">10468</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    data = <span class="built_in">list</span>(r.recvuntil(<span class="string">b&quot;P&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义图像的宽度和高度（根据数据长度调整）</span></span><br><span class="line">    width = <span class="number">116</span></span><br><span class="line">    height = <span class="number">116</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个空白图像</span></span><br><span class="line">    image = Image.new(<span class="string">&quot;1&quot;</span>, (width, height), color=<span class="number">1</span>)  <span class="comment"># 1表示单色（黑白）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图像的像素访问对象</span></span><br><span class="line">    pixels = image.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将01数据填充到图像中</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            index = y * width + x</span><br><span class="line">            <span class="keyword">if</span> index &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[index] == <span class="number">48</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">0</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">1</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图像为文件</span></span><br><span class="line">    image.save(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line">    decocdeQR = decode(Image.<span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>))[<span class="number">0</span>].data</span><br><span class="line">    r.sendline(decocdeQR)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>循环1000次后，靶机端发送flag：</p>
<p><strong>SICTF{d7d23552-d917-4ad4-962c-e415dd5b5b6e}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你好快啊！（flag需要包含SICTF&#123;&#125;）</span><br></pre></td></tr></table></figure>
<p>题目给了一个音频，Audacity打开：</p>
<p><img src="/post/ccf22797/image-20230910150829891.png" alt="image-20230910150829891"></p>
<p>经典的音频隐写摩斯电码，但是敲完摩斯密码，最后得到的uuid少了一位，<del>私聊出题人拿flag即可</del>。</p>
<p><br></p>
<p><br></p>
<h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鲨鱼！嗷呜！</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量文件，追踪tcp流能发现一段php代码：</p>
<p><img src="/post/ccf22797/image-20230910151203093.png" alt="image-20230910151203093"></p>
<p>可以看出，在openssl扩展有效时，这段代码对数据的解密方式为AES_128后base64，并且给了key的值(之后了解到这是很明显的冰蝎的特征)。那么就可以使用cyberchef，对之后的每个tcp流里的base64数据进行恢复：</p>
<p><img src="/post/ccf22797/image-20230910151658797.png" alt="image-20230910151658797"></p>
<p>再把解密出来的密文内部的base64段提取出来，再进行解密，就可以在最底下发现：</p>
<p><img src="/post/ccf22797/image-20230910151851063.png" alt="image-20230910151851063"></p>
<p>可以看出，实际上这段程序就是在执行最下方的cmd命令，然后对回复的数据也进行如上解密，就可以得到命令执行后的对应内容。如此一来，可以得到两个有用的信息：</p>
<p>GronKey.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,50,61,8,9,20,63,41</span><br></pre></td></tr></table></figure>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span><br></pre></td></tr></table></figure>
<p>flag的内容直接提交上去是不对的，因此肯定还需要进行解密，而如何解密就需要用到GronKey.txt，并且按正常思路，GronKey这个名字肯定是个提示。最终搜索到了Gronsfeld密码，解密即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Gronsfeld</span><br><span class="line"></span><br><span class="line">t = [<span class="number">1</span>,<span class="number">50</span>,<span class="number">61</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">41</span>]</span><br><span class="line">temp = <span class="string">&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span></span><br><span class="line"><span class="built_in">print</span> (Gronsfeld(t).decipher(temp))</span><br></pre></td></tr></table></figure>
<p>这里有个比较坑的点：因为我是知道Gronsfeld这个密码的，但是我记得他的密钥只能是0-9的数字，加密原理就是字母加上密钥对应数字(类似于维吉尼亚密码)，所以开始就排除了这个加密方式。之后一直没有搜到其他的Gron开头的加密，卡了很久。后来我搜到了一个Gronsfeld在线加密：</p>
<p><a href="https://www.wishingstarmoye.com/ctf/vigenere">Vigenere / Gronsfeld - 许愿星 (wishingstarmoye.com)</a></p>
<p>可以发现，他确实用了超过10的数字当作密钥，那这到底是怎么加密的呢？我思考了一下，发现他的加密方式应该是：加密时，每个字母右移密钥列表中对应数字的位数；而解密时，每个字母左移密钥列表中对应数字的位数。</p>
<p>举个例子，T左移1位得到S，这很好理解；而G左移50位，其实就是右移2位(因为模26的缘故)，因此得到I。</p>
<p>这样就可以顺利解密了。</p>
<p>flag：</p>
<p><strong>SICTF{SHUMUISAGOODBOYYYYYYYYY}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="还不上号"><a href="#还不上号" class="headerlink" title="还不上号"></a>还不上号</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一起上号不？来！我教你怎么写payload！</span><br><span class="line">Hint1：四位爆破,多注意一下细节，除了CS还有一部分</span><br><span class="line">Hint2：压缩包密码为we1l</span><br></pre></td></tr></table></figure>
<p>其实这道题就是Easy_shark和一起上号不的结合，这两个都做出来的话，这题其实难度不大了。</p>
<p>题目给了两个流量包，由名字可以知道一个包对应一半flag。其中，包1形式对应Ez_shark，包2形式对应一起上号不。</p>
<p>从包1入手，可以发现对比起Ez_shark，唯一的区别就是他没有给出AES的key值，因此必须要想办法找出key。而包2正好有个key.zip，进行导出：</p>
<p><img src="/post/ccf22797/image-20230910153507463.png" alt="image-20230910153507463"></p>
<p>得到的key.zip不能直接解压，并且是真加密，同时也没法进行明文攻击，那么就ziprello爆破吧，最后得到密码是we1l(并且后来Hint给了)。</p>
<p>打开key文件：</p>
<p><img src="/post/ccf22797/image-20230910153756977.png" alt="image-20230910153756977"></p>
<p>显然有零宽字符，利用在线网站<a href="http://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters (330k.github.io)</a>进行零宽字符解密：</p>
<p><img src="/post/ccf22797/image-20230910154112768.png" alt="image-20230910154112768"></p>
<p>这里要注意在网页下方勾选该文本中所有存在的零宽字符，不然解密会失败：</p>
<p><img src="/post/ccf22797/image-20230910154140388.png" alt="image-20230910154140388"></p>
<p>因此就得到了AES的key，可以按照Ez_Shark的方式对包1的流量依次进行解密，能得到两个有用信息：</p>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;79e1755e-08a8-4d</span><br></pre></td></tr></table></figure>
<p>key：</p>
<p><img src="/post/ccf22797/image-20230910154525684.png" alt="image-20230910154525684"></p>
<p>如果做出来一起上号不那道题，那么对这串数据应该很熟悉，这就是<code>.cobaltstrike.beacon_keys</code>形式的密钥文件，将这段内容保存成文件key1.txt，后续的步骤就和前面那道题就一模一样了。</p>
<p>下面详细记录一下步骤(怕我自己忘)：</p>
<p>1、解析key1.txt文件得到private_key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key1.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    pobj = javaobj.load(fd)</span><br><span class="line">privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">privateKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line">publicKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(privateKey.decode())</span><br><span class="line"><span class="built_in">print</span>(publicKey.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(</span></span><br><span class="line"><span class="comment">#     list(</span></span><br><span class="line"><span class="comment">#         map(</span></span><br><span class="line"><span class="comment">#             lambda x: list(map(lambda y: (y[0].name, y[1]), x.items())),</span></span><br><span class="line"><span class="comment">#             a.field_data.values(),</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<p>2、根据private_key以及流量包中cookie解析出AES key和HMAC key：（其他信息有需要，解除掉注释即可，这里只需要AES与HMAC的key）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"> </span><br><span class="line">PRIVATE_KEY = <span class="string">&quot;&quot;&quot;-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0M6FR0Cb9dW52Nd5NTA1JUNAs1</span></span><br><span class="line"><span class="string">thS8iXx6QB+UkN/vRJdfsKS8dnOfNuPuPDCtx26B2j8I1FuTJ1VrrfDkzN585sskmXYronFM98Dx</span></span><br><span class="line"><span class="string">50vHaadOcDcDdBBqi8gC5/D3iKflX6T9pSL/5PVLfN1EIaFsyAS9jpWX2wGNi3C/QPSrAgMBAAEC</span></span><br><span class="line"><span class="string">gYAdNhXeGtH4wkWqOhY8aurL+VvTUZjRanJ6C+/FkXCzUWbRVwVV5xMMeZEDNigRw4BZ2HGvJL+f</span></span><br><span class="line"><span class="string">aMT+o3VMkCYBhGbi2/3RPRgigMG7Aa3LWWtYWsdbw8Mw6aqqbTjDUHrQ1kulMf1JvXJL5LBd+pBA</span></span><br><span class="line"><span class="string">Q8kHaYJRMcmnLsT4NeXOFQJBAMNa2r+phrThTlagMB6bj6vl0IVbDy+TJT2VybCSJ76rPgVUQwtP</span></span><br><span class="line"><span class="string">yX3z7UAjt27mE8KK+k7Jidi0drCEPv5Wo60CQQD3vQbO64fko1dlatkNn095GO9KoCuanrsLs+vY   </span></span><br><span class="line"><span class="string">Ohc0ltk4EhHHmP5hEE6dSMZNASKaN0wSYJ14xjnA+dJWOES3AkEApzyYF4vhLefTUIVBrHIvxFCw   </span></span><br><span class="line"><span class="string">+fjCP1AQiXA5gVcdfzTJm3ZPDtf2/kRbzpTE68M7F0gykFAoGcQj92i/JKy24QJAdyVbA+M07Ro9   </span></span><br><span class="line"><span class="string">qxHzJ+EJmMUMOMjFj8xtStiSQeDWTj2KZLQUBvmmxcnQ9UYN0PUNzjtwA5qhwXccSZoctcjECwJA   </span></span><br><span class="line"><span class="string">Zc0TZgGq/OwgnIyj/1+Q9D0A2eg3aw1k+6Vzkf/DdkuF6+XTkYTlBGiETIK/vm1rCH4NcOCL7eK5   </span></span><br><span class="line"><span class="string">qpA1grg+gg==</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">encode_data = <span class="string">&quot;j+ojKDVPlCr7lT9yzNinkj1DgdkcRaLMT2kL4U+9TvdFBZqGKk7/4WF/W7JhEieC3DoRfngRppMAVHa3yfhp4HZm/ZeNY4bc8rlYL11Q0dXDzpR5JjhqN+hGe9RBqPznoukShgQLhxT/DO7djxE5ROzi6NC52yZAaGPCSeLDyjg=&quot;</span></span><br><span class="line">base64_key = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">private_key = RSA.import_key(PRIVATE_KEY.<span class="built_in">format</span>(base64_key).encode())</span><br><span class="line">cipher = PKCS1_v1_5.new(private_key)</span><br><span class="line">ciphertext = cipher.decrypt(base64.b64decode(encode_data), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isFlag</span>(<span class="params">var, flag</span>):</span><br><span class="line">	<span class="keyword">return</span> (var &amp; flag) == flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toIP</span>(<span class="params">var</span>):</span><br><span class="line">	var2 = (var &amp; -<span class="number">16777216</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">	var4 = (var &amp; <span class="number">16711680</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">	var6 = (var &amp; <span class="number">65280</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">	var8 = var &amp; <span class="number">255</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>(var2) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var4) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var6) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">var0</span>):</span><br><span class="line">	<span class="keyword">if</span> var0 == <span class="number">37</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM037&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">437</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">500</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM500&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">708</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">709</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">710</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">720</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">737</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM737&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">775</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM775&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">850</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM850&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">852</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM852&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">855</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM855&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">857</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM857&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">858</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM00858&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">860</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM860&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">861</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM861&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">862</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM862&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">863</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM863&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">864</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM864&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">865</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM865&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM866&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">869</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM869&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">870</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM870&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">874</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-874&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">875</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM875&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Shift_JIS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-mswin-936&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-949&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Big5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1026</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1026&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1047</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1047&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1140</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01140&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1141</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01141&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1142</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01142&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1143</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01143&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1144</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01144&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1145</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01145&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1146</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01146&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1147</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01147&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1148</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01148&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1149</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01149&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1200</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1201</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1250</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1250&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1251</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1251&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1252</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1252&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1253</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1253&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1254</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1254&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1255</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1255&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1256</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1256&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1257</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1257&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1258</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1258&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1361</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-Johab&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRoman&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacArabic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacHebrew&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacGreek&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCyrillic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRomania&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10017</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacUkraine&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10021</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacThai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10029</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCentralEurope&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10079</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacIceland&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10081</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacTurkish&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10082</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCroatian&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISO-2022-CN-CNS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20105</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20106</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20107</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20108</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20127</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;US-ASCII&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20261</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20269</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20273</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM273&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20277</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM277&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20278</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM278&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20280</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM280&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20284</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM284&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20285</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM285&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20290</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM290&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20297</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM297&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20420</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM420&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20423</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20424</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM424&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20833</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20838</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM-Thai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-R&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20871</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM871&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20880</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20905</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20924</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21025</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM1025&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21027</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-U&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28591</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-1&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28592</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28593</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-3&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28594</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-4&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28595</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28596</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28597</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-7&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28599</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-9&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28603</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-13&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28605</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-15&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">29001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">38598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50220</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50221</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50222</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50225</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50227</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50229</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50930</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM930&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50931</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50933</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM933&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50935</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM935&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50937</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM937&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50939</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM939&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">52936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">54936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB18030&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57009</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57011</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ciphertext[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">b&#x27;\x00\x00\xBE\xEF&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 16</span></span><br><span class="line">	raw_aes_keys = ciphertext[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var9 = ciphertext[<span class="number">24</span>:<span class="number">26</span>]</span><br><span class="line">	var9 = <span class="built_in">int</span>.from_bytes(var9, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var9 = getName(var9)</span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var10 = ciphertext[<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">	var10 = <span class="built_in">int</span>.from_bytes(var10, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var10 = getName(var10)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	<span class="built_in">id</span> = ciphertext[<span class="number">28</span>:<span class="number">32</span>]</span><br><span class="line">	<span class="built_in">id</span> = <span class="built_in">int</span>.from_bytes(<span class="built_in">id</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;Beacon id:&#123;&#125;&quot;.format(id))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	pid = ciphertext[<span class="number">32</span>:<span class="number">36</span>]</span><br><span class="line">	pid = <span class="built_in">int</span>.from_bytes(pid, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;pid:&#123;&#125;&quot;.format(pid))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	port = ciphertext[<span class="number">36</span>:<span class="number">38</span>]</span><br><span class="line">	port = <span class="built_in">int</span>.from_bytes(port, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;port:&#123;&#125;&quot;.format(port))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 1</span></span><br><span class="line">	flag = ciphertext[<span class="number">38</span>:<span class="number">39</span>]</span><br><span class="line">	flag = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment"># print(flag)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">1</span>):</span><br><span class="line">		barch = <span class="string">&quot;&quot;</span></span><br><span class="line">		pid = <span class="string">&quot;&quot;</span></span><br><span class="line">		is64 = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> isFlag(flag, <span class="number">2</span>):</span><br><span class="line">		barch = <span class="string">&quot;x64&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		barch = <span class="string">&quot;x86&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">4</span>):</span><br><span class="line">		is64 = <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		is64 = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">8</span>):</span><br><span class="line">		bypassuac = <span class="string">&quot;True&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		bypassuac = <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;barch:&quot; + barch)</span></span><br><span class="line">	<span class="comment">#print(&quot;is64:&quot; + is64)</span></span><br><span class="line">	<span class="comment">#print(&quot;bypass:&quot; + bypassuac)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var_1 = ciphertext[<span class="number">39</span>:<span class="number">40</span>]</span><br><span class="line">	var_2 = ciphertext[<span class="number">40</span>:<span class="number">41</span>]</span><br><span class="line">	var_1 = <span class="built_in">int</span>.from_bytes(var_1, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var_2 = <span class="built_in">int</span>.from_bytes(var_2, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	windows_var = <span class="built_in">str</span>(var_1) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var_2)</span><br><span class="line">	<span class="comment">#print(&quot;windows var:&quot; + windows_var)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	windows_build = ciphertext[<span class="number">41</span>:<span class="number">43</span>]</span><br><span class="line">	windows_build = <span class="built_in">int</span>.from_bytes(windows_build, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;windows build:&#123;&#125;&quot;.format(windows_build))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	x64_P = ciphertext[<span class="number">43</span>:<span class="number">47</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gmh = ciphertext[<span class="number">47</span>:<span class="number">51</span>]</span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gpa = ciphertext[<span class="number">51</span>:<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># if (&quot;x64&quot;.equals(this.barch)) &#123;</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.join(var10, this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.join(var10, this.ptr_gpa)</span></span><br><span class="line">	<span class="comment"># &#125;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.bswap(this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.bswap(this.ptr_gpa)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	intz = ciphertext[<span class="number">55</span>:<span class="number">59</span>]</span><br><span class="line">	intz = <span class="built_in">int</span>.from_bytes(intz, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	intz = toIP(intz)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> intz == <span class="string">&quot;0.0.0.0&quot;</span>:</span><br><span class="line">		intz = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">	<span class="comment">#print(&quot;host:&quot; + intz)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> var9 == <span class="literal">None</span>:</span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="comment"># ??x-mswin-936</span></span><br><span class="line">		<span class="comment"># ddata = ciphertext[59:len(ciphertext)].decode(var9)</span></span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">	ddata = ddata.split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">0</span>:</span><br><span class="line">		computer = ddata[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">1</span>:</span><br><span class="line">		username = ddata[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">2</span>:</span><br><span class="line">		process = ddata[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;PC name:&quot; + computer)</span></span><br><span class="line">	<span class="comment">#print(&quot;username:&quot; + username)</span></span><br><span class="line">	<span class="comment">#print(&quot;process name:&quot; + process)</span></span><br><span class="line"></span><br><span class="line">	raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">	digest = raw_aes_hash256.digest()</span><br><span class="line">	aes_key = digest[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">	hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;AES key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(aes_key.<span class="built_in">hex</span>()))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;HMAC key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(hmac_key.<span class="built_in">hex</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(hexdump.hexdump(ciphertext))</span></span><br></pre></td></tr></table></figure>
<p>3、将流量包中数据写成base64形式：（数据指的是图中蓝色部分，每个tcp流中的流量均试一下即可）</p>
<p><img src="/post/ccf22797/image-20230910155301194.png" alt="image-20230910155301194"></p>
<p>转换为原始数据：</p>
<p><img src="/post/ccf22797/image-20230910155542125.png" alt="image-20230910155542125"></p>
<p>写成base64形式：</p>
<p><img src="/post/ccf22797/image-20230910155529969.png" alt="image-20230910155529969"></p>
<p>4、最终解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;2f793b0251bb6c09bda982cb159cd611&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;e5695e8bf533009cd4a3c950d447b032&quot;</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAwNR1s4ymDHA08b2cCeYKryK3UKJK0G2nKl/svxd3sD2WvktAWL1hS0gvdfXP7XmLpCd3CgYHRMvh9bWGrKW/2ANbWBQEYp1Lv+iIsuBpLdxanTNqAEOnre/71JK8hUKuJ32lY88IsDwgFFjvH0l3lwDOwgtXtOe6mhxvhuxUK8ourv/sii2KGiMOacqaRI2bOtOBcEal00/bBj85FcE+W6PmmGbF0Q9BvUvQmDT9C+J2H12SZqwwAbFGVJwntkDq7Q==&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hexdump.hexdump(dec))</span></span><br></pre></td></tr></table></figure>
<p>可以看到一串base32数据：</p>
<p><img src="/post/ccf22797/image-20230910155718568.png" alt="image-20230910155718568"></p>
<p>解密即得flag后半段：</p>
<p><img src="/post/ccf22797/image-20230910155756436.png" alt="image-20230910155756436"></p>
<p>flag：</p>
<p><strong>SICTF{79e1755e-08a8-4d3d-9385-4c0541549995}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有些题的具体原理我确实也懂的不是很透彻，欢迎一起交流讨论！</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(一)</title>
    <url>/post/77e39860.html</url>
    <content><![CDATA[<p>在CNSS 2023的夏令营线上题中找到的一道misc题，看到标题有Crypto，感兴趣就去试了一试，发现确实是道比较有意思的题目，就在此记录一下，同时也开启 <strong>misc趣题</strong> 这一分类。</p>
<span id="more"></span>
<h2 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h2><p>题目来源：2023-CNSS-Summer</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刚刚接触网络安全不久的 Shino 有一个成为 Crypto 方向专家的梦想，所以他写了一个很安全的加密算法，你可以帮他看看吗？</span><br></pre></td></tr></table></figure>
<p>端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc 47.108.140.140 11037</span><br></pre></td></tr></table></figure>
<p>Hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、你可能需要pwntools</span><br><span class="line">2、cnss&#123;a-zA-Z0-9_&#125;</span><br><span class="line">   保证&#125;只在 flag 结尾出现一次</span><br><span class="line">   flag 长度不大于 50</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> cipher, key</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stream = self.randomBox(self._init_box(key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_encrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(c) ^ <span class="built_in">next</span>(self.stream)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_box</span>(<span class="params">self, crypt_key</span>):</span><br><span class="line">        Box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        key_length = <span class="built_in">len</span>(crypt_key)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            index = <span class="built_in">ord</span>(crypt_key[(i % key_length)])</span><br><span class="line">            j = (j + Box[i] + index) % <span class="number">256</span></span><br><span class="line">            Box[i], Box[j] = Box[j], Box[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Box</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomBox</span>(<span class="params">self, S</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i = i + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">            j = j + S[i] &amp; <span class="number">255</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            <span class="keyword">yield</span> S[(S[i] + S[j] &amp; <span class="number">255</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先，题目的加密算法是RC4，可以先检查一下有无变种，方法是自己随便使用一组明文和密钥，分别用该程序与在线网站加密，检查结果是否相同。这样操作之后可以发现，结果是完全一样的，这说明本题并没有对RC4进行魔改，也因此解题的思路也就很自然的从开始的解密码转变成了找漏洞。</p>
<p>而要找漏洞的程序段如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>先大致理解程序内容：程序需要你输入一串flag值，并将flag值逐个进行RC4加密并检查是否与密文相等，当输入的flag串加密值与密文完全相等时，便通过了检查，程序输出”Correct flag!”。</p>
<p>所以，这么一大段其实就只实现了一个内容：检查你输入的flag和你实际要提交的flag是否相等！可以说，整个程序都是一个障眼法，其实不要这个RC4，直接用以下的代码检查也是一样的：(假设实际flag串名为secret)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == secret):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样就行了！所以用这么一大段来核查flag一定有问题。</p>
<p>仔细核查，果然，下面这段代码大有玄机：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这段代码存在以下几个问题：</p>
<ul>
<li>输入的flag串中含有不在table中的项时，会一直跳过直至读到table中的字符为止，但是指数 i 会一直增加。</li>
<li>判断指数 i 过大，依靠的是输入的字符串长度，而不是实际的flag串。</li>
<li>将cipher[i]与encrypt(flag[i])进行比对时，并没有对cipher的指数进行检查。</li>
</ul>
<p>这体现了一个很重要的信息：</p>
<ul>
<li>如果你的输入是正常的错误flag串，他会打印的内容是”Wrong flag!”</li>
<li>如果你的输入是不正常的构造的字符串导致cipher[i]越界了，程序不会正常打印内容，而会报错！</li>
</ul>
<p>举个例子，构造如下两个串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = &quot;cnss&#123;1234567890abcdefgh&#125;&quot;</span><br><span class="line">flag = chr(0) * 50 + &quot;c&quot;</span><br></pre></td></tr></table></figure>
<p>那么，程序对第两个字符串的处理分别是：</p>
<p>由于第一个串字符均在table中，因此程序仅仅会将每个字符与正确flag进行比对，直到某个字符比对失败时，打印出”Wrong flag!”</p>
<p>而第二个串前五十个字符均是ASCII码为0的字符，是不在table中的，因此程序会先反复执行以下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>直至第51个字符”c”，由于”c”在table中，因此会进行比对。此时i=51，而由题目知道，flag长度不大于50，因此这时执行这条语句进行比对时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>cipher[i]是必定越界的！那么程序就会抛出一个异常，而不再是打印”Wrong flag!”了。</p>
<p>这有什么用呢？用处很大。首先我们就可以反复构造如下字符串，发送给靶机端来确定真实flag的正确长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>为什么这样就可以确定长度呢？我们假设flag的正确长度是30，那么发送下面字符串给靶机，靶机的回应都是“异常”而非错误，这是因为cipher数组的下标最多只能取到29，一旦涉及到cipher[30]甚至更多就会产生越界异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">30</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>然而发送下一个flag串，也就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">29</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>这时，由于没有越界，程序会回应”Wrong flag!”，而不再抛出异常了。</p>
<p>所以，由上述方式，我们就可以最终确定flag的真实长度是24，之后则可以反复构造下列字符串，并发送给靶机端来逐个核查字符是否正确：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>道理也是相同的，如果i是错误字符，那么核查不通过，程序直接回应”Wrong flag!”，而如果是正确字符，程序则会继续向后读，一直到读到越界的”a”后，抛出越界异常。</p>
<p>得到这个字符为 “1” 后，将他加入”cnss{“串后，继续构造下面字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;1&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>如此反复发送直至flag串已知的部分长度为24即可。</p>
<p>构造字符串并发送给靶机端需要用到pwntools，同时还有一些小细节需要注意，比如需要发送的是字节流而非字符串流。但是这些慢慢调试程序就好了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line">init = <span class="string">b&#x27;cnss&#123;&#x27;</span></span><br><span class="line">has_find = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(has_find == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        r=remote(<span class="string">&quot;47.108.140.140&quot;</span>,<span class="number">11037</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r.sendline(init + long_to_bytes(<span class="built_in">ord</span>(table[i])) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">100</span> + <span class="string">b&quot;a&quot;</span>)</span><br><span class="line">            temp = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;Correct&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(init) == <span class="number">23</span>):</span><br><span class="line">                has_find = <span class="number">1</span></span><br><span class="line">                r.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            init += long_to_bytes(<span class="built_in">ord</span>(table[i]))</span><br><span class="line">            <span class="built_in">print</span>(init)</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        r.close()</span><br><span class="line"><span class="built_in">print</span>(init + <span class="string">b&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><strong>cnss{1nd3X_0Ut_oF_r4nge}</strong></p>
<p><br></p>
<p>确实很有意思！</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(二)</title>
    <url>/post/d8d20302.html</url>
    <content><![CDATA[<p>又做到了一个包含misc与crypto的综合题，在这里记录一下我对这个问题的思考。</p>
<span id="more"></span>
<h2 id="MISC-3"><a href="#MISC-3" class="headerlink" title="MISC.3"></a>MISC.3</h2><p>题目来源：CISG 2015</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文中含有flag这个单词。flag格式为flag&#123;字符串&#125;。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>] - rand()</span><br><span class="line">        plain += <span class="built_in">chr</span>(temp &gt;&gt; <span class="number">22</span>)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;plaintext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    f2 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    data = f1.read()</span><br><span class="line">    <span class="keyword">from</span> secretfile <span class="keyword">import</span> secretkey</span><br><span class="line">    data = encrypt(data,secretkey)</span><br><span class="line">    f2.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>以及一个加密文件ciphertext，由于文件内容较大就不放在这里了。</p>
<p>先梳理一下题目的加密过程：</p>
<ul>
<li>从secretfile里取出secretkey，作为自己的伪随机数生成器的种子</li>
<li>对于明文文件的每一个字符，将他们的ASCII码左移22位，并加上当前rand()生成的伪随机数，得到密文</li>
<li>将密文用pack函数整合，按顺序写入ciphertext里。</li>
</ul>
<p>所以，求解题目的突破口在于求解出密钥。而我搜索到的一篇wp讲了一种不错的思路：</p>
<p><a href="https://geekorz.com/post/cigs2015/">CISG2015 MISC.3解析 (geekorz.com)</a></p>
<p>但是他其中的一句话引发了我的思考：</p>
<p><img src="/post/d8d20302/image-20230913142928566.png" alt="image-20230913142928566"></p>
<p>他说，这个随机数生成算法并不同于普通的LCG，因为他最后一步是按位与运算，而不是模运算，所以就没有采用LCG的思路去求解本题。但是仔细思考就会发现，其实道理是完全一样的：</p>
<ul>
<li>x &amp; 0x3fffffff，表示的是取x的低三十位</li>
<li>x mod (0x3fffffff + 1)，表示的也是取x的低三十位</li>
</ul>
<p>所以，某些按位与运算与模运算其实是等价的！因此我们可以利用下列代码，大大简化求解密钥key的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    plain = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        plain.append(temp)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    data = decrypt(f1.read())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;j =&quot;</span>,j,<span class="string">&quot;:&quot;</span>,end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        key = ((data[<span class="number">0</span>] - (j&lt;&lt;<span class="number">22</span>)) - <span class="number">54321</span>) * inverse(<span class="number">1103515425</span>,(<span class="number">0x3fffffff</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(key,end = <span class="string">&quot;  &quot;</span>)</span><br><span class="line">        srand(key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">40</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>((i - rand()) &gt;&gt; <span class="number">22</span>),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>略微解释一下这段代码：</p>
<ul>
<li>decrypt函数相较于给的附件中的decrypt函数作了简化，仅仅实现了unpack的功能，将密文转化为一个数字列表。</li>
<li>main函数用于爆破正确密钥。</li>
</ul>
<p>如何爆破的呢？我们试想一下第一个密文数字data[0]的生成过程，此处假设第一个明文的ord值为j：</p>
<script type="math/tex; mode=display">
data[0] = (j<<22)+rand()</script><p>而其中rand()生成的值为：</p>
<script type="math/tex; mode=display">
rand() = (state * 1103515425 + 54321) \quad (mod\;0x3fffffff + 1)</script><p>而j仅有256种取值可能(更贴切的说，其实仅需要从可见字符范围内考虑)，因此我们生成所有可能的256个密钥，并解密前面四十个密文观测效果，看看哪个是真正的密钥，观测可知：</p>
<p><img src="/post/d8d20302/image-20230913145528744.png" alt="image-20230913145528744"></p>
<p>可以看出j为105时，解出的密文看上去是正确的形式，因此我们取该密钥解密出全部内容，就得到了正确的文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">+0lpfzK92vRhs6zyLUYE20n65i9s9GHFfw04XTb2BqKed1d35nuQX1hD5JRsou3m7dEEKGBIJCxUeAjPDgeixlQrAoZzFAlt541yJoyXxuEMGwaAqTXQlF+7pB/5S4vnZ85Lap2siP8q/jFYp87z7PXHmJ20opxy8yxnBsRPoWEs8glONXf1H+h4kkdTcCg+HfwGXqYrf0jyFBgAAAABJRU5ErkJggg==|flag is hidden in the above data It is a picture and you should base64decode it.</span><br></pre></td></tr></table></figure>
<p>前面是一个很长的base64段，解码得到：</p>
<p><img src="/post/d8d20302/image-20230913145804385.png" alt="image-20230913145804385"></p>
<p>大功告成！</p>
<p>flag：</p>
<p><strong>flag{tHis_1s_YOUR_flaaaaag}</strong></p>
<p>总结一下，本题最重要的一个点，就是发现模运算与按位与运算的等价性，从而能够使用LCG的解法解决题目。</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
</search>
