<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-0xGame_week1-wp-crypto</title>
    <url>/post/6a80d23a.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9ac3c1d515ae487d5cc0fae1c2e812878206cbfe5071a214601c920df3daa167"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-crypto</title>
    <url>/post/795314c1.html</url>
    <content><![CDATA[<p>要给自己学校的招新赛出题了，于是混进CNSS招新赛前的夏令营找找出题灵感，不得不说，很多题目都出的很不错，难度与知识点控制的很好，于是在此记录一下。</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/795314c1/image-20230916080626025.png" alt="image-20230916080626025"></p>
<h2 id="Crypto-Guideline"><a href="#Crypto-Guideline" class="headerlink" title="Crypto Guideline"></a>Crypto Guideline</h2><p>签到题，标志着crypto方向题目的开始，直接提交flag即可。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Welcome to the world of cryptography!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cyclic-group"><a href="#cyclic-group" class="headerlink" title="cyclic group"></a>cyclic group</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以找到我藏在循环群中的flag吗？</span><br></pre></td></tr></table></figure>
<p>题目内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  <span class="comment">## secret is a local file, flag is unknown to you</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = getPrime(<span class="number">512</span>)</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    c *= m   </span><br><span class="line">    c %= p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line"><span class="string">e = 12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line"><span class="string">c = 46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，实际上就是：</p>
<script type="math/tex; mode=display">
m^e\equiv c\quad (mod\;p)</script><p>因此直接幂乘e关于p-1的逆元即可。而本题的题目名字cyclic group指代的是循环群，在这里即是在说，由于模数p为素数，那么m的阶就为p-1，因此可以直接求指数关于其阶的逆元求解题目。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line">e = <span class="number">12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line">c = <span class="number">46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Unbelievable! You know the key of cyclic group!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码Ⅰ"><a href="#cnss娘的代码Ⅰ" class="headerlink" title="cnss娘的代码Ⅰ"></a>cnss娘的代码Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘写了一段感觉意义不明的代码，你能帮她找到flag吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key.append(getPrime(<span class="number">128</span>))</span><br><span class="line">    </span><br><span class="line">secret = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    secret.append(m % key[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key =&#x27;</span>, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret =&#x27;</span>, secret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key = [179283057970236760812385016853348861313, 243730152305882610684268424505624182831, 276375013783217805474364273321195364813, 338363147025326331069698214354955107607]</span></span><br><span class="line"><span class="string">secret = [42312333420922777926503668120694248887, 188911830445106862831548334980052602782, 202272400826094059912187609891368651300, 16939666639933430404336668949000187621]</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>简洁明了地考察中国剩余定理。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line">key = [<span class="number">179283057970236760812385016853348861313</span>, <span class="number">243730152305882610684268424505624182831</span>, <span class="number">276375013783217805474364273321195364813</span>, <span class="number">338363147025326331069698214354955107607</span>]</span><br><span class="line">secret = [<span class="number">42312333420922777926503668120694248887</span>, <span class="number">188911830445106862831548334980052602782</span>, <span class="number">202272400826094059912187609891368651300</span>, <span class="number">16939666639933430404336668949000187621</span>]</span><br><span class="line"></span><br><span class="line">M = crt(key,secret)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Wow!Chinese remainder theorem is so interseting!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅰ"><a href="#RSA-Ⅰ" class="headerlink" title="RSA Ⅰ"></a>RSA Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can you factorize n ?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p|mask)</span><br><span class="line"><span class="built_in">print</span>(p&amp;mask)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = 64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line"><span class="comment">#n = 106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line"><span class="comment">#mask = 12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line"><span class="comment">#13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line"><span class="comment">#11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br></pre></td></tr></table></figure>
<p>题目给了n的一个素因子p与mask的&amp;及|位运算结果，那么对于每一位，可以简单枚举一下所有可能性：</p>
<ul>
<li>&amp;运算为1，则p该位为1</li>
<li>&amp;运算为0，|运算为1，则当mask该位为1时，p该位为0；当mask该位为0时，p该位为1</li>
<li>&amp;运算为0，|运算为0，则p该位为0</li>
</ul>
<p>因此可以还原p的所有比特位，进而解密RSA。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line">n = <span class="number">106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line">mask = <span class="number">12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line">gift1 = <span class="number">13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line">gift2 = <span class="number">11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">strmask = <span class="built_in">bin</span>(mask)[<span class="number">2</span>:]</span><br><span class="line">strgift1 = <span class="built_in">bin</span>(gift1)[<span class="number">2</span>:]</span><br><span class="line">strgift2 = <span class="built_in">bin</span>(gift2)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">strp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strmask)):</span><br><span class="line">    <span class="keyword">if</span>(strgift2[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">        strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(strp),<span class="number">2</span>)</span><br><span class="line">q= n//p       </span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{1t_s33ms_bit_is_useful}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅱ"><a href="#cnss娘的代码-Ⅱ" class="headerlink" title="cnss娘的代码 Ⅱ"></a>cnss娘的代码 Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在研究一类数论中的难题，你可以帮助她吗？</span><br><span class="line">Hint: SageMath的使用可以让你事半功倍</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, m, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br></pre></td></tr></table></figure>
<p>直接用sage求解离散对数即可。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="number">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br><span class="line"></span><br><span class="line">m=discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Congratulation! You crack the DLP problem!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅲ"><a href="#cnss娘的代码-Ⅲ" class="headerlink" title="cnss娘的代码 Ⅲ"></a>cnss娘的代码 Ⅲ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在学习线性代数，你可以帮她解出这道题吗？</span><br><span class="line">Hint:Sage 中自带有 Matrix 和 Vector 类。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">40</span></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">u = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">40</span>, <span class="number">5</span>):</span><br><span class="line">    u.append(bytes_to_long(flag[i:i+<span class="number">5</span>]))</span><br><span class="line">u = vector(u)</span><br><span class="line">A = random_matrix(Zmod(p), <span class="number">8</span>)</span><br><span class="line">v = u * A</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A =&#x27;</span>, A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;v =&#x27;</span>, v)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A = [7907672172473958392 4938237561047760432 5072996306459844921  800347085054263333 2241217299487989740 5452520396763079026 7354205761061650589 5632270298193588206]</span></span><br><span class="line"><span class="string">[6856262700627435223 7218982369550725117 3069216736555490147 9043167152368671477 6651431740452419751 2904199636400840775 1984801523985180355 9424612078019686546]</span></span><br><span class="line"><span class="string">[ 190015986177831045  594687507332748466 2546708346651205091 3864956414971412519 2586812319675472372 2541554633306459284 2840981234492698127  400426130440806923]</span></span><br><span class="line"><span class="string">[ 354930743948767363  374079227033274174 7821379197355217415 4073976921774664952 8974661879090783904 8725597754431417139 1723115467249027682  914056616366301410]</span></span><br><span class="line"><span class="string">[9032929938905307703  569436029465728354 3230536280479973685 9499318835507740454  460664783708095350 3815328100857956310 6866516203996475375 9142528333783640721]</span></span><br><span class="line"><span class="string">[6647724854667560614 1564543033588842443  980081446425820918 4482664640152609224 9361385831487208956 5729265277086036438 8521779175294512538 7872078731489374461]</span></span><br><span class="line"><span class="string">[2426759667632064565 2564361116290067541 5109836057988930695 3948680632682199428 8561341181219447072 5099840518920477627 9347277712921710222 4364598388067284951]</span></span><br><span class="line"><span class="string">[2143804620259054744 4318231909289693782 6284698432978577252 5529804751795288609 7903556036971407808 3730126758887833322 8782120630459581951 9050476736532525999]</span></span><br><span class="line"><span class="string">v = (4088048241727106122, 258857328202723850, 7303598013681209756, 3446975206276714926, 176458751236949790, 8151363680348349027, 8771366063042882128, 9003511237633705064)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直接在sage中求解逆矩阵即可</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">A = [[<span class="number">7907672172473958392</span>,<span class="number">4938237561047760432</span>,<span class="number">5072996306459844921</span>,<span class="number">800347085054263333</span>,<span class="number">2241217299487989740</span>,<span class="number">5452520396763079026</span>,<span class="number">7354205761061650589</span>,<span class="number">5632270298193588206</span>],</span><br><span class="line">[<span class="number">6856262700627435223</span>,<span class="number">7218982369550725117</span>,<span class="number">3069216736555490147</span>,<span class="number">9043167152368671477</span>,<span class="number">6651431740452419751</span>,<span class="number">2904199636400840775</span>,<span class="number">1984801523985180355</span>,<span class="number">9424612078019686546</span>],</span><br><span class="line">[<span class="number">190015986177831045</span>,<span class="number">594687507332748466</span>,<span class="number">2546708346651205091</span>,<span class="number">3864956414971412519</span>,<span class="number">2586812319675472372</span>,<span class="number">2541554633306459284</span>,<span class="number">2840981234492698127</span>,<span class="number">400426130440806923</span>],</span><br><span class="line">[<span class="number">354930743948767363</span>,<span class="number">374079227033274174</span>,<span class="number">7821379197355217415</span>,<span class="number">4073976921774664952</span>,<span class="number">8974661879090783904</span>,<span class="number">8725597754431417139</span>,<span class="number">1723115467249027682</span>,<span class="number">914056616366301410</span>],</span><br><span class="line">[<span class="number">9032929938905307703</span>,<span class="number">569436029465728354</span>,<span class="number">3230536280479973685</span>,<span class="number">9499318835507740454</span>,<span class="number">460664783708095350</span>,<span class="number">3815328100857956310</span>,<span class="number">6866516203996475375</span>,<span class="number">9142528333783640721</span>],</span><br><span class="line">[<span class="number">6647724854667560614</span>,<span class="number">1564543033588842443</span>,<span class="number">980081446425820918</span>,<span class="number">4482664640152609224</span>,<span class="number">9361385831487208956</span>,<span class="number">5729265277086036438</span>,<span class="number">8521779175294512538</span>,<span class="number">7872078731489374461</span>],</span><br><span class="line">[<span class="number">2426759667632064565</span>,<span class="number">2564361116290067541</span>,<span class="number">5109836057988930695</span>,<span class="number">3948680632682199428</span>,<span class="number">8561341181219447072</span>,<span class="number">5099840518920477627</span>,<span class="number">9347277712921710222</span>,<span class="number">4364598388067284951</span>],</span><br><span class="line">[<span class="number">2143804620259054744</span>,<span class="number">4318231909289693782</span>,<span class="number">6284698432978577252</span>,<span class="number">5529804751795288609</span>,<span class="number">7903556036971407808</span>,<span class="number">3730126758887833322</span>,<span class="number">8782120630459581951</span>,<span class="number">9050476736532525999</span>]]</span><br><span class="line"></span><br><span class="line">ans = [<span class="number">4088048241727106122</span>, <span class="number">258857328202723850</span>, <span class="number">7303598013681209756</span>, <span class="number">3446975206276714926</span>, <span class="number">176458751236949790</span>, <span class="number">8151363680348349027</span>, <span class="number">8771366063042882128</span>, <span class="number">9003511237633705064</span>]</span><br><span class="line">A = matrix(A)</span><br><span class="line">ans = matrix(ans)</span><br><span class="line"></span><br><span class="line">flag = ans * A.inverse()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到flag后转化为字符串</span></span><br><span class="line">flag = [<span class="number">256128467098287645152364579619033136532012336082411188262170716121111141373910417997647279385874168289963422098883372524388175789168151018039664118938</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">275157020682273200260243873388370073035487413746791277567209773631463468440360425377838149581773104213153845176881963804588249058534505227929576082442</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">205418055261423253440834873996888852743735400527184165431288083430874722579052114104669136088527642186595043026543683492544648632576976821633919688987</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,<span class="number">18887682222057954947813918789359532063827948125435329591909175563625225112660734620218938715145807440112704581336669611824654566923603748916776016972</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,-<span class="number">25792447761509638420556125881168126603544490324749544374648563355312526747005861915100426458158515036632551136815312658182069136958880193280291853604</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">263743295233022646271965564265774549530140797857736570979958721892220519418537528753856004044323800915867363751008926223858363297878551362225736657993</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">839256526384408301445325525932265486477039492555936647496320730347707472223889935476141937534810747723549651396954028900430020396698162916210131940419</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">165200370960939593750718733159922760922513289005013438437371715048231002848101266223391623531454692435044072426966916629687643829467166749676754679429</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(i % p)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Line8ar alg3ebra 1s 50 i0mportant!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="HomoBlock"><a href="#HomoBlock" class="headerlink" title="HomoBlock"></a>HomoBlock</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个，一个一个一个Homo啊啊啊啊啊啊啊</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;cnss&#123;I_a&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)%<span class="number">8</span>==<span class="number">0</span></span><br><span class="line">MASK1 = getRandomNBitInteger(<span class="number">32</span>)|(<span class="number">0xffffffff00000000</span>)</span><br><span class="line">MASK2 = getRandomNBitInteger(<span class="number">32</span>)&lt;&lt;<span class="number">32</span></span><br><span class="line">ROUND = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>():</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        tmp.append(getRandomNBitInteger(<span class="number">64</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NotHomoFunction</span>(<span class="params">x,iv,key</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x&lt;&lt;iv)&amp;MASK1)^((x&gt;&gt;iv)|MASK2)^key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,iv,key</span>):</span><br><span class="line">    cipher = bytes_to_long(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        cipher = NotHomoFunction(cipher,iv,key)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">cipher = []</span><br><span class="line">iv = <span class="number">32</span></span><br><span class="line">key = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">8</span>):</span><br><span class="line">    cipher.append(encrypt(flag[i:i+<span class="number">8</span>],iv,key))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(MASK2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">[4840951631397558164, 5492303526413306583, 6271460196030786735, 6127905759336302986, 601209385465514967]</span></span><br><span class="line"><span class="string">32</span></span><br><span class="line"><span class="string">16500653344889503744</span></span><br></pre></td></tr></table></figure>
<p>观察加密方式，发现具有以下特点:</p>
<ul>
<li>明文按长度为8分组，分别加密</li>
<li>每一轮交换上一轮得到结果的高低32位，然后异或 MASK2 ，异或key。</li>
</ul>
<p>可以发现，这样交换4次后就会恢复初值，所以实际交换5次后，就能得到初始值异或 MASK2 并异或key的结果。又因为明文的第一部分已经给出，所以可以根据这个明文恢复key，后续逐步恢复即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;cnss&#123;I_a&#x27;</span></span><br><span class="line">f0 = bytes_to_long(flag)</span><br><span class="line">p = [<span class="number">4840951631397558164</span>, <span class="number">5492303526413306583</span>, <span class="number">6271460196030786735</span>, <span class="number">6127905759336302986</span>, <span class="number">601209385465514967</span>]</span><br><span class="line">MASK2 = <span class="number">16500653344889503744</span></span><br><span class="line">f1 = p[<span class="number">0</span>]</span><br><span class="line">hf0, lf0 = (f0 &gt;&gt; <span class="number">32</span>, f0 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hf1, lf1 = (f1 &gt;&gt; <span class="number">32</span>, f1 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hk = hf1 ^ lf0 ^ (MASK2 &gt;&gt; <span class="number">32</span>)</span><br><span class="line">lk = lf1 ^ hf0</span><br><span class="line">key = (hk &lt;&lt; <span class="number">32</span>) + lk</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">	l, h = ((i ^ MASK2 ^ key) &gt;&gt; <span class="number">32</span>, (i ^ MASK2 ^ key) % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">	flag += long_to_bytes((h &lt;&lt; <span class="number">32</span>) | l).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{I_am_n0t_HHHHHHoooommmmmmmoooo0000}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezLFSR"><a href="#ezLFSR" class="headerlink" title="ezLFSR"></a>ezLFSR</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do you know LFSR?</span><br><span class="line">Hint1:考点： LFSR流密码</span><br><span class="line">Hint2:可以使用 z3solver 。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> mask,seed</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cipher, ipath, opath</span>):</span><br><span class="line">    ifile=<span class="built_in">open</span>(ipath,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    ofile=<span class="built_in">open</span>(opath,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    plaintext=ifile.read()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:</span><br><span class="line">        c=ch^cipher.getrandbit(<span class="number">8</span>)</span><br><span class="line">        ofile.write(long_to_bytes(c))</span><br><span class="line">    ifile.close()</span><br><span class="line">    ofile.close()</span><br><span class="line"></span><br><span class="line">lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">encrypt(lfsr,<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;cipher.enc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;seed = <span class="subst">&#123;seed&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># seed = 37285</span></span><br></pre></td></tr></table></figure>
<p>cipher.enc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5</span><br></pre></td></tr></table></figure>
<p>注意到mask也仅取了低16位，那么爆破的范围也仅有65536，因此直接爆破出符合要求的明文串即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">seed = <span class="number">37285</span></span><br><span class="line">hex_string = <span class="string">&quot;E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5&quot;</span></span><br><span class="line"><span class="comment"># 每两个字符一组拆分</span></span><br><span class="line">split_hex = [hex_string[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_string), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> split_hex:</span><br><span class="line">    c.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    mask = i</span><br><span class="line">    lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">    clist = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> c:</span><br><span class="line">        temp=ch^lfsr.getrandbit(<span class="number">8</span>)</span><br><span class="line">        clist.append(<span class="built_in">chr</span>(temp))</span><br><span class="line">    str1 = <span class="string">&quot;&quot;</span>.join(clist)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;cnss&quot;</span> <span class="keyword">in</span> str1):</span><br><span class="line">        <span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>
<p>运行时间大概需要不到1分钟。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Y0u_can_brust_0r_F1nd_seed}</font>

<p>从flag串以及hint可以看出，本题应该是可以通过LFSR的方式恢复明文的，但是数量级太小，没必要。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅱ"><a href="#RSA-Ⅱ" class="headerlink" title="RSA Ⅱ"></a>RSA Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It&#x27;s more difficult than RSA Ⅰ,right? Can you factorize n ?</span><br><span class="line">Hint:查找有关RSA攻击的资料是一个很重要的技能。</span><br></pre></td></tr></table></figure>
<p>并提供了一篇论文链接：<a href="https://eprint.iacr.org/2020/1506.pdf">1506.pdf (iacr.org)</a></p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask1 = getPrime(<span class="number">512</span>)</span><br><span class="line">mask2 = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask1 = <span class="subst">&#123;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask2 = <span class="subst">&#123;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h1 = <span class="subst">&#123;p&amp;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h2 = <span class="subst">&#123;q&amp;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line"><span class="string">n = 87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line"><span class="string">mask1 = 8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line"><span class="string">mask2 = 10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"><span class="string">h1 = 6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line"><span class="string">h2 = 6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br></pre></td></tr></table></figure>
<p>相较于RSA1，这一次不能根据位运算结果完全确定出p、q的比特位了，不过仍然可以利用以下线索还原：</p>
<ul>
<li>&amp;运算为1，则p该位必为1</li>
<li>&amp;运算为0，mask该位为1，则p该位必为0</li>
</ul>
<p>而当&amp;运算为0，mask也为0时，p的该比特位就存在两种结果，无法完全确定。可是这题不仅给了p，还给了q的位运算结果，因此我们可以利用下面这一点信息，从高位向低位进行深度优先搜索，显著降低复杂度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将p、q当前确定的二进制位后方全部填充0，直至填满512位，此时p、q乘积应小于n。</span><br><span class="line">2、将p、q当前确定的二进制位后方全部填充1，直至填满512位，此时p、q乘积应大于n。</span><br></pre></td></tr></table></figure>
<p>如此就能在极短时间内还原出p、q。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line">n = <span class="number">87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line">h1 = <span class="number">6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line">h2 = <span class="number">6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br><span class="line">mask1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask1)[<span class="number">2</span>:])</span><br><span class="line">mask2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask2)[<span class="number">2</span>:])</span><br><span class="line">h1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h1)[<span class="number">2</span>:])</span><br><span class="line">h2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h2)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">512</span>):</span><br><span class="line">        <span class="comment">#print(tmp0)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmq0,<span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find(tempp,tempq)</span></span><br><span class="line">P = <span class="number">10172774442863868719013872884099170294615753094066736187886125116462340120031133533430755779832487215255546434139069419394249074006281284289077492708469893</span></span><br><span class="line">Q = <span class="number">8580050824978592226795441601299432164577158891190171233964440597982925469924083252289609500726234367555160732119333211934059529993446003001925910065317613</span></span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{A1g0r1thm_1s_5o_hard_for_Me!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="BabyLattice"><a href="#BabyLattice" class="headerlink" title="BabyLattice"></a>BabyLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Do you know SVP and LLL?</span><br><span class="line">Hint:在解决本题的过程中你会接触到格(Lattice)的一些基本概念,以及LLL算法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line">flagArg = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>,<span class="number">8</span>):</span><br><span class="line">    flag_tmp = bytes_to_long(flag[i:i+<span class="number">8</span>])</span><br><span class="line">    <span class="keyword">assert</span> flag_tmp &lt; <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    flagArg.append(flag_tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Equation</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,arg</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(arg)==<span class="number">4</span></span><br><span class="line">        self.arg = arg</span><br><span class="line">        self.modulus = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the modulus is <span class="subst">&#123;self.modulus&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;The number of the <span class="subst">&#123;i&#125;</span> round is <span class="subst">&#123;tmp&#125;</span>&#x27;</span>)</span><br><span class="line">            ans+=self.arg[i]*tmp</span><br><span class="line">        ans = ans%self.modulus</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The result is <span class="subst">&#123;ans&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">EzLineModulus = Equation(flagArg)</span><br><span class="line">EzLineModulus.output()</span><br><span class="line"></span><br><span class="line"><span class="comment">#the modulus is 4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line"><span class="comment">#The number of the 0 round is 7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line"><span class="comment">#The number of the 1 round is 13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line"><span class="comment">#The number of the 2 round is 8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line"><span class="comment">#The number of the 3 round is 798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line"><span class="comment">#The result is 58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br></pre></td></tr></table></figure>
<p>招新赛前的夏令营就出Lattice的题目了。。确实狠</p>
<p>不过确实是最基础的Lattice题目了，大致思路就是列出线性关系式，转化为矩阵形式，并保证较短向量都在等式右侧，即可对构造出来的格进行规约得到短向量。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line">a1 = <span class="number">7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line">a2 = <span class="number">13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line">a3 = <span class="number">8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line">a4 = <span class="number">798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line">ans = <span class="number">58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br><span class="line">inv = inverse(a1,n)</span><br><span class="line">L = Matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,-ans*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,a2*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,a3*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,a4*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,n]])</span><br><span class="line"></span><br><span class="line">v = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[<span class="number">4</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(v)-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[i])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{W0w!Y0u_know_WhatisL4ttice}</font>

<p>（有关格的问题本篇不会展开讲，因为它需要对一些基本原理的了解，想要明白此类问题需要先自行查阅一些格相关的基本概念）</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezSignature"><a href="#ezSignature" class="headerlink" title="ezSignature"></a>ezSignature</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这样使用数字签名是否安全呢？</span><br><span class="line">nc 43.156.14.141 6943</span><br><span class="line"></span><br><span class="line">Hint1:推荐使用pwntools进行交互。</span><br><span class="line">Hint2:建议先了解 DSA 数字签名流程。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalSignatureAlgorithm</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.p = key.p</span><br><span class="line">        self.q = key.q</span><br><span class="line">        self.g = key.g</span><br><span class="line">        self.y = key.y</span><br><span class="line">        self.x = key.x</span><br><span class="line">        self.k = randint(<span class="number">1</span>, self.q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, m</span>):</span><br><span class="line">        k = self.k</span><br><span class="line">        h = bytes_to_long(sha256(m).digest())</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = inverse(k, self.q) * (h + self.x * r) % self.q</span><br><span class="line">        <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, m, signature</span>):</span><br><span class="line">        r, s = signature</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= r &lt;= self.q - <span class="number">1</span>)) <span class="keyword">or</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= s &lt;= self.q - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        z = bytes_to_long(sha256(m).digest())</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (z * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = (<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p % self.q</span><br><span class="line">        <span class="keyword">return</span> r == v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myDSA = DigitalSignatureAlgorithm(DSA.generate(<span class="number">1024</span>))</span><br><span class="line">MENU = <span class="string">br&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1] Sign.</span></span><br><span class="line"><span class="string">[2] Verify.</span></span><br><span class="line"><span class="string">[3] Get_public_key.</span></span><br><span class="line"><span class="string">[4] Exit.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        proof = (<span class="string">&#x27;&#x27;</span>.join([choice(table) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])).encode()</span><br><span class="line">        sha = sha256(proof).hexdigest().encode()</span><br><span class="line">        self.send(<span class="string">b&quot;[+] sha256(XXXX+&quot;</span> + proof[<span class="number">4</span>:] + <span class="string">b&quot;) == &quot;</span> + sha)</span><br><span class="line">        XXXX = self.recv(prompt=<span class="string">b&#x27;[+] Plz Tell Me XXXX :&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(XXXX) != <span class="number">4</span> <span class="keyword">or</span> sha256(XXXX + proof[<span class="number">4</span>:]).hexdigest().encode() != sha:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self</span>):</span><br><span class="line">        m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">        m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">        signature1 = myDSA.sign(m1)</span><br><span class="line">        signature2 = myDSA.sign(m2)</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature1 is:&#x27;</span> + <span class="built_in">str</span>(signature1).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature2 is:&#x27;</span> + <span class="built_in">str</span>(signature2).encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self</span>):</span><br><span class="line">        m = self.recv(<span class="string">b&#x27;message:&#x27;</span>)</span><br><span class="line">        r = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;r:&#x27;</span>))</span><br><span class="line">        s = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;s:&#x27;</span>))</span><br><span class="line">        signature = (r, s)</span><br><span class="line">        <span class="keyword">if</span> m == <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> myDSA.verify(m, signature):</span><br><span class="line">                self.send(<span class="string">b&#x27;Hello there.This is what you want.&#x27;</span>)</span><br><span class="line">                self.send(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        self.send(<span class="string">b&#x27;p = &#x27;</span> + <span class="built_in">str</span>(myDSA.p).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;q = &#x27;</span> + <span class="built_in">str</span>(myDSA.q).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;g = &#x27;</span> + <span class="built_in">str</span>(myDSA.g).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;y = &#x27;</span> + <span class="built_in">str</span>(myDSA.y).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;You must pass the P0W!!!&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.send(MENU)</span><br><span class="line">            option = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;Give me your option:&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">                self.sign()</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">                self.verify()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">                self.get_public_key()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HOST:POST &quot;</span> + HOST + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT))</span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一道靶机交互题，代码较长，但是其实大部分是交互相关的函数，细读发现是很正常的DSA，需要用给定明文通过他的验签操作。（如果不熟悉DSA签名流程，一定要自行查阅了解一下）</p>
<p>检查代码发现漏洞出在sign，由于交互开始时，随机密钥k就不会再变动，因此两个明文共用了k用作签名，因此直接使用共享k攻击即可，具体原理也很简单，自行搜索共享k攻击即可。进阶的还有对线性k、指数k等相关攻击方式。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">172961942888113119438093761564402163853274437530074061334853565231663662473345365517029153614577994838261528197758562341350007269014020447862968046418219322983982857376325091297503076457294884011022491521807290579653731078712552375942815577480924479760060089879761373677236785972440188569442167867715538948131</span></span><br><span class="line">q = <span class="number">1238294525750070611176801188652181858159488474961</span></span><br><span class="line">g = <span class="number">75657702601417227921344829575623735976532473731371029415534443940309702116075857552168402559956825576158353466597825895213717785384352099702983338787137184850387592826820271959589796127014544636714131043162304391677607332131259874984936943058742638800688694139378157588974460944304847089533750902878536046649</span></span><br><span class="line">y = <span class="number">7749296960818920297640684628219596188301310658741359444363507697372166821952159177715756651776536866582220227892407461198512231438360662343916445812054004711764127526569139925464723782772657462476688091598602960531766048824996984183046388253897618420503521674510979988799110962834514762035965219607971731464</span></span><br><span class="line"></span><br><span class="line">r1,s1 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">246708316787437486170638565016913560785356026546</span>)</span><br><span class="line">r2,s2 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">604408984593559575502554675534691666132540008638</span>)</span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">h1 = bytes_to_long(sha256(m1).digest())</span><br><span class="line">h2 = bytes_to_long(sha256(m2).digest())</span><br><span class="line"></span><br><span class="line">k = (h1-h2)*inverse(s1-s2,q)</span><br><span class="line">x = (k*s1 - h1)*inverse(r1,q) % q</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span></span><br><span class="line">h = bytes_to_long(sha256(m).digest())</span><br><span class="line">r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">s = inverse(k, q) * (h + x * r) % q</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>(这题没有完整脚本，拿着这个r，s去交互就可以了；因为比较懒，当时直接用xshell连接上后手动过的sha256爆破，手动提交的r，s。。所以就没有完整pwntools交互脚本)</p>
<p>flag:</p>
<font size="4" color="red">cnss{1ts_Dr4nger0us_t0_u5eThe_Same_K}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="StrangeCurve"><a href="#StrangeCurve" class="headerlink" title="StrangeCurve"></a>StrangeCurve</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The Cruve is SOO0000 Strange!</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">&#x27;cnss&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag_k = bytes_to_long(flag[<span class="number">5</span>:-<span class="number">1</span>].encode())</span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> E.order() == p </span><br><span class="line">base_point = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> base_point <span class="keyword">in</span> E</span><br><span class="line"><span class="keyword">assert</span> flag_k &lt; p </span><br><span class="line"></span><br><span class="line">Q = flag_k*base_point</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (240653647745552223089451307742208085297121769374 : 1041806436100548540817642210994295951394712587396 : 1)</span></span><br></pre></td></tr></table></figure>
<p>椭圆曲线加密，下面这行是重要信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> E.order() == p </span><br></pre></td></tr></table></figure>
<p>因此可以确定是Smart’s attack。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line">P = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line">Q = E(<span class="number">240653647745552223089451307742208085297121769374</span>,<span class="number">1041806436100548540817642210994295951394712587396</span>)</span><br><span class="line"></span><br><span class="line">n = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cnss&#123;&quot;</span> + <span class="built_in">str</span>(long_to_bytes(n))[<span class="number">2</span>:-<span class="number">1</span>] + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{DLPise45y_if5pecia1}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="一🔪一个牛头人"><a href="#一🔪一个牛头人" class="headerlink" title="一🔪一个牛头人"></a>一🔪一个牛头人</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学了NTRU,就要NTR u(❌)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">Zx = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = Zx.gen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convolution</span>(<span class="params">f, g, R</span>):</span><br><span class="line">    <span class="keyword">return</span> (f * g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balancedmod</span>(<span class="params">f, q, R</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: ((x + q//<span class="number">2</span>) % q) - q//<span class="number">2</span>, f.<span class="built_in">list</span>()))</span><br><span class="line">    <span class="keyword">return</span> Zx(g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_poly</span>(<span class="params">n, d1, d2</span>):</span><br><span class="line">    <span class="keyword">assert</span> d1 + d2 &lt;= n</span><br><span class="line">    result = d1 * [<span class="number">1</span>] + d2 * [-<span class="number">1</span>] + (n - d1 - d2) * [<span class="number">0</span>]</span><br><span class="line">    shuffle(result)</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_prime</span>(<span class="params">f, R, p</span>):</span><br><span class="line">    T = Zx.change_ring(Integers(p)).quotient(R)</span><br><span class="line">    <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_powerof2</span>(<span class="params">f, R, q</span>):  <span class="comment"># Hensel Lemma </span></span><br><span class="line">    g = invert_poly_mod_prime(f, R, <span class="number">2</span>)</span><br><span class="line">    e = log(q, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        g = ((<span class="number">2</span> * g - f * g ** <span class="number">2</span>) % R) % q</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NTRUCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, N, p, q, d</span>):</span><br><span class="line">        self.N = N</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.d = d</span><br><span class="line">        self.R = x ** N - <span class="number">1</span></span><br><span class="line">        <span class="comment"># key generation</span></span><br><span class="line">        self.g = random_poly(self.N, d, d)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.f = random_poly(self.N, d + <span class="number">1</span>, d)</span><br><span class="line">                self.fp = invert_poly_mod_prime(self.f, self.R, self.p)</span><br><span class="line">                self.fq = invert_poly_mod_powerof2(self.f, self.R, self.q)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.h = balancedmod(self.p * convolution(self.fq, self.g, self.R), self.q, self.R)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPubKey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, m</span>):</span><br><span class="line">        r = random_poly(self.N, self.d, self.d)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(self.h, r, self.R) + m, self.q, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        a = balancedmod(convolution(c, self.f, self.R), self.q, self.R)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(a, self.fp, self.R), self.p, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, val</span>):</span><br><span class="line">        poly = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.N):</span><br><span class="line">            poly += ((val % self.p) - self.p // <span class="number">2</span>) * (x ** i)</span><br><span class="line">            val //= self.p</span><br><span class="line">        <span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, poly</span>):</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        ll = poly.<span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(ll):</span><br><span class="line">            result += (val + self.p // <span class="number">2</span>) * (self.p ** idx)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">poly_from_list</span>(<span class="params">self, l: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="keyword">return</span> Zx(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">160</span></span><br><span class="line">    d = <span class="number">30</span></span><br><span class="line">    p = <span class="number">3</span></span><br><span class="line">    q = <span class="number">65536</span></span><br><span class="line"></span><br><span class="line">    cipher = NTRUCipher(N, p, q, d) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[PubKey]---------&quot;</span>)</span><br><span class="line">    h = cipher.getPubKey()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line">    msg = bytes_to_long(flag)</span><br><span class="line">    encode_msg = cipher.encode(msg)</span><br><span class="line">    c = cipher.encrypt(encode_msg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[Cipher]---------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    mm = cipher.decrypt(c)</span><br><span class="line">    decode_msg = cipher.decode(mm)</span><br><span class="line">    <span class="keyword">assert</span> decode_msg == msg</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[PubKey]---------</span></span><br><span class="line"><span class="string">h = -11891*x^159 + 16347*x^158 - 32137*x^157 + 14988*x^156 + 16657*x^155 - 25785*x^154 - 21976*x^153 - 31745*x^152 - 4232*x^151 + 29569*x^150 + 27140*x^149 + 19617*x^148 - 16656*x^147 + 8925*x^146 + 8728*x^145 - 8802*x^144 - 10794*x^143 - 28159*x^142 - 6454*x^141 - 10259*x^140 - 19169*x^139 - 14357*x^138 + 3501*x^137 + 9885*x^136 - 7441*x^135 + 18268*x^134 - 27183*x^133 + 26085*x^132 + 19147*x^131 + 17153*x^130 - 22887*x^129 + 32476*x^128 - 21698*x^127 + 19138*x^126 + 11585*x^125 + 22755*x^124 - 5920*x^123 + 7581*x^122 + 25973*x^121 + 13787*x^120 - 22762*x^119 + 29207*x^118 - 17916*x^117 - 11502*x^116 + 18275*x^115 + 318*x^114 - 6890*x^113 - 22751*x^112 - 27677*x^111 - 11114*x^110 + 8623*x^109 - 15725*x^108 - 6835*x^107 - 8288*x^106 - 5235*x^105 - 28697*x^104 + 10696*x^103 + 17117*x^102 + 24696*x^101 - 7801*x^100 - 31874*x^99 - 17668*x^98 - 11204*x^97 + 19147*x^96 + 24644*x^95 - 29380*x^94 - 26237*x^93 - 27390*x^92 + 19982*x^91 + 4074*x^90 - 17248*x^89 - 11027*x^88 - 32690*x^87 + 5124*x^86 - 20823*x^85 - 11779*x^84 + 13781*x^83 + 29356*x^82 - 9740*x^81 - 31484*x^80 - 540*x^79 + 32360*x^78 + 24795*x^77 - 8864*x^76 + 17363*x^75 + 9670*x^74 + 32268*x^73 + 17961*x^72 + 6388*x^71 + 580*x^70 + 128*x^69 + 339*x^68 + 3412*x^67 - 4519*x^66 - 25056*x^65 + 6096*x^64 + 18720*x^63 - 5338*x^62 + 16910*x^61 + 3353*x^60 + 15433*x^59 - 28053*x^58 - 18883*x^57 + 7688*x^56 - 31198*x^55 + 9950*x^54 - 9388*x^53 + 21235*x^52 + 2847*x^51 + 24383*x^50 + 19431*x^49 + 21244*x^48 - 8498*x^47 - 28998*x^46 + 962*x^45 + 20579*x^44 + 28002*x^43 - 6040*x^42 + 4241*x^41 + 11655*x^40 - 32419*x^39 + 21531*x^38 + 7348*x^37 - 5503*x^36 + 29820*x^35 + 28896*x^34 + 8754*x^33 + 17978*x^32 + 7552*x^31 + 27240*x^30 - 29515*x^29 - 20322*x^28 + 2201*x^27 + 8857*x^26 - 50*x^25 - 3780*x^24 - 12138*x^23 + 10893*x^22 + 23133*x^21 + 6142*x^20 - 23798*x^19 - 15236*x^18 + 32564*x^17 + 25683*x^16 - 24010*x^15 - 4355*x^14 + 22552*x^13 - 27155*x^12 + 27649*x^11 + 17781*x^10 + 7115*x^9 + 27465*x^8 - 4369*x^7 + 24882*x^6 - 11675*x^5 - 612*x^4 + 12361*x^3 + 20120*x^2 + 6190*x - 10843</span></span><br><span class="line"><span class="string">[Cipher]---------</span></span><br><span class="line"><span class="string">c = -26801*x^159 - 25103*x^158 + 29811*x^157 - 12251*x^156 - 13386*x^155 - 28030*x^154 - 16511*x^153 + 23761*x^152 + 28329*x^151 - 16406*x^150 + 30931*x^149 + 5326*x^148 + 19877*x^147 - 23165*x^146 - 31540*x^145 - 7923*x^144 + 5880*x^143 - 27078*x^142 - 25436*x^141 - 17162*x^140 + 1471*x^139 + 14486*x^138 + 7702*x^137 - 29890*x^136 + 29315*x^135 + 558*x^134 - 22429*x^133 - 361*x^132 + 19049*x^131 - 30437*x^130 - 32610*x^129 - 3024*x^128 - 4313*x^127 + 29174*x^126 - 2837*x^125 - 2812*x^124 + 13450*x^123 - 15001*x^122 - 25791*x^121 - 8702*x^120 - 4968*x^119 - 15340*x^118 + 31744*x^117 - 32478*x^116 + 19737*x^115 - 12629*x^114 - 27847*x^113 + 27322*x^112 - 31375*x^111 + 14777*x^110 + 29825*x^109 - 25883*x^108 - 13335*x^107 + 32517*x^106 + 14871*x^105 - 7287*x^104 + 13398*x^103 - 32710*x^102 + 20805*x^101 + 29734*x^100 - 14579*x^99 + 17483*x^98 - 16864*x^97 - 26745*x^96 + 3254*x^95 + 7280*x^94 - 29046*x^93 - 7531*x^92 - 8791*x^91 + 15033*x^90 - 1125*x^89 - 14713*x^88 - 12273*x^87 + 8616*x^86 + 2486*x^85 + 31810*x^84 + 27795*x^83 - 21731*x^82 + 21743*x^81 - 27595*x^80 - 3592*x^79 - 27206*x^78 - 32156*x^77 + 32124*x^76 - 11212*x^75 - 6662*x^74 - 23103*x^73 - 3660*x^72 - 31043*x^71 - 17131*x^70 + 24544*x^69 - 32326*x^68 - 31047*x^67 + 19814*x^66 + 10874*x^65 - 8449*x^64 + 11744*x^63 + 2245*x^62 - 967*x^61 + 9120*x^60 + 8983*x^59 - 24573*x^58 + 24885*x^57 + 15649*x^56 - 18970*x^55 + 7354*x^54 - 12282*x^53 - 22474*x^52 + 4395*x^51 + 8428*x^50 - 32592*x^49 + 25980*x^48 - 4599*x^47 + 16310*x^46 + 18559*x^45 + 22897*x^44 + 19080*x^43 - 26065*x^42 - 9*x^41 + 29202*x^40 + 2121*x^39 - 5004*x^38 + 5299*x^37 - 28301*x^36 - 13519*x^35 + 24241*x^34 + 529*x^33 - 20574*x^32 - 27391*x^31 + 31976*x^30 + 22824*x^29 - 31410*x^28 - 20976*x^27 + 21661*x^26 - 15132*x^25 + 1905*x^24 - 30870*x^23 + 18109*x^22 - 17373*x^21 + 5342*x^20 - 22447*x^19 + 1893*x^18 - 17545*x^17 + 30097*x^16 - 21731*x^15 + 17390*x^14 + 10991*x^13 - 5384*x^12 + 15960*x^11 + 24268*x^10 - 29867*x^9 + 22532*x^8 + 10133*x^7 - 26576*x^6 - 5742*x^5 - 16252*x^4 + 13019*x^3 - 25984*x^2 + 14004*x + 22500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个普通的NTRU多项式密码，也是与格有关的，其具体原理可以参考：(甚至详细阐述了每个函数的作用)</p>
<p><a href="http://blog.k1rit0.eu.org/2021/03/28/Translation-of-LatticeHacks/">Translation of LatticeHacks · K1rit0’s Blog</a> </p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">160</span></span><br><span class="line">d = <span class="number">30</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">65536</span></span><br><span class="line">PR = PolynomialRing(ZZ, name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line">R = PR.quotient_ring(x ^ n - <span class="number">1</span>, names = <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">y = R.gen()</span><br><span class="line"></span><br><span class="line">pubkey = -<span class="number">11891</span>*x^<span class="number">159</span> + <span class="number">16347</span>*x^<span class="number">158</span> - <span class="number">32137</span>*x^<span class="number">157</span> + <span class="number">14988</span>*x^<span class="number">156</span> + <span class="number">16657</span>*x^<span class="number">155</span> - <span class="number">25785</span>*x^<span class="number">154</span> - <span class="number">21976</span>*x^<span class="number">153</span> - <span class="number">31745</span>*x^<span class="number">152</span> - <span class="number">4232</span>*x^<span class="number">151</span> + <span class="number">29569</span>*x^<span class="number">150</span> + <span class="number">27140</span>*x^<span class="number">149</span> + <span class="number">19617</span>*x^<span class="number">148</span> - <span class="number">16656</span>*x^<span class="number">147</span> + <span class="number">8925</span>*x^<span class="number">146</span> + <span class="number">8728</span>*x^<span class="number">145</span> - <span class="number">8802</span>*x^<span class="number">144</span> - <span class="number">10794</span>*x^<span class="number">143</span> - <span class="number">28159</span>*x^<span class="number">142</span> - <span class="number">6454</span>*x^<span class="number">141</span> - <span class="number">10259</span>*x^<span class="number">140</span> - <span class="number">19169</span>*x^<span class="number">139</span> - <span class="number">14357</span>*x^<span class="number">138</span> + <span class="number">3501</span>*x^<span class="number">137</span> + <span class="number">9885</span>*x^<span class="number">136</span> - <span class="number">7441</span>*x^<span class="number">135</span> + <span class="number">18268</span>*x^<span class="number">134</span> - <span class="number">27183</span>*x^<span class="number">133</span> + <span class="number">26085</span>*x^<span class="number">132</span> + <span class="number">19147</span>*x^<span class="number">131</span> + <span class="number">17153</span>*x^<span class="number">130</span> - <span class="number">22887</span>*x^<span class="number">129</span> + <span class="number">32476</span>*x^<span class="number">128</span> - <span class="number">21698</span>*x^<span class="number">127</span> + <span class="number">19138</span>*x^<span class="number">126</span> + <span class="number">11585</span>*x^<span class="number">125</span> + <span class="number">22755</span>*x^<span class="number">124</span> - <span class="number">5920</span>*x^<span class="number">123</span> + <span class="number">7581</span>*x^<span class="number">122</span> + <span class="number">25973</span>*x^<span class="number">121</span> + <span class="number">13787</span>*x^<span class="number">120</span> - <span class="number">22762</span>*x^<span class="number">119</span> + <span class="number">29207</span>*x^<span class="number">118</span> - <span class="number">17916</span>*x^<span class="number">117</span> - <span class="number">11502</span>*x^<span class="number">116</span> + <span class="number">18275</span>*x^<span class="number">115</span> + <span class="number">318</span>*x^<span class="number">114</span> - <span class="number">6890</span>*x^<span class="number">113</span> - <span class="number">22751</span>*x^<span class="number">112</span> - <span class="number">27677</span>*x^<span class="number">111</span> - <span class="number">11114</span>*x^<span class="number">110</span> + <span class="number">8623</span>*x^<span class="number">109</span> - <span class="number">15725</span>*x^<span class="number">108</span> - <span class="number">6835</span>*x^<span class="number">107</span> - <span class="number">8288</span>*x^<span class="number">106</span> - <span class="number">5235</span>*x^<span class="number">105</span> - <span class="number">28697</span>*x^<span class="number">104</span> + <span class="number">10696</span>*x^<span class="number">103</span> + <span class="number">17117</span>*x^<span class="number">102</span> + <span class="number">24696</span>*x^<span class="number">101</span> - <span class="number">7801</span>*x^<span class="number">100</span> - <span class="number">31874</span>*x^<span class="number">99</span> - <span class="number">17668</span>*x^<span class="number">98</span> - <span class="number">11204</span>*x^<span class="number">97</span> + <span class="number">19147</span>*x^<span class="number">96</span> + <span class="number">24644</span>*x^<span class="number">95</span> - <span class="number">29380</span>*x^<span class="number">94</span> - <span class="number">26237</span>*x^<span class="number">93</span> - <span class="number">27390</span>*x^<span class="number">92</span> + <span class="number">19982</span>*x^<span class="number">91</span> + <span class="number">4074</span>*x^<span class="number">90</span> - <span class="number">17248</span>*x^<span class="number">89</span> - <span class="number">11027</span>*x^<span class="number">88</span> - <span class="number">32690</span>*x^<span class="number">87</span> + <span class="number">5124</span>*x^<span class="number">86</span> - <span class="number">20823</span>*x^<span class="number">85</span> - <span class="number">11779</span>*x^<span class="number">84</span> + <span class="number">13781</span>*x^<span class="number">83</span> + <span class="number">29356</span>*x^<span class="number">82</span> - <span class="number">9740</span>*x^<span class="number">81</span> - <span class="number">31484</span>*x^<span class="number">80</span> - <span class="number">540</span>*x^<span class="number">79</span> + <span class="number">32360</span>*x^<span class="number">78</span> + <span class="number">24795</span>*x^<span class="number">77</span> - <span class="number">8864</span>*x^<span class="number">76</span> + <span class="number">17363</span>*x^<span class="number">75</span> + <span class="number">9670</span>*x^<span class="number">74</span> + <span class="number">32268</span>*x^<span class="number">73</span> + <span class="number">17961</span>*x^<span class="number">72</span> + <span class="number">6388</span>*x^<span class="number">71</span> + <span class="number">580</span>*x^<span class="number">70</span> + <span class="number">128</span>*x^<span class="number">69</span> + <span class="number">339</span>*x^<span class="number">68</span> + <span class="number">3412</span>*x^<span class="number">67</span> - <span class="number">4519</span>*x^<span class="number">66</span> - <span class="number">25056</span>*x^<span class="number">65</span> + <span class="number">6096</span>*x^<span class="number">64</span> + <span class="number">18720</span>*x^<span class="number">63</span> - <span class="number">5338</span>*x^<span class="number">62</span> + <span class="number">16910</span>*x^<span class="number">61</span> + <span class="number">3353</span>*x^<span class="number">60</span> + <span class="number">15433</span>*x^<span class="number">59</span> - <span class="number">28053</span>*x^<span class="number">58</span> - <span class="number">18883</span>*x^<span class="number">57</span> + <span class="number">7688</span>*x^<span class="number">56</span> - <span class="number">31198</span>*x^<span class="number">55</span> + <span class="number">9950</span>*x^<span class="number">54</span> - <span class="number">9388</span>*x^<span class="number">53</span> + <span class="number">21235</span>*x^<span class="number">52</span> + <span class="number">2847</span>*x^<span class="number">51</span> + <span class="number">24383</span>*x^<span class="number">50</span> + <span class="number">19431</span>*x^<span class="number">49</span> + <span class="number">21244</span>*x^<span class="number">48</span> - <span class="number">8498</span>*x^<span class="number">47</span> - <span class="number">28998</span>*x^<span class="number">46</span> + <span class="number">962</span>*x^<span class="number">45</span> + <span class="number">20579</span>*x^<span class="number">44</span> + <span class="number">28002</span>*x^<span class="number">43</span> - <span class="number">6040</span>*x^<span class="number">42</span> + <span class="number">4241</span>*x^<span class="number">41</span> + <span class="number">11655</span>*x^<span class="number">40</span> - <span class="number">32419</span>*x^<span class="number">39</span> + <span class="number">21531</span>*x^<span class="number">38</span> + <span class="number">7348</span>*x^<span class="number">37</span> - <span class="number">5503</span>*x^<span class="number">36</span> + <span class="number">29820</span>*x^<span class="number">35</span> + <span class="number">28896</span>*x^<span class="number">34</span> + <span class="number">8754</span>*x^<span class="number">33</span> + <span class="number">17978</span>*x^<span class="number">32</span> + <span class="number">7552</span>*x^<span class="number">31</span> + <span class="number">27240</span>*x^<span class="number">30</span> - <span class="number">29515</span>*x^<span class="number">29</span> - <span class="number">20322</span>*x^<span class="number">28</span> + <span class="number">2201</span>*x^<span class="number">27</span> + <span class="number">8857</span>*x^<span class="number">26</span> - <span class="number">50</span>*x^<span class="number">25</span> - <span class="number">3780</span>*x^<span class="number">24</span> - <span class="number">12138</span>*x^<span class="number">23</span> + <span class="number">10893</span>*x^<span class="number">22</span> + <span class="number">23133</span>*x^<span class="number">21</span> + <span class="number">6142</span>*x^<span class="number">20</span> - <span class="number">23798</span>*x^<span class="number">19</span> - <span class="number">15236</span>*x^<span class="number">18</span> + <span class="number">32564</span>*x^<span class="number">17</span> + <span class="number">25683</span>*x^<span class="number">16</span> - <span class="number">24010</span>*x^<span class="number">15</span> - <span class="number">4355</span>*x^<span class="number">14</span> + <span class="number">22552</span>*x^<span class="number">13</span> - <span class="number">27155</span>*x^<span class="number">12</span> + <span class="number">27649</span>*x^<span class="number">11</span> + <span class="number">17781</span>*x^<span class="number">10</span> + <span class="number">7115</span>*x^<span class="number">9</span> + <span class="number">27465</span>*x^<span class="number">8</span> - <span class="number">4369</span>*x^<span class="number">7</span> + <span class="number">24882</span>*x^<span class="number">6</span> - <span class="number">11675</span>*x^<span class="number">5</span> - <span class="number">612</span>*x^<span class="number">4</span> + <span class="number">12361</span>*x^<span class="number">3</span> + <span class="number">20120</span>*x^<span class="number">2</span> + <span class="number">6190</span>*x - <span class="number">10843</span></span><br><span class="line">pubkey = R(pubkey)</span><br><span class="line">c = -<span class="number">26801</span>*x^<span class="number">159</span> - <span class="number">25103</span>*x^<span class="number">158</span> + <span class="number">29811</span>*x^<span class="number">157</span> - <span class="number">12251</span>*x^<span class="number">156</span> - <span class="number">13386</span>*x^<span class="number">155</span> - <span class="number">28030</span>*x^<span class="number">154</span> - <span class="number">16511</span>*x^<span class="number">153</span> + <span class="number">23761</span>*x^<span class="number">152</span> + <span class="number">28329</span>*x^<span class="number">151</span> - <span class="number">16406</span>*x^<span class="number">150</span> + <span class="number">30931</span>*x^<span class="number">149</span> + <span class="number">5326</span>*x^<span class="number">148</span> + <span class="number">19877</span>*x^<span class="number">147</span> - <span class="number">23165</span>*x^<span class="number">146</span> - <span class="number">31540</span>*x^<span class="number">145</span> - <span class="number">7923</span>*x^<span class="number">144</span> + <span class="number">5880</span>*x^<span class="number">143</span> - <span class="number">27078</span>*x^<span class="number">142</span> - <span class="number">25436</span>*x^<span class="number">141</span> - <span class="number">17162</span>*x^<span class="number">140</span> + <span class="number">1471</span>*x^<span class="number">139</span> + <span class="number">14486</span>*x^<span class="number">138</span> + <span class="number">7702</span>*x^<span class="number">137</span> - <span class="number">29890</span>*x^<span class="number">136</span> + <span class="number">29315</span>*x^<span class="number">135</span> + <span class="number">558</span>*x^<span class="number">134</span> - <span class="number">22429</span>*x^<span class="number">133</span> - <span class="number">361</span>*x^<span class="number">132</span> + <span class="number">19049</span>*x^<span class="number">131</span> - <span class="number">30437</span>*x^<span class="number">130</span> - <span class="number">32610</span>*x^<span class="number">129</span> - <span class="number">3024</span>*x^<span class="number">128</span> - <span class="number">4313</span>*x^<span class="number">127</span> + <span class="number">29174</span>*x^<span class="number">126</span> - <span class="number">2837</span>*x^<span class="number">125</span> - <span class="number">2812</span>*x^<span class="number">124</span> + <span class="number">13450</span>*x^<span class="number">123</span> - <span class="number">15001</span>*x^<span class="number">122</span> - <span class="number">25791</span>*x^<span class="number">121</span> - <span class="number">8702</span>*x^<span class="number">120</span> - <span class="number">4968</span>*x^<span class="number">119</span> - <span class="number">15340</span>*x^<span class="number">118</span> + <span class="number">31744</span>*x^<span class="number">117</span> - <span class="number">32478</span>*x^<span class="number">116</span> + <span class="number">19737</span>*x^<span class="number">115</span> - <span class="number">12629</span>*x^<span class="number">114</span> - <span class="number">27847</span>*x^<span class="number">113</span> + <span class="number">27322</span>*x^<span class="number">112</span> - <span class="number">31375</span>*x^<span class="number">111</span> + <span class="number">14777</span>*x^<span class="number">110</span> + <span class="number">29825</span>*x^<span class="number">109</span> - <span class="number">25883</span>*x^<span class="number">108</span> - <span class="number">13335</span>*x^<span class="number">107</span> + <span class="number">32517</span>*x^<span class="number">106</span> + <span class="number">14871</span>*x^<span class="number">105</span> - <span class="number">7287</span>*x^<span class="number">104</span> + <span class="number">13398</span>*x^<span class="number">103</span> - <span class="number">32710</span>*x^<span class="number">102</span> + <span class="number">20805</span>*x^<span class="number">101</span> + <span class="number">29734</span>*x^<span class="number">100</span> - <span class="number">14579</span>*x^<span class="number">99</span> + <span class="number">17483</span>*x^<span class="number">98</span> - <span class="number">16864</span>*x^<span class="number">97</span> - <span class="number">26745</span>*x^<span class="number">96</span> + <span class="number">3254</span>*x^<span class="number">95</span> + <span class="number">7280</span>*x^<span class="number">94</span> - <span class="number">29046</span>*x^<span class="number">93</span> - <span class="number">7531</span>*x^<span class="number">92</span> - <span class="number">8791</span>*x^<span class="number">91</span> + <span class="number">15033</span>*x^<span class="number">90</span> - <span class="number">1125</span>*x^<span class="number">89</span> - <span class="number">14713</span>*x^<span class="number">88</span> - <span class="number">12273</span>*x^<span class="number">87</span> + <span class="number">8616</span>*x^<span class="number">86</span> + <span class="number">2486</span>*x^<span class="number">85</span> + <span class="number">31810</span>*x^<span class="number">84</span> + <span class="number">27795</span>*x^<span class="number">83</span> - <span class="number">21731</span>*x^<span class="number">82</span> + <span class="number">21743</span>*x^<span class="number">81</span> - <span class="number">27595</span>*x^<span class="number">80</span> - <span class="number">3592</span>*x^<span class="number">79</span> - <span class="number">27206</span>*x^<span class="number">78</span> - <span class="number">32156</span>*x^<span class="number">77</span> + <span class="number">32124</span>*x^<span class="number">76</span> - <span class="number">11212</span>*x^<span class="number">75</span> - <span class="number">6662</span>*x^<span class="number">74</span> - <span class="number">23103</span>*x^<span class="number">73</span> - <span class="number">3660</span>*x^<span class="number">72</span> - <span class="number">31043</span>*x^<span class="number">71</span> - <span class="number">17131</span>*x^<span class="number">70</span> + <span class="number">24544</span>*x^<span class="number">69</span> - <span class="number">32326</span>*x^<span class="number">68</span> - <span class="number">31047</span>*x^<span class="number">67</span> + <span class="number">19814</span>*x^<span class="number">66</span> + <span class="number">10874</span>*x^<span class="number">65</span> - <span class="number">8449</span>*x^<span class="number">64</span> + <span class="number">11744</span>*x^<span class="number">63</span> + <span class="number">2245</span>*x^<span class="number">62</span> - <span class="number">967</span>*x^<span class="number">61</span> + <span class="number">9120</span>*x^<span class="number">60</span> + <span class="number">8983</span>*x^<span class="number">59</span> - <span class="number">24573</span>*x^<span class="number">58</span> + <span class="number">24885</span>*x^<span class="number">57</span> + <span class="number">15649</span>*x^<span class="number">56</span> - <span class="number">18970</span>*x^<span class="number">55</span> + <span class="number">7354</span>*x^<span class="number">54</span> - <span class="number">12282</span>*x^<span class="number">53</span> - <span class="number">22474</span>*x^<span class="number">52</span> + <span class="number">4395</span>*x^<span class="number">51</span> + <span class="number">8428</span>*x^<span class="number">50</span> - <span class="number">32592</span>*x^<span class="number">49</span> + <span class="number">25980</span>*x^<span class="number">48</span> - <span class="number">4599</span>*x^<span class="number">47</span> + <span class="number">16310</span>*x^<span class="number">46</span> + <span class="number">18559</span>*x^<span class="number">45</span> + <span class="number">22897</span>*x^<span class="number">44</span> + <span class="number">19080</span>*x^<span class="number">43</span> - <span class="number">26065</span>*x^<span class="number">42</span> - <span class="number">9</span>*x^<span class="number">41</span> + <span class="number">29202</span>*x^<span class="number">40</span> + <span class="number">2121</span>*x^<span class="number">39</span> - <span class="number">5004</span>*x^<span class="number">38</span> + <span class="number">5299</span>*x^<span class="number">37</span> - <span class="number">28301</span>*x^<span class="number">36</span> - <span class="number">13519</span>*x^<span class="number">35</span> + <span class="number">24241</span>*x^<span class="number">34</span> + <span class="number">529</span>*x^<span class="number">33</span> - <span class="number">20574</span>*x^<span class="number">32</span> - <span class="number">27391</span>*x^<span class="number">31</span> + <span class="number">31976</span>*x^<span class="number">30</span> + <span class="number">22824</span>*x^<span class="number">29</span> - <span class="number">31410</span>*x^<span class="number">28</span> - <span class="number">20976</span>*x^<span class="number">27</span> + <span class="number">21661</span>*x^<span class="number">26</span> - <span class="number">15132</span>*x^<span class="number">25</span> + <span class="number">1905</span>*x^<span class="number">24</span> - <span class="number">30870</span>*x^<span class="number">23</span> + <span class="number">18109</span>*x^<span class="number">22</span> - <span class="number">17373</span>*x^<span class="number">21</span> + <span class="number">5342</span>*x^<span class="number">20</span> - <span class="number">22447</span>*x^<span class="number">19</span> + <span class="number">1893</span>*x^<span class="number">18</span> - <span class="number">17545</span>*x^<span class="number">17</span> + <span class="number">30097</span>*x^<span class="number">16</span> - <span class="number">21731</span>*x^<span class="number">15</span> + <span class="number">17390</span>*x^<span class="number">14</span> + <span class="number">10991</span>*x^<span class="number">13</span> - <span class="number">5384</span>*x^<span class="number">12</span> + <span class="number">15960</span>*x^<span class="number">11</span> + <span class="number">24268</span>*x^<span class="number">10</span> - <span class="number">29867</span>*x^<span class="number">9</span> + <span class="number">22532</span>*x^<span class="number">8</span> + <span class="number">10133</span>*x^<span class="number">7</span> - <span class="number">26576</span>*x^<span class="number">6</span> - <span class="number">5742</span>*x^<span class="number">5</span> - <span class="number">16252</span>*x^<span class="number">4</span> + <span class="number">13019</span>*x^<span class="number">3</span> - <span class="number">25984</span>*x^<span class="number">2</span> + <span class="number">14004</span>*x + <span class="number">22500</span></span><br><span class="line">c = R(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balance_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(((f[i] + q // <span class="number">2</span>) % q) - q // <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> R(g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_prime</span>(<span class="params">f, p</span>):</span><br><span class="line">    T = R.base().change_ring(Integers(p)).quotient(x ^ n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> R(<span class="number">1</span> / T(f))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c, prikey</span>):</span><br><span class="line">    f, fp = prikey</span><br><span class="line">    a = balance_mod(c * f, q)</span><br><span class="line">    <span class="keyword">return</span> balance_mod(a * fp, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pubkey, c</span>):</span><br><span class="line">    A = Matrix(ZZ, <span class="number">2</span> * n, <span class="number">2</span> * n)</span><br><span class="line">    hp = inverse(p, q) * pubkey</span><br><span class="line">    hp_list = <span class="built_in">list</span>(hp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[i, i] = q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">2</span> * n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            A[i, j] = hp_list[(j - i) % n]</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">    AL = A.BKZ()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> AL:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = R(row[n:].<span class="built_in">list</span>())</span><br><span class="line">            fp = invert_mod_prime(f, p)</span><br><span class="line">            <span class="keyword">return</span> dec(c, (f, fp))</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># may failed with shortest vector(return more if failed)</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">m = crack(pubkey, c)</span><br><span class="line"></span><br><span class="line">m = m.<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] += <span class="number">1</span></span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">str1 = <span class="string">&quot;&quot;</span>.join(m[::-<span class="number">1</span>])</span><br><span class="line">temp = <span class="built_in">int</span>(str1,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(temp))</span><br></pre></td></tr></table></figure>
<p>(可能需要跑几分钟)</p>
<p>flag:</p>
<font size="4" color="red">cnss{NTRU_w1th_un5afe_par4}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MidLattice"><a href="#MidLattice" class="headerlink" title="MidLattice"></a>MidLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看上去像gcd，但是有区别</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">pbit = <span class="number">500</span></span><br><span class="line">qbit = <span class="number">550</span></span><br><span class="line">rbit = <span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sample</span>():</span><br><span class="line">    x_list  = []</span><br><span class="line">    p = getPrime(pbit)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        q = getPrime(qbit)</span><br><span class="line">        r = getPrime(rbit)</span><br><span class="line">        x_list.append(q*p + <span class="number">2</span>*r)</span><br><span class="line">    <span class="keyword">return</span> x_list,p</span><br><span class="line">sample,p = get_sample()</span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(sample))</span><br></pre></td></tr></table></figure>
<p>以及一个output.txt</p>
<p>题目描述的很明确了，agcd问题(近似公约数问题)，也与格相关，不进行展开。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">500</span></span><br><span class="line">Q_bits = <span class="number">550</span></span><br><span class="line">R_bits = <span class="number">200</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">N = <span class="comment">#自行代入</span></span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>也需要跑几分钟才出结果，能更精确地调整参数的话可能可以减少耗时。</p>
<p>flag:</p>
<font size="4" color="red">cnss{dde0cc3ac3539c66a74ed445a81c3f5b12938c286fa569a3b143b72369c708c9}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="铜匠的世界"><a href="#铜匠的世界" class="headerlink" title="铜匠的世界"></a>铜匠的世界</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">怎样在2^512个可能中找到唯一的答案呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = isqrt(p) ^ isqrt(q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hint = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line"><span class="string">c = 19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"><span class="string">hint = 34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果给的是p^q，题目是容易的，只需要按照RSA Ⅱ类似的思路进行深搜即可。而给的是isqrt(p) ^ isqrt(q)，很容易会有思路如下：</p>
<ul>
<li>对n开根，得到isqrt(p*q) </li>
<li>将isqrt(p*q) 看作n，将isqrt(p) ^ isqrt(q)看作p^q，转化成上面给定p^q的问题求解</li>
</ul>
<p>看上去没什么问题，可是实际操作就会发现存在两点问题：</p>
<ul>
<li>由于一些低位误差，有一些可能正确的根号p、q高位被舍弃。</li>
<li>即使得到了正确的isqrt(p)与isqrt(q)，各自平方后与真正的p、q还有至少256比特的差距，即使是用coppersmith也完全满足不了使用条件。</li>
</ul>
<p>因此不能再使用RSA Ⅱ中的返回条件进行按位查找了。此时搜索题目，发现了佬的类似的题目思路：</p>
<p><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard">https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard</a></p>
<p>这样子查找成功后，还需要对低位进行一定程度的爆破后才能使用coppersmith，并且参数要卡的比较死，比如epsilon取0.03虽然快一些，但是跑不出结果，因此只能取0.01甚至更小，但这个就会耗费很长时间。遗憾的是我也没有想出更好的办法。</p>
<p><br></p>
<p>exp_step1.ipynb：(求出可能的p高位)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> binteger <span class="keyword">import</span> Bin</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">self, X=<span class="literal">None</span>, beta=<span class="number">1.0</span>, epsilon=<span class="literal">None</span>, **kwds</span>):</span><br><span class="line">    <span class="keyword">from</span> sage.misc.verbose <span class="keyword">import</span> verbose</span><br><span class="line">    <span class="keyword">from</span> sage.matrix.constructor <span class="keyword">import</span> Matrix</span><br><span class="line">    <span class="keyword">from</span> sage.rings.real_mpfr <span class="keyword">import</span> RR</span><br><span class="line"></span><br><span class="line">    N = self.parent().characteristic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.is_monic():</span><br><span class="line">        <span class="keyword">raise</span> ArithmeticError(<span class="string">&quot;Polynomial must be monic.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    beta = RR(beta)</span><br><span class="line">    <span class="keyword">if</span> beta &lt;= <span class="number">0.0</span> <span class="keyword">or</span> beta &gt; <span class="number">1.0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;0.0 &lt; beta &lt;= 1.0 not satisfied.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f = self.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    P, (x,) = f.parent().objgens()</span><br><span class="line"></span><br><span class="line">    delta = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epsilon <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        epsilon = beta / <span class="number">8</span></span><br><span class="line">    verbose(<span class="string">&quot;epsilon = %f&quot;</span> % epsilon, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">max</span>(beta**<span class="number">2</span> / (delta * epsilon), <span class="number">7</span> * beta / delta).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;m = %d&quot;</span> % m, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">int</span>((delta * m * (<span class="number">1</span> / beta - <span class="number">1</span>)).floor())</span><br><span class="line">    verbose(<span class="string">&quot;t = %d&quot;</span> % t, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        X = (<span class="number">0.5</span> * N ** (beta**<span class="number">2</span> / delta - epsilon)).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;X = %s&quot;</span> % X, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we could do this much faster, but this is a cheap step</span></span><br><span class="line">    <span class="comment"># compared to LLL</span></span><br><span class="line">    g = [x**j * N ** (m - i) * f**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(delta)]</span><br><span class="line">    g.extend([x**i * f**m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)])  <span class="comment"># h</span></span><br><span class="line"></span><br><span class="line">    B = Matrix(ZZ, <span class="built_in">len</span>(g), delta * m + <span class="built_in">max</span>(delta, t))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows()):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(g[i].degree() + <span class="number">1</span>):</span><br><span class="line">            B[i, j] = g[i][j] * X**j</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">sum</span>([ZZ(B[<span class="number">0</span>, i] // X**i) * x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.ncols())])</span><br><span class="line">    R = f.roots()</span><br><span class="line"></span><br><span class="line">    ZmodN = self.base_ring()</span><br><span class="line">    roots = <span class="built_in">set</span>([ZmodN(r) <span class="keyword">for</span> r, m <span class="keyword">in</span> R <span class="keyword">if</span> <span class="built_in">abs</span>(r) &lt;= X])</span><br><span class="line">    Nbeta = N**beta</span><br><span class="line">    <span class="keyword">return</span> [root <span class="keyword">for</span> root <span class="keyword">in</span> roots <span class="keyword">if</span> N.gcd(ZZ(self(root))) &gt;= Nbeta]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line">hint = <span class="number">34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">spv, i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">yield</span> Bin(spv, <span class="number">256</span>), Bin(Bin(spv).<span class="built_in">int</span> ^^ hint, <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">0</span>):</span><br><span class="line">        spv[i] = b</span><br><span class="line">        tsp = Bin(spv).<span class="built_in">int</span></span><br><span class="line">        tsq = tsp ^^ hint</span><br><span class="line">        p = tsp**<span class="number">2</span></span><br><span class="line">        q = tsq**<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= (pq - p * q) &lt;= <span class="number">2</span> ** (<span class="number">1024</span> - i + <span class="number">1</span>) <span class="keyword">and</span> <span class="number">0</span> &lt;= (</span><br><span class="line">            iroot(pq,<span class="number">2</span>)[<span class="number">0</span>] - tsp * tsq</span><br><span class="line">        ) &lt;= <span class="number">2</span> ** (<span class="number">512</span> - i + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> dfs(spv[:], i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spv = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> spc, sqc <span class="keyword">in</span> dfs(spv, <span class="number">0</span>):</span><br><span class="line">    d = pq - spc.<span class="built_in">int</span>**<span class="number">2</span> * sqc.<span class="built_in">int</span>**<span class="number">2</span></span><br><span class="line">    results.append((d, spc.<span class="built_in">int</span>, sqc.<span class="built_in">int</span>))</span><br><span class="line"><span class="keyword">for</span> i, (_, spci, sqci) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="comment">#print((spci - (iroot(pq,2)[0] // sqci)).bit_length())</span></span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copp_factor</span>(<span class="params">sp, leak=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak + <span class="number">1</span></span><br><span class="line">        P = Zmod(pq)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">        x = P.gen()</span><br><span class="line">        f = sp.<span class="built_in">int</span>**<span class="number">2</span> + (x &lt;&lt; shift) + <span class="number">2</span>*tb + <span class="number">1</span></span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak - <span class="number">1</span>)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        rs = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="comment">#rs = small_roots(f, X=X, beta=beta, epsilon=eps)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rs):</span><br><span class="line">            <span class="built_in">print</span>(sp.<span class="built_in">int</span>**<span class="number">2</span> + (tb &lt;&lt; shift) + <span class="built_in">int</span>(rs[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (_, spci, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    copp_factor(Bin(spci, <span class="number">256</span>))</span><br></pre></td></tr></table></figure>
<p>将运行结果填充至下面脚本中的sqrtplist中</p>
<p><br></p>
<p>exp_step2.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">N = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"></span><br><span class="line">sqrtplist = <span class="comment">#自行代入</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">6</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sqrtplist)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    sp = sqrtplist[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">        f = sp**<span class="number">2</span> + (tb &lt;&lt; shift) + x</span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        res = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="keyword">if</span>(res!=[]):</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="built_in">print</span>(sp**<span class="number">2</span> + (tb &lt;&lt; shift) + res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">p = <span class="number">6756521617869105417915102754795944450583448652752246233837766079298009351893501307888859133738834804209006551446537605217981998432259279870915861077557549</span></span><br><span class="line">q = N//p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>跑出结果可能需要6个小时到10个小时不等。如果你有更好的方式欢迎在评论区留言！</p>
<p>flag:</p>
<font size="4" color="red">cnss{We hav3 n0 0ther ch0ice but c0ppersm1th.}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目质量确实很不错，每道题目考察的知识点很有针对性，准备好好借鉴参考(<del>开偷</del>)。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-misc</title>
    <url>/post/22e56931.html</url>
    <content><![CDATA[<p>做题记录</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/22e56931/image-20230916080821685.png" alt="image-20230916080821685"></p>
<h3 id="❤️-Signin"><a href="#❤️-Signin" class="headerlink" title="❤️ Signin"></a>❤️ Signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">听说有人在CNSS招新群的某个地方藏了一个隐秘的flag，到底在哪呢？</span><br><span class="line">快来加入招新群431060996</span><br></pre></td></tr></table></figure>
<p>题目：按照要求搜索群聊，群聊介绍中有一段base64，解密得flag：</p>
<p><img src="/post/22e56931/image-20230911100902419.png" alt="image-20230911100902419"></p>
<p>flag：</p>
<p><strong>cnss{W3Lc0m3_7o_Cn55_5umm3r！}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔎-侦探-CNSS-娘的秘密"><a href="#🔎-侦探-CNSS-娘的秘密" class="headerlink" title="🔎 侦探 CNSS 娘的秘密"></a>🔎 侦探 CNSS 娘的秘密</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">懒得写文案了，试着找出 CNSS 娘的秘密吧</span><br></pre></td></tr></table></figure>
<p>题目附件为一张图片：</p>
<p><img src="/post/22e56931/CNSSDoll.png" alt="CNSSDoll"></p>
<p>十六进制打开，在文件末尾看到flag：</p>
<p><img src="/post/22e56931/image-20230911101309673.png" alt="image-20230911101309673"></p>
<p>flag：</p>
<p><strong>cnss{W0w!!!Y0u_s4ww_m3!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🏆-重生之我在-CNSS-当-OIer"><a href="#🏆-重生之我在-CNSS-当-OIer" class="headerlink" title="🏆 重生之我在 CNSS 当 OIer"></a>🏆 重生之我在 CNSS 当 OIer</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述和输入输出格式都找不到了...但是身为超级 OIER 的你一定可以 AC 本题吧</span><br><span class="line"></span><br><span class="line">nc 47.108.140.140 1107</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">SRC = <span class="string">&#x27;/home/ctf/temp/code.c&#x27;</span></span><br><span class="line">BIN = <span class="string">&#x27;/home/ctf/temp/temp_bin&#x27;</span></span><br><span class="line">DATA = <span class="string">&#x27;/home/ctf/data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res_map = &#123;</span><br><span class="line">    <span class="string">&#x27;CE&#x27;</span>: <span class="string">&#x27;Compile Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TLE&#x27;</span>: <span class="string">&#x27;Time Limit Exceeded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;RE&#x27;</span>: <span class="string">&#x27;Runtime Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;WA&#x27;</span>: <span class="string">&#x27;Wrong Answer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AC&#x27;</span>: <span class="string">&#x27;Accepted&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_excutable</span>(<span class="params">path, <span class="built_in">input</span>, ans, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;CE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = subprocess.run(</span><br><span class="line">            [<span class="string">f&quot;./<span class="subst">&#123;path&#125;</span>&quot;</span>],</span><br><span class="line">            <span class="built_in">input</span>=<span class="built_in">input</span>,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            timeout=timeout</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;TLE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;RE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = p.stdout.decode()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line">    lines = output.strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;AC&#x27;</span> <span class="keyword">if</span> lines == ans <span class="keyword">else</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your code (ending with two blank lines):&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code1 = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        code1.append(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(code1) &gt;= <span class="number">2</span> <span class="keyword">and</span> code1[-<span class="number">1</span>] == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> code1[-<span class="number">2</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SRC, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fd1:</span><br><span class="line">        fd1.write(<span class="string">&#x27;\n&#x27;</span>.join(code1))</span><br><span class="line"></span><br><span class="line">    p = subprocess.run(</span><br><span class="line">        [<span class="string">&quot;gcc&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;-O2&quot;</span>, SRC, <span class="string">&quot;-o&quot;</span>, BIN],</span><br><span class="line">        stdout=sys.stdout,</span><br><span class="line">        stdin=subprocess.DEVNULL,</span><br><span class="line">        stderr=subprocess.STDOUT</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;input.in&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        instr = f.read()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;output.out&#x27;</span>), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ans = f.read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    res = check_excutable(BIN, instr, ans, <span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Result: &#x27;</span>, res_map[res])</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;AC&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>简单翻译一下程序功能：输入一段c语言代码，送至code.c中，进行编译后，将input.in中的内容作为输入执行这段程序，并将程序输出结果与output.out中的内容做对比，如果结果一致，则会输出flag。</p>
<p>问题在于，我们并不知道input.in与output.out的内容是什么，也就无法根据需要写出对应程序。可是其实再仔细想想，题目要求其实仅仅是要求程序内容输出与output.out内容一致而已，而根据题目附件，output.out文件就在DATA目录下，所以其实只需要写一个能打印出output.out内容的c语言程序即可。</p>
<p>exp.c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="type">char</span> filename[] = <span class="string">&quot;/home/ctf/data/output.out&quot;</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = fgetc(file)) != EOF) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><img src="/post/22e56931/image-20230911102740014.png" alt="image-20230911102740014"></p>
<p>flag：</p>
<p><strong>cnss{y0u_4re_U1tim34ate_01er!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="❓-泻药，人在CNSS，刚打完招新"><a href="#❓-泻药，人在CNSS，刚打完招新" class="headerlink" title="❓ 泻药，人在CNSS，刚打完招新"></a>❓ 泻药，人在CNSS，刚打完招新</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参加CNSS招新赛是一种怎样的体验呢？</span><br></pre></td></tr></table></figure>
<p>题目的全部信息只有题目标题和题目描述，没有附件、没有靶机，因此基本可以确定为社工题。</p>
<p>直接搜索题目描述，就能在知乎上搜到一个回答，最后就有flag：</p>
<p><img src="/post/22e56931/image-20230911103024312.png" alt="image-20230911103024312"></p>
<p>flag：</p>
<p><strong>cnss{L3T_U$_$T4RT!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔮-東方希缇符"><a href="#🔮-東方希缇符" class="headerlink" title="🔮 東方希缇符"></a>🔮 東方希缇符</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">试着找出最新最热（确信）东方新作中的 flag 吧！</span><br><span class="line">Hint：flag 在游戏资源包内</span><br></pre></td></tr></table></figure>
<p>题目给了th08的游戏包，结合hint知道应该是要对资源包解包得flag。</p>
<p>thxx解包参考：</p>
<p><a href="https://www.bilibili.com/read/cv13353380/">关于东方project系列正作的魔改教程以及注意事项 - 哔哩哔哩 (bilibili.com)</a></p>
<p>跟着一步一步做：</p>
<p>1、下载工具</p>
<p>2、选择好文件与对应游戏(th08)，进行解包</p>
<p><img src="/post/22e56931/image-20230911103506296.png" alt="image-20230911103506296"></p>
<p>3、在解包得到的资源中发现flag.txt</p>
<p><img src="/post/22e56931/image-20230911103618535.png" alt="image-20230911103618535"></p>
<p>flag：</p>
<p><strong>cnss{Y0u_4re_T0uhou_M4st3er_n0w!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h3><p>参考我另一篇文章：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/77e39860.html#more">misc趣题(一) | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p><br></p>
<p><br></p>
<h3 id="☁️-Hurrison-的网站"><a href="#☁️-Hurrison-的网站" class="headerlink" title="☁️ Hurrison 的网站"></a>☁️ Hurrison 的网站</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hurrison 刚刚学会搭建网站，听说套了 Cloudflare 之后大黑客 Casio 就找不到服务器 IP 了</span><br><span class="line">Hint：flag格式如下：</span><br><span class="line">cnss&#123;IPv4&#125;</span><br><span class="line">IPv4 格式为 xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cnss2023catchme.hurrison.com/</span><br></pre></td></tr></table></figure>
<p>根据题目描述，这题是要寻找隐藏在Cloudflare下的服务器ip地址，直接对这个要求进行搜索：</p>
<p><img src="/post/22e56931/image-20230911104238020.png" alt="image-20230911104238020"></p>
<p>逐个尝试文章中的方法，最后发现这个方法很有效果：</p>
<p><img src="/post/22e56931/image-20230911104618404.png" alt="image-20230911104618404"></p>
<p>到<a href="https://securitytrails.com/">SecurityTrails: Data Security, Threat Hunting, and Attack Surface Management Solutions for Security Teams</a>搜索对应URL，并不能直接在历史数据里看到结果。开一开脑洞，搜索hurrison.com，就有很多子域名：</p>
<p><img src="/post/22e56931/image-20230911111836344.png" alt="image-20230911111836344"></p>
<p>逐个查看，并结合Censys逐个搜索域名，如下：</p>
<p><img src="/post/22e56931/image-20230911112020297.png" alt="image-20230911112020297"></p>
<p>找到一个在给定范围内的ip地址就可以了。</p>
<p>flag：</p>
<p><strong>cnss{103.239.247.22}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="💻-cn55Terminal"><a href="#💻-cn55Terminal" class="headerlink" title="💻 cn55Terminal"></a>💻 cn55Terminal</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述又忘了，凑合用吧👇</span><br><span class="line">curl -sL https://transfer.sh/VKyC2P8CPw/id.txt | nc 124.221.34.13 50024</span><br><span class="line">Update: 为避免这行命令可能造成不必要的误解，还是试试手动体验 cn55Terminal 吧~</span><br><span class="line">如果你访问不了，或者想手动，这里也贴出 id.txt</span><br></pre></td></tr></table></figure>
<p>id.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">.@@.....@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@.....@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br></pre></td></tr></table></figure>
<p>xshell打开，缩小界面看到的命令如下：</p>
<p><img src="/post/22e56931/image-20230911144054892.png" alt="image-20230911144054892"></p>
<p>可以看到，命令行前的内容以字符画的形式展示出来了，合理猜测，这道题的意思是识别字符画形式的指令并执行。这样的话，我们就需要输入字符画形式的linux指令。先试一试将题目给出的id上传，看看返回内容：</p>
<p><img src="/post/22e56931/image-20230911144414307.png" alt="image-20230911144414307"></p>
<p>可以看出确实和想象的一模一样，终端执行了id指令。那么接下来就是找脚本，将”cat flag”生成为字符画。最后找到了一个脚本，但是他只能将图片转化为字符画，没事，先生成一张图片：</p>
<p><img src="/post/22e56931/image-20230911144603284.png" alt="image-20230911144603284"></p>
<p>然后用如下脚本转化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">out_img = img.convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 图片转换为灰度模式</span></span><br><span class="line">w, h = out_img.size  <span class="comment"># 返回图片大小</span></span><br><span class="line">n=<span class="number">600</span>/<span class="built_in">max</span>(w,h) <span class="comment">#图像缩小倍数，不然图片转换后会很大</span></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w * n), <span class="built_in">int</span>(h * n*<span class="number">0.5</span>)))  <span class="comment"># 因字符的宽度一般大于2倍的高度</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w), <span class="built_in">int</span>(h )))</span><br><span class="line">w, h = out_img.size</span><br><span class="line"><span class="comment">#asciis=&#x27;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,&quot;^\ &#x27;</span></span><br><span class="line">asciis = <span class="string">&quot;@.&quot;</span>  <span class="comment"># 灰度表</span></span><br><span class="line">texts = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line"> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">       gray = out_img.getpixel((col, row))</span><br><span class="line">       texts += asciis[<span class="built_in">int</span>(gray / <span class="number">255</span> * (<span class="built_in">len</span>(asciis) - <span class="number">1</span>))]  <span class="comment"># 根据灰度值选择不同复杂度的 ASCII 字符</span></span><br><span class="line"> texts += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(texts)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<p>得到1.txt文件，打开即是字符画：</p>
<p><img src="/post/22e56931/image-20230911144716398.png" alt="image-20230911144716398"></p>
<p>上传给Terminal，即得到flag：</p>
<p><img src="/post/22e56931/image-20230911144745871.png" alt="image-20230911144745871"></p>
<p>flag：</p>
<p><strong>cnss{funny_ascii_ocr_duibudui}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>misc的知识面涉及很广，很多知识都是边做题边学，很多工具也是边做题边下的，一点一点积累吧。</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SHCTF-wp-crypto</title>
    <url>/post/11b9531d.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2877ba742796f87eae21b8792932b88b5eccded1e61fb6f5955d04b46249105e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-MoeCTF-wp-crypto</title>
    <url>/post/aa501114.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a4e0d596944d50d5d09a5c7d91eb612a6122c44af80dc08135c87b232c87fb19"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-羊城杯-wp-crypto</title>
    <url>/post/47440.html</url>
    <content><![CDATA[<p>随手记录一下~</p>
<span id="more"></span>
<h2 id="Danger-RSA"><a href="#Danger-RSA" class="headerlink" title="Danger_RSA"></a>Danger_RSA</h2><p>题目描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看似简单的rsa</span><br></pre></td></tr></table></figure>
<p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">a, nbit</span>):</span><br><span class="line">    <span class="keyword">assert</span> a &gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        X = getRandomInteger(nbit // a)</span><br><span class="line">        s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br><span class="line">        p = X ** a + s</span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> (p, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, s = get_key(a, <span class="number">1024</span>)</span><br><span class="line">q, t = get_key(a, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">e = s * t</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N =&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># N = 20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line"><span class="comment"># e = 11079917583</span></span><br><span class="line"><span class="comment"># c = 13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目初看没有什么下手点，但其实get_key函数的这两行暴露了很多信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = getRandomInteger(nbit // a)</span><br><span class="line">s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>也就是说，a可能的范围其实很小，粗略的范围都仅有[2,1024],这个时候再看生成的e，可以发现，e相对来说太小了，甚至可以得到他的全部素因子分解，即：</p>
<script type="math/tex; mode=display">
e = 3*7*7*19*691*5741</script><p>因此我们完全可以用下面这个方式来进一步确定a的取值范围:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>可以发现，a其实仅能取4；与此同时可以明白，对于刚才的e的因子分解，仅有两种可能的组合让两次生成的s均落在a规定的范围里：</p>
<script type="math/tex; mode=display">
s=5741*19\;,\;t=691*3*7*7</script><script type="math/tex; mode=display">
s=5741*3*7\;,\;t=691*7*19</script><p>此时再看n的生成过程：</p>
<script type="math/tex; mode=display">
n = (X1^4 + s)*(X2^4 + t)</script><p>s和t相较于X1、X2来说非常小，因此对n开4次方根就可以得到X1*X2，此时，就可以以以下方式分解n：</p>
<script type="math/tex; mode=display">
n = (X1*X2)^4 + t*X1^4 + s*X2^4  + s*t</script><p>将所有量移动到同一侧：</p>
<script type="math/tex; mode=display">
(X1*X2)^4 + t*X1^4 + s*X2^4  + s*t - n = 0</script><p>左右同时乘$\; X1^4$，得:</p>
<script type="math/tex; mode=display">
((X1*X2)^4  + s*t - n)* X1^4 + t*(X1^4)^2 + s*X2^4*X1^4= 0</script><p>此时，令$\;x = X1^4$，就得到下面的一元二次方程：</p>
<script type="math/tex; mode=display">
t*x^2 + ((X1*X2)^4  + s*t - n)* x + s*(X2*X1)^4= 0</script><p>将可能的两组s、t，逐个代入解上述方程，就可以得到n的分解。</p>
<p>得到n的分解后，想要直接求解RSA解密却发现$\;gcd(e,phi_n)\;!=\;1$，发现是因为$\;3|(p-1)$且$\;7|(q-1)$，此时由于题目中并未说明对flag做过额外填充处理，而p、q两个因子均有接近1024比特，正常来说远大于明文比特位，因此可以转化到模p下求解，这是因为：</p>
<script type="math/tex; mode=display">
m^{e} = (m^3)^{7*7*19*691*5741} \equiv c\quad(mod\;p)</script><p>而</p>
<script type="math/tex; mode=display">
\quad gcd(7*7*19*691*5741,(p-1)) = 1</script><p>所以可以将$m^3$当作一个整体，进行RSA解密后在模p下开三次方根即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">N = <span class="number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line">e = <span class="number">11079917583</span></span><br><span class="line">c = <span class="number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line">elist = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">691</span>,<span class="number">5741</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        a = i</span><br><span class="line"></span><br><span class="line">s1 = <span class="number">120561</span> </span><br><span class="line">s2 = <span class="number">91903</span></span><br><span class="line"></span><br><span class="line">ab = iroot(N,<span class="number">4</span>)[<span class="number">0</span>] ** <span class="number">4</span></span><br><span class="line">b = -(N-ab-s1*s2)</span><br><span class="line">a = s2</span><br><span class="line">c1 = s1*ab</span><br><span class="line">x = <span class="built_in">int</span>((-b + iroot(b**<span class="number">2</span>-<span class="number">4</span>*a*c1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span>*a))</span><br><span class="line">p = x + s1</span><br><span class="line">q = N//p</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">3</span>,p-<span class="number">1</span>)</span><br><span class="line">m3 = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,p))</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - m3</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    temp = long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{C0nsTruct!n9_Techn1qUe2_f0r_RSA_Pr1me_EnC2ypt10N}</font>

<p><br></p>
<p>当然，这题还有一些值得思考的地方，如若明文的比特位超过了p，又该怎么办？</p>
<p>首先可以先将与p-1、q-1均不互素的素因子用普通RSA解密剔去，得到</p>
<script type="math/tex; mode=display">
\quad c\equiv m^{3*7*7}\quad (mod\;n)</script><p>然后就可以使用AMM算法，但是这时使用AMM算法又有一点特殊，这是因为虽然$7|q-1$，但是49却不整除于q-1，因此无法一次性在模q下开49次方根，而需要先开七次方根，再对7个开出的根再各开7次方根，最后再与模p下开出的3次方根作中国剩余定理求解：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = inverse(q, p)</span><br><span class="line">    t2 = inverse(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1*t1*q+mq1*t2*p) % (p*q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">3</span>, p)</span><br><span class="line">mq = AMM_rth(cq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">3</span>, p)</span><br><span class="line">rt2 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">3</span>)</span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模q下所有根</span></span><br><span class="line">mqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mqs.append(mq)</span><br><span class="line">amq = mqs</span><br><span class="line">dq = inverse(<span class="number">3</span>, (q-<span class="number">1</span>))</span><br><span class="line">mmqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mmq = AMM_rth(mq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    rt3 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    mamq = ALL_Solution(mmq, q, rt3, mq, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> mamq:</span><br><span class="line">        mmqs.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(t,dq,q)))</span><br><span class="line">amq = mmqs</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模p下所有根</span></span><br><span class="line">dp = inverse(<span class="number">49</span>, (p-<span class="number">1</span>))</span><br><span class="line">mps = []</span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> amp:</span><br><span class="line">    mps.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(mp, dp, p)))</span><br><span class="line">amp = mps</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br></pre></td></tr></table></figure>
<p>而简便一点，直接解有限域下的方程也是可行的：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line">dp = inverse(<span class="number">49</span>,p-<span class="number">1</span>)</span><br><span class="line">cp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - cp</span><br><span class="line">resp = f.roots()</span><br><span class="line"></span><br><span class="line">dq = inverse(<span class="number">3</span>,q-<span class="number">1</span>)</span><br><span class="line">cq = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^<span class="number">49</span> - cq</span><br><span class="line">resq = f.roots()</span><br><span class="line"></span><br><span class="line">modlist = [p,q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])]</span><br><span class="line">        m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">        temp = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>多种方法求解，也是为了能更灵活的思考问题，掌握更多求解方式，让自己一种方法卡住时，可以有路可走。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Easy-3L"><a href="#Easy-3L" class="headerlink" title="Easy_3L"></a>Easy_3L</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    p = getPrime(<span class="number">1400</span>)</span><br><span class="line">    f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(f, q) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (invert(f, p) * q) % p</span><br><span class="line">    <span class="keyword">return</span> p, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">250</span>)</span><br><span class="line">    b = getRandomNBitInteger(<span class="number">240</span>)</span><br><span class="line">    n = getPrime(<span class="number">512</span>)</span><br><span class="line">    seed = m</span><br><span class="line">    s = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    s[<span class="number">0</span>] = seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, p, h</span>):</span><br><span class="line">    s = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    c = (s * h + msg) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = encrypt1(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S1 =&quot;</span>, s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S2 =&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S4 =&quot;</span>, s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S5 =&quot;</span>, s[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">p, h = get_key()</span><br><span class="line">c = encrypt2(s[<span class="number">3</span>], p, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h =&quot;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line"><span class="comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line"><span class="comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line"><span class="comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"><span class="comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line"><span class="comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line"><span class="comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目的3L显然指的是LLL算法，加密过程分为两层：</p>
<ul>
<li>LCG加密种子flag</li>
<li>NTRU加密LCG的S3</li>
</ul>
<p>那么解题思路也很清晰，先解决NTRU解出S3，进而恢复LCG的种子即可。</p>
<p>本题你会发现要规约出的向量(f,g)数量级好像差的有点多，很难规约出1024比特的f，但是不重要，f是否为原始值对于解密影响并不大，只需要检查S3的数量级正常即可。(正常来说，为使规约后的向量比特相近，应在第二列乘上2^512，使 f 与 (2^512)*g具有相同数量级，但本题中这是解不出来的，因此可以采用爆破手段，会发现有很多短向量f、g均可以用于解密，这也符合NTRU的密钥特性)</p>
<p>解出S3后是个简单的LCG问题，不再赘述。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line">h = <span class="number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line">c = <span class="number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">S3</span>):</span><br><span class="line">    S1 = <span class="number">28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line">    S2 = <span class="number">1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line">    S4 = <span class="number">9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line">    S5 = <span class="number">9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"></span><br><span class="line">    x = [S1, S2, S3, S4, S5]</span><br><span class="line">    t = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">        m = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> sieve_base:</span><br><span class="line">        <span class="keyword">while</span> m % p == <span class="number">0</span>: m //= p</span><br><span class="line">    <span class="keyword">assert</span> isPrime(m)</span><br><span class="line"></span><br><span class="line">    a = (S3 - S2) * inverse(S2 - S1, m)</span><br><span class="line">    b = (S2 - a*S1) % m</span><br><span class="line"></span><br><span class="line">    S1 = (S1-b)*inverse(a, m) % m</span><br><span class="line">    flag = long_to_bytes(S1)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    L = Matrix(ZZ, [[<span class="number">1</span>, (<span class="number">2</span>**e)*h],</span><br><span class="line">                    [<span class="number">0</span>, (<span class="number">2</span>**e)*p]])</span><br><span class="line">    f, g = L.LLL()[<span class="number">0</span>]</span><br><span class="line">    g = g  // (<span class="number">2</span>**e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        S3 = (f*c) % p % g * inverse(f, g) % g</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(S3)) == <span class="number">514</span>):</span><br><span class="line">            dec(S3)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{NTRU_L0G_a6e_S1mpLe}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="SigninCrypto"><a href="#SigninCrypto" class="headerlink" title="SigninCrypto"></a>SigninCrypto</h2><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">随机数真随机吗？如随！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">from</span> iv <span class="keyword">import</span> iv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(<span class="number">2</span>) * <span class="number">8</span></span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line"><span class="built_in">print</span>(xor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br><span class="line">K3 = flag[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">KEY = K1 + K2 + K3</span><br><span class="line"></span><br><span class="line">IV=iv</span><br><span class="line"></span><br><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mode = DES3.MODE_CBC</span><br><span class="line">des3 = DES3.new(KEY, mode, IV)</span><br><span class="line"></span><br><span class="line">pad_len = <span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span></span><br><span class="line">padding = <span class="built_in">bytes</span>([pad_len]) * pad_len</span><br><span class="line">flag += padding</span><br><span class="line"></span><br><span class="line">cipher = des3.encrypt(flag)</span><br><span class="line"></span><br><span class="line">ciphertext=cipher.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 334648638865560142973669981316964458403</span></span><br><span class="line"><span class="comment"># 0xspan></span><br><span class="line"><span class="comment"># 22078953819177294945130027344</span></span><br><span class="line"><span class="comment"># a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span></span><br></pre></td></tr></table></figure>
<p>可以发现，题目最终用3DES对flag进行了加密，因此目标就是还原3DES的key与iv即可。</p>
<p>其中，两个量分别分为了以下几部分：</p>
<ul>
<li>KEY = K1 + K2 + K3 ,每个部分大小8字节</li>
<li>IV=iv，每个部分大小4字节</li>
</ul>
<p>按照如下方式逐步还原每个部分：</p>
<p><strong>K1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(2) * 8</span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line">print(xor)</span><br></pre></td></tr></table></figure>
<p>hint1为16字节量，而K1为8字节量，因此xor的高位即为hint1的高位，又因为hint1由重复字节构成，hint1高位与低位相等。得到完整hint1后与xor异或即得K1</p>
<p><strong>K2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br></pre></td></tr></table></figure>
<p>考察的是MT19937伪随机数生成，利用randcrack模块，提交624个32bit数，即可对之后的随机数进行精准预测。而注意到生成List1、List2之间重新调整了一次随机数种子，因此List1、List2是使用同一随机数种子生成的。</p>
<p>而注意到，List1仅有$624<em>16$bit，List2却有$324</em>64 = 624*32$bit，因此List2生成的位数是足够的，而最终task.txt文本中却只给了List2的部分字节，不需要深究原理也能明白：List1生成的字节恰好就是List2生成的随机数中缺失的字节。因此只需要每种补充方式均尝试一下即可得到K2。</p>
<p><strong>K3</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K3 = flag[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>很显然，因为flag一般以DASCTF{开头，因此只需要爆破一个可见字符即可得到正确K3。</p>
<p><strong>IV1及IV2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br></pre></td></tr></table></figure>
<p>首先明确IV一共8个字节，因此hint2的高位即为IV1，此时题目的几个哈希值貌似给了一个暗示：爆破求解IV2.可是需要爆破的量有4个字节，虽然不能说很大，却也需要很长时间。此时就需要注意到，digest=digest1+digest2这一行，并不是数值的相加，而是字符串的连接，而当你将digest解码后，你会发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">digest1 = digest2</span><br></pre></td></tr></table></figure>
<p>没错，太幽默了，所以IV2与IV1相同(基本无需考虑哈希碰撞)</p>
<p>此时所有量都得到了还原，解密3DES即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">int</span>(<span class="string">&quot;a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1&quot;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取iv</span></span><br><span class="line">hint2 = <span class="number">22078953819177294945130027344</span></span><br><span class="line">IV1 = long_to_bytes(hint2 &gt;&gt; <span class="number">64</span>)</span><br><span class="line">IV2 = IV1</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取K2</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        list1.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        list2.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    t1 = (list2[i] &amp; <span class="number">0xffff</span>)</span><br><span class="line">    t2 = ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i]&lt;&lt;<span class="number">16</span>) | (list2[i] &amp; <span class="number">0xffff</span>))</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i+<span class="number">1</span>]&lt;&lt;<span class="number">16</span>) | ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>))</span><br><span class="line">K2 = long_to_bytes(rc.predict_getrandbits(<span class="number">64</span>),<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破k3</span></span><br><span class="line">xor = <span class="number">334648638865560142973669981316964458403</span></span><br><span class="line">K1 = (xor ^ (xor&gt;&gt;<span class="number">64</span>)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">K1 = long_to_bytes(K1)</span><br><span class="line"></span><br><span class="line">temp = bytes_to_long(<span class="string">b&quot;DASCTF&#123;&quot;</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    K3 = long_to_bytes(temp + j)</span><br><span class="line">    KEY = K1 + K2 + K3</span><br><span class="line">    IV = IV1 + IV2</span><br><span class="line"></span><br><span class="line">    mode = DES3.MODE_CBC</span><br><span class="line">    des3 = DES3.new(KEY, mode, IV)</span><br><span class="line">    flag = <span class="built_in">str</span>(des3.decrypt(long_to_bytes(cipher)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;DASCTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{8e5ee461-f4e1-4af2-8632-c9d62f4dc073}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="esyRSA"><a href="#esyRSA" class="headerlink" title="esyRSA"></a>esyRSA</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好像这个RSA有点怪啊！私钥给你了！我的e呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> md5 <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p, q</span><br><span class="line"></span><br><span class="line">e = ?????</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">ans = gcd(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> n, e, d</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="built_in">str</span>(p + q)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">nspan></span><br><span class="line"><span class="string">d = 14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>无力吐槽。。。这题附件锅了，n是两个重复的大整数拼起来的，因此要先取一半当作正确的n。之后的做法就多了，d过大可以考虑wiener或构造格，但是题目给了e为五位数的暗示，因此也只需要爆破一下e，当作已知e、d分解n即可。</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="string">&quotquot;</span></span><br><span class="line">n = <span class="number">80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</span></span><br><span class="line">d = <span class="number">14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">100000</span>):</span><br><span class="line">    t = e*d - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">        c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t, n)</span><br><span class="line">        c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t, n)</span><br><span class="line">        <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">            p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">            q = n // p</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %hashlib.md5(<span class="built_in">str</span>(p + q).encode()).hexdigest())</span><br><span class="line">            exit()   </span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{4ae33bea90f030bfddb7ac4d9222ef8f}</font>

<p>(<del>为什么主办方没有发现附件需要更新</del>？/(ㄒoㄒ)/~~)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MCeorpkpleer"><a href="#MCeorpkpleer" class="headerlink" title="MCeorpkpleer"></a>MCeorpkpleer</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这数据都不全要怎么计算呢</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params"><span class="built_in">list</span>, m, w</span>):</span><br><span class="line">    pubkey_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin)):</span><br><span class="line">        pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br><span class="line">    <span class="keyword">return</span> pubkey_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_cry</span>(<span class="params">e, pubkey</span>):</span><br><span class="line">    pubkey_list = pubkey</span><br><span class="line">    encode = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        encode += pubkey_list[i] * <span class="built_in">int</span>(e[i]) % m</span><br><span class="line">    <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">e_bin = (<span class="built_in">bin</span>(e))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = pubkey(<span class="built_in">list</span>, m, w)</span><br><span class="line">en_e = e_cry(e_bin, pubkey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;pubkey = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>((p &gt;&gt; <span class="number">435</span>) &lt;&lt; <span class="number">435</span>, n, c, pubkey, en_e))</span><br></pre></td></tr></table></figure>
<p>观察题目，e_cry用于背包加密的就是e的二进制串本身，因此直接格基规约出e，再用coppersmith解已知p高位问题即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#step1 已知p高位，恢复p、q</span></span><br><span class="line">p4 = <span class="number">139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line">n = <span class="number">22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits= <span class="number">435</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2 格基规约恢复e</span></span><br><span class="line">b = [<span class="number">18143710780782459577</span>, <span class="number">54431132342347378731</span>, <span class="number">163293397027042136193</span>, <span class="number">489880191081126408579</span>, <span class="number">1469640573243379225737</span>, <span class="number">4408921719730137677211</span>, <span class="number">13226765159190413031633</span>, <span class="number">39680295477571239094899</span>, <span class="number">119040886432713717284697</span>, <span class="number">357122659298141151854091</span>, <span class="number">1071367977894423455562273</span>, <span class="number">3214103933683270366686819</span>, <span class="number">9642311801049811100060457</span>, <span class="number">28926935403149433300181371</span>, <span class="number">86780806209448299900544113</span>, <span class="number">260342418628344899701632339</span>, <span class="number">781027255885034699104897017</span>, <span class="number">2343081767655104097314691051</span>, <span class="number">7029245302965312291944073153</span>, <span class="number">21087735908895936875832219459</span>, <span class="number">63263207726687810627496658377</span>, <span class="number">189789623180063431882489975131</span>, <span class="number">569368869540190295647469925393</span>, <span class="number">1708106608620570886942409776179</span>, <span class="number">601827224419797931380408071500</span>, <span class="number">1805481673259393794141224214500</span>, <span class="number">893952418336266652976851386463</span>, <span class="number">2681857255008799958930554159389</span>, <span class="number">3523079163584485147344841221130</span>, <span class="number">1524252287869625983140881149316</span>, <span class="number">50264262166963219975822190911</span>, <span class="number">150792786500889659927466572733</span>, <span class="number">452378359502668979782399718199</span>, <span class="number">1357135078508006939347199154597</span>, <span class="number">4071405235524020818041597463791</span>, <span class="number">3169230503688232995231149877299</span>, <span class="number">462706308180869526799807117823</span>, <span class="number">1388118924542608580399421353469</span>, <span class="number">4164356773627825741198264060407</span>, <span class="number">3448085117999647764701149667147</span>, <span class="number">1299270151115113835209806487367</span>, <span class="number">3897810453345341505629419462101</span>, <span class="number">2648446157152195057994615872229</span>, <span class="number">3422845870014670444537026359650</span>, <span class="number">1223552407160181874717436564876</span>, <span class="number">3670657221480545624152309694628</span>, <span class="number">1966986461557807413563286569810</span>, <span class="number">1378466783231507511243038452393</span>, <span class="number">4135400349694522533729115357179</span>, <span class="number">3361215846199738142293703557463</span>, <span class="number">1038662335715384967987468158315</span>, <span class="number">3115987007146154903962404474945</span>, <span class="number">302975818554635252993570910761</span>, <span class="number">908927455663905758980712732283</span>, <span class="number">2726782366991717276942138196849</span>, <span class="number">3657854499533237101379593333510</span>, <span class="number">1928578295715881845245137486456</span>, <span class="number">1263242285705730806288591202331</span>, <span class="number">3789726857117192418865773606993</span>, <span class="number">2324195368467747797703678306905</span>, <span class="number">2450093503961328663664213663678</span>, <span class="number">2827787910442071261545819733997</span>, <span class="number">3960871129884299055190637944954</span>, <span class="number">2837628186769067706678271320788</span>]</span><br><span class="line">c = <span class="number">31087054322877663244023458448558</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = b[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        e = M</span><br><span class="line"></span><br><span class="line"><span class="comment">#step3 RSA</span></span><br><span class="line">c = <span class="number">156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">    e[i] = <span class="built_in">str</span>(e[i])</span><br><span class="line">e = <span class="string">&quot;&quot;</span>.join(e)[:-<span class="number">1</span>]</span><br><span class="line">e = <span class="built_in">int</span>(e,<span class="number">2</span>)</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{T81I_tPPS_6r7g_xlPi_OO3M_6vyV_Rkba}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一切都是有意义的，拿下它吧。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>message.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自由和谐和谐富强公正友善爱国公正法治法治文明和谐自由法治自由法治平等公正友善公正公正民主法治自由公正敬业和谐富强公正友善爱国和谐平等平等友善敬业法治敬业和谐富强法治平等平等友善敬业公正公正公正友善敬业法治平等平等诚信自由公正自由平等友善敬业公正友善法治和谐和谐</span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> enflag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = q * p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = getPrime(<span class="number">17</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line"><span class="comment"># 以上信息生成了私钥文件,但文件被损坏了你能提取有用信息吗</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(enflag, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>pri.pem：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbIL</span><br><span class="line">SuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYE</span><br><span class="line">N4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuW</span><br><span class="line">eZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESv</span><br><span class="line">IgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn</span><br><span class="line">/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbn</span><br><span class="line">jxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5</span><br><span class="line">X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaA</span><br><span class="line">UETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25u</span><br><span class="line">Gz3++w==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>第一层，解开社会主义核心价值观编码得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C0ngr4tulati0n5_y0u_fou^d_m3</span><br></pre></td></tr></table></figure>
<p>第二层，恢复破损RSA私钥文件，base64解码后得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;30820277020100300d06092a864886f70d0101010500048202613082025d02010002818100b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913020301000102818100974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361024100ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9024100cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&#x27;</span><br></pre></td></tr></table></figure>
<p>按照RSA私钥格式还原，可以得到以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n 028181 00b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913</span><br><span class="line">e 0203 010001</span><br><span class="line">d 028181 00974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361</span><br><span class="line">p 0241 00ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9</span><br><span class="line">q 0241 00cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&quot;</span><br></pre></td></tr></table></figure>
<p>可以看到，私钥中的dp、dq以及inv(q,p)损坏了，但是剩下的值已经足够用于RSA解密，因此正常解密即可得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;0e287wQ\x08R\x17\x00FGXYFZ\x07V\x03kIUCn\x02VDg\x01f\x0cN</span><br></pre></td></tr></table></figure>
<p>发现题目描述XOR还没用上，将第一步社会主义核心价值观解密得到的串用于异或即可。</p>
<p>得到flag：</p>
<font color="red">DASCTF{0e2874af5e422482378640e61d919e9a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体难度确实不大，但是怎么说呢，题目有点坑，自己能力也还存在不足，下次加油吧。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-Lattice</title>
    <url>/post/9b40da15.html</url>
    <content><![CDATA[<p>该文章主要记录一些格相关的趣题</p>
<span id="more"></span>
<h3 id="转化AGCD"><a href="#转化AGCD" class="headerlink" title="转化AGCD"></a>转化AGCD</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">delta = <span class="number">.93</span></span><br><span class="line">kbits = <span class="built_in">int</span>(nbits*delta) &gt;&gt; <span class="number">1</span></span><br><span class="line">bound = <span class="number">2</span>**kbits</span><br><span class="line"></span><br><span class="line">m = <span class="number">53</span></span><br><span class="line">p = getPrime(nbits)</span><br><span class="line">x = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">a = [randint(<span class="number">2</span>, bound) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">b = [inverse(a[i] * x + randint(<span class="number">2</span>, bound), p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a = &#125;</span>\n<span class="subst">&#123;b = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * getPrime(nbits)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n<span class="subst">&#123;n = &#125;</span>\n<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = [226623173423524660762660587272926713775967113908071780918074044654746571, 99264763681859867816401881797921542580399607408617989905539839585323915, 177386736426181055874933306917112626356703658087900095566603898769091471, 5081587307910189127020749833744000992860852972311811125838243285877024, 411574110749659943703486080205654180795533263258790540505729307655142415, 1932137082695732276757073197845160804183868657578020568122170798605640, 103124563846054461729937757543103647655652920105466714505493351091607258, 65504504807895104765113845019342631211794998326986693051403166347389343, 151981136459515488882551190881724794060443302721456924436833810784219984, 3718222682937746804225225548712093487815785751144078132168082568580360, 113510621144631490440930342566441462111997352193075435129065142534001691, 120974784665251812036673794948678799274628176126865320042025545119228958, 193781634902416477262894357163294897773986019836290716577623654684669134, 24723078645443091017196603549741156206848230267873373213787667300835247, 113165730428784680251415263617027036564335843097634063978942541861726366, 407969345567975756778713582637075079783087682011802438819519567067241979, 151997755976755754648644424339697978791639952976423703068460739754839735, 253811682402531882908516509348937060650658679039884817907013090700281326, 404019046883201096048575369492824679211148242588135515488831100750933, 216725815105749574244056185735609680710954976727370948136589694286539150, 131605791470353972911656132280131756304373156215254629027113994962767833, 180190835657942894146705472335255090682179032409197893415067330574923084, 280086867488286721744184104208965143004904898002959657537412170401510680, 141039650035922882497777354937772530276454847300329950111476878397654053, 319858542602843767926919031049756704694256249776295683733693049522108872, 135633729043152514436339515687850041275739968837263316059461122379487161, 5038078437655552457504448170918674775639811066221990939957937239270167, 31918623105281221407484700216805581554894830335850729735403857505547002, 424092292941284354705774693468403308534554297314522980647422106907791591, 300635399575681097924575337707842439619576566621368558814406755486658723, 323686536134235835297820679361020300261642147835330856978902402517820801, 392620731408972775834827063986182511057173023783228673505487358356342114, 108681888409433100038410892044516773350200560613740266422720530715166828, 182338238967593331173372924666322484559869636981878410128856193538847678, 242630103099393630296862580986126439159331512930513337684897019399319621, 439737851682655515589311041364295341910822514202794661846391952824593066, 84115222835816390632388766236883091861894245716624041418721833768917547, 83926810016448863267608537461154878096011055852547156452557576634691363, 354588657997053098464002945990025178880458974438409486331146607111950617, 170413334241108032297843362994773587930354677207616527135896108692092457, 283185550452196010949673962093382632839937948488235076418296451706429923, 390000015988537819093964185756696910433784324036454283227484980367608884, 121370082693927496814267201484843687844578996855559797026014779421645731, 357164702199289826402900456464935203585119719343409406742172822868770420, 124276883926433089715798954125363260298740714164810098876501303684201565, 122912426324401068572433533096099229494021528981601203447594706478943744, 287527827124819650763642012585104162743364640051014410357971387706781531, 135819408760576908301747047938951002691288880199213610653148681326046091, 239644892459756283997004399339163555215985564639569406081575642996080481, 241513055132921096791997556818670497379598444881679976542299970876463098, 144152466563589166040797814966860917437020789050031353309848917297959088, 120162009732086541189519736083838746833770360960800721525565383293404918, 121547756201941339094205049920057111793191461762212554355070565584802804]</span></span><br><span class="line"><span class="string">b = [6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485, 4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876, 7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649, 9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639, 10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603, 5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840, 2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037, 5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258, 3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450, 507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042, 1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168, 2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047, 9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615, 6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102, 4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475, 8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429, 2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887, 3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716, 6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671, 9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615, 5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402, 8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067, 2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721, 4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091, 1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313, 4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221, 10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278, 3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998, 867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086, 2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973, 11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795, 8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531, 618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247, 9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630, 10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980, 5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888, 11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068, 9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464, 783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707, 9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737, 2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151, 11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518, 9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772, 9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309, 8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153, 2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868, 8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996, 9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956, 10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418, 5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476, 5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200, 10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977, 8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538]</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">n = 97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line"><span class="string">c = 44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>观察题目，题目给了如下形式的53组等式：</p>
<script type="math/tex; mode=display">
b_i = (a_i*x + r_i)^{-1} \quad(mod\;p)</script><p>其中，各个值的已知信息如下：</p>
<ul>
<li>x 为 (2，p - 1) 之间的随机数，并且在53组等式中保持不变</li>
<li>a、r 为 (2，2**238) 之间的随机数</li>
<li>给出 a 、b</li>
</ul>
<p>首先，有两点信息暗示要用格：</p>
<p>1、a、r 限制了数据范围，可以看作是小量，暗示用LLL</p>
<p>2、多组线性等式，暗示用矩阵</p>
<p><br></p>
<p>所以关键就是转化到一个可以运用格的问题形式，推导如下：</p>
<p>首先要想明白下面的式子：(推导比较容易，就不讲了)</p>
<script type="math/tex; mode=display">
inverse(b,n) = inverse(b,p)\quad(mod\;p)</script><p>然后就可以将问题按下面的方式逐步转化：</p>
<p>1、<strong>将b逆元转化到模n</strong></p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,p) \quad(mod\;p)</script><p>​        代入上面的式子，变成：</p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,n) \quad(mod\;p)</script><p>​        同理：</p>
<script type="math/tex; mode=display">
(a_1*x + r_1) = inverse(b_1,n) \quad(mod\;p)</script><p>2、<strong>联立消元</strong></p>
<script type="math/tex; mode=display">
a_1*(a_0*x + r_0) = a_1*inverse(b_0,n) \quad(mod\;p)</script><script type="math/tex; mode=display">
a_0*(a_1*x + r_1) = a_0*inverse(b_1,n) \quad(mod\;p)</script><p>​        相减得到：</p>
<script type="math/tex; mode=display">
a_1*r_0 + a_0*r_1 = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)\quad(mod\;p)</script><p>​        有没有发现，小量已经全部移到了等式同一边</p>
<p>3、<strong>转化为AGCD问题</strong></p>
<p>将模等式利用同余定理展开：</p>
<script type="math/tex; mode=display">
a_1*inverse(b_0,n) - a_0*inverse(b_1,n) = k*p + a_1*r_0 + a_0*r_1</script><p>​        此时，问题已经变成了AGCD问题，这是因为：</p>
<p>​        AGCD问题通常形式：</p>
<script type="math/tex; mode=display">
X = q*p + r</script><p>​        在本题中，各个量如下：</p>
<script type="math/tex; mode=display">
X = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)</script><script type="math/tex; mode=display">
q = k,\quad
p = p,\quad
r = a_1*r_0 + a_0*r_1</script><p>至此问题推导就结束了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">512</span></span><br><span class="line">Q_bits = <span class="number">238</span>+<span class="number">1024</span>-<span class="number">512</span></span><br><span class="line">R_bits = <span class="number">238</span>+<span class="number">238</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">226623173423524660762660587272926713775967113908071780918074044654746571</span>, <span class="number">99264763681859867816401881797921542580399607408617989905539839585323915</span>, <span class="number">177386736426181055874933306917112626356703658087900095566603898769091471</span>, <span class="number">5081587307910189127020749833744000992860852972311811125838243285877024</span>, <span class="number">411574110749659943703486080205654180795533263258790540505729307655142415</span>, <span class="number">1932137082695732276757073197845160804183868657578020568122170798605640</span>, <span class="number">103124563846054461729937757543103647655652920105466714505493351091607258</span>, <span class="number">65504504807895104765113845019342631211794998326986693051403166347389343</span>, <span class="number">151981136459515488882551190881724794060443302721456924436833810784219984</span>, <span class="number">3718222682937746804225225548712093487815785751144078132168082568580360</span>, <span class="number">113510621144631490440930342566441462111997352193075435129065142534001691</span>, <span class="number">120974784665251812036673794948678799274628176126865320042025545119228958</span>, <span class="number">193781634902416477262894357163294897773986019836290716577623654684669134</span>, <span class="number">24723078645443091017196603549741156206848230267873373213787667300835247</span>, <span class="number">113165730428784680251415263617027036564335843097634063978942541861726366</span>, <span class="number">407969345567975756778713582637075079783087682011802438819519567067241979</span>, <span class="number">151997755976755754648644424339697978791639952976423703068460739754839735</span>, <span class="number">253811682402531882908516509348937060650658679039884817907013090700281326</span>, <span class="number">404019046883201096048575369492824679211148242588135515488831100750933</span>, <span class="number">216725815105749574244056185735609680710954976727370948136589694286539150</span>, <span class="number">131605791470353972911656132280131756304373156215254629027113994962767833</span>, <span class="number">180190835657942894146705472335255090682179032409197893415067330574923084</span>, <span class="number">280086867488286721744184104208965143004904898002959657537412170401510680</span>, <span class="number">141039650035922882497777354937772530276454847300329950111476878397654053</span>, <span class="number">319858542602843767926919031049756704694256249776295683733693049522108872</span>, <span class="number">135633729043152514436339515687850041275739968837263316059461122379487161</span>, <span class="number">5038078437655552457504448170918674775639811066221990939957937239270167</span>, <span class="number">31918623105281221407484700216805581554894830335850729735403857505547002</span>, <span class="number">424092292941284354705774693468403308534554297314522980647422106907791591</span>, <span class="number">300635399575681097924575337707842439619576566621368558814406755486658723</span>, <span class="number">323686536134235835297820679361020300261642147835330856978902402517820801</span>, <span class="number">392620731408972775834827063986182511057173023783228673505487358356342114</span>, <span class="number">108681888409433100038410892044516773350200560613740266422720530715166828</span>, <span class="number">182338238967593331173372924666322484559869636981878410128856193538847678</span>, <span class="number">242630103099393630296862580986126439159331512930513337684897019399319621</span>, <span class="number">439737851682655515589311041364295341910822514202794661846391952824593066</span>, <span class="number">84115222835816390632388766236883091861894245716624041418721833768917547</span>, <span class="number">83926810016448863267608537461154878096011055852547156452557576634691363</span>, <span class="number">354588657997053098464002945990025178880458974438409486331146607111950617</span>, <span class="number">170413334241108032297843362994773587930354677207616527135896108692092457</span>, <span class="number">283185550452196010949673962093382632839937948488235076418296451706429923</span>, <span class="number">390000015988537819093964185756696910433784324036454283227484980367608884</span>, <span class="number">121370082693927496814267201484843687844578996855559797026014779421645731</span>, <span class="number">357164702199289826402900456464935203585119719343409406742172822868770420</span>, <span class="number">124276883926433089715798954125363260298740714164810098876501303684201565</span>, <span class="number">122912426324401068572433533096099229494021528981601203447594706478943744</span>, <span class="number">287527827124819650763642012585104162743364640051014410357971387706781531</span>, <span class="number">135819408760576908301747047938951002691288880199213610653148681326046091</span>, <span class="number">239644892459756283997004399339163555215985564639569406081575642996080481</span>, <span class="number">241513055132921096791997556818670497379598444881679976542299970876463098</span>, <span class="number">144152466563589166040797814966860917437020789050031353309848917297959088</span>, <span class="number">120162009732086541189519736083838746833770360960800721525565383293404918</span>, <span class="number">121547756201941339094205049920057111793191461762212554355070565584802804</span>]</span><br><span class="line">b = [<span class="number">6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485</span>, <span class="number">4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876</span>, <span class="number">7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649</span>, <span class="number">9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639</span>, <span class="number">10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603</span>, <span class="number">5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840</span>, <span class="number">2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037</span>, <span class="number">5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258</span>, <span class="number">3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450</span>, <span class="number">507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042</span>, <span class="number">1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168</span>, <span class="number">2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047</span>, <span class="number">9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615</span>, <span class="number">6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102</span>, <span class="number">4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475</span>, <span class="number">8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429</span>, <span class="number">2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887</span>, <span class="number">3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716</span>, <span class="number">6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671</span>, <span class="number">9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615</span>, <span class="number">5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402</span>, <span class="number">8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067</span>, <span class="number">2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721</span>, <span class="number">4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091</span>, <span class="number">1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313</span>, <span class="number">4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221</span>, <span class="number">10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278</span>, <span class="number">3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998</span>, <span class="number">867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086</span>, <span class="number">2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973</span>, <span class="number">11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795</span>, <span class="number">8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531</span>, <span class="number">618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247</span>, <span class="number">9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630</span>, <span class="number">10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980</span>, <span class="number">5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888</span>, <span class="number">11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068</span>, <span class="number">9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464</span>, <span class="number">783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707</span>, <span class="number">9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737</span>, <span class="number">2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151</span>, <span class="number">11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518</span>, <span class="number">9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772</span>, <span class="number">9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309</span>, <span class="number">8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153</span>, <span class="number">2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868</span>, <span class="number">8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996</span>, <span class="number">9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956</span>, <span class="number">10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418</span>, <span class="number">5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476</span>, <span class="number">5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200</span>, <span class="number">10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977</span>, <span class="number">8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line">c = <span class="number">44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"></span><br><span class="line">N = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">    N.append(a[i+<span class="number">1</span>]*inverse(b[i],n) - a[i]*inverse(b[i+<span class="number">1</span>],n))</span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">abs</span>(<span class="built_in">int</span>(p))</span><br><span class="line">q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{755f85c2723bb39381c7379a604160d8}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-RSA</title>
    <url>/post/ea445335.html</url>
    <content><![CDATA[<p>该文章主要记录一些RSA相关的趣题</p>
<span id="more"></span>
<h3 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h3><p>题目来源：2023江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1, q1 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1*q1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p2, q2 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n2 = p2*q2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;<span class="built_in">pow</span>(n1-m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line"><span class="comment"># n2 = 68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line"><span class="comment"># c1 = 42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line"><span class="comment"># c2 = 62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br></pre></td></tr></table></figure>
<p>题目意图很明确：明文线性相关，所以直接求解多项式gcd是可以做出来的。</p>
<p>不过问题在于，本题e很大，所以如果直接求解gcd，时间会花的较长(约30-40分钟)。因此学习了一波Half-gcd，这是一种能有效减少求解多项式的公因式所需时间的方法。</p>
<p><a href="https://www.cnblogs.com/whx1003/p/16217087.html">多项式 gcd 的正确姿势：Half-GCD 算法 - whx1003 - 博客园 (cnblogs.com)</a></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * b.degree() &lt;= a.degree() <span class="keyword">or</span> a.degree() == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    m = a.degree() // <span class="number">2</span></span><br><span class="line">    a_top, a_bot = a.quo_rem(x^m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x^m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    <span class="keyword">return</span> RET00, RET01, RET10, RET11</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a.degree(), b.degree())</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> GCD(d, r)</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">500000</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line">n2 = <span class="number">68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line">c1 = <span class="number">42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line">c2 = <span class="number">62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">f = x^e - c1</span><br><span class="line">g = (n1 - x)^e - c2</span><br><span class="line"></span><br><span class="line">res = GCD(f,g)</span><br><span class="line"></span><br><span class="line">m = -res.monic().coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>CnHongKe{Fr4nkl1n_R31ter_4nd_gcD}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="BUAA-AITMCLAB-amp-Level4"><a href="#BUAA-AITMCLAB-amp-Level4" class="headerlink" title="BUAA^AITMCLAB&amp;Level4"></a>BUAA^AITMCLAB&amp;Level4</h3><p>题目来源：BUAA^AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nextprime</span>(<span class="params">n</span>):</span><br><span class="line">    n = (n + <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(n):</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;********************&quot;</span></span><br><span class="line"></span><br><span class="line">m = s2n(flag)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The getPrime() may not function properly, </span></span><br><span class="line"><span class="string">but it does not affect your understanding of the problem.</span></span><br><span class="line"><span class="string">lzh hopes you could attack successfully!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = nextprime(p + randint(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">421</span>))</span><br><span class="line">        n = p * q</span><br><span class="line">        phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">        d = randint(<span class="number">0</span>, n ** <span class="number">0.32</span>)</span><br><span class="line">        e = invmod(d, phi)</span><br><span class="line">        c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = %d&quot;</span> % e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = %d&quot;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = 127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line"><span class="string">n = 132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line"><span class="string">c = 37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># try to find the 「flag」</span></span><br><span class="line"><span class="comment"># and don&#x27;t forget to submit it to the platform</span></span><br></pre></td></tr></table></figure>
<p>题目最有用的信息是：</p>
<ul>
<li>p和q高位相近</li>
<li>d小于n^0.32</li>
</ul>
<p>看到卡了d的界，第一反应就是低解密指数攻击，可以采用wiener attack或者boneh and durfee attack。但是问题在于：</p>
<ul>
<li>wiener attack：要求d小于$ \frac{1}{3}n^{\frac{1}{4}}$</li>
<li>boneh and durfee attack：要求d小于n^0.292</li>
</ul>
<p>而题目只界定了0.32，超过了两种攻击的范围。不过不要紧，首先试一试boneh and durfee attack，因为有不到1/8的概率成功(d在(0,n^0.32)随机生成，因此有1/8概率落在(0,n^0.29)的区间，因此可能会成功)</p>
<p>可惜的是失败了，那么就只能另寻他法。由题目条件可知，p、q高位相同这个额外信息肯定是需要用上的，以此来扩大能攻击的d的上界，但是并不知道怎么用。最后从Xenny师傅那里得到一篇论文：</p>
<p><a href="http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf">http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf</a></p>
<p>关键部分：</p>
<p><img src="/post/ea445335/image-20231001174839341.png" alt="image-20231001174839341"></p>
<p><img src="/post/ea445335/image-20231001174939785.png" alt="image-20231001174939785"></p>
<p>这篇论文证明了：当p、q高位接近到一定程度时，$\frac{e}{n-2\sqrt{n}+1}$ 是 $\frac{k}{d}$ 的收敛子，并且拓宽了可以进行wiener attack攻击的d的上界。</p>
<p>因此只需要把wiener attack中的 n 改为 $n-2\sqrt{n}+1$ 即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line">n = <span class="number">132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line">c = <span class="number">37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        self.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n-<span class="number">2</span>*iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;aitmc&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>aitmc{W0Oo!!Y0u_3re_a_m3ster_of_W1ener_H3ck!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="AITMCLAB-quiz2"><a href="#AITMCLAB-quiz2" class="headerlink" title="AITMCLAB quiz2"></a>AITMCLAB quiz2</h3><p>题目来源：AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Welcome to quiz2!!!</span></span><br><span class="line"><span class="keyword">from</span> AITMCLab.libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line">n = p * q</span><br><span class="line">flag = s2n(<span class="string">&#x27;flag&#123;************&#125;&#x27;</span>)</span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, flag, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span> (c)</span><br><span class="line"><span class="comment"># 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br></pre></td></tr></table></figure>
<p>题目本身应该还需要求一下p、q的，但是直接给好了那就用给好的做吧。</p>
<p>发现加密就一步，如下：</p>
<script type="math/tex; mode=display">
c\equiv (n+1)^{flag}*r^n\quad(mod\;n^2)</script><p>其中，r是一个随机数，且题目未给出。</p>
<p>首先，由于模 $ n^2$ 的缘故，$ (n+1)^{flag}$ 可以用二项式定理展开，然后消掉大部分项：</p>
<script type="math/tex; mode=display">
(n+1)^{flag} \equiv n*flag+1\quad(mod\;n^2)</script><p>因此有：</p>
<script type="math/tex; mode=display">
c\equiv (n*flag+1)*r^n\quad(mod\;n^2)</script><p>r 是未知的随机数，因此要消掉，消掉 r 的方式类似于 RSA 的解密过程，如下：</p>
<p>因为：</p>
<script type="math/tex; mode=display">
\phi(n^2) = \phi(p^2q^2) = \phi(p^2)\phi(q^2) = pq(p-1)(q-1)</script><p>所以 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv ((n*flag+1)*r^n)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>即 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)}*r^{n(p-1)(q-1)} \quad(mod\;n^2)</script><p>注意到上式中：</p>
<script type="math/tex; mode=display">
r^{n(p-1)(q-1)}\equiv r^{\phi(n^2)}\equiv 1\quad(mod\;n^2)</script><p>因此就消掉了 r，得到：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>右侧的式子又可以用二项式定理展开，得到：</p>
<script type="math/tex; mode=display">
(n*flag+1)^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>因此：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>减一，除以n后，再求(p-1)(q-1)对n^2的逆元即可，但是会发现求出的模 n^2 下的并不是最终的 flag，猜测可能题目原本题面还有额外信息界定了 flag 的范围，那么转到模 n 下即可得到最终flag。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c,(p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) - <span class="number">1</span>) // n * inverse((p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{can_you_find_me??}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="2048bit-e"><a href="#2048bit-e" class="headerlink" title="2048bit e"></a>2048bit e</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, getStrongPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p, q = getStrongPrime(<span class="number">1024</span>), getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RSAgen</span>(<span class="params">e = <span class="literal">None</span></span>):</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> e:</span><br><span class="line">        <span class="keyword">while</span>(d.bit_length() &lt; <span class="number">2047</span>):</span><br><span class="line">            e = getPrime(<span class="number">2047</span>)</span><br><span class="line">            d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> (p*q, p, q, e, d)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key = RSAgen()</span><br><span class="line">k = randint(<span class="number">600</span>, <span class="number">1200</span>)</span><br><span class="line">f = factorial(k)</span><br><span class="line"></span><br><span class="line">leak = (<span class="built_in">pow</span>(key[<span class="number">3</span>], <span class="number">2</span>) + (key[<span class="number">3</span>]*key[<span class="number">4</span>] - <span class="number">1</span>)*f)*getPrime(<span class="number">256</span>) + k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048 bit e is very expensive, i should use standard e for my encryption   </span></span><br><span class="line"></span><br><span class="line">key = RSAgen(<span class="number">65537</span>)</span><br><span class="line">e = key[<span class="number">3</span>]</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#OUTPUT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#n = 26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line"><span class="comment">#c = 14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line"><span class="comment">#leak = 8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程，题目首先用了默认参数 e=None 生成了一组 RSA 密钥，并基于此密钥泄露了一个信息 leak 。泄漏 leak 之后，用 e=65537 生成了另一组公私钥，并且用另一组公私钥加密明文后，给出密文。</p>
<p>注意到两次 RSAgen() 过程中，n、p、q三个量是不变的。因此解题的思路就是：由第一组 e、d 泄漏的信息 leak，获取 n 的分解，从而解密第二组密文。</p>
<p>那么 leak 究竟泄露了什么？先把表达式写出来：</p>
<script type="math/tex; mode=display">
leak = (e_1^2+(e_1d_1-1)(k!))a+k</script><p>其中，</p>
<ul>
<li>a是一个256比特的随机素数，未给出</li>
<li>k是一个(600,1200)之间的整数，未给出</li>
</ul>
<p>整个 leak 式子里就没有一个参数是知道的，那怎么办？首先就会观察到 k 可能的范围比较小，只有 600 种可能，因此突破口应该在于先找到一种合适的爆破思路，求解出 k。为了达到求解 k 的目的，先把 leak 的表达式拆成更容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = ae_1^2+a(e_1d_1-1)(k!)+k</script><p>我们在(600,1200)之间取 i 进行爆破，那么当 i 取(600,k) 之间的数时，下面的等式成立：</p>
<script type="math/tex; mode=display">
ae_1^2 = leak -i \quad (mod\;i!)</script><p>这是因为，由于 i &lt; k，所以有 $ i! \mid k!$ </p>
<p>而当取的 i 大于 k 时， $ i! \nmid k!$ ，因此模 $ i!$ 无法模掉leak中 $a(e_1d_1-1)(k!)$ 这一部分。这也就是说，如果 $ leak -i \quad (mod\;i!) $ 的计算值发生了变化，就说明我们取得了正确的 k。并且在爆破过程中，我们早就拥有了正确的 $ ae_1^2$</p>
<p>求得了 k 之后，就要想办法求出剩下几个参数，而由于拥有 $ ae_1^2$ ，所以容易想到继续从 a 下手。此时，我们再把 leak 的表达式写成另一个容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = (a(e_1d_1-1))(k!)+(ae_1^2+k)</script><p>为什么说他更容易理解？因为这就写成了一个标准的带余除法形式：</p>
<script type="math/tex; mode=display">
a=kb+c\quad,\quad c<b</script><p>而对这个带余除法，显然有：</p>
<script type="math/tex; mode=display">
a \div b = k</script><p>而放在 leak 组成的带余除法中，由于 $k!$ 的数量级显然大于 $ (ae_1^2+k)$ ，因此就有：</p>
<script type="math/tex; mode=display">
leak \div (k!) = a(e_1d_1-1)</script><p>将得到的值与 $ae_1^2$ 求gcd即可得到 a ，接下来就能恢复 $e_1，d_1$，然后就转化成已知 e，d 分解 n 的问题了。分解出 n 后就可以顺利求解密文。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = <span class="number">26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line">c = <span class="number">14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line">leak = <span class="number">8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确定 k = 1000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for k in range(600,1200):</span></span><br><span class="line"><span class="string">    t = factorial(k)</span></span><br><span class="line"><span class="string">    ae2 = int((leak-k) % t)</span></span><br><span class="line"><span class="string">    if(len(bin(ae2)) != 4351):</span></span><br><span class="line"><span class="string">        print(k-1)</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">1000</span></span><br><span class="line">ae2 = <span class="built_in">int</span>((leak-k) % factorial(k))</span><br><span class="line">temp = leak // factorial(k)</span><br><span class="line">a = GCD(ae2,temp)</span><br><span class="line"></span><br><span class="line">e = iroot(ae2//a,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">d = (((leak - k)//a - e**<span class="number">2</span>) // factorial(k) + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#已知e，d分解n</span></span><br><span class="line">t = e*d - <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    s += <span class="number">1</span></span><br><span class="line">    t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">    c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t), n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t), n)</span><br><span class="line">    <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">        p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{gcd_is_always_useful}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-剪枝</title>
    <url>/post/342113ee.html</url>
    <content><![CDATA[<p>该文章主要记录一些深搜剪枝相关的趣题</p>
<span id="more"></span>
<h3 id="首尾剪枝"><a href="#首尾剪枝" class="headerlink" title="首尾剪枝"></a>首尾剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line"><span class="string">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line"><span class="string">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>已知条件：</strong></p>
<ul>
<li>p 与 q 的反方向二进制的异或值，共256bit，记为pxorq</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从两端向中间搜索</p>
</li>
<li><p>每一次搜索，需利用当前 pxorq 两端的bit位。这是因为，pxorq 的当前最高位对应p的最高位及q的最低位，pxorq 的当前最低位对应p的最低位及q的最高位 (其中最高、最低均是对于当前搜索而言)</p>
</li>
<li>如果当前需搜索的最高位为”1”，则对应两种可能：p该位为1，q对应低位为0；p该位为0，q对应低位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p、q未搜索到的位全填0，乘积应小于n</li>
<li>将p、q未搜索到的位全填1，乘积应大于n</li>
<li>p、q 低 k 位乘积再取低 k 位，应与 n 的低 k 位相同</li>
</ul>
<p>如此进行剪枝即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line">n = <span class="number">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line">c = <span class="number">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n//pp0</span><br><span class="line">            phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{f55a2740-c15d-af88-1815-a1b4aab19ccf}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="特殊剪枝"><a href="#特殊剪枝" class="headerlink" title="特殊剪枝"></a>特殊剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">q1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">a1 = p1 ^ q1</span><br><span class="line">b1 = p1 * q1</span><br><span class="line">c1 = <span class="built_in">pow</span>(bytes_to_long(flag[:<span class="number">19</span>]),e,p1*q1)</span><br><span class="line">p2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">q2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">a2 = (p2 * q2) ^ (p2 + q2)</span><br><span class="line">b2 = (p2 * q2) ^ (p2 - q2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(bytes_to_long(flag[<span class="number">19</span>:]),e,p2*q2)</span><br><span class="line">f= <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c2)+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>题目txt：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br></pre></td></tr></table></figure>
<p>可以明显看出，题目分为两部分，均是利用剪枝：</p>
<h4 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>p1 与 q1 的异或值，共1024bit，记为a1</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从高位向低位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a1 的最高位</p>
</li>
<li>若当前 a1 的最高位为”1”，则对应两种可能：p该位为1，q该位为0；p该位为0，q该位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p1、q1未搜索到的位全填0，乘积应小于n</li>
<li>将p1、q1未搜索到的位全填1，乘积应大于n</li>
<li>p1 &gt; q1（这是因为，p1和q1肯定一个比另一个大，因此可以减少一半复杂度）</li>
</ul>
<h4 id="第二部分："><a href="#第二部分：" class="headerlink" title="第二部分："></a>第二部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>(p2 * q2)与(p2 + q2)的异或值，记为a2</li>
<li>(p2 * q2)与(p2 - q2)的异或值，记为b2</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从低位向高位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a2、b2 的最低位</p>
</li>
<li>硬搜索当前位的所有四种可能：00、01、10、11</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>若当前已搜索了 k 位，则需满足：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)</span><br></pre></td></tr></table></figure>
<p>按照此方式就可以递归深搜出p2、q2</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1,剪枝</span></span><br><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a1 = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(a1)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; b1):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; b1):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c1,d,pp*qq))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 硬剪枝</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q,k</span>):</span><br><span class="line">    mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(p,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(q,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c2,d,pp*qq))</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(m) &lt; <span class="number">20</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)):</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;1&quot;</span></span><br><span class="line">q = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">find(p,q,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>大概需要十几秒。</p>
<p>flag：</p>
<p><strong>flag{u2w6tnettv2a9fbo5qh73k8082h2q9j3}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-古典密码</title>
    <url>/post/165cec8c.html</url>
    <content><![CDATA[<p>该文章主要记录一些古典密码相关的趣题</p>
<span id="more"></span>
<h3 id="Ex-Viginere"><a href="#Ex-Viginere" class="headerlink" title="Ex Viginere?"></a>Ex Viginere?</h3><p>题目来源：MoeCTF 2021</p>
<h4 id="加密流程解读"><a href="#加密流程解读" class="headerlink" title="加密流程解读"></a>加密流程解读</h4><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这难道是维吉尼亚吗？</span><br><span class="line">text is a plain English text which only consists of lowercase letters (without any symbol)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a, b, text, key, flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> key <span class="keyword">in</span> text</span><br><span class="line"><span class="keyword">assert</span> a * b &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;moectf&#123;&#x27;</span> + key.encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> md5(key.encode()+<span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span>).hexdigest() == <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line"></span><br><span class="line">k1 = []</span><br><span class="line">k2 = []</span><br><span class="line"></span><br><span class="line">sequence = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">n = randint(<span class="number">114514</span>,<span class="number">1919810</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):<span class="comment">#2**16</span></span><br><span class="line">    sequence.append((sequence[-<span class="number">1</span>] + sequence[-<span class="number">2</span>]) % n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    k1.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    k2.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span>.join(table[((<span class="built_in">ord</span>(x) - <span class="number">97</span>) * (k1[i % a]) + k2[i % b]) % <span class="number">26</span>] <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(text))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;./cipher&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(c)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>并且给定cipher文件，其中内容为长度为108361的字母文本：</p>
<p><img src="/post/165cec8c/image-20230929101431427.png" alt="image-20230929101431427"></p>
<p>把加密程序一点一点读完，可以提取出以下信息：</p>
<ul>
<li>最终 flag 由 key 组成，其中 key 是被加密的原文中的某个字符串</li>
<li>key 在原文中的位置未知，且长度未知</li>
<li>生成一个随机数 n，作为之后生成 sequence 序列的模数</li>
<li>sequence 序列其实就是模 n 意义下的斐波那契数列，共生成 65536 项</li>
<li>从 sequence 序列中随机选择 a 项并模 26，作为加密所需的 k1 序列</li>
<li>从 sequence 序列中随机选择 b 项并模 26，作为加密所需的 k2 序列</li>
<li>对原文中的每一个字符 m 进行仿射加密得到密文，其中仿射加密的 A 为 k1[i % a]，B 为 k2[i % b]</li>
</ul>
<p>此外还有一些额外信息：</p>
<ul>
<li>一段有关 key 的md5值</li>
<li>a*b &lt; 100</li>
</ul>
<h4 id="引入重合指数"><a href="#引入重合指数" class="headerlink" title="引入重合指数"></a>引入重合指数</h4><p>因为密文很长，所以可以用统计方面的思想来解决题目，因此引入<strong>重合指数</strong>的概念：<strong>重合指数是指字符串中两个随机元素相同的概率。</strong>因此，假如我们仅考虑完全由英文字符组成的文本，那么一个文本的重合指数就按如下方式计算：(重合指数以 In 表示,p(a)表示 a 在文本中出现的频率)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In = p(a)*p(a) + p(b)*p(b) + p(c)*p(c) + ... + p(z)*p(z)</span><br></pre></td></tr></table></figure>
<p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>
<p>那么对于下列两种文本分别计算重合指数，就能看出它们的区别：(文本字符均足够多，符合统计概念)</p>
<p>1、完全随机的英文文本(26个字母均随机生成，因此出现频率相当，均为 1/26)</p>
<p>2、正常的英文文本(26个字符有使用频率上的差别)，一般来说如下：</p>
<p><img src="/post/165cec8c/image-20230930103629784.png" alt="image-20230930103629784"></p>
<p>1、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{(\frac{1}{26})^2} = \frac{1}{26} \approx 0.038</script><p>2、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{p(i)^2}  \approx 0.065</script><p>由此，我们就有了一个区分随机文本与英文文本的重要依据。</p>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><h5 id="part1：找出密钥长度"><a href="#part1：找出密钥长度" class="headerlink" title="part1：找出密钥长度"></a>part1：找出密钥长度</h5><p>重合指数如何应用到题目里呢？首先想明白一点：被同一个密钥(a、b均相同)加密的明文，一定会变成同一个密文。因此我们如果能够找到所有被同一个密钥加密的密文组，那么该密文组的重合指数是符合正常英文文本的(可以仔细想想)</p>
<p>所以我们就需要先由重合指数找到哪些密文是被同一个密钥加密的，实际上这就是在求 gcd(a,b) ,而由题目条件 a*b &lt; 100，因此我们可以很快爆破出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>爆破得到a*b = 77，因此a=7，b=11或a=11，b=7</p>
<h5 id="part2：确定密钥内容"><a href="#part2：确定密钥内容" class="headerlink" title="part2：确定密钥内容"></a>part2：确定密钥内容</h5><p>确定了密钥长度后，现在就需要确定密钥的内容具体是什么，也就是 k1、k2里究竟是什么数字。</p>
<p>首先会发现一个 trick，那就是 sequence 序列的生成根本没什么用，由于最终是在mod 26 下进行计算，因此直接把sequence 当成一个由 0-25 组成的随机序列就可以。那么怎么确定呢，依然是利用重合指数，只是要换一种用法。</p>
<p>先引入一个结论：</p>
<p>假设 $ p1, p2 , p3…, pn$为递减的概率分布( $ p1\geq p2 \geq p3…\geq pn$ )，令$ q1’, q2’ , q3’…, qn’$为 $ q1, q2 , q3…, qn$的任意置换，则当 $ q1’, q2’ , q3’…, qn’$ 恰好也为递减的概率分布时，下式取得最大值：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{26}{pi*qi'}</script><p>这个结论的证明并不复杂，可以自行尝试。</p>
<p>这个结论有什么用呢？我们现在先把密文按长度为 77 分组，并取出每组的第一个字母组成一个新的密文串，那么这个新的密文串的所有字符，都是被k1[0]、k2[0]这个密钥加密的。那么我们爆破的密钥空间大小一共就只有12*26 = 312(参考仿射密码)。</p>
<p>爆破的依据是什么？仍然是重合指数，对于现在被加密的密文，它自身的重合指数是符合0.065的，因为是单表代换；但是加密过后，各个字符的频率发生了错位。比如正常英文文本中频率最高的是 e，而加密后可能变成了 z。那么把正常英文文本的概率分布当作p，把加密文本的概率分布当作q，就能发现可以利用刚才引入的结论来进行爆破了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>之所以只爆破11个而不爆破全部77个，道理也很简单，爆破11个已经能够找出全部的k1、k2了。</p>
<h5 id="part3：爆破md5"><a href="#part3：爆破md5" class="headerlink" title="part3：爆破md5"></a>part3：爆破md5</h5><p>知道了密钥后就很轻松，就是个纯粹的爆破问题了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>完整exp：(记得改一下if条件)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\cipher&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">table = ascii_lowercase</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算与英语字频吻合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In_m</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * dic[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{pieceofchocolate}</strong></p>
<p>一个很纯粹的古典密码分析过程，其实是非常有意思也非常有价值的。</p>
<p><br><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-其他</title>
    <url>/post/97bbcbc9.html</url>
    <content><![CDATA[<p>该文章主要记录一些特殊的趣题</p>
<span id="more"></span>
<h3 id="Shamir门限"><a href="#Shamir门限" class="headerlink" title="Shamir门限"></a>Shamir门限</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公司使用Shamir门限密钥设计了一个秘密保存方案，将fag保存了起来，最终的设计效果如下密钥总共有<span class="number">9</span>份，拿到任意<span class="number">5</span>个密钥即可解出保存的flag.现在我们知道公共的密钥:</span><br><span class="line">p=<span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">以及如下<span class="number">5</span>个密钥:</span><br><span class="line"><span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span></span><br><span class="line"><span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span></span><br><span class="line"><span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span></span><br><span class="line"><span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span></span><br><span class="line"><span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span></span><br><span class="line">请恢复flag</span><br></pre></td></tr></table></figure>
<p>题目明确说了这是一个Shamir门限方案，先来简单梳理一下Shamir门限方案的基本实施方式，大概分为以下几步:</p>
<p>1、<strong>根据恢复秘密最小人数及秘密消息，生成秘密多项式</strong></p>
<ul>
<li>将秘密消息转化为整数，记为 secret</li>
<li>首先，设置一个需恢复秘密的最小人数 t ，而题目中说”拿到任意5个密钥即可解出保存的flag”，因此t=5</li>
<li>设置一个公钥 p ，作为之后生成的多项式所处的有限域</li>
<li>生成一个 t-1 次的多项式，满足：</li>
</ul>
<script type="math/tex; mode=display">
f(x) = a_{t-1}*x^{t-1}+a_{t-2}*x^{t-2}+...+a_{2}*x^{2}+a_{1}*x^{1}+a_0 \quad(mod\;p)</script><script type="math/tex; mode=display">
其中，a_1、a_2、...、a_{t-2}、a_{t-1}为随机数，a0=secret</script><ul>
<li>因此可以看出，当多项式取 x=0 时，对应的 f(x)=f(0)=a0=secret，即秘密消息</li>
</ul>
<p><br></p>
<p>2、<strong>根据秘密多项式，进行密钥分发</strong></p>
<ul>
<li>设实际参与密钥分发的人数为 n ，则将 1~n(有时也可能是n个不同的随机数)依次代入秘密多项式 f(x)，便得到n组密钥：</li>
</ul>
<script type="math/tex; mode=display">
(1，f(1))、(2,f(2))、...(n-1,f(n-1))、(n,f(n))</script><ul>
<li>将生成的 n 个密钥分发给 n 个人</li>
</ul>
<p><br></p>
<p>3、<strong>销毁秘密多项式</strong></p>
<p><br></p>
<p>至此，Shamir门限方案便实施完成了，这种分法方案涉及到两个数字，一个是需恢复秘密的最小人数 t ，一个是实际参与密钥分发的人数 n ，因此可以称为 (t,n) - 门限方案。</p>
<p>需要注意到的是，在完成密钥分发之后，秘密多项式便随之被销毁了。那么在拥有足够数量的密钥(&gt;=t)的情况下，怎么恢复秘密信息 secret呢？这就需要用到拉格朗日插值公式，我们不妨先把密钥记为:</p>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><p>则插值多项式如下：</p>
<script type="math/tex; mode=display">
f(x) = \sum_{i=1}^{t}[{f(x_i)}*\prod_{j=1,j\neq i}^{t}{\frac{x-x_j}{x_i-x_j}}]\quad(mod\;p)</script><p>直观一点可以展开写成下式：</p>
<script type="math/tex; mode=display">
f(x) = f(x_1)\frac{(x-x_2)(x-x_3)...(x-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x-x_1)(x-x_3)...(x-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x-x_1)(x-x_2)...(x-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><p>观察一下这个多项式的性质：</p>
<ul>
<li>是一个 t-1 次多项式</li>
<li>分发的密钥均是多项式上的点：</li>
</ul>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><ul>
<li>这是因为，代入其中任意一个密钥的横坐标，则只有代入的那一项不为0，而其他全为0，拿 x1 举例：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)\frac{(x_1-x_2)(x_1-x_3)...(x_1-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x_1-x_1)(x_1-x_3)...(x_1-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x_1-x_1)(x_1-x_2)...(x_1-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><ul>
<li>即：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)*1 + f(x_2)*0 + ... +
f(x_t)*0
\quad(mod\;p)</script><script type="math/tex; mode=display">
所以有 f(x_1) = f(x_1)
\quad(mod\;p)</script><p>所以当有足够多的点( t-1 次多项式需要 t 个点)进行插值时，就可以代入 0 进入插值多项式，解出的常数项即为秘密消息 secret</p>
<p><br></p>
<p>完全了解了Shamir门限方案后再来看这个题，就可以发现密钥数量是完全足够的，但是不清楚5个人具体分到的是9个密钥中的哪一个密钥，因此还需要全排列爆破处理。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">c = [<span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span>,<span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span>,<span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span>,<span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span>,<span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span>]</span><br><span class="line"></span><br><span class="line">m = ([<span class="number">0</span>, c[<span class="number">0</span>]],[<span class="number">0</span>, c[<span class="number">1</span>]],[<span class="number">0</span>, c[<span class="number">2</span>]],[<span class="number">0</span>, c[<span class="number">3</span>]],[<span class="number">0</span>, c[<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> permutations(<span class="built_in">range</span>(<span class="number">9</span>),<span class="number">5</span>):</span><br><span class="line">        m[<span class="number">0</span>][<span class="number">0</span>] = i[<span class="number">0</span>]</span><br><span class="line">        m[<span class="number">1</span>][<span class="number">0</span>] = i[<span class="number">1</span>]</span><br><span class="line">        m[<span class="number">2</span>][<span class="number">0</span>] = i[<span class="number">2</span>]</span><br><span class="line">        m[<span class="number">3</span>][<span class="number">0</span>] = i[<span class="number">3</span>]</span><br><span class="line">        m[<span class="number">4</span>][<span class="number">0</span>] = i[<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (</span><br><span class="line">                m[<span class="number">0</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">1</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">2</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">3</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">4</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * inverse((m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]), p)</span><br><span class="line">                ) % p</span><br><span class="line">            temp = <span class="built_in">str</span>(long_to_bytes(r))</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{b14f4963671a457cf22ec271356e0f78}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><p>题目来源：bricsctf-2023-Quals</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">P = Permutations(<span class="number">256</span>).random_element()</span><br><span class="line"><span class="built_in">print</span>(P**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())])</span><br></pre></td></tr></table></figure>
<p>密文txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span><br><span class="line">[18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span><br></pre></td></tr></table></figure>
<p>题目非常简短，流程如下：</p>
<ul>
<li>将256个元素进行全排列，并随机抽取其中一个排列，记为 P</li>
<li>打印出该排列的平方</li>
<li>将该排列 P 的 sha512 值与flag明文相异或，打印出密文</li>
</ul>
<p>因此，任务就只有一个：根据排列的平方，还原出该排列，并与密文异或就能还原flag</p>
<p>有一个概念一定要先理解清楚，排列的平方是什么意思？用代码可以如下表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C[i] = P[P[i]]</span><br></pre></td></tr></table></figure>
<p>也就是说，一组排列可以看作是一个置换，那么排列的平方就是进行二重置换。</p>
<p>那么怎么还原呢，我们用图的方式来理解，图上一个节点指向另一个节点，代表的就是经过一次置换后，该节点置换到指向节点的位置，比如下面这张图就可以表示一个置换：</p>
<p><strong>(偶数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926104953693.png" alt="image-20230926104953693"></p>
<p>这张图代表：0置换到1、1置换到2、…5置换到0，这很好理解</p>
<p>那么这个置换平方后会是什么样子？很简单，只需要把一个节点指向节点所指向的节点作为新的置换即可，说起来有点绕，还是举个例子：0指向1，1指向2，所以平方后，0指向2，这就很容易明白了。</p>
<p>所以上面的置换平方后会变成如下形式：</p>
<p><img src="/post/97bbcbc9/image-20230926105347447.png" alt="image-20230926105347447"></p>
<p>那么还原的方式就是将两个环并排，然后挨个插入，如下：</p>
<p><img src="/post/97bbcbc9/image-20230926105546460.png" alt="image-20230926105546460"></p>
<p>但是显然，由于插入的相对位置不同，这样还原就可能会得到多个不同的初始置换，而他们平方后都是满足要求的。</p>
<p>上面的例子是偶数个点的情况，想一想奇数个点平方后会如何：</p>
<p><strong>(奇数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926105945860.png" alt="image-20230926105945860"></p>
<p>继续利用<strong>把一个节点指向节点所指向的节点作为新的置换</strong>这一点，可以看出平方后，环并没有裂开，只是交换了位置：</p>
<p><img src="/post/97bbcbc9/image-20230926110200084.png" alt="image-20230926110200084"></p>
<p>仔细想想就能明白，这种形式的还原是唯一的，不会有多种情况。</p>
<p>想清楚置换与图的关系后，回到题目本身来，按如下步骤分析：</p>
<p>1、<strong>首先就要把平方后的排列先转化为若干个环：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印环</span></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">P2 = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(P2[<span class="number">204</span>])</span><br><span class="line">lenlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    <span class="built_in">len</span> = <span class="number">1</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    loc = P2[i]</span><br><span class="line">    chain = [loc]</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        t = P2[loc]</span><br><span class="line">        loc = t</span><br><span class="line">        chain.append(loc)</span><br><span class="line">        <span class="built_in">len</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(t == i):</span><br><span class="line">            <span class="comment">#print(i,&quot;,&quot;,len)</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(chain)</span><br><span class="line">                <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#print(lenlist.count(2))</span></span><br><span class="line"><span class="comment">#2*82 + 75 + 3*3 + 1*8</span></span><br></pre></td></tr></table></figure>
<p>可以发现，平方后的置换可以拆分为 ：</p>
<ul>
<li>2个长为 82 的环</li>
<li>1个长为75的环</li>
<li>3个长为3的环</li>
<li>8个单元环</li>
</ul>
<p><br></p>
<p>2、<strong>接下来就是分析如何还原：</strong></p>
<ul>
<li>对于长为 82 的环，他一定是长为 164 的环拆分而成</li>
<li>长为 75 的环一定是本身长就为 75 的环</li>
<li>3个长为3的环，可能本身就是 3 个长为 3 的环；也可能本身是一个长为 3 的环加上一个长为 6 的环拆分而成</li>
<li>8个单元环，可能本身就是 8 个单元环，也可能是 1-4 个 2 元环加上剩下的单元环</li>
</ul>
<p>因此，要考虑上述的所有可能情况，求出所有符合要求的排列，并与密文异或做爆破。按理来说，一般爆破需要的是flag头，但是由于我并不知道flag头是什么(别的师傅问的)，所以采用全为可见字符来爆破。</p>
<p>复杂度经计算应该是 ：(对哪一部分复杂度不清楚可以问我) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">82*1*4*C(8,2)*C(6,2)*C(4,2)*16</span><br></pre></td></tr></table></figure>
<p>约为一千多万，大概跑五分钟左右可以全部完成。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印环</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = [18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">P2 = [41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    P2[i] -= 1</span></span><br><span class="line"><span class="string">print(P2[204])</span></span><br><span class="line"><span class="string">lenlist = []</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    len = 1</span></span><br><span class="line"><span class="string">    t = 0</span></span><br><span class="line"><span class="string">    loc = P2[i]</span></span><br><span class="line"><span class="string">    chain = [loc]</span></span><br><span class="line"><span class="string">    while(1):</span></span><br><span class="line"><span class="string">        t = P2[loc]</span></span><br><span class="line"><span class="string">        loc = t</span></span><br><span class="line"><span class="string">        chain.append(loc)</span></span><br><span class="line"><span class="string">        len += 1</span></span><br><span class="line"><span class="string">        if(t == i):</span></span><br><span class="line"><span class="string">            #print(i,&quot;,&quot;,len)</span></span><br><span class="line"><span class="string">            if(len == 2):</span></span><br><span class="line"><span class="string">                print(chain)</span></span><br><span class="line"><span class="string">                print(i+1)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">#print(lenlist.count(2))</span></span><br><span class="line"><span class="string">#2*82 + 75 + 3*3 + 1*8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        tt = [0 for k in range(256)]</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            tt[k] = P[P[k]] + 1</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            if(tt[k]!= c[k]):</span></span><br><span class="line"><span class="string">                print(k)</span></span><br><span class="line"><span class="string">        exit()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line">group_size = <span class="number">2</span></span><br><span class="line">num_groups = <span class="number">4</span></span><br><span class="line">all_groupings = <span class="built_in">list</span>(combinations(chain1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_groupings</span>(<span class="params">chain1, group_size, num_groups</span>):</span><br><span class="line">    <span class="keyword">if</span> num_groups == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> [chain1]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> combinations(chain1, group_size):</span><br><span class="line">            remaining_chain1 = [e <span class="keyword">for</span> e <span class="keyword">in</span> chain1 <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> combo]</span><br><span class="line">            <span class="keyword">for</span> rest_grouping <span class="keyword">in</span> generate_groupings(remaining_chain1, group_size, num_groups - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> [<span class="built_in">list</span>(combo)] + rest_grouping</span><br><span class="line"></span><br><span class="line">chain1r = <span class="built_in">list</span>(generate_groupings(chain1, group_size, num_groups))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line">c = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">chain821 = [<span class="number">193</span>, <span class="number">222</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">96</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">68</span>, <span class="number">201</span>, <span class="number">172</span>, <span class="number">157</span>, <span class="number">145</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">230</span>, <span class="number">36</span>, <span class="number">149</span>, <span class="number">141</span>, <span class="number">24</span>, <span class="number">99</span>, <span class="number">212</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">46</span>, <span class="number">158</span>, <span class="number">151</span>, <span class="number">135</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">150</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">64</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">85</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">167</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">53</span>, <span class="number">29</span>, <span class="number">95</span>, <span class="number">122</span>, <span class="number">176</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">136</span>, <span class="number">109</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">108</span>, <span class="number">20</span>, <span class="number">114</span>, <span class="number">203</span>, <span class="number">161</span>, <span class="number">61</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">196</span>, <span class="number">236</span>, <span class="number">240</span>, <span class="number">187</span>, <span class="number">106</span>, <span class="number">2</span>, <span class="number">255</span>]</span><br><span class="line">chain822 = [<span class="number">125</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">159</span>, <span class="number">139</span>, <span class="number">142</span>, <span class="number">69</span>, <span class="number">202</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">5</span>, <span class="number">92</span>, <span class="number">184</span>, <span class="number">163</span>, <span class="number">16</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">210</span>, <span class="number">74</span>, <span class="number">146</span>, <span class="number">216</span>, <span class="number">174</span>, <span class="number">62</span>, <span class="number">156</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">226</span>, <span class="number">79</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">50</span>, <span class="number">134</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">180</span>, <span class="number">170</span>, <span class="number">133</span>, <span class="number">118</span>, <span class="number">81</span>, <span class="number">206</span>, <span class="number">54</span>, <span class="number">83</span>, <span class="number">179</span>, <span class="number">19</span>, <span class="number">248</span>, <span class="number">245</span>, <span class="number">175</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">197</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">130</span>, <span class="number">48</span>, <span class="number">124</span>, <span class="number">71</span>, <span class="number">209</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">181</span>, <span class="number">138</span>, <span class="number">34</span>, <span class="number">66</span>, <span class="number">104</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">60</span>, <span class="number">215</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">229</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">249</span>]</span><br><span class="line">chain75 = [<span class="number">90</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">224</span>, <span class="number">14</span>, <span class="number">164</span>, <span class="number">147</span>, <span class="number">119</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">65</span>, <span class="number">171</span>, <span class="number">155</span>, <span class="number">35</span>, <span class="number">43</span>, <span class="number">208</span>, <span class="number">253</span>, <span class="number">91</span>, <span class="number">128</span>, <span class="number">198</span>, <span class="number">160</span>, <span class="number">192</span>, <span class="number">178</span>, <span class="number">213</span>, <span class="number">45</span>, <span class="number">231</span>, <span class="number">242</span>, <span class="number">217</span>, <span class="number">143</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">153</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">52</span>, <span class="number">75</span>, <span class="number">88</span>, <span class="number">227</span>, <span class="number">234</span>, <span class="number">42</span>, <span class="number">152</span>, <span class="number">188</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">186</span>, <span class="number">235</span>, <span class="number">191</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">162</span>, <span class="number">177</span>, <span class="number">33</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">223</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">127</span>, <span class="number">182</span>, <span class="number">225</span>, <span class="number">169</span>, <span class="number">228</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">76</span>, <span class="number">38</span>, <span class="number">254</span>]</span><br><span class="line">chain31 = [<span class="number">15</span>, <span class="number">165</span>, <span class="number">247</span>]</span><br><span class="line">chain32 = [<span class="number">207</span>, <span class="number">116</span>, <span class="number">238</span>]</span><br><span class="line">chain33 = [<span class="number">120</span>, <span class="number">22</span>, <span class="number">70</span>]</span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line"></span><br><span class="line">locdic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain3(四种情况)</span></span><br><span class="line"><span class="comment">#情况1：3个三环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain32r = [<span class="number">207</span>, <span class="number">238</span>, <span class="number">116</span>]</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#情况2:1个三环,1个六环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain32[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain32r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain32[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain75(确定)</span></span><br><span class="line">chain75r = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    chain75r[<span class="number">2</span>*i%<span class="number">75</span>] = chain75[i]</span><br><span class="line"><span class="comment">#添加入位置字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    locdic[chain75r[i]] = chain75r[(i+<span class="number">1</span>)%<span class="number">75</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#嗯造剩下两种环的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">82</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="comment">#造一个副本</span></span><br><span class="line">    locdic1 = locdic</span><br><span class="line">    chain164r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain164r[j] = chain821[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain164r[j] = chain822[(j//<span class="number">2</span> + i) % <span class="number">82</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        locdic1[chain164r[i]] = chain164r[(i+<span class="number">1</span>)%<span class="number">164</span>]</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#4个二元环（包含单环情况）</span></span><br><span class="line">    <span class="keyword">for</span> mm <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        ttt = <span class="built_in">bin</span>(mm)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain1r)):</span><br><span class="line">            locdic2 = locdic1</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">0</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">2</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">3</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">            P = [locdic2[j]+<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">            </span><br><span class="line">            t = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), n):</span><br><span class="line">                <span class="keyword">if</span>((x^y)&gt;=<span class="number">32</span> <span class="keyword">and</span> (x^y)&lt;=<span class="number">127</span>):</span><br><span class="line">                    t+=<span class="built_in">chr</span>(x^y)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(t) &gt; <span class="number">10</span>):</span><br><span class="line">                <span class="built_in">print</span>(t)</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>
<p>脚本比较丑，只能就题论题，不能作为该类求平方根置换的通解。</p>
<p>flag：</p>
<p><strong>brics+{ab99943f6dae4f20595c8645fcf8289e}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="prng-加强版"><a href="#prng-加强版" class="headerlink" title="prng(加强版)"></a>prng(加强版)</h3><p>(题目具体名称并不是这个，只是我还没有找到对应题目名，就先用着)</p>
<p>题目来源：江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>(<span class="params">n, l</span>):</span><br><span class="line">    bb = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, r = <span class="built_in">divmod</span>(n, l)</span><br><span class="line">        bb.append(r)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> bb[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prng</span>(<span class="params">secret</span>):</span><br><span class="line">	seed = base(secret, <span class="number">5</span>)</span><br><span class="line">	seed = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(seed)]</span><br><span class="line">	length = <span class="built_in">len</span>(seed)</span><br><span class="line">	R = [[ random.randint(<span class="number">0</span>,<span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length**<span class="number">2</span>)]</span><br><span class="line">	S = []</span><br><span class="line">	<span class="keyword">for</span> r <span class="keyword">in</span> R:</span><br><span class="line">		s = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">			s += (r[index] + seed[index]) % <span class="number">5</span></span><br><span class="line">		s %= <span class="number">2</span></span><br><span class="line">		S.append(s)</span><br><span class="line">	<span class="keyword">return</span> R, S</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">R, S = prng(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(<span class="string">f&#x27;R = <span class="subst">&#123;R&#125;</span>\nS = <span class="subst">&#123;S&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理加密流程：</p>
<ul>
<li>将flag转为大整数后，将该整数转为五进制数，并转为列表，作为seed</li>
<li>记列表seed长度为n</li>
<li>生成一个 $ n^2*n$ 的矩阵R，其中每个元素为0-4的随机数</li>
<li>利用R矩阵，对seed矩阵做如下加密：(其中，$ i=1,2…n^2$)</li>
</ul>
<script type="math/tex; mode=display">
s_i=\sum_{j=1}^{n}{(({r_{ij}+seed_i})(mod\;5))} \quad(mod\;2)</script><ul>
<li>将 $ s_i$ 拼接为S向量后，提供R与S，求解明文</li>
</ul>
<p>自己做是一点思路都没有，最终找到了 ZM.J 师傅的一篇wp，发现题目是类似的：</p>
<p><a href="https://zhuanlan.zhihu.com/p/643573246">[CryptoCTF] CryptoCTF 2023 tough分类 团队解题writeup - 知乎 (zhihu.com)</a></p>
<p>于是就可以迁移到这道题目中来：</p>
<p>首先，由于seed中每个数字都是0-4之中的某个数m，我们可以先对其进行编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>此时，我们相当于把一个0-4的数转化为了五个变量组成的一个统一的等式：</p>
<script type="math/tex; mode=display">
m = x_0 + x_1 + x_2 + x_3 + x_4</script><p>其中，每个变量 $ x_i$ 只有0或1两种取值，并且对于任意一个0-4的数m， $ x_i$ 有且仅有一个变量为1，其他均为0</p>
<p>这么做的意义是什么？是让我们能够将这个先模5再模2的没有办法解的线性方程组变化到一个可以解的形式。</p>
<p>为什么这样变换后就可以解？由加密流程知道，$ r_{ij},seed_i$ 均为0-4之间的数，因此相加后模5模2的结果完全可以用一张表加以表示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>表的含义是，当 r 取 i ，seed 取 j 时，表中第 i 行第 j 列即为$ (r+seed)\;(mod\;5)\;(mod\;2)$ 的值</p>
<p>然后在这里举个简单的例子来看一下如何变换原题目的线性方程到可解的形式：</p>
<p>假设$ s = 2m_0+3m_1+4m_2 \;(mod\;5)\;(mod\;2)$，</p>
<p>第一步，把每个 $ m_i$ 表示为五个变量的形式：</p>
<script type="math/tex; mode=display">
m_0 = x_{00} + x_{01} + x_{02} + x_{03} + x_{04}</script><script type="math/tex; mode=display">
m_1 = x_{10} + x_{11} + x_{12} + x_{13} + x_{14}</script><script type="math/tex; mode=display">
m_2 = x_{20} + x_{21} + x_{22} + x_{23} + x_{24}</script><p>第二步，把每一个r转化成对应系数矩阵：</p>
<p>比如，r=2时，看上表的取2的行，需要变量1或4取1就能得到1，否则为0；r=3时，看上表的取3的行，需要变量0或3取1就能得到1，否则为0；r=4时，看上表的取4的行，需要变量2或4取1就能得到1，否则为0</p>
<p>此时，刚才的等式$ s = 2m_0+3m_1+4m_2 \;(mod\;5)\;(mod\;2)$ 就彻底去除了与模5的关系，而只剩下模2下的线性关系与变量，变成了下面这种形式：</p>
<script type="math/tex; mode=display">
s = (0,1,0,0,1)*\left(
 \begin{matrix}
   x_{00} \\
   x_{01} \\
   x_{02} \\
   x_{03}  \\
   x_{04}  \\
  \end{matrix}
  \right)
  + (1,0,0,1,0)*\left(
 \begin{matrix}
   x_{10} \\
   x_{11} \\
   x_{12} \\
   x_{13}  \\
   x_{14}  \\
  \end{matrix}
  \right)
  + (0,0,1,0,1) * \left(
 \begin{matrix}
   x_{20} \\
   x_{21} \\
   x_{22} \\
   x_{23}  \\
   x_{24}  \\
  \end{matrix}
  \right)
  \quad(mod\;2)</script><p>而用这种形式，我们就可以把seed中原本的n个变量转化成5n个变量，因此只需要拿出5n个线性关系即可解得所有的变量取值，再用刚才对m的编码还原即可。</p>
<p>你可能会发现求解后的向量并不全是刚才的编码形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>而出现了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1,1,1,1,0)</span><br></pre></td></tr></table></figure>
<p>事实上是因为当m为4时，两种编码形式最终都能得到完全一样的解，因此将(1,1,1,1,0)也当作4还原即可。</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\output4.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(R[<span class="number">0</span>])</span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span> * n):</span><br><span class="line">    a = []</span><br><span class="line">    B.append(S[i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (R[i][j] == <span class="number">0</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> ,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">1</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">2</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">3</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">4</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    A.append(a)</span><br><span class="line"></span><br><span class="line">A = matrix(GF(<span class="number">2</span>), A)</span><br><span class="line">B = vector(GF(<span class="number">2</span>), B)</span><br><span class="line">x = A.solve_right(B)</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">1</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(flag, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>CnHongKe{179bdc38ea135c35f1f973c039a422a7}</strong></p>
<p>(有不懂的地方欢迎与我交流！)</p>
<p><br></p>
<p><br></p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with nothing.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, pbits: <span class="built_in">int</span>, level: <span class="built_in">int</span>=<span class="number">0</span></span>):</span><br><span class="line">    p = getPrime(pbits)</span><br><span class="line">    M = random_matrix(GF(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line">args = &#123;</span><br><span class="line">    <span class="string">&quot;chall1&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x00</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall2&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x01</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall3&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">dict</span>()</span><br><span class="line">enc = pad(secret.flag, LEN)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    out[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>] = challenge(**args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>])</span><br><span class="line">    enc = xor(enc, hashlib.sha512(args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>][<span class="string">&quot;m&quot;</span>]).digest())</span><br><span class="line">out[<span class="string">&quot;enc&quot;</span>] = enc.<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;out = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理一下解密流程：</p>
<ul>
<li>先将flag串填充至32的整数倍</li>
<li>生成三组challenge需要的参数：m，pbits，level</li>
<li>将每一组的m用sha512加密后，依次与flag异或</li>
<li>给出每组challenge的对应输出与最终密文值</li>
</ul>
<p>其中，challenge的各个参数值在加密过程中的作用依次是：</p>
<ul>
<li>生成一个pbits的素数p，并以该p生成一个有限域Gf(p)</li>
<li>将m的32个随机字节转换成Gf(p)下的长度为32的向量</li>
<li>生成一个大小为32*(32-level)的矩阵M，M中元素均为Gf(p)中的随机数</li>
<li>计算c=m*M，并给出p、M和c</li>
</ul>
<p>因此，我们要做的就是由c、M反解出m，并计算其sha512值后与密文依次异或，就能得到明文，但是三次求解的方法由M的大小而产生不同。</p>
<h4 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h4><p>第一轮，M的大小为32*32，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 32} = c_{1\times 32}\quad(mod\;p)</script><p>可以看作是m的32个变量对应了32组方程，因此满秩，可以直接求解线性方程组(数据有点大，想要复现的师傅可以联系我)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h4><p>第二轮，M的大小为32*31，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 31} = c_{1\times 31}\quad(mod\;p)</script><p>也就是说，m的32个变量只有31组方程了，因此可以求出无穷多组解。不过由于只差一组方程，因此也只需要选取一个自由变量，并从c中对应减去其值后，解一个31变量的满秩方程。而判断解正确的依据就是解出来的m向量中所有值均在0-256之间。</p>
<p>说起来可能不那么明白，还是上个例子，这里以下面这个线性方程组简单说明一下：</p>
<script type="math/tex; mode=display">
m_{1\times 4}*M_{4\times 3} = c_{1\times 3}</script><p>写出来：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3,x_4)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} \\
   m_{41} & m_{42} & m_{43}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,c_3)</script><p>变成方程组形式就是：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3} + m_{41}x_{4} = c_1 \\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3} + m_{42}x_{4} = c_2 \\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3} + m_{43}x_{4} = c_3 
    \end{cases}</script><p>现在我们假设已经知道了x4的值(对应于题目中，就是在0-256中爆破)，那么把方程组中含x4的项都移到右边，就变成：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3}  = c_1 - m_{41}x_{4}\\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3}  = c_2 - m_{42}x_{4}\\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3}  = c_3 - m_{43}x_{4}
    \end{cases}</script><p>接下来解的就是这个满秩方程：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} 
  \end{matrix}
  \right)
  =(c_1 - m_{41}x_{4},c_2 - m_{42}x_{4},c_3 - m_{43}x_{4})</script><p>很容易想到，当解出的向量 $ (x_1,x_2,x_3)$ 均在0-256之间时，就正确求解了。放在本题中也不过是对这个例子的扩大而已，取x32进行爆破，方法是完全一样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h4><p>第三轮，M的大小为32*16，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 16} = c_{1\times 16}\quad(mod\;p)</script><p>可以想到，如果继续用第二轮中的方法，那么需要爆破256的16次方种可能，数量级达到了2^128，是显然不可能的，所以需要另谋他法。而其实你应该早就想到了，m在每个challenge中，都是一个由32个0-256的值组成的向量。0-256意味着，<strong>在模p下这些值都很小</strong>，因此很自然地就会联想到格。</p>
<p>所以challenge3其实是一个格基规约问题，但是想构造出这样的格还是有点难度的。首先还是列出构造格需要的多个等式：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,...,x_{31},x_{32})*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}\\
   m_{2,1} & m_{2,2} &... &m_{2,16} \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16} \\
   m_{32,1} & m_{32,2} &... &m_{32,16}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,...,c_{15},x_{16})\quad(mod\;p)</script><p>从这个矩阵乘法中，可以提取出其中的十六个等式：(i = 1,2,…,16)</p>
<script type="math/tex; mode=display">
m_{1,i}*x_1+m_{2,i}*x_2...+m_{31,i}*x_{31}+m_{32,i}*x_{32}+ k_i*p=c_i</script><p>以这些等式为基础，我们构造出下面的格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>
<p>写清楚点就是：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)</script><p>这是一个64*48的矩阵，而我们用这个矩阵规约的依据等式是：</p>
<script type="math/tex; mode=display">
(x_1,x_2,...,x_{32},k_1,k_2,...,k_{16},-1,-1,...,-1)*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)
  =
  (0,0,...,0,x_1,x_2,...,x_{32})</script><p>可以看出，规约出的向量 $(0,0,…,0,x_1,x_2,…,x_{32})$ 是非常短的，因此LLL就能得到这个解(不过实际操作会发现满足要求的向量在第二列)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>得到三个flag之后，进行sha512后依次与密文异或就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">p = </span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line">p = <span class="number">661</span></span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment">#final</span></span><br><span class="line">c = <span class="number">0x72c0e8ef53c726969a91368ca600a081f38f5cfaa1d0669d9049f278fb2f0fb4f36dced86bf9b7e9ef59af082cc5a5b2458cae490ab23c0c8c5b9361499ae2e2</span></span><br><span class="line">enc = long_to_bytes(c)</span><br><span class="line">flag = [flag1,flag2,flag3]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    enc = xor(enc, hashlib.sha512(flag[i]).digest())</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;db1ebd0c-1cac-55d5-763e-b05f3d9af423&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-曲线</title>
    <url>/post/187210a7.html</url>
    <content><![CDATA[<p>该文章主要记录一些曲线相关的趣题</p>
<span id="more"></span>
<h3 id="EdRSA"><a href="#EdRSA" class="headerlink" title="EdRSA"></a>EdRSA</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">gx=bytes_to_long(flag)</span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eG = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(mul(e, G)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (602246821311345089174443402780402388933602410138142480089649941718527311147, 17625197557740535449294773567986004828160284887369041337984750097736030549853)</span></span><br></pre></td></tr></table></figure>
<p>简单看一下题目流程，题目定义了一个有限域上一条曲线的点加和点乘操作，其中曲线形式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br></pre></td></tr></table></figure>
<p>写出表达式如下：</p>
<script type="math/tex; mode=display">
ax^2+y^2 = 1+dx^2y^2\quad(mod\;p)</script><p>搜索一下，发现这是标准型的扭曲爱德华曲线：(Twisted Edwards Curves)</p>
<p><a href="https://lazzzaro.github.io/2021/01/20/crypto-曲线/">曲线 | Lazzaro (lazzzaro.github.io)</a></p>
<p>而仔细核对一下点加与点乘，发现都是完全对的上的。因此问题就转化为，已知Edcurve上的一个e倍点，求解该e倍点对应的原点G的横坐标，即为flag。</p>
<p>想一想，如果这是一条常见形式的椭圆曲线，求解方式是什么？步骤如下：</p>
<ul>
<li>用sage中的order()函数求解出该椭圆曲线的阶n</li>
<li>求出e关于阶n的逆元，记为t</li>
<li>求倍点G=t*(eG)，横坐标即为所求</li>
</ul>
<p>那么再回头，这个求解过程对于Edcurve肯定也是类似的，不过问题就在于，sage中没有办法直接求出Edcurve这种形式的曲线的阶，因此确定思路：</p>
<ul>
<li>将Edcurve通过换元映射，变换为常见的椭圆曲线的形式</li>
<li>求解出对应椭圆曲线的阶，记为s</li>
<li>求倍点G’ = s*(eG’)</li>
<li>将求解出的G’再变换回Edcurve上得到G，其横坐标即为所求</li>
</ul>
<p>因此难点就在于如何通过换元进行曲线映射，这里陈述一下换元过程：<strong>(以下除法均为有限域上除法，即乘逆元)</strong></p>
<p><strong>第一步：</strong>转化为蒙哥马利曲线方程(Montgomery)：</p>
<p>参考：<a href="https://christianepeters.files.wordpress.com/2012/10/20080620-rennes.pdf">Edwards Curves (wordpress.com)</a></p>
<script type="math/tex; mode=display">
x' = \frac{1+y}{1-y}</script><script type="math/tex; mode=display">
y'=\frac{1+y}{x(1-y)}</script><script type="math/tex; mode=display">
B=\frac{4}{a-d}</script><script type="math/tex; mode=display">
A=\frac{2(a+d)}{a-d}</script><p>代入到Edcurve的曲线方程之后，曲线会转化为蒙哥马利曲线，其方程形式如下：</p>
<script type="math/tex; mode=display">
B(y')^2 = (x')^3+A(x')^2+(x')\quad(mod\;p)</script><p><strong>第二步：</strong>转化为椭圆曲线方程(Weierstrass)：</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/Montgomery_curve">Montgomery curve - Wikipedia</a></p>
<script type="math/tex; mode=display">
x'' = \frac{3x'+A}{3B}</script><script type="math/tex; mode=display">
y''=\frac{y'}{B}</script><script type="math/tex; mode=display">
a=\frac{3-A^2}{3B^2}</script><script type="math/tex; mode=display">
b=\frac{2A^3-9A}{27B^3}</script><p>此时蒙哥马利曲线就变成了椭圆曲线方程形式：</p>
<script type="math/tex; mode=display">
(y'')^2 = (x'')^3+a(x'')+b\quad(mod\;p)</script><p>然后求该曲线的阶，从而求解出远原点G，并且重新逆变换回Edcurve，得到的横坐标即为flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">P.&lt;z&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">aa = a</span><br><span class="line">dd = (d*c^<span class="number">4</span>)%p</span><br><span class="line">J = (<span class="number">2</span>*(aa+dd)*inverse(aa-dd,p))%p</span><br><span class="line">K = (<span class="number">4</span>*inverse(aa-dd,p))%p</span><br><span class="line">A = ((<span class="number">3</span>-J^<span class="number">2</span>)*inverse(<span class="number">3</span>*K^<span class="number">2</span>,p))%p</span><br><span class="line">B = ((<span class="number">2</span>*J^<span class="number">3</span>-<span class="number">9</span>*J)*inverse(<span class="number">27</span>*K^<span class="number">3</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  P(z^<span class="number">3</span>+A*z+B).roots():</span><br><span class="line">    alpha = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> P(z^<span class="number">2</span>-(<span class="number">3</span>*alpha^<span class="number">2</span>+A)).roots():</span><br><span class="line">        s = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">        s = inverse(s, p)</span><br><span class="line">        <span class="keyword">if</span> J==alpha*<span class="number">3</span>*s%p:</span><br><span class="line">            Alpha = alpha</span><br><span class="line">            S = s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twist_to_weier</span>(<span class="params">x,y</span>):</span><br><span class="line">    v = x*inverse(c,p)%p</span><br><span class="line">    w = y*inverse(c,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*v^<span class="number">2</span>+w^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*v^<span class="number">2</span>*w^<span class="number">2</span>)%p</span><br><span class="line">    s = (<span class="number">1</span>+w)*inverse(<span class="number">1</span>-w,p)%p</span><br><span class="line">    t = s*inverse(v,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (K*t^<span class="number">2</span>)%p==(s^<span class="number">3</span>+J*s^<span class="number">2</span>+s)%p</span><br><span class="line">    xW = (<span class="number">3</span>*s+J) * inverse(<span class="number">3</span>*K, p) % p</span><br><span class="line">    yW = t * inverse(K, p) % p</span><br><span class="line">    <span class="keyword">assert</span> yW^<span class="number">2</span> % p == (xW^<span class="number">3</span>+A*xW+B) % p</span><br><span class="line">    <span class="keyword">return</span> (xW,yW)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weier_to_twist</span>(<span class="params">x,y</span>):</span><br><span class="line">    xM=S*(x-Alpha)%p</span><br><span class="line">    yM=S*y%p</span><br><span class="line">    <span class="keyword">assert</span> (K*yM^<span class="number">2</span>)%p==(xM^<span class="number">3</span>+J*xM^<span class="number">2</span>+xM)%p</span><br><span class="line">    xe = xM*inverse(yM,p)%p</span><br><span class="line">    ye = (xM-<span class="number">1</span>)*inverse(xM+<span class="number">1</span>,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*xe^<span class="number">2</span>+ye^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*xe^<span class="number">2</span>*ye^<span class="number">2</span>)%p</span><br><span class="line">    xq = xe*c%p</span><br><span class="line">    yq = ye*c%p</span><br><span class="line">    <span class="keyword">assert</span> (a*xq^<span class="number">2</span>+yq^<span class="number">2</span>)%p==c^<span class="number">2</span>*(<span class="number">1</span>+d*xq^<span class="number">2</span>*yq^<span class="number">2</span>)%p</span><br><span class="line">    <span class="keyword">return</span> (xq,yq)</span><br><span class="line"> </span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">order = E.order()</span><br><span class="line">eG = (<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line">eG = twist_to_weier(<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line"><span class="comment">#print(eG)</span></span><br><span class="line">eG = E(eG)</span><br><span class="line">t = inverse(e,order)</span><br><span class="line">G = t*eG</span><br><span class="line"><span class="comment">#print(G)</span></span><br><span class="line"><span class="comment">#(36261107889873779109466209751550197981810668464592052789439409682189116521876 , 28177359502202272008748289223947413248814289299639597442379536527477393059697)</span></span><br><span class="line">G = weier_to_twist(<span class="number">36261107889873779109466209751550197981810668464592052789439409682189116521876</span> , <span class="number">28177359502202272008748289223947413248814289299639597442379536527477393059697</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(G[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>DASCTF{y0u_kn0w_edcurv3_w3LL!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="EC-Party-I"><a href="#EC-Party-I" class="headerlink" title="EC_Party-I"></a>EC_Party-I</h3><p>题目来源：“华为杯”第二届中国研究生网络安全创新大赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:]==<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin</span>(<span class="params">m</span>):</span><br><span class="line">    m = m+os.urandom(<span class="number">32</span>)</span><br><span class="line">    p = getPrime(<span class="number">384</span>)</span><br><span class="line">    q = getPrime(<span class="number">384</span>)</span><br><span class="line">    Fp = GF(p)</span><br><span class="line">    Fq = GF(q)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">2</span></span><br><span class="line">    a = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">    Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">    En = EllipticCurve(Zmod(n), [a, b])</span><br><span class="line">    ord_p = Ep.order()</span><br><span class="line">    ord_q = Eq.order()</span><br><span class="line"></span><br><span class="line">    xm = bytes_to_long(m)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Gp = Ep.lift_x(Fp(xm))</span><br><span class="line">            Gq = Eq.lift_x(Fq(xm))</span><br><span class="line">            ym = crt([<span class="built_in">int</span>(Gp.xy()[<span class="number">1</span>]),<span class="built_in">int</span>(Gq.xy()[<span class="number">1</span>])],[p,q])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> :</span><br><span class="line">            xm += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    M = En((xm,ym))</span><br><span class="line">    C = e*M</span><br><span class="line">    pk = [a, b, n, C]</span><br><span class="line">    leak = ord_p*ord_q</span><br><span class="line">    <span class="keyword">return</span> pk, leak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rabin(flag))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733, 4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040, 762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543, (19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965, 728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772), 762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>梳理题目加密流程：</p>
<ul>
<li>题目将flag转化成大整数后，转化为基点M的横坐标</li>
<li>生成两个大素数p、q，n=p*q</li>
<li>生成随机数a、b，并以此生成三条椭圆曲线Ep、Eq、En</li>
<li>求出基点M在Ep、Eq上的倍点，并用中国剩余定理求出组合后的纵坐标</li>
<li>给出泄露信息leak=order(Ep)*order(Eq)</li>
</ul>
<p>那么显然如果能获得n的分解，题目就没有难度了，而泄漏的leak就是n的分解的重要依据。其具体原理可以参考：(因为我其实也并没有理解清楚)</p>
<p><a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/HITCON CTF 2022/Chimera/README.md">My-CTF-Challenges/HITCON CTF 2022/Chimera/README.md at master · maple3142/My-CTF-Challenges (github.com)</a></p>
<p>简单来说，就是先获得leak的因式分解：</p>
<p><img src="/post/187210a7/image-20230930114139546.png" alt="image-20230930114139546"></p>
<p>由于leak=order(Ep)*order(Eq)，因此leak乘任何点都应该是En、Ep、Eq的共同O点(无穷远点)，但是将leak挨个除以其因子，再与C点相乘，就可能会产生倍点在Ep上，而不在Eq上的情况，这会使求解关于n的逆元不存在，sage便会在这时抛出一个报错，而在报错信息中就能看到kp以及n的分解：(这是我的理解，如果有不对的地方欢迎师傅指出)</p>
<p><img src="/post/187210a7/image-20230930114719034.png" alt="image-20230930114719034"></p>
<p>这个数字就是kp，与n求gcd即可得到p，也可以在最后一行报错信息中直接看到n的分解。</p>
<p>其实这种分解方式就是<a href="https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization">Lenstra elliptic-curve factorization</a>.的核心原理，但我没有完全理解。</p>
<p>求解出p、q后，就顺势获得了两条曲线，接下来就是如何由曲线上的倍点(2M)求解出原点的问题，一般有两类解法：</p>
<p>1、如果2与曲线阶互素，则可以直接求解2的逆元，将倍点乘上逆元即得原点</p>
<p>2、如果不互素，则可以联立椭圆曲线本身方程及倍点方程，在有限域下求根</p>
<p>而在本题中，2与Eq的阶互素，因此采用第一种解法；与Ep的阶不互素，因此采用第二种解法，第二种解法联立方程过程如下：(记M为(x1,y1),2M为(x2,y2))</p>
<script type="math/tex; mode=display">
y^2=x^3+ax+b\quad(mod\;p)</script><script type="math/tex; mode=display">
x_2=k^2−2x_1\quad(mod\;p)</script><script type="math/tex; mode=display">
k = \frac{3x_1^2 + a}{2y_1}\quad(mod\;p)</script><p>联立上述三式可得方程：</p>
<script type="math/tex; mode=display">
\frac{(3x_1^2+a)^2}{(2y_1)^2} - 2x_1 - x_2 = 0\quad(mod\;p)</script><p>即：</p>
<script type="math/tex; mode=display">
(3x_1^2+a)^2 - 2x_1*4(x_1^3+ax_1+b) - x_2*4(x_1^3+ax_1+b) = 0\quad(mod\;p)</script><p>此时方程中仅有x1一个未知数，在模p下解方程即可，解完后用中国剩余定理将模p与模q下的解组合即得flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">a,b,n,C,leak = [<span class="number">138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733</span>, <span class="number">4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040</span>, <span class="number">762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543</span>, (<span class="number">19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965</span>, <span class="number">728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772</span>), <span class="number">762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828</span>]</span><br><span class="line">E = EllipticCurve(Zmod(n),[a,b])</span><br><span class="line">C = E(C)</span><br><span class="line"></span><br><span class="line"><span class="comment">#factordb</span></span><br><span class="line"><span class="comment">#2^2,3^4,13,199,307,647,157259,297617,8452217,411927661365999433,1157516701716180046249,1338688620929080207819,31226697952255326809332037614333,581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span></span><br><span class="line">leak_fac = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">199</span>,<span class="number">307</span>,<span class="number">647</span>,<span class="number">157259</span>,<span class="number">297617</span>,<span class="number">8452217</span>,<span class="number">411927661365999433</span>,<span class="number">1157516701716180046249</span>,<span class="number">1338688620929080207819</span>,<span class="number">31226697952255326809332037614333</span>,<span class="number">581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in leak_fac:</span></span><br><span class="line"><span class="string">    temp = leak // i * C</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">kp = <span class="number">422522588482185975632147929645103216180089543839772868484032620301855259044079430236142637458472152787337779544279109415705783248825091269039840404202119229567311048216047356951966653331710686649176005328509793328313264251738045723</span></span><br><span class="line">p = GCD(kp,n)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">ord_p = Ep.order()</span><br><span class="line">ord_q = Eq.order()</span><br><span class="line"><span class="comment">#print(ord_p)</span></span><br><span class="line"><span class="comment">#print(ord_q)</span></span><br><span class="line"></span><br><span class="line">dq = inverse(e,ord_q)</span><br><span class="line">Q = dq*Eq(C)</span><br><span class="line">mq = <span class="built_in">int</span>(Q[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(Ep(C))</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = (<span class="number">3</span>*(x**<span class="number">2</span>)+a)**<span class="number">2</span> - <span class="number">2</span>*x*(<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)) - <span class="built_in">int</span>(C[<span class="number">0</span>])*<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"></span><br><span class="line">n = [p,q]</span><br><span class="line"><span class="keyword">if</span>(res):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),mq]</span><br><span class="line">        m = crt(c,n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{3crab1n_s0unds_go0d}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>NSSCTF-2nd-wp-crypto</title>
    <url>/post/39588.html</url>
    <content><![CDATA[<p>这次crypto题目总体难度不大，重点是对一些基础知识的理解运用。</p>
<span id="more"></span>
<h2 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h2><p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length()&lt;<span class="number">200</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">kbits = <span class="number">103</span></span><br><span class="line">m = (m &gt;&gt; kbits) &lt;&lt; kbits</span><br><span class="line">Mod = getPrime(<span class="number">1024</span>)</span><br><span class="line">hint1 = (<span class="number">2021</span>-<span class="number">2023</span>*m) % Mod</span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">2023</span>, Mod)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint1 =&#x27;</span>,hint1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint2 =&#x27;</span>,hint2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = ...</span></span><br><span class="line"><span class="string">c = ...</span></span><br><span class="line"><span class="string">hint1 = ...</span></span><br><span class="line"><span class="string">hint2 = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有以下信息:</p>
<ul>
<li>m.bit_length()&lt;200 , 说明明文较小</li>
<li>kbits = 103 , m = (m &gt;&gt; kbits) &lt;&lt; kbits , 隐藏了明文低位</li>
<li>hint1 = (2021-2023*m) % Mod</li>
<li>hint2 = pow(2, 2023, Mod)</li>
</ul>
<p>种种都指向coppersmith , 首先看hint2，</p>
<script type="math/tex; mode=display">
hint2  \equiv  2^{2023}  mod(Mod)</script><p>利用同余关系,</p>
<script type="math/tex; mode=display">
2^{2023} - hint2 = k*Mod</script><p>得到Mod的k倍,因此可以利用k*Mod建立环，解出hint1中的小根m，解得m高位后已知高位攻击即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">c = ...</span><br><span class="line">hint1 = ...</span><br><span class="line">hint2 = ...</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">kM = <span class="number">2</span>**<span class="number">2023</span>-hint2</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(kM))</span><br><span class="line">f = <span class="number">2023</span>*x + hint1 - <span class="number">2021</span></span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    mhigh = roots[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">mhigh = <span class="number">1746716778150027565782467891299010283212636160</span></span><br><span class="line">PR.&lt;y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mhigh + y)^<span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">104</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    m = mhigh + roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="number">1746716778150037336346788439252154990602710653</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{Rea1_Si9n3n}</font>

<p><br></p>
<p>(赛中的时候，这题解数比funnyencrypt还多，当时就感觉有点诡异。赛后才发现因为明密文都很小，所以直接开三次根就可以了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h2><p>题目:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✧✡✭</span><br><span class="line">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span><br><span class="line">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span><br><span class="line">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span><br><span class="line">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span><br><span class="line">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span><br><span class="line">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>见过的图形加密中并没有类似这个的，不过翻看一下马上就能发现文件尾部的这一串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br></pre></td></tr></table></figure>
<p>前缀肯定是nssctf，是对的上的，猜测是简单的替换密码，写个脚本后交给quipqiup即可</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">✧✡✭</span></span><br><span class="line"><span class="string">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span></span><br><span class="line"><span class="string">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span></span><br><span class="line"><span class="string">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span></span><br><span class="line"><span class="string">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span></span><br><span class="line"><span class="string">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span></span><br><span class="line"><span class="string">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125; _-,.&#x27;:&quot;</span></span><br><span class="line">list1 = [<span class="string">&#x27;✧&#x27;</span>, <span class="string">&#x27;✡&#x27;</span>, <span class="string">&#x27;✭&#x27;</span>, <span class="string">&#x27;✮&#x27;</span>, <span class="string">&#x27;✣&#x27;</span>, <span class="string">&#x27;✴&#x27;</span>, <span class="string">&#x27;✯&#x27;</span>, <span class="string">&#x27;✤&#x27;</span>, <span class="string">&#x27;✶&#x27;</span>, <span class="string">&#x27;✬&#x27;</span>, <span class="string">&#x27;✱&#x27;</span>, <span class="string">&#x27;✦&#x27;</span>, <span class="string">&#x27;✢&#x27;</span>, <span class="string">&#x27;✥&#x27;</span>, <span class="string">&#x27;✷&#x27;</span>, <span class="string">&#x27;✰&#x27;</span>, <span class="string">&#x27;❂&#x27;</span>, <span class="string">&#x27;✩&#x27;</span>, <span class="string">&#x27;✸&#x27;</span>, <span class="string">&#x27;✲&#x27;</span>, <span class="string">&#x27;✳&#x27;</span>, <span class="string">&#x27;★&#x27;</span>, <span class="string">&#x27;✵&#x27;</span>, <span class="string">&#x27;✫&#x27;</span>, <span class="string">&#x27;✪&#x27;</span>, <span class="string">&#x27;❋&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))</span><br><span class="line"></span><br><span class="line">cfinal = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">if</span>(c[i] <span class="keyword">not</span> <span class="keyword">in</span> table):</span><br><span class="line">        <span class="keyword">if</span>(c[i] == <span class="string">&quot;\n&quot;</span>):</span><br><span class="line">            cfinal.append(c[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ind = list1.index(c[i])</span><br><span class="line">            cfinal.append(table[ind])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cfinal.append(c[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(cfinal))</span><br><span class="line"></span><br><span class="line"><span class="comment">#quipqiup</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">six</span></span><br><span class="line"><span class="string">in the flood of darkness, hope is the light. it brings comfort, faith, and confidence. it gives us guidance when we are lost, and gives support when we are afraid. and the moment we give up hope, we give up our lives. the world we live in is disintegrating into a place of malice and hatred, where we need hope and find it harder. in this world of fear, hope to find better, but easier said than done, the more meaningful life of faith will make life meaningful.</span></span><br><span class="line"><span class="string">sometimes we think of dreams as fantasies - it&#x27;s easy to do when you have money, rent, and work. but you can&#x27;t prepare yourself </span></span><br><span class="line"><span class="string">and jump off the cliff: you should grow your wings first. a little bit toward the dream. step by step. take a step forward. after all, it&#x27;s your mission.</span></span><br><span class="line"><span class="string">keep faith and hope for the future. make your most sincere dreams, and when the opportunities come, they will fight for them. it may take a season or more, but the ending will not change. ambition, best, become a reality. an uncertain future, only one step at a time, the hope can realize the dream of the highest. we must treasure the dream, to protect it a season, let it in the heart quietly germinal.</span></span><br><span class="line"><span class="string">only when you understand the true meaning of life can you live truly. bittersweet as life is, it&#x27;s still wonderful, and it&#x27;s fascinating even in tragedy. if you&#x27;re just alive, try harder and try to live wonderfully.</span></span><br><span class="line"><span class="string">i believe there is a person who brings sunshine into your life. that person may have enough to spread around. but if you really </span></span><br><span class="line"><span class="string">have to wait for someone to bring you the sun and give you a good feeling, then you may have to wait a long time.</span></span><br><span class="line"><span class="string">in a word,i hope you will like cryptography.this is your flag:nssctf&#123;crypto_is_so_interesting_why_don&#x27;t_you_join_us&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{crypto_is_so_interesting_why_don't_you_join_us}</font>

<p>(前缀居然要大写，这就有点坑了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(flag)</span><br><span class="line">flag1 = flag[:length//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[length//<span class="number">2</span>:]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">p1 = gmpy2.invert(p,q)</span><br><span class="line">q1 = gmpy2.invert(q,p)</span><br><span class="line">c = <span class="built_in">pow</span>(m1,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1=&quot;</span>,p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q1=&quot;</span>,q1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;phi=&quot;</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p1= ...</span></span><br><span class="line"><span class="string">q1= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">phi= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line">hint = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">114514</span>, q, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,hint)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">hint= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目将flag分为两部分分别进行加密，分开来说：</p>
<ul>
<li>第一部分</li>
</ul>
<p>给了p关于q的逆元及q关于p的逆元，hitconctf 2019 quals出过这个题目，具体推导过程参考<a href="[AiDai|HITCON CTF 2019 Quals-Writeup (aidaip.github.io">这一篇</a>](<a href="https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html">https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html</a>))</p>
<ul>
<li>第二部分</li>
</ul>
<p>已知：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod n)</script><p>这种题目显然是构造出p或q的倍数，从而与n求gcd得到分解的。对于这个等式，很容易就能想到利用同余性质先化为一下两个等式：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod p)</script><script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod q)</script><p>乍一看应该是第二个等式更加好用，因为可以利用费马小定理消去指数，变形为:</p>
<script type="math/tex; mode=display">
hint \equiv 2023*p + 114514  (mod q)</script><p>但是这里就卡壳了，因为即使利用同余性质把模等式转化为等式，得到的依然含有p，q两个因子，没有办法与n求gcd。</p>
<p>所以考虑利用另一个等式，由于指数q没有办法消掉了，所以只能利用二项式定理展开。又由于mod p的关系，模等式正好只剩下了最后一项，即：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^q  (mod p)</script><p>怎么利用这个等式呢？这个时候需要敏锐一点察觉到费马小定理(也许刚刚拆分出来的另一个式子的变形就是给我们的提示)，由费马小定理我们知道：</p>
<script type="math/tex; mode=display">
a \equiv a^p  (mod p)</script><p>把 $114514^q$ 看作a，就得到：</p>
<script type="math/tex; mode=display">
(114514^q) \equiv (114514^q)^p \equiv 114514^n (mod p)</script><p>所以有：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^n  (mod p)</script><script type="math/tex; mode=display">
hint = 114514^n + k*p</script><p>也就是说，将$(hint - 114514^n)$与n求gcd，即可得到p，进而求解RSA</p>
<p><br></p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">while</span>(b): </span><br><span class="line">    a,b = b, a % b </span><br><span class="line">  <span class="keyword">return</span> a </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysqrt</span>(<span class="params">d</span>):</span><br><span class="line">  st = <span class="number">1</span></span><br><span class="line">  en = <span class="number">10</span>**<span class="number">1300</span></span><br><span class="line">  <span class="keyword">while</span> st&lt;=en:</span><br><span class="line">    mid = (st+en)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid*mid == d: <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">if</span> mid*mid &lt; d: st=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: en=mid-<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    x1, x2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    y1, y2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a2:</span><br><span class="line">        q = a1 // a2</span><br><span class="line">        a1, a2 = a2, a1 - q * a2</span><br><span class="line">        x1, x2 = x2, x1 - q * x2</span><br><span class="line">        y1, y2 = y2, y1 - q * y2</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, a1)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">ipmq= ...</span><br><span class="line">iqmp= ...</span><br><span class="line">phi= ...</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">enc = ...</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">gg = gcd(iqmp-<span class="number">1</span>,ipmq-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = phi // gg</span><br><span class="line">a = (ipmq-<span class="number">1</span>)//gg</span><br><span class="line">b = (iqmp-<span class="number">1</span>)//gg</span><br><span class="line"><span class="comment"># p*a + q*b = c</span></span><br><span class="line">pmod = inverse(a, b)*c%b</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    p = pmod + j*b</span><br><span class="line">    <span class="keyword">if</span> p &gt; (<span class="number">1</span>&lt;&lt;<span class="number">1024</span>): <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isPrime(p): <span class="keyword">continue</span></span><br><span class="line">    q = (c-p*a)//b</span><br><span class="line">    <span class="keyword">assert</span>(p*a+q*b==c)</span><br><span class="line">    <span class="keyword">if</span> (iqmp*q-<span class="number">1</span>)%p == <span class="number">0</span> <span class="keyword">and</span> (ipmq*p-<span class="number">1</span>)%q == <span class="number">0</span>:</span><br><span class="line">        M = <span class="built_in">pow</span>(enc,d,p*q)</span><br><span class="line">        flag += <span class="built_in">str</span>(long_to_bytes(M))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">n= ...</span><br><span class="line">c= ...</span><br><span class="line">hint= ...</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">114514</span>,n,n)</span><br><span class="line">p = GCD(n,hint-h2)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag += <span class="built_in">str</span>(long_to_bytes(m))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{e713afa4-fcd8-419f-a1a6-959449b4df5a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="LatticeLCG"><a href="#LatticeLCG" class="headerlink" title="LatticeLCG"></a>LatticeLCG</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">512</span>)</span><br><span class="line">seed = getPrime(<span class="number">512</span>)</span><br><span class="line">b = bytes_to_long(flag)</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(a,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(a,e2,n)</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 = &quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 = &quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = [getPrime(<span class="number">128</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">out = []</span><br><span class="line">m = getPrime(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    out.append(<span class="built_in">pow</span>(m,i,n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out=&quot;</span>,out)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c1 = ...</span></span><br><span class="line"><span class="string">c2 = ...</span></span><br><span class="line"><span class="string">output1 = ...</span></span><br><span class="line"><span class="string">output2 = ...</span></span><br><span class="line"><span class="string">e= []</span></span><br><span class="line"><span class="string">out= []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>卡了很久，搜了很多格相关问题也没有搜到类似的，打算放弃这个题去睡觉的时候，突然恍然大悟。这里好好阐述一下我的思路，希望能帮助到一些和我一样刚刚接触格的ctfer。</p>
<p>首先，题目很明显的分成了三个部分：</p>
<ul>
<li>共模攻击</li>
<li>LCG求参数</li>
<li>Lattice</li>
</ul>
<p>首先要明确求解顺序。flag以LCG中参数b的形式存在，因此LCG应该是题目的最后一步。并且要想求解出这个LCG的b，是需要知道a与n的值的，在第一部共模攻击中显然是已知n求解a。所以就明确了如下的解题顺序：</p>
<ol>
<li>Lattice求解模数n</li>
<li>共模攻击求解a</li>
<li>LCG恢复参数b，得到flag</li>
</ol>
<p>后面两个步骤非常容易，主要问题就在第一步：<strong>为什么要利用格求解n？</strong> <strong>怎么用格求解n？</strong>下面是我对这个问题的分析：</p>
<p>先来看看给了些什么条件：一个64bit的小量m，依次产生20个128bit的素数对其进行类似RSA的加密，并且给了我们加密指数的列表以及密文的列表。题目满足两个经典条件：<strong>存在小量</strong> ，<strong>提供多个方程组参数</strong>，这样的问题在很多crypto题目中都是用格方法求解的，所以要想到利用格方法(题目的名字虽然说得很明白，但是如果没有，看到这种形式也应该联想到这个方法)</p>
<p>注意到m不变，模数n也不变，同时加密指数互素，这其实很像共模攻击的情景，只是n未知。回想一下在已知模数n的情况下共模攻击的实施方法，不难产生下面这个解题思路：</p>
<p>取20个方程的前三个如下：</p>
<script type="math/tex; mode=display">
out1 \equiv m^{e1} \; (mod\;  n)</script><script type="math/tex; mode=display">
out2 \equiv m^{e2} \; (mod\;  n)</script><script type="math/tex; mode=display">
out3 \equiv m^{e3} \; (mod\;  n)</script><p>因为e1，e2互素，所以存在a，b，使得：</p>
<script type="math/tex; mode=display">
a*e1+b*e2 = 1</script><p>所以可以得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b}\equiv m^{a*e1+b*e2} \equiv m \quad (mod \;n)</script><p>这有什么用呢？我们同样也对2、3两式，1、3两式进行这样的操作，结合上面这个式子能得到三组模等式：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} \equiv m \quad (mod \;n)\qquad--1</script><script type="math/tex; mode=display">
out2^{c}*out3^{d} \equiv m \quad (mod \;n)\qquad--2</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} \equiv m \quad (mod \;n)\qquad--3</script><p>1、2式作差，2、3式作差，就得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><p>而现在等式左侧已经没有未知量了(a,b,c,d,f,g均能够通过扩展欧几里得求出)，那么就可以求解他们的gcd得到n。</p>
<p>可以说，想到这个思路的时候我为之一振，可惜实际操作的时候这个方法并不能实施，原因也很简单，我们进行的并非模幂运算，而是普通幂运算，<strong>并且a，b这些指数数量级很大(注意这一点)</strong>，所以是完全没有办法照这个思路解下去的。这时候我也没有想到怎么利用格，所以进度也停滞了，一卡卡到了晚上。</p>
<p>晚上我反复思考的时候，又想到了我刚刚说的那一点，也就是实施不了共模攻击的原因，在于<strong>指数的数量级很大，没有办法幂运算</strong>。我也突然联想到了Lattice中LLL算法的重要应用——求解最短向量。那么一切也就说得通了，之所以给20个素数作为加密指数，就是可以应用于格密码中，克服刚才共模攻击中两两组合时计算出的a，b过大的问题。所以构造格的思路就来了：</p>
<p>因为20个指数e均互素，所以一定存在a1，a2，a3…a20，使得</p>
<script type="math/tex; mode=display">
a1*e1+a2*e2+a3*e3+...a20*e20 = 1</script><p>所以可以列出等式：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
a1 & a2 & a3 ... & a20
\end{matrix}\right] 

*
\left[\begin{matrix}
e1 & 1 & 0 & 0 ... & 0\\
e2 & 0 & 1 & 0 ... & 0\\
e3 & 0 & 0 & 1 ... & 0\\
...\\
e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]

=

\left[\begin{matrix}
1 & a1 & a2 ... & a20
\end{matrix}\right]</script><p>很明显，这个格符合我们的要求，我们只需要从规约出来的短向量中挑出两组，按理来说，我们只需要类似的进行刚才的共模攻击即可。</p>
<p>可是实际操作又遇到了问题，这样规约出来的向量组是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ <span class="number">45</span> -<span class="number">58</span>   <span class="number">5</span> -<span class="number">16</span>  <span class="number">12</span>  -<span class="number">7</span> -<span class="number">27</span>  <span class="number">19</span>   <span class="number">6</span>  <span class="number">14</span>  <span class="number">29</span> -<span class="number">23</span> -<span class="number">36</span>  <span class="number">44</span> -<span class="number">15</span>   <span class="number">1</span>   <span class="number">8</span>  <span class="number">14</span>  -<span class="number">7</span>  <span class="number">11</span>  -<span class="number">9</span>]</span><br><span class="line">[-<span class="number">14</span> -<span class="number">27</span>  <span class="number">20</span>   <span class="number">6</span> -<span class="number">40</span>  <span class="number">20</span> -<span class="number">34</span>  -<span class="number">2</span> -<span class="number">16</span>  <span class="number">51</span>  <span class="number">35</span> -<span class="number">23</span> -<span class="number">51</span>  <span class="number">13</span>   <span class="number">3</span> -<span class="number">21</span>   <span class="number">0</span>  <span class="number">17</span>  <span class="number">11</span>  -<span class="number">7</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">15</span> -<span class="number">36</span> -<span class="number">21</span> -<span class="number">13</span>   <span class="number">6</span>  -<span class="number">7</span>  -<span class="number">1</span> -<span class="number">59</span> -<span class="number">23</span>  <span class="number">42</span> -<span class="number">33</span>  <span class="number">15</span> -<span class="number">30</span>  -<span class="number">4</span>  <span class="number">39</span>  <span class="number">26</span>  <span class="number">41</span>   <span class="number">1</span>  <span class="number">19</span>  <span class="number">10</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">23</span>   <span class="number">4</span>  <span class="number">49</span> -<span class="number">19</span>  <span class="number">22</span>  -<span class="number">9</span>  <span class="number">24</span> -<span class="number">20</span> -<span class="number">20</span>   <span class="number">3</span> -<span class="number">24</span>   <span class="number">4</span> -<span class="number">43</span> -<span class="number">86</span>  <span class="number">40</span>  <span class="number">44</span>  -<span class="number">1</span>  -<span class="number">1</span>  <span class="number">26</span>  <span class="number">25</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">72</span>  <span class="number">15</span> -<span class="number">11</span> -<span class="number">19</span>  <span class="number">26</span> -<span class="number">31</span> -<span class="number">56</span> -<span class="number">25</span>   <span class="number">5</span>  <span class="number">33</span> -<span class="number">27</span> -<span class="number">23</span>  <span class="number">12</span>  <span class="number">22</span>  <span class="number">11</span>  -<span class="number">1</span>  <span class="number">21</span> -<span class="number">17</span>  <span class="number">51</span> -<span class="number">31</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">35</span> -<span class="number">73</span>  -<span class="number">8</span>  <span class="number">19</span> -<span class="number">29</span>  <span class="number">23</span>  -<span class="number">3</span>  <span class="number">20</span> -<span class="number">10</span>  <span class="number">18</span>  <span class="number">46</span>  <span class="number">29</span>  -<span class="number">9</span>  <span class="number">69</span> -<span class="number">30</span>   <span class="number">9</span> -<span class="number">64</span>  <span class="number">13</span>  <span class="number">10</span> -<span class="number">26</span>   <span class="number">3</span>]</span><br><span class="line">[ <span class="number">20</span>  <span class="number">46</span>  <span class="number">12</span>  -<span class="number">3</span>  <span class="number">28</span>  -<span class="number">1</span> -<span class="number">68</span>  <span class="number">15</span>   <span class="number">3</span> -<span class="number">21</span> -<span class="number">48</span> -<span class="number">20</span>  <span class="number">43</span>  <span class="number">54</span>   <span class="number">9</span>  <span class="number">14</span>  -<span class="number">5</span>   <span class="number">0</span> -<span class="number">44</span> -<span class="number">24</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">49</span>   <span class="number">0</span> -<span class="number">10</span>   <span class="number">0</span> -<span class="number">46</span> -<span class="number">47</span>  <span class="number">24</span>  -<span class="number">2</span>  <span class="number">13</span>  <span class="number">10</span>  -<span class="number">3</span>  <span class="number">48</span>  <span class="number">43</span> -<span class="number">28</span>  -<span class="number">3</span>  <span class="number">53</span> -<span class="number">15</span>  -<span class="number">6</span>  <span class="number">31</span> -<span class="number">23</span>  <span class="number">12</span>]</span><br><span class="line">[ -<span class="number">6</span>   <span class="number">0</span>   <span class="number">9</span>  <span class="number">42</span> -<span class="number">49</span> -<span class="number">38</span>   <span class="number">8</span>  <span class="number">12</span>   <span class="number">7</span>  <span class="number">39</span>  <span class="number">30</span> -<span class="number">26</span>  <span class="number">18</span>  <span class="number">37</span>  <span class="number">28</span> -<span class="number">28</span>   <span class="number">8</span>   <span class="number">2</span> -<span class="number">67</span> -<span class="number">21</span> -<span class="number">15</span>]</span><br><span class="line">[-<span class="number">56</span>  <span class="number">23</span>  <span class="number">22</span>  <span class="number">29</span>  -<span class="number">7</span> -<span class="number">19</span>  <span class="number">19</span>  -<span class="number">8</span>   <span class="number">6</span>  <span class="number">35</span>   <span class="number">4</span>  -<span class="number">8</span>  <span class="number">22</span>  -<span class="number">2</span> -<span class="number">44</span> -<span class="number">69</span>  <span class="number">16</span>  -<span class="number">8</span>  -<span class="number">7</span> -<span class="number">45</span>  <span class="number">21</span>]</span><br><span class="line">[-<span class="number">21</span>  <span class="number">16</span>  <span class="number">34</span> -<span class="number">39</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">57</span> -<span class="number">30</span>  -<span class="number">2</span>  -<span class="number">2</span> -<span class="number">36</span>  -<span class="number">9</span>   <span class="number">9</span> -<span class="number">27</span>   <span class="number">8</span> -<span class="number">31</span> -<span class="number">31</span>  <span class="number">32</span>  <span class="number">12</span>  -<span class="number">2</span>  <span class="number">15</span>]</span><br><span class="line">[ -<span class="number">9</span>  -<span class="number">7</span>   <span class="number">6</span>  <span class="number">40</span>  <span class="number">32</span> -<span class="number">49</span> -<span class="number">26</span> -<span class="number">60</span>  <span class="number">17</span>   <span class="number">0</span> -<span class="number">13</span>   <span class="number">7</span>  <span class="number">25</span>  <span class="number">57</span> -<span class="number">19</span>  <span class="number">28</span>  -<span class="number">3</span> -<span class="number">34</span>  <span class="number">11</span> -<span class="number">12</span> -<span class="number">17</span>]</span><br><span class="line">[-<span class="number">30</span> -<span class="number">13</span>  <span class="number">28</span> -<span class="number">42</span>   <span class="number">8</span> -<span class="number">46</span>  <span class="number">56</span>  <span class="number">33</span> -<span class="number">56</span> -<span class="number">40</span> -<span class="number">24</span>   <span class="number">4</span>  <span class="number">10</span>  <span class="number">15</span>  <span class="number">46</span>  <span class="number">50</span> -<span class="number">13</span>  <span class="number">18</span> -<span class="number">21</span>  <span class="number">17</span>  <span class="number">16</span>]</span><br><span class="line">[-<span class="number">17</span> -<span class="number">11</span>  -<span class="number">5</span>  <span class="number">29</span>  <span class="number">14</span>   <span class="number">6</span> -<span class="number">13</span>   <span class="number">4</span>  <span class="number">42</span> -<span class="number">69</span>  <span class="number">30</span>   <span class="number">9</span>   <span class="number">3</span> -<span class="number">37</span>   <span class="number">5</span>   <span class="number">7</span> -<span class="number">17</span>  <span class="number">50</span>   <span class="number">6</span>  <span class="number">14</span> -<span class="number">38</span>]</span><br><span class="line">[ <span class="number">53</span> -<span class="number">12</span>  <span class="number">16</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">38</span> -<span class="number">52</span>  <span class="number">25</span> -<span class="number">10</span> -<span class="number">41</span>  -<span class="number">3</span> -<span class="number">37</span>   <span class="number">6</span> -<span class="number">12</span>   <span class="number">1</span>  -<span class="number">4</span> -<span class="number">25</span>  <span class="number">41</span>   <span class="number">5</span>   <span class="number">1</span>  <span class="number">29</span>]</span><br><span class="line">[ -<span class="number">3</span>   <span class="number">1</span>  <span class="number">36</span>  <span class="number">22</span>   <span class="number">7</span>  -<span class="number">5</span> -<span class="number">10</span>  <span class="number">15</span> -<span class="number">10</span> -<span class="number">27</span>  <span class="number">35</span> -<span class="number">60</span> -<span class="number">36</span>   <span class="number">9</span> -<span class="number">57</span>  <span class="number">33</span> -<span class="number">21</span>  <span class="number">43</span>  <span class="number">28</span> -<span class="number">44</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">32</span> -<span class="number">26</span>  <span class="number">18</span>  -<span class="number">9</span>  -<span class="number">5</span>  <span class="number">37</span>  -<span class="number">8</span>   <span class="number">2</span> -<span class="number">36</span> -<span class="number">28</span>  <span class="number">43</span>  <span class="number">10</span> -<span class="number">32</span>  <span class="number">37</span> -<span class="number">24</span> -<span class="number">70</span>  <span class="number">22</span> -<span class="number">35</span>  <span class="number">49</span>  -<span class="number">2</span>  <span class="number">31</span>]</span><br><span class="line">[-<span class="number">33</span>  <span class="number">15</span> -<span class="number">25</span>   <span class="number">1</span> -<span class="number">40</span>   <span class="number">3</span>  -<span class="number">2</span> -<span class="number">32</span>  <span class="number">15</span>   <span class="number">9</span> -<span class="number">20</span> -<span class="number">27</span> -<span class="number">27</span>  <span class="number">35</span>  <span class="number">26</span>  -<span class="number">1</span> -<span class="number">45</span> -<span class="number">12</span>  <span class="number">45</span>  <span class="number">23</span>  <span class="number">36</span>]</span><br><span class="line">[-<span class="number">17</span>   <span class="number">0</span>  <span class="number">18</span> -<span class="number">20</span> -<span class="number">75</span>  -<span class="number">5</span>  <span class="number">55</span>  <span class="number">42</span>  <span class="number">16</span>   <span class="number">8</span> -<span class="number">45</span>   <span class="number">5</span> -<span class="number">24</span> -<span class="number">20</span> -<span class="number">50</span> -<span class="number">11</span>   <span class="number">0</span>  <span class="number">27</span>  <span class="number">40</span>  <span class="number">18</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">11</span>   <span class="number">5</span>  <span class="number">16</span>  <span class="number">37</span>  -<span class="number">2</span>  -<span class="number">6</span>  <span class="number">28</span>  <span class="number">19</span> -<span class="number">21</span>   <span class="number">5</span>  -<span class="number">8</span>  <span class="number">63</span>  -<span class="number">8</span> -<span class="number">21</span>  <span class="number">22</span> -<span class="number">23</span> -<span class="number">57</span>  <span class="number">13</span>  -<span class="number">5</span>  <span class="number">15</span> -<span class="number">39</span>]</span><br></pre></td></tr></table></figure>
<p>第一列并不是我们想要的1，说明第一列是1的向量对比起来长度并不小。再想一下规约的目的，其实很容易就能相同第一列是多少并不重要，重要的是<strong>短向量的第一列相同</strong>(这一点非常容易想通，没理解的话仔细想想)。而要让他们相同，最有效的办法就是让他们均为0，想到这一点后，就可以在格的第一列乘上一个大数K，从而有效的调整一下格，如下：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
K*e1 & 1 & 0 & 0 ... & 0\\
K*e2 & 0 & 1 & 0 ... & 0\\
K*e3 & 0 & 0 & 1 ... & 0\\
...\\
K*e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]</script><p>这样一来，最短向量的第一列就不太可能不是0了(因为会对应的扩大K倍，显著地使规约向量变长)，我测试出取100左右即可，然后就可以求解最大公约数(此时还需注意两点小问题：一是规约出的短向量有负数，普通幂运算中会变成分数形式，通分至等式右侧即可；二是求得的公约数仍有可能是k倍的n，需要去除一些小因子)，最终得到n。</p>
<p><br></p>
<p>recovern.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e= []</span><br><span class="line">c= []</span><br><span class="line"></span><br><span class="line"><span class="comment">#step1</span></span><br><span class="line">L = Matrix(ZZ, <span class="number">20</span>, <span class="number">21</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    L[i,<span class="number">0</span>] = e[i]*<span class="number">1000</span></span><br><span class="line">    L[i,i+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">L = L.LLL()</span><br><span class="line"></span><br><span class="line">alist1 = L[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">k1nl = <span class="number">1</span></span><br><span class="line">k1nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist1[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k1nr *= c[i]**(-alist1[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k1nl *= c[i]**alist1[i]</span><br><span class="line">k1n = k1nl-k1nr</span><br><span class="line"></span><br><span class="line">alist2 = L[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">k2nl = <span class="number">1</span></span><br><span class="line">k2nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist2[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k2nr *= c[i]**(-alist2[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k2nl *= c[i]**alist2[i]</span><br><span class="line">k2n = k2nl-k2nr</span><br><span class="line"></span><br><span class="line">n = gcd(k1n,k2n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">while</span>(n % i == <span class="number">0</span>):</span><br><span class="line">        n //= i</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查一下n的长度是否为1024bit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<p>后两个问题也就迎刃而解，最终得到flag：</p>
<font size="4" color="red">NSSCTF{407f8832-6ffd-43bf-91a0-6900758cdff7}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的说来，对格的应用还不够灵活，还需要加深学习。</p>
<p>如果各位有不懂的地方或者发现了文中的问题，欢迎联系我，一起学习进步。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-crypto</title>
    <url>/post/445800a5.html</url>
    <content><![CDATA[<p>这次比赛Crypto难度比较基础，手速快才是硬道理。</p>
<span id="more"></span>
<p>Rank：2</p>
<p><img src="/post/445800a5/image-20230911152911874.png" alt="image-20230911152911874"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请尝试解密它。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱</span><br></pre></td></tr></table></figure>
<p>第一层很明显是base100，之后的每一层像哪个base用哪个解密即可：</p>
<p>1、 base100：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z</span><br></pre></td></tr></table></figure>
<p>2、 base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UlhoYUdxZTdaY1FCbXFyaWl5S0ZKaW4yN2ZiWkpTZHhOd2hBVk1wNzRvUWE0VWs2RXVqTlpkTHNvYVpxNHRMUDd3dXk4OGJiSlhlTGJnN2dxR2RkTm15dGs1S1RGdlk3TmpRR0wzenFrQ3BCM3lmUTFTUkY0OU13Z0JjZkFxWjFhNng=</span><br></pre></td></tr></table></figure>
<p>3、base64：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RXhaGqe7ZcQBmqriiyKFJin27fbZJSdxNwhAVMp74oQa4Uk6EujNZdLsoaZq4tLP7wuy88bbJXeLbg7gqGddNmytk5KTFvY7NjQGL3zqkCpB3yfQ1SRF49MwgBcfAqZ1a6x</span><br></pre></td></tr></table></figure>
<p>4、 base58：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">G53XC4LIK5DWQ53UIFSGCUTCJFCGM4DSM5UXOYTILBUXU6TXJ5SUUT2DONHTQZ3GJNCFSUDINRXE6MTEINUXOQLVLI4VU===</span><br></pre></td></tr></table></figure>
<p>5、 base32：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7wqqhWGhwtAdaRbIDfprgiwbhXizzwOeJOCsO8gfKDYPhlnO2dCiwAuZ9Z</span><br></pre></td></tr></table></figure>
<p>6、base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;fe853b49-8730-462e-86f5-fc8e9789f077&#125;</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fe853b49-8730-462e-86f5-fc8e9789f077}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">树木新开发了一个加密系统，这个系统会把他的秘密加密很多次然后发送给不同的用户，你能找到其中的漏洞吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n3 = p * q</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m,e,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c3 =&quot;</span>,c3)</span><br></pre></td></tr></table></figure>
<p>经典的广播攻击，思路就是使用中国剩余定理得到$\quad mod \; (n1n2n3)\quad$下的$\quad m^{17}\quad$，再开17次方根即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = </span><br><span class="line">n2 = </span><br><span class="line">n3 = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">c3 = </span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">n = [n1,n2,n3]</span><br><span class="line">c = [c1,c2,c3]</span><br><span class="line">M = crt(n,c)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(M,<span class="number">17</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fdc0afb5-1c81-46b9-a28a-241f5f64419d}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个题目名充分表现了作者由于学CTF导致吃不上饭，明天就打算跑路的心里想法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, message</span><br><span class="line"><span class="comment"># message is a Classic English Story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    tmp = (message[i*<span class="number">30</span>:(i+<span class="number">1</span>)*<span class="number">30</span>].encode())</span><br><span class="line">    <span class="built_in">print</span>(binascii.hexlify(strxor(tmp,flag)).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218</span></span><br><span class="line"><span class="comment"># 3769373b66142f31297f291126410e042b01162d59103a0c005221075013</span></span><br><span class="line"><span class="comment"># 37242c202e1e3f743c36371130410c1e2b491a31574406014505291a550e</span></span><br><span class="line"><span class="comment"># 7f6922742e1a213270372e01264105193004532b1f554e120c1e2a145618</span></span><br><span class="line"><span class="comment"># 7d69143c23156d18392b35183141310e3b49213613590003453a291a555d</span></span><br><span class="line"><span class="comment"># 36273731341e297424372454230e0c0f2c49127f005f020245112718545d</span></span><br><span class="line"><span class="comment"># 26396320295b2531227161273c04430f360d533118444e0f0b1d31554615</span></span><br><span class="line"><span class="comment"># 323d6335660c24373b3a2554350f0a063e05533712101905165e66145f19</span></span><br><span class="line"><span class="comment"># 733e222766152220703e27063508074b300f53371e5d40444735291a555d</span></span><br><span class="line"><span class="comment"># 37283a7432146d2d3f2a6d541808171f330c530d12544e360c162f1b565d</span></span><br></pre></td></tr></table></figure>
<p>很明确的一个Many-Time-Pad，也对应了题目名字MTP，预期来说应该是上一个知名MTP脚本求解。</p>
<p>但是其实完全不需要，因为题目给了这样一个提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># message is a Classic English Story</span><br></pre></td></tr></table></figure>
<p>我们又有flag的前六个字符：<strong>SICTF{</strong></p>
<p>那么拿去异或一下就有：</p>
<p><img src="/post/445800a5/image-20230908224043439.png" alt="image-20230908224043439"></p>
<p>合理猜测这是一个Little开头的英语故事，那么由于异或的可逆性，直接把密文搬上明文的位置，来试几个：</p>
<p>Little Prince（小王子）：</p>
<p><img src="/post/445800a5/image-20230908224223829.png" alt="image-20230908224223829"></p>
<p>不太对，换一个，Little Red Riding Hood：</p>
<p><img src="/post/445800a5/image-20230908224336581.png" alt="image-20230908224336581"></p>
<p>这就成了，又可以看出flag串后面应该是wonderful的变形，那么再把flag串搬上来逐个尝试即可：（因为可以变的其实就大小写、以及形近数字，一个字符一个字符增加，试几次就出来了）：</p>
<p><img src="/post/445800a5/image-20230908224509359.png" alt="image-20230908224509359"></p>
<p>flag：</p>
<p><strong>SICTF{MTP_AtTack_is_w0nderFu1}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你知道CopperSmith吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = p &gt;&gt; <span class="number">230</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"><span class="string">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line"><span class="string">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直白的p高位泄漏，直接解密即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line">p4 = <span class="number">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits=pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>,epsilon = <span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{3f9366ed-b8e4-412f-bbd0-62616a24115c}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">签到题来咯！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = getPrime(<span class="number">10</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c1 = <span class="built_in">pow</span>(<span class="number">114</span>*m+<span class="number">2333</span>,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(<span class="number">514</span>*m+<span class="number">4555</span>,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line"><span class="string">c1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line"><span class="string">c2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>经典的明文相关消息攻击，略做了一点变种。思路如下，列出两个多项式：</p>
<script type="math/tex; mode=display">
(114*x+2333)^{e}\equiv c1\quad (mod\;n)</script><script type="math/tex; mode=display">
(514*x+4555)^{e}\equiv c2\quad (mod\;n)</script><p>又因为明文m显然是两个模多项式的根，因此两个模多项式有公因子：</p>
<script type="math/tex; mode=display">
(x-m)</script><p>因此构造出模n环下的两个多项式，并求公因式即可。至于e是多少，仅需要在指定范围内爆破一下就可以。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line">a1 = <span class="number">114</span></span><br><span class="line">b1 = <span class="number">2333</span></span><br><span class="line">a2 = <span class="number">514</span></span><br><span class="line">b2 = <span class="number">4555</span></span><br><span class="line">elist = [<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (a1*x + b1)^e - c1</span><br><span class="line">    g2 = (a2*x + b2)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> elist:</span><br><span class="line">    m1 = attack(c1, c2, e, n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;SICTF&quot;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(m1))):</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(m1))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{hhh!!franklin_reiter_is_easy}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个低加密指数攻击为什么打不出来哇？是不是题有问题捏？差评！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag=<span class="string">&quot;SICTF&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m1=((m&gt;&gt;<span class="number">60</span>)&lt;&lt;<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;((m&gt;&gt;60)&lt;&lt;60)=&quot;</span>,m1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line"><span class="string">e= 3</span></span><br><span class="line"><span class="string">c= 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line"><span class="string">((m&gt;&gt;60)&lt;&lt;60)= 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>已知明文高位攻击，直接上脚本。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n= <span class="number">23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line">m= <span class="number">11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m + x)^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots()</span><br><span class="line"></span><br><span class="line">m = m + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{2ca8e589-4a31-4909-80f0-9ecfc8f8cb37}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实数学很简单辣！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">hint2 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint1 = <span class="subst">&#123;hint1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint2 = <span class="subst">&#123;hint2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line"><span class="string">hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line"><span class="string">hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line"><span class="string">c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意到hint1、hint2的生成过程：</p>
<script type="math/tex; mode=display">
hint1 = a1*p+b1*q</script><script type="math/tex; mode=display">
hint2 = a2*p+b2*q</script><p>而p前的系数a1、a2很小，因此可以先打印出所有13比特的素数存在一张表内，作为a1、a2的所有可能取值，然后如下操作：</p>
<script type="math/tex; mode=display">
a2*hint1-a1*hint2=a2*(a1*p+b1*q) - a1*(a2*p+b2*q)=(a2*b1-a1*b2)*q</script><p>与n求gcd即可得到q，之后进行RSA解密即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primelist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>,<span class="number">2</span>**<span class="number">13</span>) <span class="keyword">if</span> isPrime(i)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primelist:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primelist:</span><br><span class="line">        <span class="keyword">if</span>(GCD(hint1*i - hint2*j,n) != <span class="number">1</span>):</span><br><span class="line">            q = GCD(hint1*i - hint2*j,n)</span><br><span class="line">p = n//q</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{452aebb6-9c16-441a-ac42-fc608bf6063f}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>越熟练手速就会越快，继续努力！</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(一)</title>
    <url>/post/77e39860.html</url>
    <content><![CDATA[<p>在CNSS 2023的夏令营线上题中找到的一道misc题，看到标题有Crypto，感兴趣就去试了一试，发现确实是道比较有意思的题目，就在此记录一下，同时也开启 <strong>misc趣题</strong> 这一分类。</p>
<span id="more"></span>
<h2 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h2><p>题目来源：2023-CNSS-Summer</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刚刚接触网络安全不久的 Shino 有一个成为 Crypto 方向专家的梦想，所以他写了一个很安全的加密算法，你可以帮他看看吗？</span><br></pre></td></tr></table></figure>
<p>端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc 47.108.140.140 11037</span><br></pre></td></tr></table></figure>
<p>Hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、你可能需要pwntools</span><br><span class="line">2、cnss&#123;a-zA-Z0-9_&#125;</span><br><span class="line">   保证&#125;只在 flag 结尾出现一次</span><br><span class="line">   flag 长度不大于 50</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> cipher, key</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stream = self.randomBox(self._init_box(key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_encrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(c) ^ <span class="built_in">next</span>(self.stream)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_box</span>(<span class="params">self, crypt_key</span>):</span><br><span class="line">        Box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        key_length = <span class="built_in">len</span>(crypt_key)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            index = <span class="built_in">ord</span>(crypt_key[(i % key_length)])</span><br><span class="line">            j = (j + Box[i] + index) % <span class="number">256</span></span><br><span class="line">            Box[i], Box[j] = Box[j], Box[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Box</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomBox</span>(<span class="params">self, S</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i = i + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">            j = j + S[i] &amp; <span class="number">255</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            <span class="keyword">yield</span> S[(S[i] + S[j] &amp; <span class="number">255</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先，题目的加密算法是RC4，可以先检查一下有无变种，方法是自己随便使用一组明文和密钥，分别用该程序与在线网站加密，检查结果是否相同。这样操作之后可以发现，结果是完全一样的，这说明本题并没有对RC4进行魔改，也因此解题的思路也就很自然的从开始的解密码转变成了找漏洞。</p>
<p>而要找漏洞的程序段如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>先大致理解程序内容：程序需要你输入一串flag值，并将flag值逐个进行RC4加密并检查是否与密文相等，当输入的flag串加密值与密文完全相等时，便通过了检查，程序输出”Correct flag!”。</p>
<p>所以，这么一大段其实就只实现了一个内容：检查你输入的flag和你实际要提交的flag是否相等！可以说，整个程序都是一个障眼法，其实不要这个RC4，直接用以下的代码检查也是一样的：(假设实际flag串名为secret)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == secret):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样就行了！所以用这么一大段来核查flag一定有问题。</p>
<p>仔细核查，果然，下面这段代码大有玄机：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这段代码存在以下几个问题：</p>
<ul>
<li>输入的flag串中含有不在table中的项时，会一直跳过直至读到table中的字符为止，但是指数 i 会一直增加。</li>
<li>判断指数 i 过大，依靠的是输入的字符串长度，而不是实际的flag串。</li>
<li>将cipher[i]与encrypt(flag[i])进行比对时，并没有对cipher的指数进行检查。</li>
</ul>
<p>这体现了一个很重要的信息：</p>
<ul>
<li>如果你的输入是正常的错误flag串，他会打印的内容是”Wrong flag!”</li>
<li>如果你的输入是不正常的构造的字符串导致cipher[i]越界了，程序不会正常打印内容，而会报错！</li>
</ul>
<p>举个例子，构造如下两个串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = &quot;cnss&#123;1234567890abcdefgh&#125;&quot;</span><br><span class="line">flag = chr(0) * 50 + &quot;c&quot;</span><br></pre></td></tr></table></figure>
<p>那么，程序对第两个字符串的处理分别是：</p>
<p>由于第一个串字符均在table中，因此程序仅仅会将每个字符与正确flag进行比对，直到某个字符比对失败时，打印出”Wrong flag!”</p>
<p>而第二个串前五十个字符均是ASCII码为0的字符，是不在table中的，因此程序会先反复执行以下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>直至第51个字符”c”，由于”c”在table中，因此会进行比对。此时i=51，而由题目知道，flag长度不大于50，因此这时执行这条语句进行比对时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>cipher[i]是必定越界的！那么程序就会抛出一个异常，而不再是打印”Wrong flag!”了。</p>
<p>这有什么用呢？用处很大。首先我们就可以反复构造如下字符串，发送给靶机端来确定真实flag的正确长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>为什么这样就可以确定长度呢？我们假设flag的正确长度是30，那么发送下面字符串给靶机，靶机的回应都是“异常”而非错误，这是因为cipher数组的下标最多只能取到29，一旦涉及到cipher[30]甚至更多就会产生越界异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">30</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>然而发送下一个flag串，也就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">29</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>这时，由于没有越界，程序会回应”Wrong flag!”，而不再抛出异常了。</p>
<p>所以，由上述方式，我们就可以最终确定flag的真实长度是24，之后则可以反复构造下列字符串，并发送给靶机端来逐个核查字符是否正确：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>道理也是相同的，如果i是错误字符，那么核查不通过，程序直接回应”Wrong flag!”，而如果是正确字符，程序则会继续向后读，一直到读到越界的”a”后，抛出越界异常。</p>
<p>得到这个字符为 “1” 后，将他加入”cnss{“串后，继续构造下面字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;1&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>如此反复发送直至flag串已知的部分长度为24即可。</p>
<p>构造字符串并发送给靶机端需要用到pwntools，同时还有一些小细节需要注意，比如需要发送的是字节流而非字符串流。但是这些慢慢调试程序就好了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line">init = <span class="string">b&#x27;cnss&#123;&#x27;</span></span><br><span class="line">has_find = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(has_find == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        r=remote(<span class="string">&quot;47.108.140.140&quot;</span>,<span class="number">11037</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r.sendline(init + long_to_bytes(<span class="built_in">ord</span>(table[i])) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">100</span> + <span class="string">b&quot;a&quot;</span>)</span><br><span class="line">            temp = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;Correct&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(init) == <span class="number">23</span>):</span><br><span class="line">                has_find = <span class="number">1</span></span><br><span class="line">                r.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            init += long_to_bytes(<span class="built_in">ord</span>(table[i]))</span><br><span class="line">            <span class="built_in">print</span>(init)</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        r.close()</span><br><span class="line"><span class="built_in">print</span>(init + <span class="string">b&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><strong>cnss{1nd3X_0Ut_oF_r4nge}</strong></p>
<p><br></p>
<p>确实很有意思！</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-misc</title>
    <url>/post/ccf22797.html</url>
    <content><![CDATA[<p>Crypto兼职misc手，浅做点misc娱乐娱乐</p>
<span id="more"></span>
<p><strong>Rank：2</strong></p>
<p><img src="/post/ccf22797/image-20230911152802298.png" alt="image-20230911152802298"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关注微信公众号并发送&quot;SICTF2023&quot;就可以获得flag辣！</span><br></pre></td></tr></table></figure>
<p>签到题，照着做即可。</p>
<p><img src="/post/ccf22797/image-20230908162949748.png" alt></p>
<p>flag：</p>
<p><strong>SICTF{Welcome_to_SICTF2023_#Round2}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这张颜色很奇怪的图片到底是干什么的呢？</span><br></pre></td></tr></table></figure>
<p>下载题目附件，是一个zip压缩包，解密提示需要密码，但是也并没有别的密码提示，所以第一反应就是伪加密。十六进制打开文件：</p>
<p><img src="/post/ccf22797/image-20230908171507928.png" alt="image-20230908171507928"></p>
<p>将这里的1改为0即可解密压缩包，得到图片：</p>
<p><img src="/post/ccf22797/Pixel_art.png" alt="Pixel_art"></p>
<p>并没有发现如题目描述中所说的奇怪的像素点，在stegsolve中打开，切换各种查看方式也没有什么发现。于是想到LSB隐写，可以发现：</p>
<p><img src="/post/ccf22797/image-20230908171812016.png" alt="image-20230908171812016"></p>
<p>果然藏了东西，保存为png文件后查看：</p>
<p><img src="/post/ccf22797/pixel.png" alt="pixel"></p>
<p>这图也太小了，查看其详细信息，果然发现：</p>
<p><img src="/post/ccf22797/image-20230908171941968.png" alt="image-20230908171941968"></p>
<p>大小仅有20*20，不难想到flag被加密进了像素点里。写一个脚本提取像素点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pixel_data)</span><br></pre></td></tr></table></figure>
<p>打印出来的像素点列表是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">33</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">33</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">63</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), ......, (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">46</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>
<p>那么这三个数字显然有特殊含义，当作ASCII码打印出对应字符发现：分别是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">46-. </span><br><span class="line">33-!</span><br><span class="line">63-?</span><br></pre></td></tr></table></figure>
<p>这三个字符不难对应到Ook加密上，写个完整脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pixel_data)):</span><br><span class="line">    <span class="keyword">if</span>(pixel_data[i] == (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pixel_data[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ook&quot;</span>+<span class="built_in">chr</span>(j),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>拿生成的字符串去在线网址解密：</p>
<p><img src="/post/ccf22797/image-20230908172734509.png" alt="image-20230908172734509"></p>
<p>flag：</p>
<p><strong>SICTF{0141ac35-ec19-4cee-a906-22805fdbed77}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻破这个压缩包！</span><br></pre></td></tr></table></figure>
<p>题目给了一个压缩包，首先检查出是真加密，然后尝试ziprello爆破无果，binwalk也没有发现额外文件，那么就只能是深入明文攻击了。</p>
<p>深入明文攻击参考：</p>
<p><a href="https://hasegawaazusa.github.io/zip-crack-note.html#zip-破解">zip压缩包取证笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p>
<p>由参考博客知，进行深入明文攻击需要至少12个已知字节。而由于已知压缩包内为png文件，也就知道文件头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</span><br></pre></td></tr></table></figure>
<p>所以，我们至少知道了16个准确的字节，超过了12个字节，已经满足深入明文攻击的条件了，(多的已知字节可以加快速度)，接下来就使用工具即可。</p>
<p><img src="/post/ccf22797/image-20230909112256733.png" alt="image-20230909112256733"></p>
<p>两步操作分别是：把已知十六进制的字节写入文件key.txt，再进行深入明文攻击即可。跑了接近二十分钟后，出了zip的三段内部密码(上图中最后一行)，直接进行解密即可：</p>
<p><img src="/post/ccf22797/image-20230909112437253.png" alt="image-20230909112437253"></p>
<p>得到图片：</p>
<p><img src="/post/ccf22797/flag1.png" alt="flag1"></p>
<p>十六进制打开末尾即得flag：</p>
<p><img src="/post/ccf22797/image-20230909112540496.png" alt="image-20230909112540496"></p>
<p>flag：</p>
<p><strong>SICTF{3a4998b8-345e-4943-a689-d01e8b08defb}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你为什么还不上号啊？宝！</span><br><span class="line">Hint：你知道CobaltStrike吗？</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量包，导出http流对象，可以发现一个key.zip：</p>
<p><img src="/post/ccf22797/image-20230909142543063.png" alt="image-20230909142543063"></p>
<p>导出该压缩包并解压，得到一个key文件，那现在要做的就是提取出key中的信息，去解密流量中的数据。但是怎么找都没找到这种key文件怎么使用，思路也就暂时停滞了。</p>
<p>直到hint出现，那就直接搜索CobaltStrike，发现一道类似流量分析题，照着一步步做就有了(其中CS_Decrypt中有一个脚本用到M2Crypto库，但是pip不下来，搜索资料发现这个库停止更新很久了，可能python版本对不上，平替为pycryptodome即可)：</p>
<p><a href="https://blog.csdn.net/qq_43264813/article/details/120560209">2021年“绿城杯”网络安全大赛-Misc-流量分析_夜白君的博客-CSDN博客</a></p>
<p>得到flag：</p>
<p><img src="/post/ccf22797/image-20230909142844158.png" alt="image-20230909142844158"></p>
<p>flag：</p>
<p><strong>SICTF{88a39373-e204-43b6-b321-33ac8972fde9}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我就扫码而已啦！为什么要用pwntools？</span><br></pre></td></tr></table></figure>
<p>题目给了一个端口，先用xshell手动交互一下：</p>
<p><img src="/post/ccf22797/image-20230910150031807.png" alt="image-20230910150031807"></p>
<p>可以依稀看出是二维码的定位符，那么思路就是把这些0、1转化为二维码并扫码得到数据，但是粘出来数据想写脚本的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150225007.png" alt="image-20230910150225007"></p>
<p>笑死，vscode右侧的预览直接显示出了二维码的效果，那直接扫码得到数据：</p>
<p><img src="/post/ccf22797/image-20230910150358330.png" alt="image-20230910150358330"></p>
<p>但是上传这串数据的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150429700.png" alt="image-20230910150429700"></p>
<p>超时了，彳亍，那确实得写脚本自动交互，交互一次后发现靶机端还会发送二维码数据，那应该是要循环一定次数后才会给flag了。</p>
<p>之后就是枯燥的debug时间。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;210.44.151.51&quot;</span>,<span class="number">10468</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    data = <span class="built_in">list</span>(r.recvuntil(<span class="string">b&quot;P&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义图像的宽度和高度（根据数据长度调整）</span></span><br><span class="line">    width = <span class="number">116</span></span><br><span class="line">    height = <span class="number">116</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个空白图像</span></span><br><span class="line">    image = Image.new(<span class="string">&quot;1&quot;</span>, (width, height), color=<span class="number">1</span>)  <span class="comment"># 1表示单色（黑白）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图像的像素访问对象</span></span><br><span class="line">    pixels = image.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将01数据填充到图像中</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            index = y * width + x</span><br><span class="line">            <span class="keyword">if</span> index &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[index] == <span class="number">48</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">0</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">1</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图像为文件</span></span><br><span class="line">    image.save(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line">    decocdeQR = decode(Image.<span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>))[<span class="number">0</span>].data</span><br><span class="line">    r.sendline(decocdeQR)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>循环1000次后，靶机端发送flag：</p>
<p><strong>SICTF{d7d23552-d917-4ad4-962c-e415dd5b5b6e}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你好快啊！（flag需要包含SICTF&#123;&#125;）</span><br></pre></td></tr></table></figure>
<p>题目给了一个音频，Audacity打开：</p>
<p><img src="/post/ccf22797/image-20230910150829891.png" alt="image-20230910150829891"></p>
<p>经典的音频隐写摩斯电码，但是敲完摩斯密码，最后得到的uuid少了一位，<del>私聊出题人拿flag即可</del>。</p>
<p><br></p>
<p><br></p>
<h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鲨鱼！嗷呜！</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量文件，追踪tcp流能发现一段php代码：</p>
<p><img src="/post/ccf22797/image-20230910151203093.png" alt="image-20230910151203093"></p>
<p>可以看出，在openssl扩展有效时，这段代码对数据的解密方式为AES_128后base64，并且给了key的值(之后了解到这是很明显的冰蝎的特征)。那么就可以使用cyberchef，对之后的每个tcp流里的base64数据进行恢复：</p>
<p><img src="/post/ccf22797/image-20230910151658797.png" alt="image-20230910151658797"></p>
<p>再把解密出来的密文内部的base64段提取出来，再进行解密，就可以在最底下发现：</p>
<p><img src="/post/ccf22797/image-20230910151851063.png" alt="image-20230910151851063"></p>
<p>可以看出，实际上这段程序就是在执行最下方的cmd命令，然后对回复的数据也进行如上解密，就可以得到命令执行后的对应内容。如此一来，可以得到两个有用的信息：</p>
<p>GronKey.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,50,61,8,9,20,63,41</span><br></pre></td></tr></table></figure>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span><br></pre></td></tr></table></figure>
<p>flag的内容直接提交上去是不对的，因此肯定还需要进行解密，而如何解密就需要用到GronKey.txt，并且按正常思路，GronKey这个名字肯定是个提示。最终搜索到了Gronsfeld密码，解密即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Gronsfeld</span><br><span class="line"></span><br><span class="line">t = [<span class="number">1</span>,<span class="number">50</span>,<span class="number">61</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">41</span>]</span><br><span class="line">temp = <span class="string">&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span></span><br><span class="line"><span class="built_in">print</span> (Gronsfeld(t).decipher(temp))</span><br></pre></td></tr></table></figure>
<p>这里有个比较坑的点：因为我是知道Gronsfeld这个密码的，但是我记得他的密钥只能是0-9的数字，加密原理就是字母加上密钥对应数字(类似于维吉尼亚密码)，所以开始就排除了这个加密方式。之后一直没有搜到其他的Gron开头的加密，卡了很久。后来我搜到了一个Gronsfeld在线加密：</p>
<p><a href="https://www.wishingstarmoye.com/ctf/vigenere">Vigenere / Gronsfeld - 许愿星 (wishingstarmoye.com)</a></p>
<p>可以发现，他确实用了超过10的数字当作密钥，那这到底是怎么加密的呢？我思考了一下，发现他的加密方式应该是：加密时，每个字母右移密钥列表中对应数字的位数；而解密时，每个字母左移密钥列表中对应数字的位数。</p>
<p>举个例子，T左移1位得到S，这很好理解；而G左移50位，其实就是右移2位(因为模26的缘故)，因此得到I。</p>
<p>这样就可以顺利解密了。</p>
<p>flag：</p>
<p><strong>SICTF{SHUMUISAGOODBOYYYYYYYYY}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="还不上号"><a href="#还不上号" class="headerlink" title="还不上号"></a>还不上号</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一起上号不？来！我教你怎么写payload！</span><br><span class="line">Hint1：四位爆破,多注意一下细节，除了CS还有一部分</span><br><span class="line">Hint2：压缩包密码为we1l</span><br></pre></td></tr></table></figure>
<p>其实这道题就是Easy_shark和一起上号不的结合，这两个都做出来的话，这题其实难度不大了。</p>
<p>题目给了两个流量包，由名字可以知道一个包对应一半flag。其中，包1形式对应Ez_shark，包2形式对应一起上号不。</p>
<p>从包1入手，可以发现对比起Ez_shark，唯一的区别就是他没有给出AES的key值，因此必须要想办法找出key。而包2正好有个key.zip，进行导出：</p>
<p><img src="/post/ccf22797/image-20230910153507463.png" alt="image-20230910153507463"></p>
<p>得到的key.zip不能直接解压，并且是真加密，同时也没法进行明文攻击，那么就ziprello爆破吧，最后得到密码是we1l(并且后来Hint给了)。</p>
<p>打开key文件：</p>
<p><img src="/post/ccf22797/image-20230910153756977.png" alt="image-20230910153756977"></p>
<p>显然有零宽字符，利用在线网站<a href="http://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters (330k.github.io)</a>进行零宽字符解密：</p>
<p><img src="/post/ccf22797/image-20230910154112768.png" alt="image-20230910154112768"></p>
<p>这里要注意在网页下方勾选该文本中所有存在的零宽字符，不然解密会失败：</p>
<p><img src="/post/ccf22797/image-20230910154140388.png" alt="image-20230910154140388"></p>
<p>因此就得到了AES的key，可以按照Ez_Shark的方式对包1的流量依次进行解密，能得到两个有用信息：</p>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;79e1755e-08a8-4d</span><br></pre></td></tr></table></figure>
<p>key：</p>
<p><img src="/post/ccf22797/image-20230910154525684.png" alt="image-20230910154525684"></p>
<p>如果做出来一起上号不那道题，那么对这串数据应该很熟悉，这就是<code>.cobaltstrike.beacon_keys</code>形式的密钥文件，将这段内容保存成文件key1.txt，后续的步骤就和前面那道题就一模一样了。</p>
<p>下面详细记录一下步骤(怕我自己忘)：</p>
<p>1、解析key1.txt文件得到private_key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key1.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    pobj = javaobj.load(fd)</span><br><span class="line">privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">privateKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line">publicKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(privateKey.decode())</span><br><span class="line"><span class="built_in">print</span>(publicKey.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(</span></span><br><span class="line"><span class="comment">#     list(</span></span><br><span class="line"><span class="comment">#         map(</span></span><br><span class="line"><span class="comment">#             lambda x: list(map(lambda y: (y[0].name, y[1]), x.items())),</span></span><br><span class="line"><span class="comment">#             a.field_data.values(),</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<p>2、根据private_key以及流量包中cookie解析出AES key和HMAC key：（其他信息有需要，解除掉注释即可，这里只需要AES与HMAC的key）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"> </span><br><span class="line">PRIVATE_KEY = <span class="string">&quot;&quot;&quot;-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0M6FR0Cb9dW52Nd5NTA1JUNAs1</span></span><br><span class="line"><span class="string">thS8iXx6QB+UkN/vRJdfsKS8dnOfNuPuPDCtx26B2j8I1FuTJ1VrrfDkzN585sskmXYronFM98Dx</span></span><br><span class="line"><span class="string">50vHaadOcDcDdBBqi8gC5/D3iKflX6T9pSL/5PVLfN1EIaFsyAS9jpWX2wGNi3C/QPSrAgMBAAEC</span></span><br><span class="line"><span class="string">gYAdNhXeGtH4wkWqOhY8aurL+VvTUZjRanJ6C+/FkXCzUWbRVwVV5xMMeZEDNigRw4BZ2HGvJL+f</span></span><br><span class="line"><span class="string">aMT+o3VMkCYBhGbi2/3RPRgigMG7Aa3LWWtYWsdbw8Mw6aqqbTjDUHrQ1kulMf1JvXJL5LBd+pBA</span></span><br><span class="line"><span class="string">Q8kHaYJRMcmnLsT4NeXOFQJBAMNa2r+phrThTlagMB6bj6vl0IVbDy+TJT2VybCSJ76rPgVUQwtP</span></span><br><span class="line"><span class="string">yX3z7UAjt27mE8KK+k7Jidi0drCEPv5Wo60CQQD3vQbO64fko1dlatkNn095GO9KoCuanrsLs+vY   </span></span><br><span class="line"><span class="string">Ohc0ltk4EhHHmP5hEE6dSMZNASKaN0wSYJ14xjnA+dJWOES3AkEApzyYF4vhLefTUIVBrHIvxFCw   </span></span><br><span class="line"><span class="string">+fjCP1AQiXA5gVcdfzTJm3ZPDtf2/kRbzpTE68M7F0gykFAoGcQj92i/JKy24QJAdyVbA+M07Ro9   </span></span><br><span class="line"><span class="string">qxHzJ+EJmMUMOMjFj8xtStiSQeDWTj2KZLQUBvmmxcnQ9UYN0PUNzjtwA5qhwXccSZoctcjECwJA   </span></span><br><span class="line"><span class="string">Zc0TZgGq/OwgnIyj/1+Q9D0A2eg3aw1k+6Vzkf/DdkuF6+XTkYTlBGiETIK/vm1rCH4NcOCL7eK5   </span></span><br><span class="line"><span class="string">qpA1grg+gg==</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">encode_data = <span class="string">&quot;j+ojKDVPlCr7lT9yzNinkj1DgdkcRaLMT2kL4U+9TvdFBZqGKk7/4WF/W7JhEieC3DoRfngRppMAVHa3yfhp4HZm/ZeNY4bc8rlYL11Q0dXDzpR5JjhqN+hGe9RBqPznoukShgQLhxT/DO7djxE5ROzi6NC52yZAaGPCSeLDyjg=&quot;</span></span><br><span class="line">base64_key = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">private_key = RSA.import_key(PRIVATE_KEY.<span class="built_in">format</span>(base64_key).encode())</span><br><span class="line">cipher = PKCS1_v1_5.new(private_key)</span><br><span class="line">ciphertext = cipher.decrypt(base64.b64decode(encode_data), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isFlag</span>(<span class="params">var, flag</span>):</span><br><span class="line">	<span class="keyword">return</span> (var &amp; flag) == flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toIP</span>(<span class="params">var</span>):</span><br><span class="line">	var2 = (var &amp; -<span class="number">16777216</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">	var4 = (var &amp; <span class="number">16711680</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">	var6 = (var &amp; <span class="number">65280</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">	var8 = var &amp; <span class="number">255</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>(var2) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var4) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var6) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">var0</span>):</span><br><span class="line">	<span class="keyword">if</span> var0 == <span class="number">37</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM037&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">437</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">500</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM500&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">708</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">709</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">710</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">720</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">737</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM737&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">775</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM775&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">850</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM850&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">852</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM852&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">855</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM855&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">857</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM857&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">858</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM00858&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">860</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM860&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">861</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM861&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">862</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM862&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">863</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM863&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">864</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM864&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">865</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM865&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM866&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">869</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM869&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">870</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM870&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">874</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-874&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">875</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM875&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Shift_JIS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-mswin-936&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-949&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Big5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1026</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1026&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1047</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1047&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1140</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01140&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1141</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01141&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1142</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01142&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1143</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01143&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1144</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01144&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1145</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01145&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1146</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01146&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1147</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01147&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1148</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01148&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1149</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01149&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1200</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1201</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1250</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1250&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1251</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1251&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1252</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1252&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1253</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1253&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1254</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1254&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1255</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1255&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1256</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1256&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1257</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1257&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1258</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1258&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1361</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-Johab&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRoman&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacArabic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacHebrew&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacGreek&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCyrillic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRomania&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10017</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacUkraine&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10021</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacThai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10029</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCentralEurope&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10079</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacIceland&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10081</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacTurkish&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10082</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCroatian&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISO-2022-CN-CNS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20105</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20106</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20107</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20108</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20127</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;US-ASCII&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20261</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20269</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20273</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM273&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20277</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM277&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20278</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM278&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20280</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM280&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20284</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM284&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20285</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM285&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20290</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM290&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20297</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM297&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20420</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM420&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20423</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20424</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM424&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20833</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20838</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM-Thai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-R&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20871</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM871&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20880</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20905</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20924</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21025</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM1025&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21027</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-U&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28591</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-1&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28592</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28593</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-3&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28594</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-4&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28595</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28596</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28597</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-7&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28599</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-9&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28603</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-13&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28605</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-15&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">29001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">38598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50220</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50221</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50222</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50225</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50227</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50229</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50930</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM930&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50931</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50933</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM933&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50935</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM935&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50937</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM937&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50939</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM939&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">52936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">54936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB18030&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57009</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57011</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ciphertext[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">b&#x27;\x00\x00\xBE\xEF&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 16</span></span><br><span class="line">	raw_aes_keys = ciphertext[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var9 = ciphertext[<span class="number">24</span>:<span class="number">26</span>]</span><br><span class="line">	var9 = <span class="built_in">int</span>.from_bytes(var9, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var9 = getName(var9)</span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var10 = ciphertext[<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">	var10 = <span class="built_in">int</span>.from_bytes(var10, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var10 = getName(var10)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	<span class="built_in">id</span> = ciphertext[<span class="number">28</span>:<span class="number">32</span>]</span><br><span class="line">	<span class="built_in">id</span> = <span class="built_in">int</span>.from_bytes(<span class="built_in">id</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;Beacon id:&#123;&#125;&quot;.format(id))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	pid = ciphertext[<span class="number">32</span>:<span class="number">36</span>]</span><br><span class="line">	pid = <span class="built_in">int</span>.from_bytes(pid, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;pid:&#123;&#125;&quot;.format(pid))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	port = ciphertext[<span class="number">36</span>:<span class="number">38</span>]</span><br><span class="line">	port = <span class="built_in">int</span>.from_bytes(port, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;port:&#123;&#125;&quot;.format(port))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 1</span></span><br><span class="line">	flag = ciphertext[<span class="number">38</span>:<span class="number">39</span>]</span><br><span class="line">	flag = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment"># print(flag)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">1</span>):</span><br><span class="line">		barch = <span class="string">&quot;&quot;</span></span><br><span class="line">		pid = <span class="string">&quot;&quot;</span></span><br><span class="line">		is64 = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> isFlag(flag, <span class="number">2</span>):</span><br><span class="line">		barch = <span class="string">&quot;x64&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		barch = <span class="string">&quot;x86&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">4</span>):</span><br><span class="line">		is64 = <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		is64 = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">8</span>):</span><br><span class="line">		bypassuac = <span class="string">&quot;True&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		bypassuac = <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;barch:&quot; + barch)</span></span><br><span class="line">	<span class="comment">#print(&quot;is64:&quot; + is64)</span></span><br><span class="line">	<span class="comment">#print(&quot;bypass:&quot; + bypassuac)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var_1 = ciphertext[<span class="number">39</span>:<span class="number">40</span>]</span><br><span class="line">	var_2 = ciphertext[<span class="number">40</span>:<span class="number">41</span>]</span><br><span class="line">	var_1 = <span class="built_in">int</span>.from_bytes(var_1, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var_2 = <span class="built_in">int</span>.from_bytes(var_2, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	windows_var = <span class="built_in">str</span>(var_1) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var_2)</span><br><span class="line">	<span class="comment">#print(&quot;windows var:&quot; + windows_var)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	windows_build = ciphertext[<span class="number">41</span>:<span class="number">43</span>]</span><br><span class="line">	windows_build = <span class="built_in">int</span>.from_bytes(windows_build, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;windows build:&#123;&#125;&quot;.format(windows_build))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	x64_P = ciphertext[<span class="number">43</span>:<span class="number">47</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gmh = ciphertext[<span class="number">47</span>:<span class="number">51</span>]</span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gpa = ciphertext[<span class="number">51</span>:<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># if (&quot;x64&quot;.equals(this.barch)) &#123;</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.join(var10, this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.join(var10, this.ptr_gpa)</span></span><br><span class="line">	<span class="comment"># &#125;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.bswap(this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.bswap(this.ptr_gpa)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	intz = ciphertext[<span class="number">55</span>:<span class="number">59</span>]</span><br><span class="line">	intz = <span class="built_in">int</span>.from_bytes(intz, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	intz = toIP(intz)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> intz == <span class="string">&quot;0.0.0.0&quot;</span>:</span><br><span class="line">		intz = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">	<span class="comment">#print(&quot;host:&quot; + intz)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> var9 == <span class="literal">None</span>:</span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="comment"># ??x-mswin-936</span></span><br><span class="line">		<span class="comment"># ddata = ciphertext[59:len(ciphertext)].decode(var9)</span></span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">	ddata = ddata.split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">0</span>:</span><br><span class="line">		computer = ddata[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">1</span>:</span><br><span class="line">		username = ddata[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">2</span>:</span><br><span class="line">		process = ddata[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;PC name:&quot; + computer)</span></span><br><span class="line">	<span class="comment">#print(&quot;username:&quot; + username)</span></span><br><span class="line">	<span class="comment">#print(&quot;process name:&quot; + process)</span></span><br><span class="line"></span><br><span class="line">	raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">	digest = raw_aes_hash256.digest()</span><br><span class="line">	aes_key = digest[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">	hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;AES key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(aes_key.<span class="built_in">hex</span>()))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;HMAC key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(hmac_key.<span class="built_in">hex</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(hexdump.hexdump(ciphertext))</span></span><br></pre></td></tr></table></figure>
<p>3、将流量包中数据写成base64形式：（数据指的是图中蓝色部分，每个tcp流中的流量均试一下即可）</p>
<p><img src="/post/ccf22797/image-20230910155301194.png" alt="image-20230910155301194"></p>
<p>转换为原始数据：</p>
<p><img src="/post/ccf22797/image-20230910155542125.png" alt="image-20230910155542125"></p>
<p>写成base64形式：</p>
<p><img src="/post/ccf22797/image-20230910155529969.png" alt="image-20230910155529969"></p>
<p>4、最终解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;2f793b0251bb6c09bda982cb159cd611&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;e5695e8bf533009cd4a3c950d447b032&quot;</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAwNR1s4ymDHA08b2cCeYKryK3UKJK0G2nKl/svxd3sD2WvktAWL1hS0gvdfXP7XmLpCd3CgYHRMvh9bWGrKW/2ANbWBQEYp1Lv+iIsuBpLdxanTNqAEOnre/71JK8hUKuJ32lY88IsDwgFFjvH0l3lwDOwgtXtOe6mhxvhuxUK8ourv/sii2KGiMOacqaRI2bOtOBcEal00/bBj85FcE+W6PmmGbF0Q9BvUvQmDT9C+J2H12SZqwwAbFGVJwntkDq7Q==&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hexdump.hexdump(dec))</span></span><br></pre></td></tr></table></figure>
<p>可以看到一串base32数据：</p>
<p><img src="/post/ccf22797/image-20230910155718568.png" alt="image-20230910155718568"></p>
<p>解密即得flag后半段：</p>
<p><img src="/post/ccf22797/image-20230910155756436.png" alt="image-20230910155756436"></p>
<p>flag：</p>
<p><strong>SICTF{79e1755e-08a8-4d3d-9385-4c0541549995}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有些题的具体原理我确实也懂的不是很透彻，欢迎一起交流讨论！</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(二)</title>
    <url>/post/d8d20302.html</url>
    <content><![CDATA[<p>又做到了一个包含misc与crypto的综合题，在这里记录一下我对这个问题的思考。</p>
<span id="more"></span>
<h2 id="MISC-3"><a href="#MISC-3" class="headerlink" title="MISC.3"></a>MISC.3</h2><p>题目来源：CISG 2015</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文中含有flag这个单词。flag格式为flag&#123;字符串&#125;。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>] - rand()</span><br><span class="line">        plain += <span class="built_in">chr</span>(temp &gt;&gt; <span class="number">22</span>)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;plaintext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    f2 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    data = f1.read()</span><br><span class="line">    <span class="keyword">from</span> secretfile <span class="keyword">import</span> secretkey</span><br><span class="line">    data = encrypt(data,secretkey)</span><br><span class="line">    f2.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>以及一个加密文件ciphertext，由于文件内容较大就不放在这里了。</p>
<p>先梳理一下题目的加密过程：</p>
<ul>
<li>从secretfile里取出secretkey，作为自己的伪随机数生成器的种子</li>
<li>对于明文文件的每一个字符，将他们的ASCII码左移22位，并加上当前rand()生成的伪随机数，得到密文</li>
<li>将密文用pack函数整合，按顺序写入ciphertext里。</li>
</ul>
<p>所以，求解题目的突破口在于求解出密钥。而我搜索到的一篇wp讲了一种不错的思路：</p>
<p><a href="https://geekorz.com/post/cigs2015/">CISG2015 MISC.3解析 (geekorz.com)</a></p>
<p>但是他其中的一句话引发了我的思考：</p>
<p><img src="/post/d8d20302/image-20230913142928566.png" alt="image-20230913142928566"></p>
<p>他说，这个随机数生成算法并不同于普通的LCG，因为他最后一步是按位与运算，而不是模运算，所以就没有采用LCG的思路去求解本题。但是仔细思考就会发现，其实道理是完全一样的：</p>
<ul>
<li>x &amp; 0x3fffffff，表示的是取x的低三十位</li>
<li>x mod (0x3fffffff + 1)，表示的也是取x的低三十位</li>
</ul>
<p>所以，某些按位与运算与模运算其实是等价的！因此我们可以利用下列代码，大大简化求解密钥key的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    plain = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        plain.append(temp)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    data = decrypt(f1.read())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;j =&quot;</span>,j,<span class="string">&quot;:&quot;</span>,end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        key = ((data[<span class="number">0</span>] - (j&lt;&lt;<span class="number">22</span>)) - <span class="number">54321</span>) * inverse(<span class="number">1103515425</span>,(<span class="number">0x3fffffff</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(key,end = <span class="string">&quot;  &quot;</span>)</span><br><span class="line">        srand(key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">40</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>((i - rand()) &gt;&gt; <span class="number">22</span>),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>略微解释一下这段代码：</p>
<ul>
<li>decrypt函数相较于给的附件中的decrypt函数作了简化，仅仅实现了unpack的功能，将密文转化为一个数字列表。</li>
<li>main函数用于爆破正确密钥。</li>
</ul>
<p>如何爆破的呢？我们试想一下第一个密文数字data[0]的生成过程，此处假设第一个明文的ord值为j：</p>
<script type="math/tex; mode=display">
data[0] = (j<<22)+rand()</script><p>而其中rand()生成的值为：</p>
<script type="math/tex; mode=display">
rand() = (state * 1103515425 + 54321) \quad (mod\;0x3fffffff + 1)</script><p>而j仅有256种取值可能(更贴切的说，其实仅需要从可见字符范围内考虑)，因此我们生成所有可能的256个密钥，并解密前面四十个密文观测效果，看看哪个是真正的密钥，观测可知：</p>
<p><img src="/post/d8d20302/image-20230913145528744.png" alt="image-20230913145528744"></p>
<p>可以看出j为105时，解出的密文看上去是正确的形式，因此我们取该密钥解密出全部内容，就得到了正确的文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">+0lpfzK92vRhs6zyLUYE20n65i9s9GHFfw04XTb2BqKed1d35nuQX1hD5JRsou3m7dEEKGBIJCxUeAjPDgeixlQrAoZzFAlt541yJoyXxuEMGwaAqTXQlF+7pB/5S4vnZ85Lap2siP8q/jFYp87z7PXHmJ20opxy8yxnBsRPoWEs8glONXf1H+h4kkdTcCg+HfwGXqYrf0jyFBgAAAABJRU5ErkJggg==|flag is hidden in the above data It is a picture and you should base64decode it.</span><br></pre></td></tr></table></figure>
<p>前面是一个很长的base64段，解码得到：</p>
<p><img src="/post/d8d20302/image-20230913145804385.png" alt="image-20230913145804385"></p>
<p>大功告成！</p>
<p>flag：</p>
<p><strong>flag{tHis_1s_YOUR_flaaaaag}</strong></p>
<p>总结一下，本题最重要的一个点，就是发现模运算与按位与运算的等价性，从而能够使用LCG的解法解决题目。</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
</search>
