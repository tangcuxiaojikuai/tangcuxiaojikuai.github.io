<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-0xGame-week1-wp-crypto</title>
    <url>/post/6a80d23a.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-1-What’s-CBC"><a href="#Week-1-What’s-CBC" class="headerlink" title="[Week 1] What’s CBC?"></a>[Week 1] What’s CBC?</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典的加密预处理？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">	a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(text)%<span class="number">8</span>:</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		pad = <span class="number">8</span>-(<span class="built_in">len</span>(text)%<span class="number">8</span>)</span><br><span class="line">		text += pad.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)*pad</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	text = pad(text)</span><br><span class="line">	block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">		tmp = bytes_xor(iv,i)</span><br><span class="line">		iv = encrypt(tmp,key)</span><br><span class="line">		result += iv</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">		result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">enc = (Encrypt_CBC(flag,iv,key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enc = b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目比较简单，就不梳理流程了，主要漏洞在于encrypt函数中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到，key只用了最低的一个字节来进行加密，因此有两种思路：</p>
<ul>
<li>爆破256种可能的key，均进行解密，在解密出来的文本中，有0xGame的flag头即为正确解密</li>
<li>用已知的0xGame这个flag头直接确定key，再进行解密</li>
</ul>
<p>不管用哪个思路，最终发现key的最低字节是 b’\x8f’</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">	a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line">	<span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">key = <span class="number">8</span>*<span class="string">b&#x27;\x8f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">str</span>(bytes_xor(bytes_xor(enc[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],iv),key))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">	iv = enc[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;098f6bcd4621d373cade4e832627b4f6&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-密码，觅码，先有-再密"><a href="#Week-1-密码，觅码，先有-再密" class="headerlink" title="[Week 1] 密码，觅码，先有*再密"></a>[Week 1] 密码，觅码，先有*再密</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开始挑战BOSS前，先来通关新手村吧</span><br></pre></td></tr></table></figure>
<p>hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: Test your python</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag <span class="comment">#从中导入秘密的flag，这是我们要破解的信息</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="comment">#从函数库导入一些编码函数</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line">lent = <span class="built_in">len</span>(flag)</span><br><span class="line">flag = [flag[i*(lent//<span class="number">4</span>):(i+<span class="number">1</span>)*(lent//<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">c1 = bytes_to_long(flag[<span class="number">0</span>])</span><br><span class="line">c2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">1</span>]])</span><br><span class="line">c3 = b64encode(flag[<span class="number">2</span>])</span><br><span class="line">c4 = flag[<span class="number">3</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1?= <span class="subst">&#123;<span class="built_in">pow</span>(c1,<span class="number">5</span>)&#125;</span>\nc2 = <span class="subst">&#123;c2&#125;</span>\nc3 = <span class="subst">&#123;c3&#125;</span>\nc4 = <span class="subst">&#123;c4&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1?= 2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line"><span class="string">c2 = 10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100</span></span><br><span class="line"><span class="string">c3 = b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line"><span class="string">c4 = e4bbace79a8443727970746fe68c91e68898e590a72121217d</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#全是乱码，那咋办嘛？</span></span><br></pre></td></tr></table></figure>
<p>可以看到flag被分为四份，进行不同的编码，那么首先要对应解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;0xGame&#123; \xe6\x81\xad\xe5\x96\x9c\xe4\xbd\xa0,\xe5\xb7\xb2\xe7\xbb\x8f\xe7&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x90\x86\xe8\xa7\xa3\xe4\xba\x86\xe4\xbf\xa1\xe6\x81\xaf\xe6\x98\xaf\xe5\xa6\x82\xe4\xbd\x95\xe7\xbc&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x96\xe7\xa0\x81\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xbc\x80\xe5\xa7\x8b\xe6\x88\x91&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xbb\xac\xe7\x9a\x84Crypto\xe6\x8c\x91\xe6\x88\x98\xe5\x90\xa7!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>解出来后，发现解密内容除了flag头尾，剩下的仍然是字节流，猜测可能是汉字编码，解码即可</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line">c1 = iroot(c1,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line">c2 = <span class="string">&quot;10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100&quot;</span></span><br><span class="line">c3 = <span class="string">b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line">c4 = <span class="string">&quot;e4bbace79a8443727970746fe68c91e68898e590a72121217d&quot;</span></span><br><span class="line"></span><br><span class="line">t1 = long_to_bytes(c1)</span><br><span class="line">t2 = long_to_bytes(<span class="built_in">int</span>(c2,<span class="number">2</span>))</span><br><span class="line">t3 = b64decode(c3)</span><br><span class="line">t4 = long_to_bytes(<span class="built_in">int</span>(c4,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">t = t1+t2+t3+t4</span><br><span class="line"><span class="built_in">print</span>(t.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123; 恭喜你,已经理解了信息是如何编码的，那么开始我们的Crypto挑战吧!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-Take-my-bag"><a href="#Week-1-Take-my-bag" class="headerlink" title="[Week 1] Take my bag!"></a>[Week 1] Take my bag!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我包呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">	m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">	enc = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">		enc += init[i] * <span class="built_in">int</span>(m[i]) % n</span><br><span class="line">	<span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">n = getPrime(<span class="number">512</span>)</span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w=<span class="subst">&#123;w&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w=16221818045491479713</span></span><br><span class="line"><span class="string">n=9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line"><span class="string">c=4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个背包加密，需要注意到的是这里的 pow(3, i) 是一个超递增序列，因此有两种方法：</p>
<ul>
<li>直接当作普通背包加密，用格基规约做</li>
<li>如果flag长度较短，那么很可能前面的背包加密根本没有取模，可以直接当作超递增序列解密</li>
</ul>
<p>无论哪个方法都不麻烦，当然因为是新生赛所以推荐先学会第二种方法</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">w=<span class="number">16221818045491479713</span></span><br><span class="line">n=<span class="number">9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line">c=<span class="number">4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"></span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(init)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = init[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line"></span><br><span class="line">m = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">m = <span class="string">&quot;&quot;</span>.join(m)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Welc0me_2_Crypt0_G@me!#$&amp;%&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-BabyRSA"><a href="#Week-1-BabyRSA" class="headerlink" title="[Week 1] BabyRSA"></a>[Week 1] BabyRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典的数学，经典的算法</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getN</span>():</span><br><span class="line">	N = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">		tmp = getPrime(<span class="number">32</span>)</span><br><span class="line">		N *= tmp</span><br><span class="line">	<span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line">mask = getrandbits(<span class="number">256</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = getN()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m*mask,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"><span class="string">mask = 54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多素数的RSA，factordb分解后直接解密即可，最后还需乘上mask的逆元</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line">mask = <span class="number">54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"></span><br><span class="line">plist = [<span class="number">2329990801</span>, <span class="number">2436711469</span>, <span class="number">2732757047</span>, <span class="number">2770441151</span>, <span class="number">2821163021</span>, <span class="number">2864469667</span>, <span class="number">2995527113</span>, <span class="number">3111632101</span>, <span class="number">3162958289</span>, <span class="number">3267547559</span>, <span class="number">3281340371</span>, <span class="number">3479527847</span>, <span class="number">3561068417</span>, <span class="number">3978177241</span>, <span class="number">4134768233</span>, <span class="number">4160088337</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi *= (i-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">mmask = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = mmask // mask</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Magic_M@th_Make_Crypt0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-猜谜"><a href="#Week-1-猜谜" class="headerlink" title="[Week 1] 猜谜"></a>[Week 1] 猜谜</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么情况，密钥不见了？(flag格式: 0xGame&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">text</span>):</span><br><span class="line">	code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">	text = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])</span><br><span class="line">	length = <span class="built_in">len</span>(text)</span><br><span class="line">	pad = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> length%<span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">		text += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">		pad = <span class="string">b&#x27;==&#x27;</span></span><br><span class="line">	<span class="keyword">elif</span> length%<span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">		text += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">		pad = <span class="string">b&#x27;=&#x27;</span></span><br><span class="line">	result = [code[<span class="built_in">int</span>(text[<span class="number">3</span>*i:<span class="number">3</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text)//<span class="number">3</span>)]</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result).encode()+pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag</span>):</span><br><span class="line">	result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">		result += (key[i%<span class="number">7</span>]^(flag[i]+i)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = enc(encrypt(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>加密流程如下：</p>
<ul>
<li>flag 是一个字节流，记其长度为 l</li>
<li>将 flag[i] + i 与 key[i%7] 异或，并转为一个字节后，得到 encrypt(flag)</li>
<li>将 encrypt(flag) 进行 enc 加密</li>
</ul>
<p>其中，enc加密过程为：</p>
<ul>
<li>将 encrypt(flag) 的每个字节转化为二进制，并补齐 8 位</li>
<li>把每个字节的二进制再拼接在一起，得到一个01串</li>
<li>将01串每三位转化为十进制数，作为当前需添加的密文字符在 code 中的下标</li>
<li>添加完所有密文后，填充上对应补充字节，作为密文给出</li>
</ul>
<p>那么解密流程就是：先恢复 enc，再恢复 encrypt</p>
<p>enc的恢复是容易的，简单逆向回去就行，当然需要注意一下解填充：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx&#x27;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    t = code.index(i)</span><br><span class="line">    temp += <span class="built_in">str</span>(<span class="built_in">bin</span>(t)[<span class="number">2</span>:].zfill(<span class="number">3</span>))</span><br><span class="line">temp = temp[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)//<span class="number">8</span>):</span><br><span class="line">    enc.append(<span class="built_in">int</span>(temp[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>然后就是恢复encrypt，注意到我们拥有flag头0xGame{，刚好七个，因此可以直接恢复密钥，然后对应解密</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx&#x27;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    t = code.index(i)</span><br><span class="line">    temp += <span class="built_in">str</span>(<span class="built_in">bin</span>(t)[<span class="number">2</span>:].zfill(<span class="number">3</span>))</span><br><span class="line">temp = temp[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)//<span class="number">8</span>):</span><br><span class="line">    enc.append(<span class="built_in">int</span>(temp[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">&quot;0xGame&#123;&quot;</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    key.append((enc[i])^(<span class="built_in">ord</span>(prefix[i])+i))</span><br><span class="line"></span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    result += ((key[i%<span class="number">7</span>]^((enc[i])))-i).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Kn0wn_pl@intext_Att@ck!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-1-Vigenere"><a href="#Week-1-Vigenere" class="headerlink" title="[Week 1] Vigenere"></a>[Week 1] Vigenere</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：0dGmqk&#123;79ap4i0522g0a67m6i196he52357q60f&#125; 古老而神秘的加密方式？</span><br></pre></td></tr></table></figure>
<p>没有附件，那么结合题目内容就知道用的是Vigenere加密，上cyberchef，直接用flag头就能看出密钥是game：</p>
<p><img src="/post/6a80d23a/image-20231001192856742.png" alt="image-20231001192856742"></p>
<p>那么用game解密就好：</p>
<p><img src="/post/6a80d23a/image-20231001192949166.png" alt="image-20231001192949166"></p>
<p>flag:</p>
<p><strong>0xGame{79ad4e0522a0a67a6e196be52357e60b}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-0xGame-week2-wp-crypto</title>
    <url>/post/aba42241.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-2-Fault-Fault"><a href="#Week-2-Fault-Fault" class="headerlink" title="[Week 2] Fault!Fault!"></a>[Week 2] Fault!Fault!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">机缘巧合之下，小Z意外获得了一张用于身份认证的加密芯片，这块芯片可以输入一定的信息，并输出签名后的结果。经过一段时间的逆向工作之后，小Z得到了其中的签名逻辑。</span><br><span class="line"></span><br><span class="line">小Z转念一想，如果私钥是存储在芯片中的，那么我是否能够通过某种办法读取到其中的私钥？是否意味着我可以任意伪造签名？</span><br><span class="line"></span><br><span class="line">于是小Z重金买下工具，，，那么在拥有干涉加解密的能力前提下，这个攻击要如何实施呢……</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,d,n,index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;something go wrong&quot;&quot;&quot;</span></span><br><span class="line">    d_ = d^(<span class="number">1</span>&lt;&lt;(index))</span><br><span class="line">    m_ = <span class="built_in">pow</span>(c,d_,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(m_)</span><br><span class="line"></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Welc0me_2_0xGame2023!</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| [S]ign                     |</span></span><br><span class="line"><span class="string">| [F]ault injection          |</span></span><br><span class="line"><span class="string">| [C]heck answer             |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;验证函数&#x27;&#x27;&#x27;</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;以上是交互部分&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;题干&#x27;&#x27;&#x27;</span></span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        self.send(MEMU)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        e = <span class="number">65537</span></span><br><span class="line">        n = q*p</span><br><span class="line">        phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e,phi)</span><br><span class="line"></span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;S&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;What you want to sign?:&#x27;</span>)</span><br><span class="line">                m = bytes_to_long(self.recv())</span><br><span class="line">                c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">                self.send(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>\n<span class="subst">&#123;e&#125;</span>\n<span class="subst">&#123;c&#125;</span>&#x27;</span>.encode())</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;F&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Give me the Signatrue:&#x27;</span>)</span><br><span class="line">                Signatrue = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                self.send(<span class="string">b&#x27;Where you want to interfere?&#x27;</span>)</span><br><span class="line">                index = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                self.send(<span class="string">b&#x27;The decrypt text:&#x27;</span>)</span><br><span class="line">                self.send(decrypt(Signatrue,d,n,index).encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;C&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Give me the private key:&#x27;</span>)</span><br><span class="line">                ans = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                <span class="keyword">if</span> ans == d:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Here is your flag:&#x27;</span>)</span><br><span class="line">                    self.send(flag)</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10005</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>梳理一下题目加密流程：</p>
<ul>
<li>连接上靶机后，计时开始，限时300s(这么长的限时就暗示可能需要不断交互)</li>
<li>先通过一个proof_of_work，具体为通过哈希值，爆破四位十六进制串</li>
<li>通过proof后，生成RSA加密所需的p，q，e，n，phi，d等参数，然后可以有如下选项：</li>
<li><ul>
<li>输入”S”，可以对任意明文m进行加密，并返回密文c及公钥对(n，e)</li>
<li>输入”F”，可以对任意密文进行故障解密，故障解密具体是什么意思一会儿讲</li>
<li>输入”C”，可以输入一个值，如果该值与d相等，则获得flag</li>
</ul>
</li>
</ul>
<p>其中，故障解密的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,d,n,index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;something go wrong&quot;&quot;&quot;</span></span><br><span class="line">    d_ = d^(<span class="number">1</span>&lt;&lt;(index))</span><br><span class="line">    m_ = <span class="built_in">pow</span>(c,d_,n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(m_)</span><br></pre></td></tr></table></figure>
<p>可以看到，相比于常规的RSA解密指数，用在故障解密中的指数d的index这一比特位发生了翻转，也就是第index比特位的0变成1，或1变成0。而这种翻转其实可以写成如下简单形式：</p>
<p>0变成1：</p>
<script type="math/tex; mode=display">
d' = d + 2^{index}</script><p>1变成0：</p>
<script type="math/tex; mode=display">
d' = d - 2^{index}</script><p>我们用这个指数对RSA解密，就得到：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv c^{d \pm 2^{index}} \equiv c^d *c^{\pm 2^{index}} \quad (mod\;n)</script><p>而具体是加号还是减号，就取决于d的那一bit原本是0还是1，因此，我们就有了判别d的某一比特位的方法：</p>
<p>如果d的第index比特位是0，则：</p>
<script type="math/tex; mode=display">
d' = d + 2^{index}</script><script type="math/tex; mode=display">
c^{d'} \equiv c^{d + 2^{index}} \equiv c^d *c^{ 2^{index}}\equiv m*c^{2^{index}} \quad (mod\;n)</script><p>也就是：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv m*c^{2^{index}} \quad (mod\;n)</script><p>而如果d的第index比特位为1，则正好相反，以下式子成立：</p>
<script type="math/tex; mode=display">
c^{d'} \equiv m*c^{-2^{index}} \quad (mod\;n)</script><p>因此，通过反复更改index并令其解密，我们就能得到d的所有比特位，然后就可以还原出d并上交得到flag。但是对于我的电脑来说，300s限制有点紧张，所以要不断掐掉proof过的慢的交互，不然很难完整复原d的所有比特位。不过之后发现，其实该容器的p，q，n，e都不会变，因此d也不会变，所以完全可以分两次攻击得到不同比特位，然后组合一下就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>,<span class="number">10005</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">proof_of_work()</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;-----/&quot;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">r.sendline(<span class="string">b&quot;S&quot;</span>)</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;What you want to sign?:&quot;</span>)</span><br><span class="line">r.sendline(long_to_bytes(m))</span><br><span class="line">r.recvline()</span><br><span class="line">n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">c = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">d = <span class="string">&quot;&quot;</span>	</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1024</span>)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;F&quot;</span>)	</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;Give me the Signatrue:&quot;</span>)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(c).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;Where you want to interfere?&quot;</span>)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;The decrypt text:&quot;</span>)</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        m_ = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">        t1 = (powmod(c,<span class="number">2</span>**index,n) * m) % n</span><br><span class="line">        t2 = (powmod(c,-<span class="number">2</span>**index,n) * m) % n</span><br><span class="line">        <span class="keyword">if</span>(t1 == m_):</span><br><span class="line">            d += <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="keyword">elif</span>(t2 == m_):</span><br><span class="line">            d += <span class="string">&quot;1&quot;</span>	</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">int</span>(d[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;C&quot;</span>)</span><br><span class="line">temp = r.recvuntil(<span class="string">b&quot;Give me the private key:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(d).encode())</span><br><span class="line">temp = r.recvall()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;F@ult_Milest0ne!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-EzLFSR"><a href="#Week-2-EzLFSR" class="headerlink" title="[Week 2] EzLFSR"></a>[Week 2] EzLFSR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;0xGame&#123;&#x27;</span>+secret+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_mask</span>(<span class="params">m</span>):</span><br><span class="line">    tmp = <span class="built_in">str</span>(<span class="built_in">bin</span>(bytes_to_long(m)))[<span class="number">2</span>:].zfill(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2bits</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits2string</span>(<span class="params">bs</span>):</span><br><span class="line">    s = [<span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bs]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">state, mask</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(state) == <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(mask)  == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        output = output ^ (state[i] &amp; mask[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    initState = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    secret = make_mask(secret)</span><br><span class="line">    mask = string2bits(secret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> secret: <span class="keyword">assert</span>(b == <span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> b == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(secret) == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        state = initState[i:]</span><br><span class="line">        output = lfsr(state, mask)</span><br><span class="line">        initState += [output]</span><br><span class="line"></span><br><span class="line">    outputState = bits2string(initState[<span class="number">128</span>:])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outputState =&#x27;</span>, outputState)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outputState = 1101111111011101100001000011111101001000111000110100010011110111010011100110100100111001101010110110101110000011110101000110010010000011111111001111000110111001100111101110010100100001101001111110001010000100111101011011100010000000100000100000100111010110</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>老样子，先梳理题目加密流程：</p>
<ul>
<li>题目把secret变为二进制列表后，作为掩码mask，flag由固定flag头尾及secret组成</li>
<li>给定LFSR的初始序列initState，与mask一样是一个长度为128的二进制列表</li>
<li>用LFSR生成256比特的流密码，并给出。要求我们反推出mask列表，从而求出secret</li>
</ul>
<p>其中，LFSR的生成逻辑如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">state, mask</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(state) == <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(mask)  == <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        output = output ^ (state[i] &amp; mask[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p>乍一看可能觉得不太好想，但是再一看，这不就是个GF(2)下的线性方程吗！这是因为：</p>
<ul>
<li>state[i] &amp; mask[i]，可以写成 state[i] * mask[i]</li>
<li>output = output ^ (state[i] &amp; mask[i]) ，其实就是把128个乘积在GF(2)下求和</li>
</ul>
<p>那么这样一来就好做了，把mask当作128个变量组成的列向量，取128个output，就能求解一个满秩的矩阵方程如下：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,128}\\
   m_{2,1} & m_{2,2} &... &m_{2,128} \\
   & &...\\
   m_{127,1} & m_{127,2} &... &m_{127,128} \\
   m_{128,1} & m_{128,2} &... &m_{128,128}  \\
  \end{matrix}
  \right)*
  \left(
 \begin{matrix}
   mask_1\\
   mask_2 \\
   ...\\
   mask_{127} \\
   mask_{128}  \\
  \end{matrix}
  \right)
  =
  \left(
 \begin{matrix}
   output_1\\
   output_2 \\
   ...\\
   output_{127} \\
   output_{128}  \\
  \end{matrix}
  \right)
  \quad(mod\;2)</script><p>求完后转回字符串，再套上flag头尾即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits2string</span>(<span class="params">bs</span>):</span><br><span class="line">    s = [<span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bs]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2bits</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line">outputState = <span class="string">&quot;1101111111011101100001000011111101001000111000110100010011110111010011100110100100111001101010110110101110000011110101000110010010000011111111001111000110111001100111101110010100100001101001111110001010000100111101011011100010000000100000100000100111010110&quot;</span></span><br><span class="line">initState = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">c = string2bits(outputState[:<span class="number">128</span>])</span><br><span class="line">M = [initState[i:] + c[:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">c = vector(GF(<span class="number">2</span>),c)</span><br><span class="line">m = matrix(GF(<span class="number">2</span>),<span class="number">128</span>,<span class="number">128</span>,M)</span><br><span class="line">secret = m.solve_left(c)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(bits2string(secret),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Rec0ver_the_M@sk&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-What’s-CRT"><a href="#Week-2-What’s-CRT" class="headerlink" title="[Week 2] What’s CRT?"></a>[Week 2] What’s CRT?</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先穿袜子后穿鞋，先当**后当爷</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">260792700</span></span><br><span class="line">q,p,q_,p_ = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">gift = [q+p,q_+p_]</span><br><span class="line">n,n_ = q*p,q_*p_</span><br><span class="line">mq_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,q_)</span><br><span class="line">mp_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,p_)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mygift=<span class="subst">&#123;gift&#125;</span>\nmq_=<span class="subst">&#123;mq_&#125;</span>\nmp_=<span class="subst">&#123;mp_&#125;</span>\nn=<span class="subst">&#123;n&#125;</span>\nn_=<span class="subst">&#123;n_&#125;</span>\nc=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mygift=[15925416640901708561793293991573474917595642805739825596593339102414328214313430010166125066639132916608736569443045051644173933089503934675628814467277922, 18342424676996843423829480445042578097182127446865571536445030052846412665700132683433441858073625594933132038175200824257774638419166516796318527302903098]</span></span><br><span class="line"><span class="string">mq_=6229615098788722664392369146712291169948485951371133086154028832805750551655072946170332335458186479565263371985534601035559229403357396564568667218817197</span></span><br><span class="line"><span class="string">mp_=7514598449361191486799480225087938913945061715845128006069296876457814528347371315493644046029376830166983645570092100320566196227210502897068206073043718</span></span><br><span class="line"><span class="string">n=63329068473206068067147844002844348796575899624395867391964805451897110448983910133293450006821779608031734813916287079551030950968978400757306879502402868643716591624454744334316879241573399993026873598478532467624301968439714860262264449471888606538913071413634346381428901358109273203087030763779091664797</span></span><br><span class="line"><span class="string">n_=84078907800136966150486965612788894868587998005459927216462899940718213455112139441858657865215211843183780436155474431592540465189966648565764225210091190218976417210291521208716206733270743675534820816685370480170120230334766919110311980614082807421812749491464201740954627794429460268010183163151688591417</span></span><br><span class="line"><span class="string">c=12623780002384219022772693100787925315981488689172490837413686188416255911213044332780064192900824150269364486747430892667624289724721692959334462348218416297309304391635919115701692314532111050955120844126517392040880404049818026059951326039894605004852370344012563287210613795011783419126458214779488303552</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>不管是题目标题CRT，还是题目描述暗示孙子定理，都是告诉我们这题要用中国剩余定理。</p>
<p>首先，根据题目给的条件，能够很轻松的求出p、q、p‘、q’几个参数。那么由于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mq_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,q_)</span><br><span class="line">mp_ = <span class="built_in">pow</span>(m,<span class="number">4</span>,p_)</span><br></pre></td></tr></table></figure>
<p>可以先用中国剩余定理试一试。但是不行，那应该flag超长了，所以必须把p、q也用上。</p>
<p>而这个e是个偶数，是肯定和p-1,q-1都不互素的，又因为e比较小，所以扔上facrotdb上分解一下：</p>
<p><img src="/post/aba42241/image-20231008171144165.png" alt="image-20231008171144165"></p>
<p>正好，他与phi的公因数也是4，因此把e拆开：</p>
<script type="math/tex; mode=display">
(m^4)^{\frac{e}{4}} \equiv c \quad(mod\;n)</script><p>然后求e/4对phi的逆元d，正常RSA解密就能得到：</p>
<script type="math/tex; mode=display">
m^4 \equiv c^d \quad (mod\;n)</script><p>此时，我们就拥有了关于m^4的三个等式：</p>
<script type="math/tex; mode=display">
m^4 \equiv c^d \quad (mod\;n)</script><script type="math/tex; mode=display">
m^4 \equiv mp' \quad (mod\;p')</script><script type="math/tex; mode=display">
m^4 \equiv mq' \quad (mod\;q')</script><p>中国剩余定理组合，开四次根就能得到flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">e = <span class="number">260792700</span></span><br><span class="line">gift=[<span class="number">15925416640901708561793293991573474917595642805739825596593339102414328214313430010166125066639132916608736569443045051644173933089503934675628814467277922</span>, <span class="number">18342424676996843423829480445042578097182127446865571536445030052846412665700132683433441858073625594933132038175200824257774638419166516796318527302903098</span>]</span><br><span class="line">mq_=<span class="number">6229615098788722664392369146712291169948485951371133086154028832805750551655072946170332335458186479565263371985534601035559229403357396564568667218817197</span></span><br><span class="line">mp_=<span class="number">7514598449361191486799480225087938913945061715845128006069296876457814528347371315493644046029376830166983645570092100320566196227210502897068206073043718</span></span><br><span class="line">n=<span class="number">63329068473206068067147844002844348796575899624395867391964805451897110448983910133293450006821779608031734813916287079551030950968978400757306879502402868643716591624454744334316879241573399993026873598478532467624301968439714860262264449471888606538913071413634346381428901358109273203087030763779091664797</span></span><br><span class="line">n_=<span class="number">84078907800136966150486965612788894868587998005459927216462899940718213455112139441858657865215211843183780436155474431592540465189966648565764225210091190218976417210291521208716206733270743675534820816685370480170120230334766919110311980614082807421812749491464201740954627794429460268010183163151688591417</span></span><br><span class="line">c=<span class="number">12623780002384219022772693100787925315981488689172490837413686188416255911213044332780064192900824150269364486747430892667624289724721692959334462348218416297309304391635919115701692314532111050955120844126517392040880404049818026059951326039894605004852370344012563287210613795011783419126458214779488303552</span></span><br><span class="line"></span><br><span class="line">p = (iroot((gift[<span class="number">0</span>]**<span class="number">2</span> - <span class="number">4</span>*n),<span class="number">2</span>)[<span class="number">0</span>] + gift[<span class="number">0</span>])//<span class="number">2</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">q_ = (iroot((gift[<span class="number">1</span>]**<span class="number">2</span> - <span class="number">4</span>*n_),<span class="number">2</span>)[<span class="number">0</span>] + gift[<span class="number">1</span>])//<span class="number">2</span></span><br><span class="line">p_ = n_ // q_</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">4</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">N = [n,p_,q_]</span><br><span class="line">C = [m,mp_,mq_]</span><br><span class="line">M = crt(N,C)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(M,<span class="number">4</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;7881ed67088e9f72b860f8c376599785&#125;</span></span><br></pre></td></tr></table></figure>
<p>有一个小细节需要注意，如果你按这个方式一直出不来，那么可以检查一下p’、q’是否求反了，是有这个可能性的。</p>
<p><br></p>
<p><br></p>
<h3 id="Week-2-中间的那个人"><a href="#Week-2-中间的那个人" class="headerlink" title="[Week 2] 中间的那个人"></a>[Week 2] 中间的那个人</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小爱(Alice)和小爆(Bob)现在在神秘的幻想乡中需要进行远程通话，但是他们又不希望中间传递的信息被心怀不轨的人窃取——很显然，他们的通话需要加密。但是在双方并未事先沟通好的情况下，他们要如何协商好密钥呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">A = getrandbits(<span class="number">32</span>)</span><br><span class="line">B = getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">Alice = <span class="built_in">pow</span>(g,A,p)</span><br><span class="line">Bob = <span class="built_in">pow</span>(g,B,p)</span><br><span class="line">key = <span class="built_in">pow</span>(Alice,B,p)</span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&quot;0xGame0xGameGAME&quot;</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;g=<span class="subst">&#123;g&#125;</span>\np=<span class="subst">&#123;p&#125;</span>&#x27;</span>)  <span class="comment">#we tell</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bob=<span class="subst">&#123;Bob&#125;</span>&#x27;</span>)     <span class="comment">#Bob tell</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Alice=<span class="subst">&#123;Alice&#125;</span>&#x27;</span>) <span class="comment">#Alice tell</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)<span class="comment">#Here is they secret</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">g=2</span></span><br><span class="line"><span class="string">p=250858685680234165065801734515633434653</span></span><br><span class="line"><span class="string">Bob=33067794433420687511728239091450927373</span></span><br><span class="line"><span class="string">Alice=235866450680721760403251513646370485539</span></span><br><span class="line"><span class="string">enc=b&#x27;s\x04\xbc\x8bT6\x846\xd9\xd6\x83 y\xaah\xde@\xc9\x17\xdc\x04v\x18\xef\xcf\xef\xc5\xfd|\x0e\xca\n\xbd#\x94&#123;\x8e[.\xe8\xe1GU\xfa?\xda\x11w&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个典型的Diffie-Hellman密钥交换协议，其困难性依赖于离散对数在某些有限域下难以求解。但是观察题目生成有限域用的p较小而且较光滑，因此可以直接求解出离散对数，进而得到公用密钥key，然后AES解密即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">g=<span class="number">2</span></span><br><span class="line">p=<span class="number">250858685680234165065801734515633434653</span></span><br><span class="line">Bob=<span class="number">33067794433420687511728239091450927373</span></span><br><span class="line">Alice=<span class="number">235866450680721760403251513646370485539</span></span><br><span class="line">enc=<span class="string">b&#x27;s\x04\xbc\x8bT6\x846\xd9\xd6\x83 y\xaah\xde@\xc9\x17\xdc\x04v\x18\xef\xcf\xef\xc5\xfd|\x0e\xca\n\xbd#\x94&#123;\x8e[.\xe8\xe1GU\xfa?\xda\x11w&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A=discrete_log(mod(Alice,p),mod(g,p))</span></span><br><span class="line"><span class="string">print(A)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">A = <span class="number">3992780394</span></span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&quot;0xGame0xGameGAME&quot;</span></span><br><span class="line">key = <span class="built_in">int</span>(<span class="built_in">pow</span>(Bob,A,p))</span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = aes.decrypt(enc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;51393fe1fd5fc2df1bf018d06f0fa11d&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-2-EzRSA"><a href="#Week-2-EzRSA" class="headerlink" title="[Week 2] EzRSA"></a>[Week 2] EzRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个小问题。一个定理、一个常见的分解方式、一个不太常见的连分数分解（啥事连分数？）</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> challenges.challenge1 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge1</span><br><span class="line"><span class="keyword">from</span> challenges.challenge2 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge2</span><br><span class="line"><span class="keyword">from</span> challenges.challenge3 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> challenge3</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SCORE = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ____  ____    _    </span></span><br><span class="line"><span class="string">|  _ \/ ___|  / \   </span></span><br><span class="line"><span class="string">| |_) \___ \ / _ \  </span></span><br><span class="line"><span class="string">|  _ &lt; ___) / ___ \ </span></span><br><span class="line"><span class="string">|_| \_\____/_/   \_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Here are four challenges(1, 2, 3), solve them all then you can get flag.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| 1. get public key          |</span></span><br><span class="line"><span class="string">| 2. get cipher text         |</span></span><br><span class="line"><span class="string">| 3. check                   |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;验证函数&#x27;&#x27;&#x27;</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Serve</span>(<span class="params">self, S</span>):</span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            option = self.recv()</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                pubkey = S.pubkey()</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> pubkey:</span><br><span class="line">                    self.send(<span class="built_in">str</span>(s).encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                c = S.encrypt()</span><br><span class="line">                self.send(c.encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                usr_answer = self.recv(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> S.check(usr_answer)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;invaild option&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.send(BANNER.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">f&#x27;your score <span class="subst">&#123;<span class="built_in">sum</span>(SCORE)&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(SCORE) == <span class="number">3</span>:</span><br><span class="line">                self.send(<span class="string">f&quot;here are flag:<span class="subst">&#123;flag&#125;</span>&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.send(<span class="string">b&#x27;select challange&#123;1,2,3&#125;&#x27;</span>)<span class="comment">#</span></span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                S = challenge1()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                S = challenge2()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                S = challenge3()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">                    self.send(<span class="string">b&#x27;Conguration!You are right!&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10006</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一个交互题，要实现的目标就是分别通过他的三个challenge，就可以拿到flag。</p>
<p>那么接下来就一个一个challenge分析。</p>
<h4 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h4><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag1</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.p = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">1024</span>)</span><br><span class="line">        self.n = self.q*self.p</span><br><span class="line">        self.g, self.r1 = [random.randint(<span class="number">1</span>, self.q*self.p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        self.gift = <span class="built_in">pow</span>(self.g, self.r1 * (self.p - <span class="number">1</span>), self.n)</span><br><span class="line">        self.m = flag1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure>
<p>题目会给出一个gift，如下：</p>
<script type="math/tex; mode=display">
gift \equiv g^{r_1*(p-1)} \quad(mod\;n)</script><p>那么先同余性质转到模p下，然后费马小定理即可：</p>
<script type="math/tex; mode=display">
gift \equiv g^{r_1*(p-1)} \equiv 1 \quad(mod\;p)</script><p>所以求gcd(gift-1,n)就能得到p，分解n后解密即可。</p>
<h4 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h4><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = flag2</span><br><span class="line">        self.p = self.GetMyPrime(<span class="number">1024</span>)</span><br><span class="line">        self.q = self.GetMyPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetMyPrime</span>(<span class="params">self,bits</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            n = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">                a = choice(sieve_base)</span><br><span class="line">                n *= a</span><br><span class="line">            <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure>
<p>可以看出是p-1光滑，不多说了。</p>
<h4 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag3</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = flag3</span><br><span class="line">        self.p = getPrime(<span class="number">896</span>)</span><br><span class="line">        self.n1 = self.getN()</span><br><span class="line">        self.n2 = self.getN()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getN</span>(<span class="params">self</span>):</span><br><span class="line">        q = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.p = nextprime(self.p)</span><br><span class="line">        <span class="keyword">return</span> q*self.p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.n2)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.n1, self.n2 , self.e</span><br></pre></td></tr></table></figure>
<p>可以发现，题目的两个公钥n1、n2是按如下方式生成的：</p>
<script type="math/tex; mode=display">
n1 = q1 * p1</script><script type="math/tex; mode=display">
n2 = q2 * nextprime(p1)</script><p>可以看到，n1、n2有一个因数非常相近，几乎相等。那么我们把上面两式写成分式形式：</p>
<script type="math/tex; mode=display">
\frac{n1}{n2} = \frac{q1}{q2} * \frac{p1}{nextprime(p1)}</script><p>所以有：</p>
<script type="math/tex; mode=display">
\frac{n1}{n2} \approx \frac{q1}{q2}</script><p>因此将n1/n2进行连分数展开，就很有可能找到q1/q2这个收敛子。</p>
<h4 id="完整交互"><a href="#完整交互" class="headerlink" title="完整交互"></a>完整交互</h4><p>最后还需要把以上求解步骤全部写作交互下的(当然手动也行)，exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>,<span class="number">10006</span>)</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line"><span class="comment">#chall1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    gift = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    p = GCD((gift - <span class="number">1</span>),n)</span><br><span class="line">    q = n // p</span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall1 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#chall2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    m = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, m, n)</span><br><span class="line">        p = GCD(a-<span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p != <span class="number">1</span> <span class="keyword">and</span> p != n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall2 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#chall3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#展开为连分数列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">        cF = []</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            cF += [x // y]</span><br><span class="line">            x, y = y, x % y</span><br><span class="line">        <span class="keyword">return</span> cF</span><br><span class="line">    <span class="comment">#将当前连分数列表计算成有理分数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Simplify</span>(<span class="params">ctnf</span>):</span><br><span class="line">        numerator = <span class="number">0</span></span><br><span class="line">        denominator = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]:</span><br><span class="line">            numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">        <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line">    <span class="comment">#将连分数列表变成不同的有理数逼近列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getit</span>(<span class="params">c</span>):</span><br><span class="line">        cf=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">            cf.append(Simplify(c[:i]))</span><br><span class="line">        <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;select challange&#123;1,2,3&#125;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;-----------/&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    n1 = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">    n2 = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    e = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    q1 = continuedFra(n1,n2)</span><br><span class="line">    q1 = getit(q1)</span><br><span class="line">    <span class="keyword">for</span> a,b <span class="keyword">in</span> q1[<span class="number">4</span>:]:</span><br><span class="line">        <span class="keyword">if</span>(n2 % a == <span class="number">0</span> <span class="keyword">and</span> isPrime(a) <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(a)) &gt; <span class="number">126</span>):</span><br><span class="line">            q2 = a</span><br><span class="line">            p__ = n2 // q2</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    d = inverse(e,(p__-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n2)</span><br><span class="line">    r.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">    r.sendline(long_to_bytes(m))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Chall3 done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;a1425c9ce44989ffd64968130ee2f9fd&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-0xGame-week3-wp-crypto</title>
    <url>/post/6a2afd81.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-3-EzECC"><a href="#Week-3-EzECC" class="headerlink" title="[Week 3] EzECC"></a>[Week 3] EzECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还在偷听小爱和小爆的通讯！</span><br><span class="line"></span><br><span class="line">Hint 1: 也许SageMath能给你想要的东西</span><br><span class="line"></span><br><span class="line">Hint 2: 预期解法时间估计可能一两分钟左右，可能更短</span><br><span class="line"></span><br><span class="line">Hint 3: 阿贝尔群上的加加减减能随便写吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> msg</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;0xGame&#123;&#x27;</span> + msg + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">80</span>)</span><br><span class="line">a,b= [random.randrange(<span class="number">1</span>,q-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">	<span class="keyword">if</span> P[<span class="number">0</span>] != Q[<span class="number">0</span>] <span class="keyword">and</span> P[<span class="number">1</span>] != Q[<span class="number">1</span>]:</span><br><span class="line">		t = ((Q[<span class="number">1</span>]-P[<span class="number">1</span>]) * inverse(Q[<span class="number">0</span>]-P[<span class="number">0</span>],q)) %q</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		t = ((<span class="number">3</span>*P[<span class="number">0</span>]*P[<span class="number">0</span>]+a) * inverse(<span class="number">2</span>*P[<span class="number">1</span>],q))%q</span><br><span class="line"></span><br><span class="line">	x3 = t*t - P[<span class="number">0</span>] - Q[<span class="number">0</span>]</span><br><span class="line">	y3 = t*(P[<span class="number">0</span>] - x3) - P[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> (x3%q, y3%q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">t, A, B=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t: <span class="keyword">return</span> B</span><br><span class="line">    <span class="keyword">return</span> mul(t//<span class="number">2</span>, add(A,A), B <span class="keyword">if</span> <span class="keyword">not</span> t&amp;<span class="number">1</span> <span class="keyword">else</span> add(B,A) <span class="keyword">if</span> B <span class="keyword">else</span> A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(msg)%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line">m1=bytes_to_long(msg[:<span class="built_in">len</span>(msg)//<span class="number">2</span>])</span><br><span class="line">m2=bytes_to_long(msg[<span class="built_in">len</span>(msg)//<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">k = random.getrandbits(<span class="number">64</span>)</span><br><span class="line">G = (<span class="number">641322496020493855620384</span> , <span class="number">437819621961768591577606</span>)</span><br><span class="line">K = mul(k,G)</span><br><span class="line"></span><br><span class="line">M = (m1,m2)</span><br><span class="line">r = random.getrandbits(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">C_1 = add(M,mul(r,K))</span><br><span class="line">C_2 = mul(r,G)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q=<span class="subst">&#123;q&#125;</span>\na=<span class="subst">&#123;a&#125;</span>\nb=<span class="subst">&#123;b&#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;G = <span class="subst">&#123;G&#125;</span>\nK = <span class="subst">&#123;K&#125;</span>\nC_1=<span class="subst">&#123;C_1&#125;</span>\nC_2=<span class="subst">&#123;C_2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">q=1139075593950729137191297</span></span><br><span class="line"><span class="string">a=930515656721155210883162</span></span><br><span class="line"><span class="string">b=631258792856205568553568</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">G = (641322496020493855620384, 437819621961768591577606)</span></span><br><span class="line"><span class="string">K = (781988559490437792081406, 76709224526706154630278)</span></span><br><span class="line"><span class="string">C_1=(55568609433135042994738, 626496338010773913984218)</span></span><br><span class="line"><span class="string">C_2=(508425841918584868754821, 816040882076938893064041)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目基于椭圆曲线加密方案。用给定的q、a、b三个参数，建立如下常见形式的椭圆曲线：</p>
<script type="math/tex; mode=display">
y^2 = x^3+ax+b \quad(mod\;q)</script><p>同时给出椭圆曲线上加法与倍点的计算实现。</p>
<p>题目加密过程如下：</p>
<ul>
<li>将flag串拆成两半，分别转成整数后，作为M点的横纵坐标(需要注意的是M点并不是椭圆曲线上的点)</li>
<li>给出椭圆曲线上的点G，计算其k倍点K，给出G、K坐标</li>
<li>给出C1、C2点的坐标。两个点生成方式分别如下：</li>
</ul>
<script type="math/tex; mode=display">
C1 = M + rK</script><script type="math/tex; mode=display">
C2 = rG</script><p>而注意到，r是一个16比特的数字，数量级很小。因此我们可以根据2式直接爆破出正确的r，然后计算C1-rK即可得到M点。</p>
<p>这里有一个细节需要注意，由于M不在椭圆曲线上，因此C1也不在椭圆曲线上，故无法直接用sagemath内置的椭圆曲线相关操作直接进行加减。因此可以通过计算出椭圆曲线的阶，从而计算出rK点逆元，然后用题目给定的加法函数计算出M。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">	<span class="keyword">if</span> P[<span class="number">0</span>] != Q[<span class="number">0</span>] <span class="keyword">and</span> P[<span class="number">1</span>] != Q[<span class="number">1</span>]:</span><br><span class="line">		t = ((Q[<span class="number">1</span>]-P[<span class="number">1</span>]) * inverse(Q[<span class="number">0</span>]-P[<span class="number">0</span>],q)) %q</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		t = ((<span class="number">3</span>*P[<span class="number">0</span>]*P[<span class="number">0</span>]+a) * inverse(<span class="number">2</span>*P[<span class="number">1</span>],q))%q</span><br><span class="line"></span><br><span class="line">	x3 = t*t - P[<span class="number">0</span>] - Q[<span class="number">0</span>]</span><br><span class="line">	y3 = t*(P[<span class="number">0</span>] - x3) - P[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> (x3%q, y3%q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">t, A, B=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t: <span class="keyword">return</span> B</span><br><span class="line">    <span class="keyword">return</span> mul(t//<span class="number">2</span>, add(A,A), B <span class="keyword">if</span> <span class="keyword">not</span> t&amp;<span class="number">1</span> <span class="keyword">else</span> add(B,A) <span class="keyword">if</span> B <span class="keyword">else</span> A)</span><br><span class="line"></span><br><span class="line">q=<span class="number">1139075593950729137191297</span></span><br><span class="line">a=<span class="number">930515656721155210883162</span></span><br><span class="line">b=<span class="number">631258792856205568553568</span></span><br><span class="line"></span><br><span class="line">G = (<span class="number">641322496020493855620384</span>, <span class="number">437819621961768591577606</span>)</span><br><span class="line">K = (<span class="number">781988559490437792081406</span>, <span class="number">76709224526706154630278</span>)</span><br><span class="line">C_1 = (<span class="number">55568609433135042994738</span>, <span class="number">626496338010773913984218</span>)</span><br><span class="line">C_2 = (<span class="number">508425841918584868754821</span>, <span class="number">816040882076938893064041</span>)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(q), [a, b])</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>(mul(r,G) == C_2):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">M = add(C_1,mul(E.order()-r,K))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0xGame&#123;&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(M[<span class="number">0</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(M[<span class="number">1</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;Al1ce_L0ve_B0b&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-LLL-FirstBlood"><a href="#Week-3-LLL-FirstBlood" class="headerlink" title="[Week 3] LLL-FirstBlood"></a>[Week 3] LLL-FirstBlood</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: SageMath中的LLL算法该怎么用……？为啥这算法能解出想要的东西</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(flag)//<span class="number">4</span></span><br><span class="line">m = [bytes_to_long(flag[i*length:(i+<span class="number">1</span>)*length]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">p = getPrime(<span class="built_in">int</span>(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MakeMask</span>(<span class="params">n,p</span>):</span><br><span class="line">    upper = identity_matrix(n)</span><br><span class="line">    low = identity_matrix(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):    </span><br><span class="line">            upper[i, j] = randrange(<span class="number">1</span>, p)</span><br><span class="line">            low[j, i] = randrange(<span class="number">1</span>, p)</span><br><span class="line">    result = upper * low</span><br><span class="line">    <span class="keyword">assert</span> det(result) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Matrix2List</span>(<span class="params">x</span>):<span class="keyword">return</span> [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">noise = [[randrange(<span class="number">1</span>, p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">noise[<span class="number">0</span>] = m</span><br><span class="line">M = matrix(noise)</span><br><span class="line">A = MakeMask(<span class="number">4</span>,p)</span><br><span class="line">C = A*M</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p=<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;C=<span class="subst">&#123;Matrix2List(C)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p=198880159035681668071031460916089145469</span></span><br><span class="line"><span class="string">C=[[1528140902799730745476264672501768332416990282355490479242339131918301176698899635154781328839496210200676497333428, 2081687444435007467807250373278513114045272585243815458840083487459795021302180077490134099644993120009567147202772, 3080873409460299046339495750746632185307246572817534784703936044874106809413620470006445984962733721029566440253675, 3491734341995174183626991907292607070252197520631412767989879432598743851171175369180080355977574296558734415823458], [2359409535809048127331244699867147546817134802610067329431135227991488324148374065940238308147500809599395748756798, 3191196199160821446351036460385791985682645040446022512790815348810555748825420237291839170774872264097466183208742, 4665346530155386457242345394284286198347336281451530670818113876767736288089400119492317775648206643242839430899283, 5369350746042850276067380638571565496087948799720968959426256192923852197959381101839484196445995828389461004495917], [1641407111066265429602929560264443103285908072677065498760570514577412905392260182334706635555256537745902283191251, 2190536173399177167068153351271988931232272884028569669242062395087922275021628334797729266560930040116807133977244, 3127556759140845426132305699421707182108351516931881411928719802847628408656887897596425133523782526561471050447359, 3707239956529200159380870618471703921011276020439315706352183576289925263316580408968092016782483770373121972835410], [9883814543195849013523934427451407019514807606993414569626142656857168165339, 13190422499129347541373922929251088892868361241120937213742340947017395215646, 18832738552342488056498211782604832513006649329982003661701684946590064734701, 22323329751908690611034666068697427811613727429398087082295754189068333861152]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>完成本题需要对格密码有最基础的了解。首先还是梳理一下加密过程：</p>
<ul>
<li>将flag拆成四组并分别转为整数，作为一个4x4矩阵M的第一行</li>
<li>生成12个(1,p)之间的随机数，作为M的后三行</li>
<li>生成一个行列式为1的矩阵A，并计算C=AM</li>
<li>给出C矩阵以及生成有限域的素数p</li>
</ul>
<p>其实只需要明白一点：格是对一些向量进行整系数线性组合得到的产物。而在本题中，明文flag与剩下三行noise分别是四组行向量，左乘A矩阵，实质上就是对四个行向量进行线性组合，而C就是这四个行向量组合后张成的格，对应的，四个行向量均为C的格基。</p>
<p>而很显然，flag组成的第一行行向量均较短，因此可以对格C用LLL算法解决SVP问题，得到的第一行向量就是flag的四部分。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=<span class="number">198880159035681668071031460916089145469</span></span><br><span class="line">C=[[<span class="number">1528140902799730745476264672501768332416990282355490479242339131918301176698899635154781328839496210200676497333428</span>, <span class="number">2081687444435007467807250373278513114045272585243815458840083487459795021302180077490134099644993120009567147202772</span>, <span class="number">3080873409460299046339495750746632185307246572817534784703936044874106809413620470006445984962733721029566440253675</span>, <span class="number">3491734341995174183626991907292607070252197520631412767989879432598743851171175369180080355977574296558734415823458</span>], [<span class="number">2359409535809048127331244699867147546817134802610067329431135227991488324148374065940238308147500809599395748756798</span>, <span class="number">3191196199160821446351036460385791985682645040446022512790815348810555748825420237291839170774872264097466183208742</span>, <span class="number">4665346530155386457242345394284286198347336281451530670818113876767736288089400119492317775648206643242839430899283</span>, <span class="number">5369350746042850276067380638571565496087948799720968959426256192923852197959381101839484196445995828389461004495917</span>], [<span class="number">1641407111066265429602929560264443103285908072677065498760570514577412905392260182334706635555256537745902283191251</span>, <span class="number">2190536173399177167068153351271988931232272884028569669242062395087922275021628334797729266560930040116807133977244</span>, <span class="number">3127556759140845426132305699421707182108351516931881411928719802847628408656887897596425133523782526561471050447359</span>, <span class="number">3707239956529200159380870618471703921011276020439315706352183576289925263316580408968092016782483770373121972835410</span>], [<span class="number">9883814543195849013523934427451407019514807606993414569626142656857168165339</span>, <span class="number">13190422499129347541373922929251088892868361241120937213742340947017395215646</span>, <span class="number">18832738552342488056498211782604832513006649329982003661701684946590064734701</span>, <span class="number">22323329751908690611034666068697427811613727429398087082295754189068333861152</span>]]</span><br><span class="line">L = Matrix(ZZ, C)</span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(i)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;8e4d5924dc4cd78f11c1eeb99e991ab3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-LLL-SecondBlood"><a href="#Week-3-LLL-SecondBlood" class="headerlink" title="[Week 3] LLL-SecondBlood"></a>[Week 3] LLL-SecondBlood</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面的学习已经很累了！所以这道题的flag就直接送了！奇怪……怎么发送的时候受到了一些信号干扰，，</span><br><span class="line"></span><br><span class="line">Hint 1: 当然也可以直接应用SageMath中的Coppersmith定理去直接梭哈，前提是得学会多元Coppersmith该如何使用、构造。</span><br><span class="line"></span><br><span class="line">Hint 2: HNP问题是什么？CVP问题是什么？SVP问题又是什么？这些问题的求解矩阵又该如何构造？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() == <span class="number">318</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">	mask,noise = getPrime(<span class="number">511</span>),getPrime(<span class="number">50</span>)</span><br><span class="line">	mask_.append(mask)</span><br><span class="line">	noise_.append(noise)</span><br><span class="line">	c = (mask*m + noise)%q</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">noise_,mask_  =[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">c_ = [encrypt(m) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>\nmask = <span class="subst">&#123;mask_&#125;</span>\nc_ = <span class="subst">&#123;c_&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">q = 9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line"><span class="string">mask = [6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747, 6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841, 5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443, 6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667]</span></span><br><span class="line"><span class="string">c_ = [3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492, 1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425, 668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896, 497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个LWE问题，其一般会提供多组如下形式的等式：</p>
<script type="math/tex; mode=display">
c_i = a_ix + b_i \quad (mod\;q)</script><p>其中，ai、ci均为已知，而bi是未知的量且较小，要求我们通过这些等式还原x。</p>
<p>这个问题一般写成矩阵形式：</p>
<script type="math/tex; mode=display">
C_{m*1} = A_{m*n}x_{n*1} + e_{m*1} \quad (mod\;q)</script><p>那么如何用格进行求解呢？这里介绍两种方法：</p>
<h4 id="方法一：CVP"><a href="#方法一：CVP" class="headerlink" title="方法一：CVP"></a>方法一：CVP</h4><p>把问题转化成一个CVP问题：</p>
<p>首先由模等式：</p>
<script type="math/tex; mode=display">
c_i = a_ix + b_i \quad (mod\;q)</script><p>转化为等式如下：</p>
<script type="math/tex; mode=display">
c_i-b_i = a_ix  + k_iq</script><p>所以可以构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   a_{1} &p &  &    & \\
   a_{2} &  &p &    & \\
   ...   &  &  &... & \\
   a_{m} &  &  &    &p  \\
  \end{matrix}
  \right)</script><p>该格满足：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   a_{1} &p &  &    & \\
   a_{2} &  &p &    & \\
   ...   &  &  &... & \\
   a_{m} &  &  &    &p  \\
  \end{matrix}
  \right)*
  \left(
 \begin{matrix}
   x  \\
   k_{1} \\
   ...  \\
   k_{n}  \\
  \end{matrix}
  \right) = 
  \left(
 \begin{matrix}
   c_1-b_1  \\
   c_2-b_2 \\
   ...  \\
   c_m-b_m  \\
  \end{matrix}
  \right)</script><p>观察到由于b_i较小，所以右侧向量近似为：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   c_1  \\
   c_2 \\
   ...  \\
   c_m  \\
  \end{matrix}
  \right)</script><p>因此可以求解CVP问题可以得到c_i-b_i组成的向量，进而还原flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line">mask_ = [<span class="number">6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747</span>, <span class="number">6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841</span>, <span class="number">5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443</span>, <span class="number">6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667</span>]</span><br><span class="line">c_ = [<span class="number">3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492</span>, <span class="number">1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425</span>, <span class="number">668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896</span>, <span class="number">497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066</span>]</span><br><span class="line">p = q</span><br><span class="line">rs = mask_</span><br><span class="line">cs = c_</span><br><span class="line"></span><br><span class="line">G=GF(p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Babai_closest_vector</span>(<span class="params">M, G, target</span>):</span><br><span class="line">  small = target</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(M.nrows())):</span><br><span class="line">      c = ((small * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">      small -= M[i] * c</span><br><span class="line">  <span class="keyword">return</span> target - small</span><br><span class="line"></span><br><span class="line">m = <span class="number">4</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">A = matrix(ZZ, m+n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = p</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[m , x] = rs[x]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, cs)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line"><span class="comment">#print(&quot;Closest Vector: &#123;&#125;&quot;.format(res))</span></span><br><span class="line"> </span><br><span class="line">R = IntegerModRing(p)</span><br><span class="line">M = Matrix(R, rs)</span><br><span class="line">res=vector(R, res)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(cs,res):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i-j))-<span class="number">2</span>==<span class="number">50</span></span><br><span class="line">x=((res[<span class="number">0</span>])*inverse(rs[<span class="number">0</span>],p)) %p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line"><span class="comment">#0xGame&#123;19255b5c7b19c790e28d87c8a8bb1d33&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二：SVP"><a href="#方法二：SVP" class="headerlink" title="方法二：SVP"></a>方法二：SVP</h4><p>我们构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   q      &      &      &      &  &  \\
          &q     &      &      &  &  \\
          &      &q     &      &  &  \\
          &      &      &q     &  &  \\
  mask1   &mask2 &mask3 &mask4 &1 &  \\
  c1      &c2    &c3    &c4    &  &1  \\
  \end{matrix}
  \right)</script><p>那么由等式：</p>
<script type="math/tex; mode=display">
c_i = mask_ix  + k_iq +noise_i</script><script type="math/tex; mode=display">
noise_i = c_i-mask_ix  - k_iq</script><p>所以有如下线性关系：</p>
<script type="math/tex; mode=display">
(k1,k2,k3,k4,m,-1)*
\left(
 \begin{matrix}
   q      &      &      &      &  &  \\
          &q     &      &      &  &  \\
          &      &q     &      &  &  \\
          &      &      &q     &  &  \\
  mask1   &mask2 &mask3 &mask4 &1 &  \\
  c1      &c2    &c3    &c4    &  &1  \\
  \end{matrix}
  \right)
  =
  (-noise1,-noise2,-noise3,-noise4,x,-1)</script><p>然后配一下系数使得格最后规约出的数量级相当，即可还原m</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">9342426601783650861020119568565656404715236059903009041977149778244153930435908024696666887269890479558473622355346816236972767736577737332173213722012253</span></span><br><span class="line">mask_ = [<span class="number">6237128445236992920577225644858662677575951126467888858782461334057970069468925833844231116647406833999142659751374620280213290736114576089069396331226747</span>, <span class="number">6368031389213953889417545256750169233725975229197446803885029159767701479445576860704561593200907482372690851152126782391126462547524526631934408981070841</span>, <span class="number">5106473460982791188578285397420642137630347289252852045044021197988607082777231839839730169682158507822078412449827976663385282021916120837408192506341443</span>, <span class="number">6318090842950331228033349517542810123596316850353637421587264886413877142612686177796023049304908696413386218992511112752788640732410845589679820003047667</span>]</span><br><span class="line">c_ = [<span class="number">3823539664720029027586933152478492780438595004453489251844133830947165342839393878831914879334660250621422877333022321117120398528430519794109624186204492</span>, <span class="number">1721659645750224819953244995460589691120672649732560768435214608167861246790136217219349234604724148039910656573436663379375048145045443527267790379816425</span>, <span class="number">668633520079344839648950502380059311916108468801009386138810324259146523323704014491547148973835774917331333581475920804677395949854411894556705238578896</span>, <span class="number">497860586379981076499130281851986010889356253371192266267220334713415782402939318483926418213877341511996918189750595755372560345085899109305344338944066</span>]</span><br><span class="line"></span><br><span class="line">L = matrix(ZZ, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">K = <span class="number">2</span>**(<span class="number">318</span>-<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    L[i,i] = q * K</span><br><span class="line">    L[<span class="number">4</span>,i] = mask_[i] * K</span><br><span class="line">    L[-<span class="number">1</span>,i] = c_[i] * K</span><br><span class="line">L[<span class="number">4</span>,<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span>**<span class="number">318</span></span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">abs</span>(res[<span class="number">0</span>][-<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;19255b5c7b19c790e28d87c8a8bb1d33&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-3-EzMatrix"><a href="#Week-3-EzMatrix" class="headerlink" title="[Week 3] EzMatrix"></a>[Week 3] EzMatrix</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: 相似矩阵相似吗？相似矩阵相似吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> secert,flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(n).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> secert &lt; <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">64</span>)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;0xGame&#123;&#x27;</span>+n2b(secert)+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Martix2list</span>(<span class="params">Martix</span>):</span><br><span class="line">    result = []</span><br><span class="line">    Martix = <span class="built_in">list</span>(Martix)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Martix:</span><br><span class="line">        result.append(<span class="built_in">list</span>(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">A=[[<span class="number">12143520799533590286</span>, <span class="number">1517884368</span>, <span class="number">12143520745929978443</span>, <span class="number">796545089340</span>, <span class="number">12143514553710344843</span>, <span class="number">28963398496032</span>, <span class="number">12143436449354407235</span>, <span class="number">158437186324560</span>, <span class="number">12143329129091084963</span>, <span class="number">144214939188320</span>, <span class="number">12143459416553205779</span>, <span class="number">11289521392968</span>],[<span class="number">12143520799533124067</span>, <span class="number">1552775781</span>, <span class="number">12143520745442171123</span>, <span class="number">796372987410</span>, <span class="number">12143514596803995443</span>, <span class="number">28617862048776</span>, <span class="number">12143437786643111987</span>, <span class="number">155426784993480</span>, <span class="number">12143333265382547123</span>, <span class="number">140792203111560</span>, <span class="number">12143460985399172467</span>, <span class="number">10983300063372</span>],[<span class="number">12143520799533026603</span>, <span class="number">1545759072</span>, <span class="number">12143520746151921286</span>, <span class="number">781222462020</span>, <span class="number">12143514741528175043</span>, <span class="number">27856210942560</span>, <span class="number">12143440210529480891</span>, <span class="number">150563969013744</span>, <span class="number">12143339455702534403</span>, <span class="number">135941365971840</span>, <span class="number">12143463119774571623</span>, <span class="number">10579745342712</span>],[<span class="number">4857408319806885466</span>, <span class="number">2428704161425648657</span>, <span class="number">12143520747462241175</span>, <span class="number">758851601758</span>, <span class="number">12143514933292307603</span>, <span class="number">7286139389566980165</span>, <span class="number">9714738936567334300</span>, <span class="number">144947557513044</span>, <span class="number">12143346444338047691</span>, <span class="number">130561054163540</span>, <span class="number">4857352974113333366</span>, <span class="number">2428714303424782417</span>],[<span class="number">12143520799533339320</span>, <span class="number">1476842796</span>, <span class="number">12143520749060275613</span>, <span class="number">733281428880</span>, <span class="number">12143515144091549812</span>, <span class="number">25896324662208</span>, <span class="number">12143446129977471347</span>, <span class="number">139126289668080</span>, <span class="number">12143353609086952433</span>, <span class="number">125093278125816</span>, <span class="number">12143467808884068695</span>, <span class="number">9705993135696</span>],[<span class="number">3469577371288079926</span>, <span class="number">5204366058378782250</span>, <span class="number">12143520750775862343</span>, <span class="number">706665985740</span>, <span class="number">12143515359139397843</span>, <span class="number">24876891455539</span>, <span class="number">12143449149385190675</span>, <span class="number">5204499435641729607</span>, <span class="number">1734628523990131469</span>, <span class="number">119757210113970</span>, <span class="number">12143470097256549947</span>, <span class="number">9282407958928</span>],[<span class="number">10986995009101166671</span>, <span class="number">1734788687033207505</span>, <span class="number">12143520752514668698</span>, <span class="number">680173911560</span>, <span class="number">12143515570582515443</span>, <span class="number">23883386182656</span>, <span class="number">12143452072344092516</span>, <span class="number">10408859957710764174</span>, <span class="number">8673790006740000925</span>, <span class="number">4047954924507284041</span>, <span class="number">12143472277719610437</span>, <span class="number">8879790035168</span>],[<span class="number">12143520799534210329</span>, <span class="number">8095680534365818753</span>, <span class="number">12143520754224346525</span>, <span class="number">6071761054204856029</span>, <span class="number">12143515774342357443</span>, <span class="number">22931775530664</span>, <span class="number">12143454859049102627</span>, <span class="number">122586336122081</span>, <span class="number">12143373761302849103</span>, <span class="number">109840689548590</span>, <span class="number">8095634066844843878</span>, <span class="number">8500892291801</span>],[<span class="number">2428704159899526175</span>, <span class="number">7286112481016467893</span>, <span class="number">12143520755876491019</span>, <span class="number">629765964828</span>, <span class="number">12143515968446948123</span>, <span class="number">9714838668887734012</span>, <span class="number">4857345013259425502</span>, <span class="number">117630592711632</span>, <span class="number">12143379764863568374</span>, <span class="number">105318302849760</span>, <span class="number">2428659620509049335</span>, <span class="number">7286120625945355053</span>],[<span class="number">7286112479717322389</span>, <span class="number">7286112480971640825</span>, <span class="number">12143520757456628435</span>, <span class="number">606320684970</span>, <span class="number">12143516152115449139</span>, <span class="number">4857429497934652454</span>, <span class="number">4857347490735050126</span>, <span class="number">112978994964264</span>, <span class="number">12143385390297217523</span>, <span class="number">101086824360217</span>, <span class="number">7286069740980100293</span>, <span class="number">7286120294834973633</span>],[<span class="number">7727695054246476847</span>, <span class="number">1202487728</span>, <span class="number">12143520758958480293</span>, <span class="number">584144077140</span>, <span class="number">12143516325240923843</span>, <span class="number">20377952745696</span>, <span class="number">12143462294760579275</span>, <span class="number">108622249048560</span>, <span class="number">12143390651947217363</span>, <span class="number">97133513961120</span>, <span class="number">12143479741445599772</span>, <span class="number">8831658996900830432</span>],[<span class="number">12143520799535388887</span>, <span class="number">1161628182</span>, <span class="number">12143520760380594623</span>, <span class="number">563225247585</span>, <span class="number">12143516488091679443</span>, <span class="number">19626876325056</span>, <span class="number">12143464472820678035</span>, <span class="number">104545135017180</span>, <span class="number">12143395570399006523</span>, <span class="number">93441517429260</span>, <span class="number">12143481309754543787</span>, <span class="number">7218375794633</span>]]<span class="comment"># 12*12</span></span><br><span class="line">p = <span class="number">12143520799543738643</span></span><br><span class="line">A = Matrix(GF(p),A)</span><br><span class="line">enc = A**secert</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Martix2list</span>(<span class="params">Martix</span>):</span><br><span class="line">    result = []</span><br><span class="line">    Martix = <span class="built_in">list</span>(Martix)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Martix:</span><br><span class="line">        result.append(<span class="built_in">list</span>(i))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(Martix2list(enc)))</span><br></pre></td></tr></table></figure>
<p>enc.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[11285847990515095003, 7585413350741918021, 11658254512436412666, 477577914899276103, 2941386515764607825, 11283325421744133699, 4096971712575507616, 8118672870538606033, 2377937081025778041, 6576171711896495163, 6152554374963853172, 5022013484610428974], [8354008012616001452, 7787447107046065118, 9504997911333967278, 1082773427768571094, 6015520658629219637, 11244285744740006951, 4493944053220750368, 3504246247470690014, 1738582001618280397, 2330057776906622572, 3043456814665571080, 2981613454022714952], [2508674373714509177, 3544963739532775937, 7952732753025175616, 11161786730565526285, 3397123486689639675, 6454135592624912854, 6613201018024296927, 9748485344986779929, 1819761609989340766, 1259944825407465767, 1596049024644778041, 7769939905324967788], [4200851163596876950, 11960539098651202761, 3303721151143544462, 2532304102428121556, 11083895221097319129, 1171933471304558017, 1549099593543874478, 6088238862927163233, 6459553630361959801, 947358195425767572, 2090533922210134578, 9023030120605201052], [2271102089902208138, 1614812525306266829, 1546249462332047661, 3168333397191737100, 7678980468150522028, 3128939172985153696, 1146041044751755224, 11870173227065140617, 8351303466095252790, 694704483676649448, 7944218023016968278, 583421745603756386], [10309472503110333289, 1100598261990718822, 10235859400888405310, 910925705831020921, 10771855884237562064, 9970830255165655653, 11678899608458971536, 4368822164222204233, 3104861419162339779, 4540709628196554222, 7851809145727500968, 12086896840826708824], [10973051751637593366, 5039073157846327641, 4855314857834773443, 4416954195828423951, 8243966437000815560, 8250554263390748131, 8093181066366682440, 1145520354143718292, 294729013023637045, 10115389386419597159, 2767140395261835843, 6724257139233017485], [6878768250003631244, 10834164422364241529, 6946589221005878489, 539734218479521833, 2691724062063066048, 3989403041446358401, 815244541494093987, 11168528286389981272, 2021358468726921955, 1123433019094267521, 524639025046508882, 5720273332497702547], [6688451244183880831, 10892730373179989558, 6987453292894341174, 5572212176769878684, 11332149024403380575, 3944612864568504791, 6768594304071589280, 10526434024562201079, 10241323610053039912, 1120473558410865753, 306153635148226248, 3606666063074222104], [7556871914690327290, 11353594909211427742, 747771112781361153, 1245068803956910299, 2831489557155431404, 1800035620948876551, 1050411779595241927, 5665981688041778089, 2028968510484240787, 4386552235402890530, 10334391443650474796, 3883841302951550608], [4485787817401669404, 184501191500952934, 3690661645276970957, 6263309802498749034, 6484490370652685031, 9743108369653588026, 3045941510087387269, 5870433915209047275, 4679598273992216016, 11839352681285251516, 4957980185504231911, 7925596893607015470], [1000449712878466719, 7022601702937838844, 1095849907482791166, 11989051568709522226, 6768031250066783733, 185945517026191241, 4280928696740160411, 5633542561098902406, 10176177574499086410, 5782837249861240943, 7406530879613861823, 1971858224839520916]]</span><br></pre></td></tr></table></figure>
<p>题目基于一个矩阵上的离散对数问题，已知矩阵A和M，满足：</p>
<script type="math/tex; mode=display">
A^{secret} = M</script><p>要求求出secret。</p>
<p>矩阵乘法是很复杂的，因此直接做难以求解离散对数，要想办法转化成数域上的离散对数问题才行。因此需要用相似矩阵将矩阵对角化。</p>
<p>首先，可以用sage内置函数<code>is_diagonalizable()</code>判断一个矩阵是否可以对角化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.is_diagonalizable())</span><br><span class="line"></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>而A可以对角化，就代表A可以写成下面的形式：</p>
<script type="math/tex; mode=display">
A = P^{-1}BP</script><p>其中，B是一个对角矩阵。而由于可逆矩阵可以两两相消，由此可以简化A的幂次的计算：</p>
<script type="math/tex; mode=display">
A^{secret} = (P^{-1}BP)^{secret} = P^{-1}B^{secret}P = C</script><p>所以：</p>
<script type="math/tex; mode=display">
B^{secret} = PCP^{-1}</script><p>而由于B是一个对角矩阵的缘故，所以B的幂次其实就是对角线上各个元素的幂次，因此可以将矩阵的离散对数问题转化为对角线上某个元素的离散对数问题，问题得解。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(n).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">A=[[<span class="number">12143520799533590286</span>, <span class="number">1517884368</span>, <span class="number">12143520745929978443</span>, <span class="number">796545089340</span>, <span class="number">12143514553710344843</span>, <span class="number">28963398496032</span>, <span class="number">12143436449354407235</span>, <span class="number">158437186324560</span>, <span class="number">12143329129091084963</span>, <span class="number">144214939188320</span>, <span class="number">12143459416553205779</span>, <span class="number">11289521392968</span>],[<span class="number">12143520799533124067</span>, <span class="number">1552775781</span>, <span class="number">12143520745442171123</span>, <span class="number">796372987410</span>, <span class="number">12143514596803995443</span>, <span class="number">28617862048776</span>, <span class="number">12143437786643111987</span>, <span class="number">155426784993480</span>, <span class="number">12143333265382547123</span>, <span class="number">140792203111560</span>, <span class="number">12143460985399172467</span>, <span class="number">10983300063372</span>],[<span class="number">12143520799533026603</span>, <span class="number">1545759072</span>, <span class="number">12143520746151921286</span>, <span class="number">781222462020</span>, <span class="number">12143514741528175043</span>, <span class="number">27856210942560</span>, <span class="number">12143440210529480891</span>, <span class="number">150563969013744</span>, <span class="number">12143339455702534403</span>, <span class="number">135941365971840</span>, <span class="number">12143463119774571623</span>, <span class="number">10579745342712</span>],[<span class="number">4857408319806885466</span>, <span class="number">2428704161425648657</span>, <span class="number">12143520747462241175</span>, <span class="number">758851601758</span>, <span class="number">12143514933292307603</span>, <span class="number">7286139389566980165</span>, <span class="number">9714738936567334300</span>, <span class="number">144947557513044</span>, <span class="number">12143346444338047691</span>, <span class="number">130561054163540</span>, <span class="number">4857352974113333366</span>, <span class="number">2428714303424782417</span>],[<span class="number">12143520799533339320</span>, <span class="number">1476842796</span>, <span class="number">12143520749060275613</span>, <span class="number">733281428880</span>, <span class="number">12143515144091549812</span>, <span class="number">25896324662208</span>, <span class="number">12143446129977471347</span>, <span class="number">139126289668080</span>, <span class="number">12143353609086952433</span>, <span class="number">125093278125816</span>, <span class="number">12143467808884068695</span>, <span class="number">9705993135696</span>],[<span class="number">3469577371288079926</span>, <span class="number">5204366058378782250</span>, <span class="number">12143520750775862343</span>, <span class="number">706665985740</span>, <span class="number">12143515359139397843</span>, <span class="number">24876891455539</span>, <span class="number">12143449149385190675</span>, <span class="number">5204499435641729607</span>, <span class="number">1734628523990131469</span>, <span class="number">119757210113970</span>, <span class="number">12143470097256549947</span>, <span class="number">9282407958928</span>],[<span class="number">10986995009101166671</span>, <span class="number">1734788687033207505</span>, <span class="number">12143520752514668698</span>, <span class="number">680173911560</span>, <span class="number">12143515570582515443</span>, <span class="number">23883386182656</span>, <span class="number">12143452072344092516</span>, <span class="number">10408859957710764174</span>, <span class="number">8673790006740000925</span>, <span class="number">4047954924507284041</span>, <span class="number">12143472277719610437</span>, <span class="number">8879790035168</span>],[<span class="number">12143520799534210329</span>, <span class="number">8095680534365818753</span>, <span class="number">12143520754224346525</span>, <span class="number">6071761054204856029</span>, <span class="number">12143515774342357443</span>, <span class="number">22931775530664</span>, <span class="number">12143454859049102627</span>, <span class="number">122586336122081</span>, <span class="number">12143373761302849103</span>, <span class="number">109840689548590</span>, <span class="number">8095634066844843878</span>, <span class="number">8500892291801</span>],[<span class="number">2428704159899526175</span>, <span class="number">7286112481016467893</span>, <span class="number">12143520755876491019</span>, <span class="number">629765964828</span>, <span class="number">12143515968446948123</span>, <span class="number">9714838668887734012</span>, <span class="number">4857345013259425502</span>, <span class="number">117630592711632</span>, <span class="number">12143379764863568374</span>, <span class="number">105318302849760</span>, <span class="number">2428659620509049335</span>, <span class="number">7286120625945355053</span>],[<span class="number">7286112479717322389</span>, <span class="number">7286112480971640825</span>, <span class="number">12143520757456628435</span>, <span class="number">606320684970</span>, <span class="number">12143516152115449139</span>, <span class="number">4857429497934652454</span>, <span class="number">4857347490735050126</span>, <span class="number">112978994964264</span>, <span class="number">12143385390297217523</span>, <span class="number">101086824360217</span>, <span class="number">7286069740980100293</span>, <span class="number">7286120294834973633</span>],[<span class="number">7727695054246476847</span>, <span class="number">1202487728</span>, <span class="number">12143520758958480293</span>, <span class="number">584144077140</span>, <span class="number">12143516325240923843</span>, <span class="number">20377952745696</span>, <span class="number">12143462294760579275</span>, <span class="number">108622249048560</span>, <span class="number">12143390651947217363</span>, <span class="number">97133513961120</span>, <span class="number">12143479741445599772</span>, <span class="number">8831658996900830432</span>],[<span class="number">12143520799535388887</span>, <span class="number">1161628182</span>, <span class="number">12143520760380594623</span>, <span class="number">563225247585</span>, <span class="number">12143516488091679443</span>, <span class="number">19626876325056</span>, <span class="number">12143464472820678035</span>, <span class="number">104545135017180</span>, <span class="number">12143395570399006523</span>, <span class="number">93441517429260</span>, <span class="number">12143481309754543787</span>, <span class="number">7218375794633</span>]]<span class="comment"># 12*12</span></span><br><span class="line">p = <span class="number">12143520799543738643</span></span><br><span class="line">c = [[<span class="number">11285847990515095003</span>, <span class="number">7585413350741918021</span>, <span class="number">11658254512436412666</span>, <span class="number">477577914899276103</span>, <span class="number">2941386515764607825</span>, <span class="number">11283325421744133699</span>, <span class="number">4096971712575507616</span>, <span class="number">8118672870538606033</span>, <span class="number">2377937081025778041</span>, <span class="number">6576171711896495163</span>, <span class="number">6152554374963853172</span>, <span class="number">5022013484610428974</span>], [<span class="number">8354008012616001452</span>, <span class="number">7787447107046065118</span>, <span class="number">9504997911333967278</span>, <span class="number">1082773427768571094</span>, <span class="number">6015520658629219637</span>, <span class="number">11244285744740006951</span>, <span class="number">4493944053220750368</span>, <span class="number">3504246247470690014</span>, <span class="number">1738582001618280397</span>, <span class="number">2330057776906622572</span>, <span class="number">3043456814665571080</span>, <span class="number">2981613454022714952</span>], [<span class="number">2508674373714509177</span>, <span class="number">3544963739532775937</span>, <span class="number">7952732753025175616</span>, <span class="number">11161786730565526285</span>, <span class="number">3397123486689639675</span>, <span class="number">6454135592624912854</span>, <span class="number">6613201018024296927</span>, <span class="number">9748485344986779929</span>, <span class="number">1819761609989340766</span>, <span class="number">1259944825407465767</span>, <span class="number">1596049024644778041</span>, <span class="number">7769939905324967788</span>], [<span class="number">4200851163596876950</span>, <span class="number">11960539098651202761</span>, <span class="number">3303721151143544462</span>, <span class="number">2532304102428121556</span>, <span class="number">11083895221097319129</span>, <span class="number">1171933471304558017</span>, <span class="number">1549099593543874478</span>, <span class="number">6088238862927163233</span>, <span class="number">6459553630361959801</span>, <span class="number">947358195425767572</span>, <span class="number">2090533922210134578</span>, <span class="number">9023030120605201052</span>], [<span class="number">2271102089902208138</span>, <span class="number">1614812525306266829</span>, <span class="number">1546249462332047661</span>, <span class="number">3168333397191737100</span>, <span class="number">7678980468150522028</span>, <span class="number">3128939172985153696</span>, <span class="number">1146041044751755224</span>, <span class="number">11870173227065140617</span>, <span class="number">8351303466095252790</span>, <span class="number">694704483676649448</span>, <span class="number">7944218023016968278</span>, <span class="number">583421745603756386</span>], [<span class="number">10309472503110333289</span>, <span class="number">1100598261990718822</span>, <span class="number">10235859400888405310</span>, <span class="number">910925705831020921</span>, <span class="number">10771855884237562064</span>, <span class="number">9970830255165655653</span>, <span class="number">11678899608458971536</span>, <span class="number">4368822164222204233</span>, <span class="number">3104861419162339779</span>, <span class="number">4540709628196554222</span>, <span class="number">7851809145727500968</span>, <span class="number">12086896840826708824</span>], [<span class="number">10973051751637593366</span>, <span class="number">5039073157846327641</span>, <span class="number">4855314857834773443</span>, <span class="number">4416954195828423951</span>, <span class="number">8243966437000815560</span>, <span class="number">8250554263390748131</span>, <span class="number">8093181066366682440</span>, <span class="number">1145520354143718292</span>, <span class="number">294729013023637045</span>, <span class="number">10115389386419597159</span>, <span class="number">2767140395261835843</span>, <span class="number">6724257139233017485</span>], [<span class="number">6878768250003631244</span>, <span class="number">10834164422364241529</span>, <span class="number">6946589221005878489</span>, <span class="number">539734218479521833</span>, <span class="number">2691724062063066048</span>, <span class="number">3989403041446358401</span>, <span class="number">815244541494093987</span>, <span class="number">11168528286389981272</span>, <span class="number">2021358468726921955</span>, <span class="number">1123433019094267521</span>, <span class="number">524639025046508882</span>, <span class="number">5720273332497702547</span>], [<span class="number">6688451244183880831</span>, <span class="number">10892730373179989558</span>, <span class="number">6987453292894341174</span>, <span class="number">5572212176769878684</span>, <span class="number">11332149024403380575</span>, <span class="number">3944612864568504791</span>, <span class="number">6768594304071589280</span>, <span class="number">10526434024562201079</span>, <span class="number">10241323610053039912</span>, <span class="number">1120473558410865753</span>, <span class="number">306153635148226248</span>, <span class="number">3606666063074222104</span>], [<span class="number">7556871914690327290</span>, <span class="number">11353594909211427742</span>, <span class="number">747771112781361153</span>, <span class="number">1245068803956910299</span>, <span class="number">2831489557155431404</span>, <span class="number">1800035620948876551</span>, <span class="number">1050411779595241927</span>, <span class="number">5665981688041778089</span>, <span class="number">2028968510484240787</span>, <span class="number">4386552235402890530</span>, <span class="number">10334391443650474796</span>, <span class="number">3883841302951550608</span>], [<span class="number">4485787817401669404</span>, <span class="number">184501191500952934</span>, <span class="number">3690661645276970957</span>, <span class="number">6263309802498749034</span>, <span class="number">6484490370652685031</span>, <span class="number">9743108369653588026</span>, <span class="number">3045941510087387269</span>, <span class="number">5870433915209047275</span>, <span class="number">4679598273992216016</span>, <span class="number">11839352681285251516</span>, <span class="number">4957980185504231911</span>, <span class="number">7925596893607015470</span>], [<span class="number">1000449712878466719</span>, <span class="number">7022601702937838844</span>, <span class="number">1095849907482791166</span>, <span class="number">11989051568709522226</span>, <span class="number">6768031250066783733</span>, <span class="number">185945517026191241</span>, <span class="number">4280928696740160411</span>, <span class="number">5633542561098902406</span>, <span class="number">10176177574499086410</span>, <span class="number">5782837249861240943</span>, <span class="number">7406530879613861823</span>, <span class="number">1971858224839520916</span>]]</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line">A = Matrix(GF(p), n, n, A)</span><br><span class="line">C = Matrix(GF(p), n, n, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(A.is_diagonalizable())</span></span><br><span class="line">A, P = A.diagonalization()</span><br><span class="line">C = P.inverse()*C*P</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(A[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">b = <span class="built_in">int</span>(C[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">x=discrete_log(mod(b,p),mod(a,p))</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0xGame&#123;&quot;</span> + n2b(x) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;06450201eb6171d40151563d967e59ea&#125;</span></span><br></pre></td></tr></table></figure>
<p>当然，如果你取的元素的阶小于secret，就得不到正确结果，不过多试几组就行了，并且本题中第一个元素就能满足要求。</p>
<p><br></p>
<p><br></p>
<h3 id="Week-3-EzOverflow"><a href="#Week-3-EzOverflow" class="headerlink" title="[Week 3] EzOverflow"></a>[Week 3] EzOverflow</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真正意义上的签“到”题 </span><br><span class="line"></span><br><span class="line">Hint 1: 密码当然也要做代码审计！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>Elgamal.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,GCD,inverse,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    g = getPrime(bits//<span class="number">2</span>)</span><br><span class="line">    d = random.randint(<span class="number">1</span>,p-<span class="number">2</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g,d,p)</span><br><span class="line">    public,private = (p,g,y),d</span><br><span class="line">    <span class="keyword">return</span> public,private</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,public,private</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p,g,y = public</span><br><span class="line">    d = private</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        k = random.randint(<span class="number">1</span>,p-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> GCD(k,p-<span class="number">1</span>)==<span class="number">1</span>:<span class="keyword">break</span></span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p)</span><br><span class="line">    s = ((m-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (r,s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verity</span>(<span class="params">m,sign,public</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p,g,y = public</span><br><span class="line">    r,s = sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g,m,p) == (<span class="built_in">pow</span>(y,r,p)*<span class="built_in">pow</span>(r,s,p)) % p:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ElGamal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> secert <span class="keyword">import</span> flag</span><br><span class="line">pub,pri = getKey(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&#x27;Here are your public key:&#x27;</span>)</span><br><span class="line">        self.send(<span class="built_in">str</span>(pub).encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment">#sign</span></span><br><span class="line">            self.send(<span class="string">b&#x27;Pz tell me what you want to sign?&#x27;</span>)</span><br><span class="line">            message = self.recv()</span><br><span class="line">            <span class="keyword">if</span> message == <span class="string">b&#x27;0xGame&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;Permission denied!&quot;</span>)</span><br><span class="line">                quit()</span><br><span class="line">            self.send(<span class="string">b&#x27;Here are your sign:&#x27;</span>)</span><br><span class="line">            r,s = sign(message,pub,pri)</span><br><span class="line">            self.send(<span class="string">f&#x27;r=<span class="subst">&#123;r&#125;</span>\ns=<span class="subst">&#123;s&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="comment">#ver</span></span><br><span class="line">            self.send(<span class="string">b&#x27;Tell me your signature,if you want to get the flag.&#x27;</span>)</span><br><span class="line">            r = <span class="built_in">int</span>(self.recv())</span><br><span class="line">            s = <span class="built_in">int</span>(self.recv())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> verity(<span class="string">b&#x27;0xGame&#x27;</span>,(r,s),pub):</span><br><span class="line">                self.send(<span class="string">b&#x27;Here you are:&#x27;</span>+flag)</span><br><span class="line">                self.send(<span class="string">b&#x27;bye~&#x27;</span>)</span><br><span class="line">                quit()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;sorry~you can&#x27;t get it.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10007</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>其实是一个考察细心程度的题目。题目要求：</p>
<ul>
<li>传入一个msg，并且msg不能是”0xGame”，靶机会返回对msg的Elgamal签名。</li>
<li>传入一个签名对，要求验签结果与”0xGame”相等。</li>
</ul>
<p>而观察他的Elgamal，可以发现他省略了对msg取哈希的步骤，而直接用了m本身，也就是本身应该取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = ((H(m)-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而他却直接取了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = (m-d*r)*inverse(k,p-<span class="number">1</span>)) % (p-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而m最终会模p-1，因此我们直接求p倍的”0xGame”转成的整数值，再转回字节串发送给靶机，然后直接将靶机返回的签名再传回去就能得到flag了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>, <span class="number">10007</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;public key:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">p,g,y = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line">m = long_to_bytes(bytes_to_long(<span class="string">b&quot;0xGame&quot;</span>)*p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;to sign?&quot;</span>)</span><br><span class="line">r.sendline(m)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;your sign:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">R = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">s = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">r.recvuntil(<span class="string">b&quot;the flag.&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(R).encode())</span><br><span class="line">r.sendline(<span class="built_in">str</span>(s).encode())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;24b6edfdc07d71311774ed15248f434e&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-0xGame-week4-wp-crypto</title>
    <url>/post/4311e802.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h3 id="Week-4-Orac1e"><a href="#Week-4-Orac1e" class="headerlink" title="[Week 4] Orac1e"></a>[Week 4] Orac1e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2011年被Pwnie Rewards被评为“最具有价值的服务器漏洞”。是时候挑战一下real hacking了！</span><br><span class="line"></span><br><span class="line">Hint 1: 强烈建议在本地进行测试，通过之后再来霍霍管理员的小水管！服务器的时间大抵是管够的</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>Serve.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Serve <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line">    tmp = <span class="built_in">len</span>(text)%<span class="number">16</span></span><br><span class="line">    pad_num = <span class="number">16</span> - tmp</span><br><span class="line">    text += (pad_num)*<span class="built_in">bytes</span>([pad_num])</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">text</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(text[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:<span class="keyword">return</span> <span class="string">b&#x27;False&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(text[-i]) != num:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;False&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = text[:-num]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Data update&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plain_text, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    cipher_text = cipher.encrypt(pad(plain_text))</span><br><span class="line">    <span class="keyword">return</span> iv + cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher_text, key</span>):</span><br><span class="line">    iv = cipher_text[:AES.block_size]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    tmp = cipher.decrypt(cipher_text[AES.block_size:])</span><br><span class="line">    result = unpad(tmp)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = get_random_bytes(AES.block_size)</span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">Task</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        enc = encrypt(flag,key)</span><br><span class="line">        self.send(<span class="string">b&#x27;Here are the secert:&#x27;</span>)</span><br><span class="line">        self.send(b64encode(enc))</span><br><span class="line">        self.send(<span class="string">b&#x27;May be you can send something to decrypt it?&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.recv()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.send(decrypt(b64decode(data),key))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10005</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), test)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一个经典的CBC预言填充攻击，详细原理请见我另一篇博客：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/9e0dbdd4.html#more">2023-NewStarCTF-wp-crypto | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>而本题中，由于有300s限时，因此需要一组一组来恢复明文。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>, <span class="number">10005</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;secert:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">c = b64decode(r.recvline().strip())</span><br><span class="line">blocks = [c[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#group3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    message = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    change_block = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    dec_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    block = blocks</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            change_byte = long_to_bytes(i)</span><br><span class="line">            temp = block[<span class="number">2</span>][:<span class="number">15</span>-j] + long_to_bytes(i)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>-j+<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">                temp += long_to_bytes(change_block[k])</span><br><span class="line">            msg = b64encode(block[<span class="number">0</span>] + block[<span class="number">1</span>] + temp + block[<span class="number">3</span>])</span><br><span class="line">            r.sendline(msg)</span><br><span class="line">            res = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;False&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res):</span><br><span class="line">                <span class="keyword">if</span>(j &lt; <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span>(i != block[<span class="number">2</span>][-j-<span class="number">1</span>]):</span><br><span class="line">                        dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                        message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">2</span>][-j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                            change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                    message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">2</span>][-j-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                        change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">break</span> </span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment">#[99, 48, 50, 102, 52, 53, 57, 125, 8, 8, 8, 8, 8, 8, 8, 8]</span></span><br><span class="line"><span class="comment">#c02f459&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#group2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    message = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    change_block = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    dec_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    block = blocks</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            change_byte = long_to_bytes(i)</span><br><span class="line">            temp = block[<span class="number">1</span>][:<span class="number">15</span>-j] + long_to_bytes(i)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>-j+<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">                temp += long_to_bytes(change_block[k])</span><br><span class="line">            msg = b64encode(block[<span class="number">0</span>] + temp + block[<span class="number">1</span>])</span><br><span class="line">            r.sendline(msg)</span><br><span class="line">            res = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;False&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res):</span><br><span class="line">                <span class="keyword">if</span>(j &lt; <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span>(i != block[<span class="number">1</span>][-j-<span class="number">1</span>]):</span><br><span class="line">                        dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                        message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">1</span>][-j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                            change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                    message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">1</span>][-j-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                        change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">break</span> </span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment">#[48, 51, 49, 49, 99, 52, 102, 50, 49, 100, 54, 55, 54, 100, 50, 98]</span></span><br><span class="line"><span class="comment">#0311c4f21d676d2b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    message = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    change_block = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    dec_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    block = blocks</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">            r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            change_byte = long_to_bytes(i)</span><br><span class="line">            temp = block[<span class="number">0</span>][:<span class="number">15</span>-j] + long_to_bytes(i)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>-j+<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">                temp += long_to_bytes(change_block[k])</span><br><span class="line">            msg = b64encode(temp + block[<span class="number">1</span>])</span><br><span class="line">            r.sendline(msg)</span><br><span class="line">            res = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;False&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res):</span><br><span class="line">                <span class="keyword">if</span>(j &lt; <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span>(i != block[<span class="number">0</span>][-j-<span class="number">1</span>]):</span><br><span class="line">                        dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                        message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">0</span>][-j-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                            change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">                    message[<span class="number">15</span>-j] = (dec_list[<span class="number">15</span>-j] ^ block[<span class="number">0</span>][-j-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                        change_block[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">break</span> </span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment">#[0, 0, 0, 0, 0, 0, 123, 52, 55, 53, 98, 49, 97, 55, 99, 52]</span></span><br><span class="line"><span class="comment">#&#123;475b1a7c4</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;475b1a7c40311c4f21d676d2bc02f459&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-4-LLL-Third-Blood"><a href="#Week-4-LLL-Third-Blood" class="headerlink" title="[Week 4] LLL-Third Blood"></a>[Week 4] LLL-Third Blood</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第三滴血，一样的味道，一样的构造，陌生的题目，管理员岂能如此粗心大意！</span><br><span class="line"></span><br><span class="line">Hint 1: 找到数学等式，构造矩阵，LLL启动（枯燥无味的密码学.jpg）</span><br><span class="line"></span><br><span class="line">Hint 2: DSA</span><br><span class="line"></span><br><span class="line">Hint 3: HNP——在0xGame结束之际再签个名呗</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>DSA.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits,randint</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> pri_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.q = getPrime(<span class="number">160</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            tmp = self.q*getrandbits(<span class="number">864</span>)</span><br><span class="line">            <span class="keyword">if</span> isPrime(tmp+<span class="number">1</span>):</span><br><span class="line">                self.p = tmp+<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.x = pri_key</span><br><span class="line">        <span class="keyword">assert</span> self.p%self.q == <span class="number">1</span></span><br><span class="line">        h = randint(<span class="number">1</span>,self.p-<span class="number">1</span>)</span><br><span class="line">        self.g = <span class="built_in">pow</span>(h,(self.p-<span class="number">1</span>)//self.q,self.p)</span><br><span class="line">        self.y = <span class="built_in">pow</span>(self.g,self.x,self.p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self,m</span>):</span><br><span class="line">        H = bytes_to_long(sha1(m).digest())</span><br><span class="line">        k = getrandbits(<span class="number">128</span>)</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g,k,self.p)%self.q</span><br><span class="line">        s = (inverse(k,self.q)*(H+r*self.x))%self.q</span><br><span class="line">        <span class="keyword">return</span> (s,r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self,m,s_,r_</span>):</span><br><span class="line">        H = bytes_to_long(sha1(m).digest())</span><br><span class="line">        u1 = (inverse(s_,self.q)*H)%self.q</span><br><span class="line">        u2 = (inverse(s_,self.q)*r_)%self.q</span><br><span class="line">        r = (<span class="built_in">pow</span>(self.g,u1,self.p)*<span class="built_in">pow</span>(self.y,u2,self.p))%self.p%self.q</span><br><span class="line">        <span class="keyword">if</span> r == r_:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle,choice,randint</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> DSA <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">GAME = DSA()</span><br><span class="line"></span><br><span class="line">MENU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  Welcome_to_Final_Chanllange!</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| [S]ign                     |</span></span><br><span class="line"><span class="string">| [V]erify                   |</span></span><br><span class="line"><span class="string">| [C]heck answer             |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;[!] Wrong!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.send(MENU.encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;Here are your public key:&#x27;</span>)</span><br><span class="line">        self.send(<span class="string">f&#x27;q=<span class="subst">&#123;GAME.q&#125;</span>\np=<span class="subst">&#123;GAME.p&#125;</span>\ng=<span class="subst">&#123;GAME.g&#125;</span>\ny=<span class="subst">&#123;GAME.y&#125;</span>&#x27;</span>.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;What you want to choice?&#x27;</span>)</span><br><span class="line">            code = self.recv()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;S&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;What you want to sign?&#x27;</span>)</span><br><span class="line">                msg = self.recv()</span><br><span class="line">                <span class="keyword">if</span> msg == <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Permission denied!&#x27;</span>)</span><br><span class="line">                    self.send(<span class="string">b&#x27;Are you trying hack me?No way!&#x27;</span>)</span><br><span class="line">                    quit()</span><br><span class="line">                self.send(<span class="string">b&#x27;Here are your signature:&#x27;</span>)</span><br><span class="line">                s,r = GAME.sign(msg)</span><br><span class="line">                self.send(<span class="string">f&#x27;s = <span class="subst">&#123;s&#125;</span>&#x27;</span>.encode())</span><br><span class="line">                self.send(<span class="string">f&#x27;r = <span class="subst">&#123;r&#125;</span>&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;V&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;Let&#x27;s check your signature.&quot;</span>)</span><br><span class="line">                self.send(<span class="string">b&#x27;Tell me your message:&#x27;</span>)</span><br><span class="line">                msg = self.recv()</span><br><span class="line">                self.send(<span class="string">b&#x27;Tell me the signature (s,r):&#x27;</span>)</span><br><span class="line">                s = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                r = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                <span class="keyword">if</span> GAME.verify(msg,s,r):</span><br><span class="line">                    self.send(<span class="string">b&#x27;OK,it work&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Something wrong?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;C&#x27;</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;Tell me the signature of &#x27;admin&#x27;&quot;</span>)</span><br><span class="line">                s = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                r = <span class="built_in">int</span>(self.recv())</span><br><span class="line">                <span class="keyword">if</span> GAME.verify(<span class="string">b&#x27;admin&#x27;</span>,s,r):</span><br><span class="line">                    self.send(<span class="string">b&#x27;Congratulations!You are Master of Cryptography!&#x27;</span>)</span><br><span class="line">                    self.send(<span class="string">b&#x27;Here are your flag:&#x27;</span>)</span><br><span class="line">                    self.send(flag)</span><br><span class="line">                    quit()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;It seems Something wrong?&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10004</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>本题中DSA是标准实现，没有改动过的地方。因此主要分析一下题目任务：</p>
<ul>
<li>连接上靶机后，开始限时300s</li>
<li>通过proof后，靶机下发DSA的公钥(p,q,g,y)，然后开始交互</li>
<li>选择”S”，可以对除了”admin”的任何消息进行签名，并获得签名值(s,r)</li>
<li>选择”V”，可以对消息和签名值进行验签</li>
<li>选择”C”，可以提交一组签名值。如果该签名值与”admin”验签正确，则得到flag</li>
</ul>
<p>而我们不能对”admin”直接签名，因此这道题的主要目的就是还原DSA的私钥x，从而自己构造出符合要求的”admin”的签名并传回靶机。而在时间限定范围内，我们可以申请多组不同签名，因此我们有机会构造出HNP结构来还原私钥。在此之前，还是先介绍一下DSA作为预备知识。</p>
<h4 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h4><p>首先要了解一下DSA的具体签名流程：</p>
<ul>
<li>选取一个素数q，并以q为基础生成一个素数p，满足q整除p-1</li>
<li>生成一个模p下的q阶元素g</li>
<li>选取一个(0,q)的数x作为私钥，并生成y=g^x % p</li>
<li>此时所有密钥生成完毕，公钥为(p、q、g、y)，私钥为x</li>
</ul>
<p>然后是签名与验签过程。</p>
<p>签名：</p>
<ul>
<li>首先生成一个(0,q)的随机数k，k即为本次签名的临时密钥</li>
<li>计算待签名消息m的哈希值H(m)</li>
<li>计算签名值(r,s)如下：</li>
</ul>
<script type="math/tex; mode=display">
r = (g^k \quad (mod\;p)) \quad(mod\;q)</script><script type="math/tex; mode=display">
s =(H(m) + xr)k^{-1} \quad (mod\;q)</script><p>验签：</p>
<ul>
<li>计算待验签消息m的哈希值H(m)，并计算s^(-1) %q</li>
<li>进行如下操作来验证签名是否正确：</li>
</ul>
<script type="math/tex; mode=display">
r = g^{H(m)*s^{-1}}y^{r*s^{-1}} \quad (mod\;p) \quad(mod\;q)</script><p>如果相等则验签正确。</p>
<p>之所以正确，其原理主要是：</p>
<script type="math/tex; mode=display">
k =(H(m) + xr)s^{-1} \quad (mod\;q)</script><p>而由于g是q阶元素，所以有：</p>
<script type="math/tex; mode=display">
g^{a} \equiv g^{a\; modq} \quad (mod\;p)</script><p>因此验签正确性得以证明。</p>
<h4 id="HNP"><a href="#HNP" class="headerlink" title="HNP"></a>HNP</h4><p>那么显然，由DSA的签名流程，我们可以发现一个式子：</p>
<script type="math/tex; mode=display">
s =(H(m) + xr)k^{-1} \quad (mod\;q)</script><p>将其变形为：</p>
<script type="math/tex; mode=display">
k =(H(m) + xr)s^{-1} \quad (mod\;q)</script><p>然后将模等式转化为等式，并展开：</p>
<script type="math/tex; mode=display">
k =(H(m) + xr)s^{-1} + tq</script><script type="math/tex; mode=display">
k =H(m)s^{-1} + xrs^{-1} + tq</script><p>发现可以写成如下形式：</p>
<script type="math/tex; mode=display">
k =(rs^{-1})x + s^{-1}H(m) + tq</script><p>而由于我们可以申请多组签名，而只有临时密钥k改变，私钥x不变，因此有多组如下等式：</p>
<script type="math/tex; mode=display">
k_i =(r_is_i^{-1})x + s_i^{-1}H(m_i) + t_iq</script><p>以这样的多组等式为基础，我们可以构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   q      &      &    &      &      &  &  \\
          &q     &    &      &      &  &  \\
          &      &... &      &      &  &  \\
          &      &    &q     &      &  &  \\
          &      &    &      &q     &  &  \\
  r_1s_1^{-1}   &r_2s_2^{-1} &    &r_{i-1}s_{i-1}^{-1} &r_is_i^{-1} &1 &  \\
  s_1^{-1}H(m_1)      & s_2^{-1}H(m_2)     &    & s_{i-1}^{-1}H(m_{i-1})     & s_i^{-1}H(m_i)     &  &1  \\
  \end{matrix}
  \right)</script><p>这个格具有如下线性关系：</p>
<script type="math/tex; mode=display">
(t_1,t_2,...t_{i-1},t_i,x,1)*
\left(
 \begin{matrix}
   q      &      &    &      &      &  &  \\
          &q     &    &      &      &  &  \\
          &      &... &      &      &  &  \\
          &      &    &q     &      &  &  \\
          &      &    &      &q     &  &  \\
  r_1s_1^{-1}   &r_2s_2^{-1} &    &r_{i-1}s_{i-1}^{-1} &r_is_i^{-1} &1 &  \\
  s_1^{-1}H(m_1)      & s_2^{-1}H(m_2)     &    & s_{i-1}^{-1}H(m_{i-1})     & s_i^{-1}H(m_i)     &  &1  \\
  \end{matrix}
  \right)
  =
  (k_1,k_2,...k_{i-1},k_i,x,1)</script><p>因此LLL就能得到含有x的向量，得到x后就可以自行生成一组正确的对”admin”的签名了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Pwn4Sage.pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256,sha1</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;43.139.107.237&quot;</span>, <span class="number">10004</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;public key:&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">q = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">p = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">g = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line">y = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HNP</span></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;S&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">    m = <span class="built_in">str</span>(i).encode()</span><br><span class="line">    r.sendline(m)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;signature:&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line"></span><br><span class="line">    S = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">4</span>:])</span><br><span class="line">    R = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">4</span>:])</span><br><span class="line">    A.append(inverse(S,q)*R % q)</span><br><span class="line">    B.append(inverse(S,q)*bytes_to_long(sha1(m).digest()) % q)</span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line"><span class="comment">#print(B)</span></span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">128</span></span><br><span class="line">length = <span class="number">100</span></span><br><span class="line">L = Matrix(ZZ, length+<span class="number">2</span>,length+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    L[i,i] = q</span><br><span class="line">    L[length,i] = A[i]</span><br><span class="line">    L[length+<span class="number">1</span>,i] = B[i]</span><br><span class="line">L[length,length] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">res = L.LLL()</span><br><span class="line">x = <span class="built_in">int</span>(res[<span class="number">0</span>][-<span class="number">2</span>])</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sign</span></span><br><span class="line">msg = <span class="string">b&quot;admin&quot;</span></span><br><span class="line">R = g % p % q</span><br><span class="line">S = bytes_to_long(sha1(msg).digest()) + x*R % q</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;C&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(S).encode())</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(R).encode())</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;31260c7522632a69031d07133aedebfe&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Week-4-Danger-Leak"><a href="#Week-4-Danger-Leak" class="headerlink" title="[Week 4] Danger Leak"></a>[Week 4] Danger Leak</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间紧任务重，我们的嗨客情急之下偷到了一部分密钥的信息，但没完全偷完——泪如雨下。幸运的是，我们找到了其中的部分数学关系。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    M = getrandbits(<span class="number">954</span>)</span><br><span class="line">    d0 = getrandbits(<span class="number">70</span>)</span><br><span class="line">    d1 = getrandbits(<span class="number">60</span>)</span><br><span class="line">    d = M * d1 + d0</span><br><span class="line">    e = inverse(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> GCD(d,phi) == <span class="number">1</span>:</span><br><span class="line">    	<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak=<span class="subst">&#123;M&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 20890649807098098590988367504589884104169882461137822700915421138825243082401073285651688396365119177048314378342335630003758801918471770067256781032441408755600222443136442802834673033726750262792591713729454359321085776245901507024843351032181392621160709321235730377105858928038429561563451212831555362084799868396816620900530821649927143675042508754145300235707164480595867159183020730488244523890377494200551982732673420463610420046405496222143863293721127847196315699011480407859245602878759192763358027712666490436877309958694930300881154144262012786388678170041827603485103596258722151867033618346180314221757</span></span><br><span class="line"><span class="string">e = 18495624691004329345494739768139119654869294781001439503228375675656780205533832088551925603457913375965236666248560110824522816405784593622489392063569693980307711273262046178522155150057918004670062638133229511441378857067441808814663979656329118576174389773223672078570346056569568769586136333878585184495900769610485682523713035338815180355226296627023856218662677851691200400870086661825318662718172322697239597148304400050201201957491047654347222946693457784950694119128957010938708457194638164370689969395914866589468077447411160531995194740413950928085824985317114393591961698215667749937880023984967171867149</span></span><br><span class="line"><span class="string">c = 7268748311489430996649583334296342239120976535969890151640528281264037345919563247744198340847622671332165540273927079037288463501586895675652397791211130033797562320858177249657627485568147343368981852295435358970875375601525013288259717232106253656041724174637307915021524904526849025976062174351360431089505898256673035060020871892556020429754849084448428394307414301376699983203262072041951835713075509402291301281337658567437075609144913905526625759374465018684092236818174282777215336979886495053619105951835282087487201593981164477120073864259644978940192351781270609702595767362731320959397657161384681459323</span></span><br><span class="line"><span class="string">leak=136607909840146555806361156873618892240715868885574369629522914036807393164542930308166609104735002945881388216362007941213298888307579692272865700211608126496105057113506756857793463197250909161173116422723246662094695586716106972298428164926993995948528941241037242367190042120886133717</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>并且给出了一篇对应论文。在论文中可以定位到：</p>
<p><img src="/post/4311e802/image-20231023102752510.png" alt="image-20231023102752510"></p>
<p>可以看到，其构造了一个模leak*e下的多项式，并用三元coppersmith求对应小根，求出的小根中，由于z=p+q-1，因此可以分解n。</p>
<p>那么也就是调用一下多元copper的small_root，但是需要将上界稍微设置的松散一点。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"> </span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"> </span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"> </span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"> </span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"> </span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"> </span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"> </span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"> </span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">20890649807098098590988367504589884104169882461137822700915421138825243082401073285651688396365119177048314378342335630003758801918471770067256781032441408755600222443136442802834673033726750262792591713729454359321085776245901507024843351032181392621160709321235730377105858928038429561563451212831555362084799868396816620900530821649927143675042508754145300235707164480595867159183020730488244523890377494200551982732673420463610420046405496222143863293721127847196315699011480407859245602878759192763358027712666490436877309958694930300881154144262012786388678170041827603485103596258722151867033618346180314221757</span></span><br><span class="line">e = <span class="number">18495624691004329345494739768139119654869294781001439503228375675656780205533832088551925603457913375965236666248560110824522816405784593622489392063569693980307711273262046178522155150057918004670062638133229511441378857067441808814663979656329118576174389773223672078570346056569568769586136333878585184495900769610485682523713035338815180355226296627023856218662677851691200400870086661825318662718172322697239597148304400050201201957491047654347222946693457784950694119128957010938708457194638164370689969395914866589468077447411160531995194740413950928085824985317114393591961698215667749937880023984967171867149</span></span><br><span class="line">c = <span class="number">7268748311489430996649583334296342239120976535969890151640528281264037345919563247744198340847622671332165540273927079037288463501586895675652397791211130033797562320858177249657627485568147343368981852295435358970875375601525013288259717232106253656041724174637307915021524904526849025976062174351360431089505898256673035060020871892556020429754849084448428394307414301376699983203262072041951835713075509402291301281337658567437075609144913905526625759374465018684092236818174282777215336979886495053619105951835282087487201593981164477120073864259644978940192351781270609702595767362731320959397657161384681459323</span></span><br><span class="line">leak=<span class="number">136607909840146555806361156873618892240715868885574369629522914036807393164542930308166609104735002945881388216362007941213298888307579692272865700211608126496105057113506756857793463197250909161173116422723246662094695586716106972298428164926993995948528941241037242367190042120886133717</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x,y,z&gt; = PolynomialRing(Zmod(leak*e))</span><br><span class="line">f = e*x - n*y + y*z - <span class="number">1</span></span><br><span class="line">bound = (<span class="number">2</span>^<span class="number">71</span>, <span class="number">2</span>^<span class="number">1020</span>, <span class="number">2</span>^<span class="number">1026</span>)</span><br><span class="line">solves = small_roots(f, bound, m=<span class="number">3</span>,d=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">pplusq = <span class="built_in">int</span>(solves[<span class="number">0</span>][<span class="number">2</span>])+<span class="number">1</span></span><br><span class="line">pminusq = iroot(pplusq**<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p = (pplusq + pminusq)//<span class="number">2</span></span><br><span class="line">q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;a9e1f260f845be84f56ff06b165deb80&#125;</span></span><br></pre></td></tr></table></figure>
<p>其实这道题我自己调参数一直出不了结果，然后询问了出题人，出题人告诉我他的bound设置的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(2^100, 2^1024, 2^1024)</span><br></pre></td></tr></table></figure>
<p>这样确实能出，但是实际上求出的z是大于这个2^1024这个上界的，确实有点奇怪。</p>
<p><br></p>
<p><br></p>
<h3 id="Week-4-Normal-ECC"><a href="#Week-4-Normal-ECC" class="headerlink" title="[Week 4] Normal ECC"></a>[Week 4] Normal ECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">青春Bob梦得到他的电子Alice吗？</span><br><span class="line"></span><br><span class="line">Hint 1: assert E.order() == p</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,M</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MD5</span>(<span class="params">m</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(m).encode()).hexdigest()</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;0xGame&#123;&#x27;</span>+MD5(M[<span class="number">0</span>])+<span class="string">&#x27;&#125;&#x27;</span> == flag</span><br><span class="line">p = <span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">a = <span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">b = <span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line"><span class="keyword">assert</span> p&gt;a</span><br><span class="line"><span class="keyword">assert</span> p&gt;b</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"><span class="keyword">assert</span> E.order() == p</span><br><span class="line">M = E(M)</span><br><span class="line"></span><br><span class="line">G = E.random_point()</span><br><span class="line">k = getPrime(<span class="built_in">int</span>(<span class="number">128</span>))</span><br><span class="line">K = k*G</span><br><span class="line">r = getrandbits(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">C1 = M + r*K</span><br><span class="line">C2 = r*G</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p=<span class="subst">&#123;p&#125;</span>\na=<span class="subst">&#123;a&#125;</span>\nb=<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;G=<span class="subst">&#123;G.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;K=<span class="subst">&#123;K.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;C1=<span class="subst">&#123;C1.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;C2=<span class="subst">&#123;C2.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p=11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line"><span class="string">a=490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line"><span class="string">b=7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line"><span class="string">G=(4045939664332192284605924284905750194599514115248885617006435833400516258314135019849306107002566248677228498859069119557284134574413164612914441502516162, 2847794627838984866808853730797794758944159239755903652092146137932959816137006954045318821531984715562135134681256836794735388745354065994745661832926404)</span></span><br><span class="line"><span class="string">K=(9857925495630886472871072848615069766635115253576843197716242339068269151167072057478472997523547299286363591371734837904400286993818976404285783613138603, 9981865329938877904579306200429599690480093951555010258809210740458120586507638100468722807717390033784290215217185921690103757911870933497240578867679716)</span></span><br><span class="line"><span class="string">C1=(4349662787973529188741615503085571493571434812105745603868205005885464592782536198234863020839759214118594741734453731681116610298272107088387481605173124, 10835708302355425798729392993451337162773253000440566333611610633234929294159743316615308778168947697567386109223430056006489876900001115634567822674333770)</span></span><br><span class="line"><span class="string">C2=(5193866657417498376737132473732737330916570240569047910293144235752602489388092937375844109374780050061859498276712695321973801207620914447727053101524592, 684299154840371832195648774293174908478389728255128448106858267664482339440737099810868633906297465450436417091302739473407943955874648486647511119341978)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目提示就是说明是Smart attack，因此可以有两种思路：</p>
<ul>
<li>Smart attack求出私钥k，然后按正常椭圆曲线解密流程解密得到M</li>
<li>Smart attack直接求出r，然后对应减去rK即可</li>
</ul>
<p>这里我选择的是第一种，更符合椭圆曲线加解密的基本流程，不过区别不大。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MD5</span>(<span class="params">m</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(m).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">p=<span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">a=<span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">b=<span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line">G=(<span class="number">4045939664332192284605924284905750194599514115248885617006435833400516258314135019849306107002566248677228498859069119557284134574413164612914441502516162</span>, <span class="number">2847794627838984866808853730797794758944159239755903652092146137932959816137006954045318821531984715562135134681256836794735388745354065994745661832926404</span>)</span><br><span class="line">K=(<span class="number">9857925495630886472871072848615069766635115253576843197716242339068269151167072057478472997523547299286363591371734837904400286993818976404285783613138603</span>, <span class="number">9981865329938877904579306200429599690480093951555010258809210740458120586507638100468722807717390033784290215217185921690103757911870933497240578867679716</span>)</span><br><span class="line">C1=(<span class="number">4349662787973529188741615503085571493571434812105745603868205005885464592782536198234863020839759214118594741734453731681116610298272107088387481605173124</span>, <span class="number">10835708302355425798729392993451337162773253000440566333611610633234929294159743316615308778168947697567386109223430056006489876900001115634567822674333770</span>)</span><br><span class="line">C2=(<span class="number">5193866657417498376737132473732737330916570240569047910293144235752602489388092937375844109374780050061859498276712695321973801207620914447727053101524592</span>, <span class="number">684299154840371832195648774293174908478389728255128448106858267664482339440737099810868633906297465450436417091302739473407943955874648486647511119341978</span>)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"></span><br><span class="line">P = E(G)</span><br><span class="line">Q = E(K)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">int</span>(SmartAttack(P, Q, p))</span><br><span class="line"></span><br><span class="line">M = E(C1) - k*E(C2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0xGame&#123;&#x27;</span>+MD5( M.xy()[<span class="number">0</span>] )+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0xGame&#123;6f2b3accf11a8cb7a9d3c7b159bc6c6c&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-ACTF-wp-crypto</title>
    <url>/post/818adfc0.html</url>
    <content><![CDATA[<p>*代表赛中未解出的题目，最后一道待复现。</p>
<span id="more"></span>
<h3 id="EasyRSA"><a href="#EasyRSA" class="headerlink" title="EasyRSA"></a>EasyRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EasyRSA</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>(<span class="params">nbits, dbits</span>):</span><br><span class="line">    bbits = (nbits // <span class="number">2</span> - dbits) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(dbits)</span><br><span class="line">        b = getRandomNBitInteger(bbits)</span><br><span class="line">        c = getRandomNBitInteger(bbits)</span><br><span class="line">        p1 = a * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p1):</span><br><span class="line">            <span class="comment"># print(&quot;p1 =&quot;, p1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getRandomNBitInteger(dbits)</span><br><span class="line">        p2 = b * c * d + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p2):</span><br><span class="line">            <span class="comment"># print(&quot;p2 =&quot;, p2)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e = getRandomNBitInteger(bbits)</span><br><span class="line">        f = getRandomNBitInteger(bbits)</span><br><span class="line">        q1 = e * d * f + <span class="number">1</span></span><br><span class="line">        p3 = a * e * f + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q1) <span class="keyword">and</span> isPrime(p3):</span><br><span class="line">            <span class="comment"># print(&quot;p3 =&quot;, p3)</span></span><br><span class="line">            <span class="comment"># print(&quot;q1 =&quot;, q1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d_ = getRandomNBitInteger(dbits)</span><br><span class="line">        <span class="keyword">if</span> GCD(a * b * c * d * e * f, d_) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        e_ = inverse(d_, a * b * c * d * e * f)</span><br><span class="line">        k1 = (e_ * d_ - <span class="number">1</span>) // (a * b * c * d * e * f)</span><br><span class="line">        <span class="keyword">assert</span> e_ * d_ == (a * b * c * d * e * f) * k1 + <span class="number">1</span></span><br><span class="line">        q2 = k1 * e * f + <span class="number">1</span></span><br><span class="line">        q3 = k1 * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q2) <span class="keyword">and</span> isPrime(q3):</span><br><span class="line">            <span class="comment"># print(&quot;q2 =&quot;, q2)</span></span><br><span class="line">            <span class="comment"># print(&quot;q3 =&quot;, q3)</span></span><br><span class="line">            <span class="comment"># print(&quot;e =&quot;, e_)</span></span><br><span class="line">            <span class="comment"># print(&quot;d =&quot;, d_)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    n1 = p1 * q1</span><br><span class="line">    n2 = p2 * q2</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n1), d_, n1) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n2), d_, n2) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n3), d_, n3) == <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(e_, n1, n2, n3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nbits = <span class="number">0x600</span></span><br><span class="line">dbits = <span class="number">0x210</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e, n1, n2, n3 = genKey(nbits, dbits)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>, n3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 63442255298812942222810837512019302954917822996915527697525497640413662503768308023517128481053593562877494934841788054865410798751447333551319775025362132176942795107214528962480350398519459474033659025815248579631003928932688495682277210240277909527931445899728273182691941548330126199931886748296031014210795428593631253184315074234352536885430181103986084755140024577780815130067722355861473639612699372152970688687877075365330095265612016350599320999156644</span></span><br><span class="line"><span class="comment"># e = 272785315258275494478303901715994595013215169713087273945370833673873860340153367010424559026764907254821416435761617347240970711252213646287464416524071944646705551816941437389777294159359383356817408302841561284559712640940354294840597133394851851877857751302209309529938795265777557840238332937938235024502686737802184255165075195042860413556866222562167425361146312096189555572705076252573222261842045286782816083933952875990572937346408235562417656218440227</span></span><br><span class="line"><span class="comment"># n1 = 473173031410877037287927970398347001343136400938581274026578368211539730987889738033351265663756061524526288423355193643110804217683860550767181983527932872361546531994961481442866335447011683462904976896894011884907968495626837219900141842587071512040734664898328709989285205714628355052565784162841441867556282849760230635164284802614010844226671736675222842060257156860013384955769045790763119616939897544697150710631300004180868397245728064351907334273953201</span></span><br><span class="line"><span class="comment"># n2 = 327163771871802208683424470007561712270872666244394076667663345333853591836596054597471607916850284565474732679392694515656845653581599800514388800663813830528483334021178531162556250468743461443904645773493383915711571062775922446922917130005772040139744330987272549252540089872170217864935146429898458644025927741607569303966038195226388964722300472005107075179204987774627759625183739199425329481632596633992804636690274844290983438078815836605603147141262181</span></span><br><span class="line"><span class="comment"># n3 = 442893163857502334109676162774199722362644200933618691728267162172376730137502879609506615568680508257973678725536472848428042122350184530077765734033425406055810373669798840851851090476687785235612051747082232947418290952863499263547598032467577778461061567081620676910480684540883879257518083587862219344609851852177109722186714811329766477552794034774928983660538381764930765795290189612024799300768559485810526074992569676241537503405494203262336327709010421</span></span><br></pre></td></tr></table></figure>
<p>题目给了三组n，其关系如下：</p>
<script type="math/tex; mode=display">
n_1 = (abc+1)(def+1)</script><script type="math/tex; mode=display">
n_2 = (bcd+1)(k_1ef+1)</script><script type="math/tex; mode=display">
n_3 = (aef+1)(k_1bc+1)</script><p>其中，各参数的数量级约为：</p>
<script type="math/tex; mode=display">
a,d : 538bit</script><script type="math/tex; mode=display">
b,c,e,f,k_1 : 120bit</script><p>并且有如下关系式：</p>
<script type="math/tex; mode=display">
ed' = 1 + k_1\phi(n_1) = 1 + k_1abcdef</script><p>其中d’是指解密所用的私钥，数量级也为538比特，注意与前一个d区分。</p>
<p>然后，题目将flag用e与n1加密，给出密文，要求我们还原明文。而很容易知道，如果我们能够拥有n1的分解，或者直接求出解密密钥d’，都可以求出flag。</p>
<p>看到这些参数应该自然会想到连分数，比如有：</p>
<script type="math/tex; mode=display">
\frac{n_2}{n_3} = \frac{(bcd+1)(k_1ef+1)}{(aef+1)(k_1bc+1)} \approx \frac{bcdk_1ef}{aefk_1bc} = \frac{d}{a}</script><p>因此期望是从n2/n3的连分数展开后得到a、d，然后用二元copper解出n的分解。</p>
<p>但是实际验证之后会发现，d/a并不是n2/n3的收敛子，这一点也可以用勒让德定理验证得到。那么就得换思路。由题目知道以下式子：</p>
<script type="math/tex; mode=display">
ed' = 1 + k_1\phi(n_1)</script><script type="math/tex; mode=display">
ed' = 1 + a\phi(n_2)</script><script type="math/tex; mode=display">
ed' = 1 + d\phi(n_3)</script><p>可以发现这其实也是一种共私钥攻击，我们采取以下推导，最终构造出格。</p>
<p>首先由于没有phi，只有n，因此先展开式子：</p>
<script type="math/tex; mode=display">
ed' = 1 + k_1(n_1 - (abc + def) + 1)</script><script type="math/tex; mode=display">
ed' = 1 + a(n_2 - (bcd + k_1ef) + 1)</script><script type="math/tex; mode=display">
ed' = 1 + d(n_3 - (aef + k_1bc) + 1)</script><p>由这几个关系式出发，我们可以构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   K &e &e &e \\
     &-n_1&& \\
     &&-n_2& \\
     &&&-n_3 \\
  \end{matrix}
  \right)</script><p>这个格具有如下关系式：</p>
<script type="math/tex; mode=display">
(d',k_1,a,d)
\left(
 \begin{matrix}
   K &e &e &e \\
     &-n_1&& \\
     &&-n_2& \\
     &&& -n_3 \\
  \end{matrix}
  \right)
  =
  (Kd',1+k_1 - k_1(abc+def),1+a - a(bcd+k_1ef),1+d - d(aef+k_1bc))</script><p>其中，K是为了使规约出的向量中每个值数量级相当而配的系数，其实也就约为nbits/2。如此一来对该格进行规约就能得到私钥d’，从而解密密文。其实这也就是共私钥攻击的规约过程。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">0x600</span></span><br><span class="line">dbits = <span class="number">0x210</span></span><br><span class="line">c = <span class="number">63442255298812942222810837512019302954917822996915527697525497640413662503768308023517128481053593562877494934841788054865410798751447333551319775025362132176942795107214528962480350398519459474033659025815248579631003928932688495682277210240277909527931445899728273182691941548330126199931886748296031014210795428593631253184315074234352536885430181103986084755140024577780815130067722355861473639612699372152970688687877075365330095265612016350599320999156644</span></span><br><span class="line">e = <span class="number">272785315258275494478303901715994595013215169713087273945370833673873860340153367010424559026764907254821416435761617347240970711252213646287464416524071944646705551816941437389777294159359383356817408302841561284559712640940354294840597133394851851877857751302209309529938795265777557840238332937938235024502686737802184255165075195042860413556866222562167425361146312096189555572705076252573222261842045286782816083933952875990572937346408235562417656218440227</span></span><br><span class="line">n1 = <span class="number">473173031410877037287927970398347001343136400938581274026578368211539730987889738033351265663756061524526288423355193643110804217683860550767181983527932872361546531994961481442866335447011683462904976896894011884907968495626837219900141842587071512040734664898328709989285205714628355052565784162841441867556282849760230635164284802614010844226671736675222842060257156860013384955769045790763119616939897544697150710631300004180868397245728064351907334273953201</span></span><br><span class="line">n2 = <span class="number">327163771871802208683424470007561712270872666244394076667663345333853591836596054597471607916850284565474732679392694515656845653581599800514388800663813830528483334021178531162556250468743461443904645773493383915711571062775922446922917130005772040139744330987272549252540089872170217864935146429898458644025927741607569303966038195226388964722300472005107075179204987774627759625183739199425329481632596633992804636690274844290983438078815836605603147141262181</span></span><br><span class="line">n3 = <span class="number">442893163857502334109676162774199722362644200933618691728267162172376730137502879609506615568680508257973678725536472848428042122350184530077765734033425406055810373669798840851851090476687785235612051747082232947418290952863499263547598032467577778461061567081620676910480684540883879257518083587862219344609851852177109722186714811329766477552794034774928983660538381764930765795290189612024799300768559485810526074992569676241537503405494203262336327709010421</span></span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^(nbits//<span class="number">2</span>)</span><br><span class="line">L = matrix(ZZ,<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">L[<span class="number">0</span>]=[K,e,e,e]</span><br><span class="line">L[<span class="number">1</span>]=[<span class="number">0</span>,-n1,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">L[<span class="number">2</span>]=[<span class="number">0</span>,<span class="number">0</span>,-n2,<span class="number">0</span>]</span><br><span class="line">L[<span class="number">3</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n3]</span><br><span class="line"></span><br><span class="line">res=L.LLL()[<span class="number">0</span>]</span><br><span class="line">d = <span class="built_in">abs</span>(res[<span class="number">0</span>])//K</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n1))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#ACTF&#123;5FFC427B-F14F-DCA0-C425-675B149890C2&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="MDH"><a href="#MDH" class="headerlink" title="MDH"></a>MDH</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Malin’s Diffile-Hellman Key Exchange.</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">r = <span class="number">128</span></span><br><span class="line">c = <span class="number">96</span></span><br><span class="line">p = <span class="number">308955606868885551120230861462612873078105583047156930179459717798715109629</span></span><br><span class="line">Fp = GF(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    a1 = random_matrix(Fp, r, c)</span><br><span class="line">    a2 = random_matrix(Fp, r, c)</span><br><span class="line">    A = a1 * a2.T</span><br><span class="line">    <span class="keyword">return</span> (a1, a2), A</span><br><span class="line"></span><br><span class="line">sk_alice, pk_alice = gen()</span><br><span class="line">sk_bob, pk_bob = gen()</span><br><span class="line">shared = (sk_alice[<span class="number">0</span>].T * pk_bob * sk_alice[<span class="number">1</span>]).trace()</span><br><span class="line">ct = <span class="built_in">int</span>(sha256(<span class="built_in">str</span>(<span class="built_in">int</span>(shared)).encode()).hexdigest(), <span class="number">16</span>) ^^ <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(ct).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">list</span>(pk_alice)).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">list</span>(pk_bob)).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>复习一下矩阵trace的性质就好了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">308955606868885551120230861462612873078105583047156930179459717798715109629</span></span><br><span class="line">c = <span class="number">8308943029741424587523612386337754255889681699670071706719724435165094611096603769021839263</span></span><br><span class="line">A = </span><br><span class="line">B = </span><br><span class="line"></span><br><span class="line">A = matrix(GF(p),A)</span><br><span class="line">B = matrix(GF(p),B)</span><br><span class="line">A = A.transpose()</span><br><span class="line"></span><br><span class="line">shared = (A*B).trace()</span><br><span class="line">m = c ^^ <span class="built_in">int</span>(sha256(<span class="built_in">str</span>(<span class="built_in">int</span>(shared)).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#ACTF&#123;do_you_know_f0rm2l1n_1s_4w3s0m3!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="claw-crane"><a href="#claw-crane" class="headerlink" title="*claw crane"></a>*claw crane</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">抓娃娃咯 / Grabbing Dolls</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> (</span><br><span class="line">    bytes_to_long, long_to_bytes</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> os, signal</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClawCrane</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.seed = bytes_to_long(os.urandom(BITS//<span class="number">8</span>))</span><br><span class="line">        self.bless = <span class="number">0</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_input</span>(<span class="params">self, prompt=<span class="string">&quot;&gt; &quot;</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(prompt, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_pos</span>(<span class="params">self, pos, moves</span>):</span><br><span class="line">        col, row = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> move <span class="keyword">in</span> moves:</span><br><span class="line">            <span class="keyword">if</span> move == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> row &lt; <span class="number">15</span>: row += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;S&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> row &gt; <span class="number">0</span>: row -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> col &gt; <span class="number">0</span>: col -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> col &lt; <span class="number">15</span>: col += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(col, row)</span><br><span class="line">        <span class="keyword">return</span> pos == [col, row]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_chaos</span>(<span class="params">self, inp</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> x==<span class="string">&#x27;W&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="string">&#x27;S&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="string">&#x27;A&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">            <span class="keyword">if</span> x==<span class="string">&#x27;D&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">        vs = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(mapping, inp)), <span class="number">4</span>)</span><br><span class="line">        chaos = bytes_to_long(md5(</span><br><span class="line">                    long_to_bytes((self.seed + vs) % <span class="built_in">pow</span>(<span class="number">2</span>,BITS))</span><br><span class="line">                ).digest())</span><br><span class="line">        self.seed = (self.seed + chaos + <span class="number">1</span>) % <span class="built_in">pow</span>(<span class="number">2</span>,BITS)</span><br><span class="line">        <span class="keyword">return</span> chaos</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destiny_claw</span>(<span class="params">self, delta</span>):</span><br><span class="line">        bits = <span class="built_in">bin</span>(delta)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bits) &lt; <span class="number">128</span>+self.bless:</span><br><span class="line">            bits += <span class="string">&quot;0&quot;</span>*(<span class="number">128</span>+self.bless - <span class="built_in">len</span>(bits))</span><br><span class="line">        c = random.choice(bits)</span><br><span class="line">        <span class="keyword">if</span> c==<span class="string">&#x27;0&#x27;</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        pos = [random.randrange(<span class="number">1</span>,<span class="number">16</span>), random.randrange(<span class="number">1</span>,<span class="number">16</span>)]</span><br><span class="line">        moves = self.get_input(<span class="string">f&quot;i am at <span class="subst">&#123;pos&#125;</span>, claw me.\nYour moves: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(moves) &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;too many steps&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_pos(pos, moves):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sorry, clawed nothing&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        r = self.gen_chaos(moves[:<span class="number">64</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;choas: <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">        p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, self.get_input(<span class="string">f&quot;give me your claw using p,q and p,q in [0, 18446744073709551615] (e.g.: 1,1): &quot;</span>).split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (p&gt;<span class="number">0</span> <span class="keyword">and</span> p&lt;<span class="built_in">pow</span>(<span class="number">2</span>,BITS//<span class="number">2</span>) <span class="keyword">and</span> q&gt;<span class="number">0</span> <span class="keyword">and</span> q&lt;<span class="built_in">pow</span>(<span class="number">2</span>,BITS//<span class="number">2</span>)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not in range&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        delta = <span class="built_in">abs</span>(r*q - p*<span class="built_in">pow</span>(<span class="number">2</span>,BITS))</span><br><span class="line">        <span class="keyword">if</span> self.destiny_claw(delta):</span><br><span class="line">            self.score += <span class="number">10</span></span><br><span class="line">            self.bless = <span class="number">0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;you clawed it&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.bless += <span class="number">16</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sorry, clawed nothing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_proof_of_work</span>(<span class="params">size,difficulty</span>):</span><br><span class="line">    target = os.urandom(size).<span class="built_in">hex</span>()</span><br><span class="line">    hash_value = hashlib.sha1(target.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> target[difficulty:],hash_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_proof_of_work</span>(<span class="params">prefix,suffix,expected</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span><span class="subst">&#123;suffix&#125;</span>&#x27;</span>.encode()).hexdigest()==expected</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    POW_SIZE=<span class="number">32</span></span><br><span class="line">    POW_DIFFICULTY=<span class="number">6</span></span><br><span class="line">    suff,hs=generate_proof_of_work(POW_SIZE,POW_DIFFICULTY)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;sha1(prefix+&quot;<span class="subst">&#123;suff&#125;</span>&quot;)==<span class="subst">&#123;hs&#125;</span>&#x27;</span>)</span><br><span class="line">    pref=<span class="built_in">input</span>(<span class="string">&quot;prefix = ?\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_proof_of_work(pref,suff,hs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PoW error&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    signal.alarm(<span class="number">600</span>)</span><br><span class="line">    proof()</span><br><span class="line">    cc = ClawCrane()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cc.run()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;your score: <span class="subst">&#123;cc.score&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;abort&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cc.score &gt;= <span class="number">2220</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;<span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>简单说一下题目任务：</p>
<ul>
<li>连接上靶机后，计时600s开始。先通过proof，然后初始化一个随机数种子seed</li>
<li>有256次交互机会，交互成功得10分，否则不得分</li>
<li>交互成功次数大于等于222次，得到flag</li>
</ul>
<p>然后交互成功在本题中的含义为：</p>
<ul>
<li>首先，每次随机生成一个娃娃的坐标，需要先输入一段move序列使其移动到对应地方</li>
<li>然后用该段move序列与seed做一定计算后得到一个值chaos并返回，同时更新seed。由于chaos的计算是md5得到，因此可以看作是一个完全随机的数</li>
<li>输入q、p，要求q、p的范围在(1,2^64)之间，然后计算：</li>
</ul>
<script type="math/tex; mode=display">
delta = q*chaos - 2^{128}p</script><ul>
<li>对于计算得到的delta，服务器先判断其是否小于128比特，如果小于，则填充0至满128比特；否则不填充</li>
<li>从delta对应的二进制串中随机抽取，抽到0则交互成功，得到10分；抽到1则不得分</li>
</ul>
<p>接下来讲我的几个尝试：</p>
<h4 id="尝试一"><a href="#尝试一" class="headerlink" title="尝试一"></a>尝试一</h4><p>首先能看出，要尽量得到更多的分数，就需要使delta中0的数量尽可能多，而由于靶机会对其进行0的填充，因此第一个想法很自然：<strong>使delta尽可能小，就可以填充更多的0。</strong></p>
<p>那么自然就会想到LLL来规约出短向量，我们构造如下的格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 & &r \\
     &1&-K\\
  \end{matrix}
  \right)</script><p>很显然这个格具有如下线性关系：</p>
<script type="math/tex; mode=display">
(q,p)*
\left(
 \begin{matrix}
   1 & &r \\
     &1&-K\\
  \end{matrix}
  \right)
  =
  (q,p,delta)</script><p>而这样规约出的q、p可以说刚好落在题目要求区间内，而delta大概为64比特的数量级，因此可以认为平均会填充64比特0，而把delta的前64比特近似看作是均匀的分布的话，那么靶机端抽取0的概率大约是四分之三左右。</p>
<p>而其实我们可以把256次的完整交互过程抽象为一个二项分布，那么我们可以计算一下这个二项分布实验中，成功222次及以上的概率。有个现成的计算器可以使用：</p>
<p><a href="https://www.osgeo.cn/app/s0059">二项分布在线计算,在线计算,在线计算器,计算器在线计算 (osgeo.cn)</a></p>
<p>可以计算出成功率约为十万分之一，而由生日攻击的理论可以知道，我们如果能完整的交互十万次，就有大于50%的概率至少成功一次。</p>
<p>然而，由于有格的计算，加上本身一次交互就需要一定时间，一分钟其实最多就交互个两三次，因此交互十万次基本是不可能的。并且赛中为了防止生日攻击，还特意加上了proof_of_work，所以我们需要想一想办法，压缩交互时间，并且提高delta中0的概率。</p>
<h4 id="尝试二"><a href="#尝试二" class="headerlink" title="尝试二"></a>尝试二</h4><p>其实细想一下就会发现，思路一有一个很明显的不等价关系：</p>
<p><strong>delta中0的个数占比尽量多，不等价于delta尽量小</strong></p>
<p>而如果开始就想到了格，基本很难从这个思路中跳出去了。那么又能怎么样让delta中0的个数多一点呢？其实也比较容易就可以想到这样的q、p：</p>
<script type="math/tex; mode=display">
q = 2^{63} , p =1</script><p>而为什么这样0的数量也不少呢？因为其实乘2的k次方等价于移位操作，也就是说，现在的delta：</p>
<script type="math/tex; mode=display">
delta = 2^{63}r - 2^{128}</script><p>那么显然delta低位也全是0，不过这样delta会超过128比特，仍然近似的看的话，这样抽中0的概率其实只有三分之二，反而是降低了，不过由于没有格的规约过程，速度肯定变快了，但是仍然几乎不可能成功222次以上。</p>
<h4 id="尝试三"><a href="#尝试三" class="headerlink" title="尝试三"></a>尝试三</h4><p>但是想到尝试二，基本离成功不远了。</p>
<p>先看看尝试二的缺点，他仅仅利用了q使r移位，却没有利用上p，而p显然是可以有作用的。比如，我们取p为r的高位部分(从第二位开始取，这样能保证delta的数量级依然是190比特左右)，那么这个时候的delta：</p>
<script type="math/tex; mode=display">
delta = 2^{63}r - r_{high}2^{128}</script><p>因此可以把r的高位部分也对应消掉，这样就只剩中间一部分还有1了，而此时我们每一次的成功概率就达到了六分之五，用二项分布计算出每一次成功概率就有0.057019，而由生日攻击知道，我们只需要完整交互不到20次，就有大概率得到结果了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    table = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">    temp = sh.recvuntil(<span class="string">b&quot;sha1(prefix+&quot;</span>)</span><br><span class="line">    temp = sh.recvline().strip().decode()</span><br><span class="line">    suffix = temp[<span class="number">1</span>:<span class="number">59</span>]</span><br><span class="line">    hex1 = temp[-<span class="number">40</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">                    <span class="keyword">for</span> o <span class="keyword">in</span> table:</span><br><span class="line">                        <span class="keyword">for</span> p <span class="keyword">in</span> table:</span><br><span class="line">                            temp1 = i+j+k+m+o+p</span><br><span class="line">                            <span class="keyword">if</span>(sha1((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">                                sh.sendline(temp1.encode())</span><br><span class="line">                                <span class="keyword">return</span></span><br><span class="line">					</span><br><span class="line">average = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    K = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">    <span class="comment">#sh = remote(&quot;120.46.65.156&quot;,19991)</span></span><br><span class="line">    sh = remote(<span class="string">&quot;152.136.172.227&quot;</span>,<span class="number">22222</span>)</span><br><span class="line">    proof_of_work()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">        sh.recvuntil(<span class="string">b&quot; am at &quot;</span>)</span><br><span class="line">        pos = <span class="built_in">eval</span>(sh.recvline().strip().decode().split(<span class="string">&quot;]&quot;</span>)[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">        move = <span class="string">b&quot;W&quot;</span> * <span class="number">15</span> + <span class="string">b&quot;S&quot;</span> * <span class="number">15</span> + <span class="string">b&quot;W&quot;</span> * pos[<span class="number">1</span>] + <span class="string">b&quot;D&quot;</span> * pos[<span class="number">0</span>]</span><br><span class="line">        sh.sendline(move)</span><br><span class="line">        sh.recvuntil(<span class="string">b&quot;choas: &quot;</span>)</span><br><span class="line">        r = <span class="built_in">int</span>(sh.recvline().strip().decode())</span><br><span class="line">        q = <span class="number">2</span>**<span class="number">63</span></span><br><span class="line">        shift = <span class="built_in">len</span>(<span class="built_in">bin</span>(r)[<span class="number">2</span>:]) - <span class="number">65</span> - <span class="number">1</span></span><br><span class="line">        p = (r &gt;&gt; <span class="number">65</span>) &amp;((<span class="number">1</span>&lt;&lt;shift)-<span class="number">1</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">b&quot;(e.g.: 1,1):&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(p).encode() + <span class="string">b&quot;,&quot;</span> + <span class="built_in">str</span>(q).encode())</span><br><span class="line">        sh.recvline()</span><br><span class="line">    temp = sh.recvline().strip().decode()</span><br><span class="line">    average += <span class="built_in">int</span>(temp[-<span class="number">4</span>:])</span><br><span class="line">    <span class="built_in">print</span>(temp,<span class="string">&quot;average =&quot;</span>,average // count)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;22&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(sh.recvline().strip().decode())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#ACTF&#123;C0Nt1nu3d_Fract1on&amp;Mor3_zer0s&amp;Replay_it&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h4><p>赛后经过师傅提醒，其实仔细一点看代码的话，可以发现每次随机生成娃娃机的坐标后，我们是先输入一段move序列，做完娃娃机移动，然后才取move的前64个去进行chaos的运算。也就是说，前64个move输入是我们可以随意控制的。我们也就能够通过控制move的前64个，来保持chaos不变，从而先刷出一组delta0含量最高的，再进行完整256次交互，就可以更大概率得到高分了(不太理解如何控制chaos不变的师傅可以问我)。</p>
<p><br></p>
<p><br></p>
<h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="*MidRSA"></a>*MidRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MidRSA</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>(<span class="params">nbits, dbits</span>):</span><br><span class="line">    bbits = (nbits // <span class="number">2</span> - dbits) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(dbits)</span><br><span class="line">        b = getRandomNBitInteger(bbits)</span><br><span class="line">        c = getRandomNBitInteger(bbits)</span><br><span class="line">        p1 = a * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p1):</span><br><span class="line">            <span class="comment"># print(&quot;p1 =&quot;, p1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getRandomNBitInteger(dbits)</span><br><span class="line">        p2 = b * c * d + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p2):</span><br><span class="line">            <span class="comment"># print(&quot;p2 =&quot;, p2)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e = getRandomNBitInteger(bbits)</span><br><span class="line">        f = getRandomNBitInteger(bbits)</span><br><span class="line">        q1 = e * d * f + <span class="number">1</span></span><br><span class="line">        p3 = a * e * f + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q1) <span class="keyword">and</span> isPrime(p3):</span><br><span class="line">            <span class="comment"># print(&quot;p3 =&quot;, p3)</span></span><br><span class="line">            <span class="comment"># print(&quot;q1 =&quot;, q1)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d_ = getRandomNBitInteger(dbits)</span><br><span class="line">        <span class="keyword">if</span> GCD(a * b * c * d * e * f, d_) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        e_ = inverse(d_, a * b * c * d * e * f)</span><br><span class="line">        k1 = (e_ * d_ - <span class="number">1</span>) // (a * b * c * d * e * f)</span><br><span class="line">        <span class="keyword">assert</span> e_ * d_ == (a * b * c * d * e * f) * k1 + <span class="number">1</span></span><br><span class="line">        q2 = k1 * e * f + <span class="number">1</span></span><br><span class="line">        q3 = k1 * b * c + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q2) <span class="keyword">and</span> isPrime(q3):</span><br><span class="line">            <span class="comment"># print(&quot;q2 =&quot;, q2)</span></span><br><span class="line">            <span class="comment"># print(&quot;q3 =&quot;, q3)</span></span><br><span class="line">            <span class="comment"># print(&quot;e =&quot;, e_)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d_)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    n1 = p1 * q1</span><br><span class="line">    n2 = p2 * q2</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n1), d_, n1) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n2), d_, n2) == <span class="number">0xdeadbeef</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e_, n3), d_, n3) == <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(e_, n1, n2, n3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nbits = <span class="number">0x600</span></span><br><span class="line">dbits = <span class="number">0x240</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e, n1, n2, n3 = genKey(nbits, dbits)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>, n3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 598823083137858565473505718525815255620672892612784824187302545127574115000325539999824374357957135208478070797113625659118825530731575573239221853507638809719397849963861367352055486212696958923800593172417262351719477530809870735637329898331854130533160020420263724619225174940214193740379571953951059401685115164634005411478583529751890781498407518739069969017597521632392997743956791839564573371955246955738575593780508817401390102856295102225132502636316844</span></span><br><span class="line"><span class="comment"># e = 334726528702628887205076146544909357751287869200972341824248480332256143541098971600873722567713812425364296038771650383962046800505086167635487091757206238206029361844181642521606953049529231154613145553220809927001722518303114599682529196697410089598230645579658906203453435640824934159645602447676974027474924465177723434855318446073578465621382859962701578350462059764095163424218813852195709023435581237538699769359084386399099644884006684995755938605201771</span></span><br><span class="line"><span class="comment"># n1 = 621786427956510577894657745225233425730501124908354697121702414978035232119311662357181409283130180887720760732555757426221953950475736078765267856308595870951635246720750862259255389006679454647170476427262240270915881126875224574474706572728931213060252787326765271752969318854360970801540289807965575654629288558728966771231501959974533484678236051025940684114262451777094234017210230731492336480895879764397821363102224085859281971513276968559080593778873231</span></span><br><span class="line"><span class="comment"># n2 = 335133378611627373902246132362791381335635839627660359611198202073307340179794138179041524058800936207811546752188713855950891460382258433727589232119735602364790267515558352318957355100518427499530387075144776790492766973547088838586041648900788325902589777445641895775357091753360428198189998860317775077739054298868885308909495601041757108114540069950359802851809227248145281594107487276003206931533768902437356652676341735882783415106786497390475670647453821</span></span><br><span class="line"><span class="comment"># n3 = 220290953009399899705676642623181513318918775662713704923101352853965768389363281894663344270979715555659079125651553079702318700200824118622766698792556506368153467944348604006011828780474050012010677204862020009069971864222175380878120025727369117819196954091417740367068284457817961773989542151049465711430065838517386380261817772422927774945414543880659243592749932727798690742051285364898081188510009069286094647222933710799481899960520270189522155672272451</span></span><br></pre></td></tr></table></figure>
<p>相比EasyRSA一题，这一题唯一的改变就是d的比特数增加了48，而也正如想象的一样，这样增加过后，我们刚才的格无法直接规约出来了。</p>
<p>而之所以无法规约出来，直观的感觉就是规约后的最短向量由于d的比特变大而变长了，而我们构造的格却并没有什么变化。更进一步的讲，<strong>我们构造的格和目标向量的关系不再满足高斯启发式。</strong></p>
<p>有关高斯启发式可以参考这篇：</p>
<p><a href="https://blog.csdn.net/u010883831/article/details/121401895">【精选】高斯启发式Gaussian Heuristic 格理论相关知识-CSDN博客</a></p>
<p>这里我们提出最核心的部分：</p>
<p><img src="/post/818adfc0/image-20231101224740836.png" alt="image-20231101224740836"></p>
<p>也就是说，对于一个构造好的格，我们可以计算他的高斯启发式的近似，来大概知道其最短向量应该小于什么数量级。比如说，我们对于第一题的格，按如下方式计算其高斯启发式的近似值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guass_Heuristic</span>(<span class="params">L</span>):</span><br><span class="line">    n = L.nrows()</span><br><span class="line">    efficient = (n/(<span class="number">2</span>*math.pi*math.e))**(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(efficient*iroot(<span class="built_in">abs</span>(L.det()),n)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(guass_Heuristic(L).bit_length())</span><br></pre></td></tr></table></figure>
<p>可以得到约为1342比特。</p>
<p>而我们已知第一题的目标向量中的四个值数量级均为(nbits//2 + dbits)，约为1296左右，所以自然可以规约出这个短向量。</p>
<p>而第二题中，我们用同样的方法，计算其高斯启发式，计算出约为1341比特。这也很容易想清楚，因为构造的这个行列式的数量级只与n的比特有关，所以基本不变。然而，由于d的比特增大了，我们的目标向量的数量级经计算达到了1344比特，可以看出，我们的界被卡了。也就是说，我们的数量级不再满足高斯启发式近似，所以继续使用这个格而不进行改变的话，我们没有办法规约出目标向量。</p>
<p>那么怎么修改格呢？由于我们的目标向量基本不会有大变化，因此我们要从增大格的高斯启发式近似入手，所以我们可以考虑爆破d的一部分比特，如下：</p>
<p>仍然由关系式：</p>
<script type="math/tex; mode=display">
ed = 1 + k_i\phi(n_i)</script><p>展开得：</p>
<script type="math/tex; mode=display">
e(2^sd_h + d_l) = 1+k_i\phi(n_i)</script><p>把待爆破的低位dl单独写出，就能造出以下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   2^sK &2^se &2^se &2^se &0 \\
     &-n_1&& \\
     &&-n_2& \\
     &&&-n_3 \\
   0  &ed_l&ed_l&ed_l &2^{t} \\
  \end{matrix}
  \right)</script><p>其中t为dbits + (nbits/2)，仍然是为了使规约出的格数量级相当，这个格具有如下关系式：</p>
<script type="math/tex; mode=display">
(d_h,k_1,k_2,k_3,1)*
\left(
 \begin{matrix}
   2^sK &2^se &2^se &2^se &0 \\
     &-n_1&& \\
     &&-n_2& \\
     &&&-n_3 \\
   0  &ed_l&ed_l&ed_l &2^{t} \\
  \end{matrix}
  \right)
  =
  (2^sKd_h,t_1,t_2,t_3,2^t)</script><p>ti的具体含义参考EasyRSA。</p>
<p>而经过计算与测试，爆破14比特的话，我们的高斯启发式能达到1345比特，就超过了我们目标向量的长度，因此我们就能规约出dh了，对应相加dl就有完整的d用于解密。当然，这些计算都是基于数量级的近似，实际上我们需要的是一个数值，所以爆破更多位，理论上来说高斯启发式会更大，也就会更容易规约出目标向量。但是耗时也会越久。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">0x600</span></span><br><span class="line">dbits = <span class="number">0x240</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">598823083137858565473505718525815255620672892612784824187302545127574115000325539999824374357957135208478070797113625659118825530731575573239221853507638809719397849963861367352055486212696958923800593172417262351719477530809870735637329898331854130533160020420263724619225174940214193740379571953951059401685115164634005411478583529751890781498407518739069969017597521632392997743956791839564573371955246955738575593780508817401390102856295102225132502636316844</span></span><br><span class="line">e = <span class="number">334726528702628887205076146544909357751287869200972341824248480332256143541098971600873722567713812425364296038771650383962046800505086167635487091757206238206029361844181642521606953049529231154613145553220809927001722518303114599682529196697410089598230645579658906203453435640824934159645602447676974027474924465177723434855318446073578465621382859962701578350462059764095163424218813852195709023435581237538699769359084386399099644884006684995755938605201771</span></span><br><span class="line">n1 = <span class="number">621786427956510577894657745225233425730501124908354697121702414978035232119311662357181409283130180887720760732555757426221953950475736078765267856308595870951635246720750862259255389006679454647170476427262240270915881126875224574474706572728931213060252787326765271752969318854360970801540289807965575654629288558728966771231501959974533484678236051025940684114262451777094234017210230731492336480895879764397821363102224085859281971513276968559080593778873231</span></span><br><span class="line">n2 = <span class="number">335133378611627373902246132362791381335635839627660359611198202073307340179794138179041524058800936207811546752188713855950891460382258433727589232119735602364790267515558352318957355100518427499530387075144776790492766973547088838586041648900788325902589777445641895775357091753360428198189998860317775077739054298868885308909495601041757108114540069950359802851809227248145281594107487276003206931533768902437356652676341735882783415106786497390475670647453821</span></span><br><span class="line">n3 = <span class="number">220290953009399899705676642623181513318918775662713704923101352853965768389363281894663344270979715555659079125651553079702318700200824118622766698792556506368153467944348604006011828780474050012010677204862020009069971864222175380878120025727369117819196954091417740367068284457817961773989542151049465711430065838517386380261817772422927774945414543880659243592749932727798690742051285364898081188510009069286094647222933710799481899960520270189522155672272451</span></span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^(nbits//<span class="number">2</span>)</span><br><span class="line">L = matrix(ZZ,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">shift = <span class="number">2</span>^<span class="number">16</span></span><br><span class="line"><span class="keyword">for</span> dl <span class="keyword">in</span> trange(shift):</span><br><span class="line">    L[<span class="number">0</span>]=[K*shift,shift*e,shift*e,shift*e,<span class="number">0</span>          ]</span><br><span class="line">    L[<span class="number">1</span>]=[<span class="number">0</span>      ,-n1    ,<span class="number">0</span>      ,<span class="number">0</span>      ,<span class="number">0</span>          ]</span><br><span class="line">    L[<span class="number">2</span>]=[<span class="number">0</span>      ,<span class="number">0</span>      ,-n2    ,<span class="number">0</span>      ,<span class="number">0</span>          ]</span><br><span class="line">    L[<span class="number">3</span>]=[<span class="number">0</span>      ,<span class="number">0</span>      ,<span class="number">0</span>      ,-n3    ,<span class="number">0</span>          ]</span><br><span class="line">    L[<span class="number">4</span>]=[<span class="number">0</span>      ,e*dl   ,e*dl   ,e*dl   ,K*(<span class="number">2</span>^dbits)]</span><br><span class="line"></span><br><span class="line">    res=L.LLL()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>] &gt; <span class="number">0</span>):</span><br><span class="line">        d = <span class="built_in">abs</span>(res[<span class="number">0</span>])//K + dl</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = <span class="built_in">abs</span>(res[<span class="number">0</span>])//K - dl</span><br><span class="line"></span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n1)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;ACTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ACTF&#123;D16C46D9-77A2-2D96-CA51-4538EFB6AFF7&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CRCRC"><a href="#CRCRC" class="headerlink" title="*CRCRC"></a>*CRCRC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No desCRCiption</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc128</span>(<span class="params">data, poly = <span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = (<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            crc = (crc &gt;&gt; <span class="number">1</span>) ^ (poly &amp; -(crc &amp; <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> crc ^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./flag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.readline()</span><br><span class="line"></span><br><span class="line">YourInput = <span class="built_in">input</span>().encode()</span><br><span class="line">YourDecode = b64decode(YourInput, validate=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(YourDecode))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(YourDecode) &lt;= <span class="number">127</span> <span class="keyword">and</span> YourDecode.startswith(<span class="string">b&#x27;Dear guest, welcome to CRCRC Magic House, If you input &#x27;</span>) <span class="keyword">and</span> YourDecode.endswith(<span class="string">b&quot;, you will get 0x9c6a11fbc0e97b1fff5844fa88b1ee2d&quot;</span>)</span><br><span class="line"></span><br><span class="line">YourCRC = crc128(YourInput)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(YourCRC))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(YourCRC) == <span class="number">0x9c6a11fbc0e97b1fff5844fa88b1ee2d</span>:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>在查找了很多资料，以及认识的师傅的大力帮助下，总算是把这题搞明白了大概。接下来我就用我的语言阐述一下我对这道题目的理解，可能会有不是很严谨的地方，如果有错误欢迎各位师傅指出。</p>
<p>主要参考：</p>
<p><a href="https://blog.csdn.net/qq_41626232/article/details/134124395?spm=1001.2014.3001.5502">ACTF2023 Cypto-CSDN博客</a></p>
<p><a href="https://tl2cents.github.io/2022/11/01/Hacker-Game-2022-出题记/">HackerGame 2022 出题记 | tl2cents blog</a></p>
<p>那么首先弄清楚题目任务，其实描述也很简单，其实就是输入一串base64，使其满足以下要求：</p>
<ul>
<li>base64解密后，长度小于等于127，且前缀与后缀要是给定的一段文本</li>
<li>该base64进行CRC128加密后的值需要是0x9c6a11fbc0e97b1fff5844fa88b1ee2d</li>
</ul>
<p>如果我们输入的base64串能满足这两个要求，就能得到flag。那么精简一下，问题其实就是：</p>
<p><strong>如何寻找一个字符均在base64码表中的CRC值原像？</strong></p>
<p>我在接下来会把这个问题拆分为两个问题分别解释：<strong>如何由CRC值求解明文？如何求解限定范围内的明文？</strong></p>
<h4 id="由CRC值反解明文"><a href="#由CRC值反解明文" class="headerlink" title="由CRC值反解明文"></a>由CRC值反解明文</h4><p>从不可加密的异世界的wp中，可以知道CRC128的一个很重要的特殊性质：如果明文的差分固定，那么CRC加密得到的密文的差分也是固定的。在这里，我们将差分定义为两个值的异或值，比如a和b的差分为：</p>
<script type="math/tex; mode=display">
\Delta = a \oplus b</script><p>那么刚才所说的差分固定的意思，用表达式写出就是：</p>
<script type="math/tex; mode=display">
\Delta = a \oplus b</script><script type="math/tex; mode=display">
\Delta' = CRC(a) \oplus CRC(b)</script><p>也就是说，对于任意的a、b，只要a与b的差分相同，那么两者分别CRC加密后，得到的密文差分也相同。那么这一点对我们反解CRC有什么帮助呢？</p>
<p>我们假设a的比特长度为l，那么不妨将上式的b取为<script type="math/tex">0^l</script>，也就是与a长度相同的全0比特串，代入刚才的式子就有：</p>
<script type="math/tex; mode=display">
\Delta = a \oplus 0^l = a</script><script type="math/tex; mode=display">
\Delta' = CRC(a) \oplus CRC(0^l)</script><p>那么朴素的想法是：如果我们能建立所有长度为l的比特串a的差分对照表，我们就能很轻松的解出a。举个简单的例子，如果l=2，我们就可以分别计算00,01,10,11与00的差分与CRC值，从而建立一个差分对照表：</p>
<script type="math/tex; mode=display">
\Delta \rightarrow \Delta'</script><p>有了完整的差分对照表后，如果我们获得一个CRC(a)值，想要获取a，就很简单。我们只需要计算CRC(a)与CRC(0^l)的差分delta’，然后查表找到对应明文差分delta，其实也就是a了。</p>
<p>但是同时也可以想到，这只能在l较小时实现。而假如我们输入的a是128比特，那我们想要建立完整的差分对照表，就需要计算2^128种情况，显然是不可能的，这时候就需要想别的办法。</p>
<p>而注意到CRC128其实都是线性操作，那么我们只要用l组基向量的组合，就可以表示出所有的长度为l的向量。</p>
<p>也就是说，假设我们需要输入的a是l比特，我们就可以用如下的l组标准正交基向量，来张成所有a：</p>
<script type="math/tex; mode=display">
v_i=(0,\ldots,1,\ldots,0)\quad i\in1,2,3,\ldots,l</script><p>而我们把这每组基向量也视为明文，求出他们的差分delta’：</p>
<script type="math/tex; mode=display">
\Delta_i' = CRC(v_i) \oplus CRC(0^l)</script><p>那么我们也能得到l组计算差分后的基向量，可以想到，这个差分后的基向量也能张成一个空间，而这两个空间其实就形成了我们需要的差分对照表，只是现在变成矩阵表示如下：</p>
<script type="math/tex; mode=display">
Ma = CRC(a) \oplus CRC(0^l)</script><p>其中，M就是我们计算得到的所有差分基向量组成的矩阵，a是我们需要求解的长度为l的明文，，右侧是我们已知的向量。所以我们求解矩阵方程，就能求出给定CRC值的一个解向量a。</p>
<p>这一部分内容的具体实现如下，是不可加密的异世界的wp中的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crc128</span>(<span class="params">data, poly=<span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = (<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            crc = (crc &gt;&gt; <span class="number">1</span>) ^^ (poly &amp; -(crc &amp; <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> crc ^^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equivalent_affine_crc</span>(<span class="params">crc = crc128, crc_bits = <span class="number">128</span>, target_bytes = <span class="number">16</span></span>):</span><br><span class="line">    zero_crc = crc(target_bytes*<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    target_bits = <span class="number">8</span> * target_bytes</span><br><span class="line">    v2n = <span class="keyword">lambda</span> v: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, v)), <span class="number">2</span>)</span><br><span class="line">    n2v = <span class="keyword">lambda</span> n: vector(GF(<span class="number">2</span>), <span class="built_in">bin</span>(n)[<span class="number">2</span>:].zfill(crc_bits))</span><br><span class="line">    <span class="comment"># n2v_t = lambda n: vector(GF(2), bin(n)[2:].zfill(target_bits))</span></span><br><span class="line">    Affine_Matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target_bits):</span><br><span class="line">        v = vector(GF(<span class="number">2</span>), (j == i <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(target_bits)))</span><br><span class="line">        value = crc(long_to_bytes(v2n(v),target_bytes)) ^^ zero_crc</span><br><span class="line">        Affine_Matrix.append(n2v(value))</span><br><span class="line">    <span class="comment"># crc affine function: crc_128(x) = M*x+ C</span></span><br><span class="line">    <span class="keyword">return</span> matrix(GF(<span class="number">2</span>),Affine_Matrix).transpose(), n2v(zero_crc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc_128_reverse</span>(<span class="params">crc_value</span>):</span><br><span class="line">    M , C = equivalent_affine_crc()</span><br><span class="line">    <span class="comment"># crc affine function: crc_128(x) = M*x+ C</span></span><br><span class="line">    v2n = <span class="keyword">lambda</span> v: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, v)), <span class="number">2</span>)</span><br><span class="line">    n2v = <span class="keyword">lambda</span> n: vector(GF(<span class="number">2</span>), <span class="built_in">bin</span>(n)[<span class="number">2</span>:].zfill(<span class="number">128</span>))</span><br><span class="line">    res = M.solve_right(n2v(crc_value)+C)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(v2n(res),<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>而看wp也能知道，这部分其实被集成在了一个python包里，只需要一个没有限制的解的话，直接调用即可：</p>
<p><a href="https://pypi.org/project/crcsolver/">crcsolver · PyPI</a></p>
<h4 id="限制明文在指定范围内"><a href="#限制明文在指定范围内" class="headerlink" title="限制明文在指定范围内"></a>限制明文在指定范围内</h4><p>而题目要求我们解出的明文均为base64码表内的字符，相当于加了一个限制条件。而无论是直接掉包，还是用刚才的代码解矩阵，都只能得到一个特解。</p>
<p>因此，我们需要限制解空间，并用矩阵的右核M去与特解做组合，从而找到符合要求的解。具体来说，既然我们需要解出的明文是base64字符，而大小写字母都在base64字符表内，且ASCII码的二进制开头均为01，那么我们就可以根据这个限制解空间。接下来就继续详细说下怎么限制。</p>
<p>首先，我们要尽可能让我们的解空间大一点，才能找到符合要求的解。而由于解码后长度要小于等于127，并且前后缀已经有55+49=104的长度，我们能在中间填充的base64其实计算出来最多也只能有30个字符。因此，先假定我们就取30个字符，也就是240比特，对应来说就是240个GF(2)上的变量。把这240个变量组成的向量称为x，然后首先由关系式：</p>
<script type="math/tex; mode=display">
Mx = CRC(x) \oplus CRC(0^{240})</script><p>我们把右边的向量记作是C向量，其长度为128，也就是：</p>
<script type="math/tex; mode=display">
M_{128*240}x_{240*1} = C_{128*1}</script><p>而由于我们想要限制30个字节的前2比特，因此我们给M加上30*2行，每行在对应比特处置1，其余置0。相应的，C也就要加上60行，分别是01、01、……</p>
<p>如此一来矩阵就变化成了：</p>
<script type="math/tex; mode=display">
M'_{188*240}x_{240*1} = C'_{188*1}</script><p>我们用如下函数求出一组特解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = M.solve_right(C)</span><br></pre></td></tr></table></figure>
<p>用如下函数求出M的右核空间(也就是使得Mv=0的所有向量v的集合，可以想到v+x也都是矩阵方程的解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basis = M.right_kernel()</span><br></pre></td></tr></table></figure>
<p>然后与通解分别组合，并用正则表达式判断是否有符合要求的解出现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.fullmatch(<span class="string">b&#x27;[A-Za-z0-9+/]*&#x27;</span>, s)</span><br></pre></td></tr></table></figure>
<p>由此就可以求出一组符合要求的解了。</p>
<h4 id="最终求解"><a href="#最终求解" class="headerlink" title="最终求解"></a>最终求解</h4><p>但是，虽然解决了主要问题，但是仍然有一个地方还不太清楚，那就是：我们得到的CRC值是完整的base64串的CRC，而不是我们填充部分单独的CRC，因此我们其实还没有需要求解的方程的C以及M，那么怎么办呢？</p>
<p>这个部分我仍然是是参考了这篇：<a href="https://blog.csdn.net/qq_41626232/article/details/134124395?spm=1001.2014.3001.5502">ACTF2023 Cypto-CSDN博客</a>，具体一点讲，观察crc128的函数本身：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crc128</span>(<span class="params">data, poly = <span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = (<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            crc = (crc &gt;&gt; <span class="number">1</span>) ^ (poly &amp; -(crc &amp; <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> crc ^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到，他是逐字节的线性操作，并且有了明文的话，整个过程其实可逆。而观察完整的base64串的形式：</p>
<p><img src="/post/818adfc0/image-20231031200220840.png" alt="image-20231031200220840"></p>
<p>我们期望获得1、2处的CRC对应值，从而我们可以将1处的值作为填充部分加密的起点，将2处的值作为填充部分加密后得到的CRC值。如此一来我们就能建立M矩阵、得到C向量，从而求解符合要求的x。而得到这两部分的值是容易的：要得到1处的值，只需要对base64前缀进行CRC加密；要得到2处的值，只需要将给定的最终CRC值与base64做一遍CRC逆操作就行。如此我们就可以矩阵方程得到需要的满足要求的填充了。</p>
<p>同时，在求解过程中会注意到，如果我们真的取30个字节，虽然解空间变大了，但是M的右核空间也变得很大，这样较难组合出一组解。而考虑到base64的解密过程，我们要想减少填充字节数，就要4字节4字节的减少，因此我们将待求的x定为26个字节，这样就能很快组合出一组符合要求的解了。</p>
<p>exp(很多函数我都是直接改的参考文章中的)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc128</span>(<span class="params">data, poly = <span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = (<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            crc = (crc &gt;&gt; <span class="number">1</span>) ^^ (poly &amp; -(crc &amp; <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> crc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_crc128</span>(<span class="params">data, crc, poly = <span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = crc ^^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(crc)[<span class="number">2</span>:]) &lt; <span class="number">128</span>:</span><br><span class="line">                crc = crc &lt;&lt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                crc = ((crc ^^ poly) &lt;&lt; <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">        crc ^^= b</span><br><span class="line">    <span class="keyword">return</span> crc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc128_</span>(<span class="params">data, poly=<span class="number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):</span><br><span class="line">    crc = crc128(c1)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            crc = (crc &gt;&gt; <span class="number">1</span>) ^^ (poly &amp; -(crc &amp; <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> crc ^^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equivalent_affine_crc</span>(<span class="params">crc_func, crc_bits, bytes_num</span>):</span><br><span class="line">    zero_crc = crc_func(bytes_num*<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    target_bits = <span class="number">8</span> * bytes_num</span><br><span class="line">    v2n = <span class="keyword">lambda</span> v: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, v)), <span class="number">2</span>)</span><br><span class="line">    n2v = <span class="keyword">lambda</span> n: vector(GF(<span class="number">2</span>), <span class="built_in">bin</span>(n)[<span class="number">2</span>:].zfill(crc_bits))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Basic Matrix</span></span><br><span class="line">    Affine_Matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target_bits):</span><br><span class="line">        v = vector(GF(<span class="number">2</span>), (j == i <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(target_bits)))</span><br><span class="line">        value = crc_func(long_to_bytes(v2n(v),bytes_num)) ^^ zero_crc</span><br><span class="line">        Affine_Matrix.append(n2v(value))</span><br><span class="line">    Affine_Matrix=matrix(GF(<span class="number">2</span>),Affine_Matrix).transpose()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Add constraints</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bytes_num):</span><br><span class="line">        v,w = [<span class="number">0</span>]*target_bits,[<span class="number">0</span>]*target_bits</span><br><span class="line">        v[i*<span class="number">8</span>],w[i*<span class="number">8</span>+<span class="number">1</span>]=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">        v = vector(GF(<span class="number">2</span>), v)</span><br><span class="line">        w = vector(GF(<span class="number">2</span>), w)</span><br><span class="line">        Affine_Matrix = Affine_Matrix.stack(v)</span><br><span class="line">        Affine_Matrix = Affine_Matrix.stack(w)</span><br><span class="line">    <span class="keyword">return</span> Affine_Matrix, n2v(zero_crc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc_128_reverse</span>(<span class="params">crc_value,bytes_num</span>):</span><br><span class="line">    M , C = equivalent_affine_crc(crc128_,<span class="number">128</span>,bytes_num)</span><br><span class="line">    v2n = <span class="keyword">lambda</span> v: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, v)), <span class="number">2</span>)</span><br><span class="line">    n2v = <span class="keyword">lambda</span> n: vector(GF(<span class="number">2</span>), <span class="built_in">bin</span>(n)[<span class="number">2</span>:].zfill(<span class="number">128</span>))</span><br><span class="line">    x = <span class="built_in">list</span>(n2v(crc_value) + C) + [<span class="number">0</span>,<span class="number">1</span>]*bytes_num</span><br><span class="line">    x = vector(GF(<span class="number">2</span>),x)</span><br><span class="line">    res = M.solve_right(x)</span><br><span class="line">    bas = M.right_kernel()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Find solution</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="built_in">len</span>(bas)):</span><br><span class="line">        tr = res+bas[i]</span><br><span class="line">        s = long_to_bytes(v2n(tr))</span><br><span class="line">        <span class="keyword">if</span> re.fullmatch(<span class="string">b&#x27;[A-Za-z0-9+/]*&#x27;</span>, s):</span><br><span class="line">            <span class="keyword">if</span>(check(s)):</span><br><span class="line">                <span class="built_in">print</span>(c1 + s + c2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">return</span> (crc128(c1 + c + c2) ^^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>)) == target</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">b&#x27;Dear guest, welcome to CRCRC Magic House, If you input &#x27;</span></span><br><span class="line">suffix = <span class="string">b&quot;, you will get 0x9c6a11fbc0e97b1fff5844fa88b1ee2d&quot;</span></span><br><span class="line">c1 = b64encode(prefix)[:-<span class="number">2</span>]</span><br><span class="line">c2 = b64encode(suffix)</span><br><span class="line">target = <span class="number">0x9c6a11fbc0e97b1fff5844fa88b1ee2d</span></span><br><span class="line">target2 = re_crc128(c2,target)</span><br><span class="line"></span><br><span class="line">bytes_num = <span class="number">26</span></span><br><span class="line">crc_128_reverse(target2 ^^ ((<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>),bytes_num)</span><br></pre></td></tr></table></figure>
<p>通过这题收获了很多。</p>
<p><br></p>
<p><br></p>
<h3 id="mt-speedrun"><a href="#mt-speedrun" class="headerlink" title="*mt_speedrun"></a>*mt_speedrun</h3><p>待复现</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-crypto</title>
    <url>/post/795314c1.html</url>
    <content><![CDATA[<p>要给自己学校的招新赛出题了，于是混进CNSS招新赛前的夏令营找找出题灵感，不得不说，很多题目都出的很不错，难度与知识点控制的很好，于是在此记录一下。</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/795314c1/image-20230916080626025.png" alt="image-20230916080626025"></p>
<h2 id="Crypto-Guideline"><a href="#Crypto-Guideline" class="headerlink" title="Crypto Guideline"></a>Crypto Guideline</h2><p>签到题，标志着crypto方向题目的开始，直接提交flag即可。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Welcome to the world of cryptography!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cyclic-group"><a href="#cyclic-group" class="headerlink" title="cyclic group"></a>cyclic group</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以找到我藏在循环群中的flag吗？</span><br></pre></td></tr></table></figure>
<p>题目内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  <span class="comment">## secret is a local file, flag is unknown to you</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = getPrime(<span class="number">512</span>)</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    c *= m   </span><br><span class="line">    c %= p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line"><span class="string">e = 12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line"><span class="string">c = 46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，实际上就是：</p>
<script type="math/tex; mode=display">
m^e\equiv c\quad (mod\;p)</script><p>因此直接幂乘e关于p-1的逆元即可。而本题的题目名字cyclic group指代的是循环群，在这里即是在说，由于模数p为素数，那么群Z*(p)的阶就为p-1，因此其中任意一个元素满足：</p>
<script type="math/tex; mode=display">
a^{p-1} \equiv 1 \quad (mod\;p)</script><p>因此可以直接求指数关于p-1的逆元求解题目。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">134994058501022133829793113756450648798182080773931273262418798773562440624857106163310596590759607340807163876539520282102901165977612358002331391089851066812663281502398201018663717659213732276911585751665516661301930410244101046617666467321456930120075263141242119953757880295718825254018040413826880843763</span></span><br><span class="line">e = <span class="number">12927587515508549311645504126259938927362775210786958053823827936884288861306268493761629822045846148118653977616493302703588300283111036739875491883808759</span></span><br><span class="line">c = <span class="number">46583597391505868783218970830156160405763802889228578452060606957717500160663392513770581781157233604314178955789908254475724009921579917780127649365498088467948777432657442293331639740286781008682662602974865442032279819833194544535317410041738966384493317240586005380761492762248899523164168679218802048162</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Unbelievable! You know the key of cyclic group!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码Ⅰ"><a href="#cnss娘的代码Ⅰ" class="headerlink" title="cnss娘的代码Ⅰ"></a>cnss娘的代码Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘写了一段感觉意义不明的代码，你能帮她找到flag吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key.append(getPrime(<span class="number">128</span>))</span><br><span class="line">    </span><br><span class="line">secret = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    secret.append(m % key[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key =&#x27;</span>, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret =&#x27;</span>, secret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key = [179283057970236760812385016853348861313, 243730152305882610684268424505624182831, 276375013783217805474364273321195364813, 338363147025326331069698214354955107607]</span></span><br><span class="line"><span class="string">secret = [42312333420922777926503668120694248887, 188911830445106862831548334980052602782, 202272400826094059912187609891368651300, 16939666639933430404336668949000187621]</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>简洁明了地考察中国剩余定理。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line">key = [<span class="number">179283057970236760812385016853348861313</span>, <span class="number">243730152305882610684268424505624182831</span>, <span class="number">276375013783217805474364273321195364813</span>, <span class="number">338363147025326331069698214354955107607</span>]</span><br><span class="line">secret = [<span class="number">42312333420922777926503668120694248887</span>, <span class="number">188911830445106862831548334980052602782</span>, <span class="number">202272400826094059912187609891368651300</span>, <span class="number">16939666639933430404336668949000187621</span>]</span><br><span class="line"></span><br><span class="line">M = crt(key,secret)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Wow!Chinese remainder theorem is so interseting!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅰ"><a href="#RSA-Ⅰ" class="headerlink" title="RSA Ⅰ"></a>RSA Ⅰ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can you factorize n ?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p|mask)</span><br><span class="line"><span class="built_in">print</span>(p&amp;mask)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = 64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line"><span class="comment">#n = 106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line"><span class="comment">#mask = 12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line"><span class="comment">#13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line"><span class="comment">#11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br></pre></td></tr></table></figure>
<p>题目给了n的一个素因子p与mask的&amp;及|位运算结果，那么对于每一位，可以简单枚举一下所有可能性：</p>
<ul>
<li>&amp;运算为1，则p该位为1</li>
<li>&amp;运算为0，|运算为1，则当mask该位为1时，p该位为0；当mask该位为0时，p该位为1</li>
<li>&amp;运算为0，|运算为0，则p该位为0</li>
</ul>
<p>因此可以还原p的所有比特位，进而解密RSA。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">64949799997326584007544788513993497249594769744995858720976935000014197232306799968807213667255871030075230919683627404813038995304033226711042639925325815395252041199650244620814678407788637241064396318107929964286966081900052163098825412222835465966640369222321472659135622216530966800717417560715221275591</span></span><br><span class="line">n = <span class="number">106750680418525866311589462967145265327203310954735134383588573660691518247034803380198999333962213971657327515092895034635965957228036264848532931376595751503164297061094511187060069380048933807326213369464059701069965785612620370291933800122445966488267918733547599024267999872488061941892122230382138042783</span></span><br><span class="line">mask = <span class="number">12270330408774238331968219216635392599519489634111741706590917012819298856158311310855782884352875794146685141255943386189197362902992928716839082520848927</span></span><br><span class="line">gift1 = <span class="number">13112112110892990771168306272793201342028151601627796725313855804865001339738164412798270175076178951452110894792943424133718769511979832250960465757056799</span></span><br><span class="line">gift2 = <span class="number">11731832079629748669705816329667815638461774924918417348984676937048335348013101619038697983623814812736529127108466295988845879378764866277739393693264401</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">strmask = <span class="built_in">bin</span>(mask)[<span class="number">2</span>:]</span><br><span class="line">strgift1 = <span class="built_in">bin</span>(gift1)[<span class="number">2</span>:]</span><br><span class="line">strgift2 = <span class="built_in">bin</span>(gift2)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">strp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strmask)):</span><br><span class="line">    <span class="keyword">if</span>(strgift2[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">        strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(strgift1[i] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> strmask[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            strp.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(strp),<span class="number">2</span>)</span><br><span class="line">q= n//p       </span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{1t_s33ms_bit_is_useful}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅱ"><a href="#cnss娘的代码-Ⅱ" class="headerlink" title="cnss娘的代码 Ⅱ"></a>cnss娘的代码 Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在研究一类数论中的难题，你可以帮助她吗？</span><br><span class="line">Hint: SageMath的使用可以让你事半功倍</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, m, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br></pre></td></tr></table></figure>
<p>直接用sage求解离散对数即可。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">149223181221309438217142971731290162048502071683234438807455153639165894737664410172266260056805353255967638568356843140306590887937</span></span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="number">106414500627466044750537699496116452216938505790285966641538755230718107434518035561502262320845803494959251547594598724676292650073</span></span><br><span class="line"></span><br><span class="line">m=discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Congratulation! You crack the DLP problem!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="cnss娘的代码-Ⅲ"><a href="#cnss娘的代码-Ⅲ" class="headerlink" title="cnss娘的代码 Ⅲ"></a>cnss娘的代码 Ⅲ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnss娘最近在学习线性代数，你可以帮她解出这道题吗？</span><br><span class="line">Hint:Sage 中自带有 Matrix 和 Vector 类。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag  </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">40</span></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">u = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">40</span>, <span class="number">5</span>):</span><br><span class="line">    u.append(bytes_to_long(flag[i:i+<span class="number">5</span>]))</span><br><span class="line">u = vector(u)</span><br><span class="line">A = random_matrix(Zmod(p), <span class="number">8</span>)</span><br><span class="line">v = u * A</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A =&#x27;</span>, A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;v =&#x27;</span>, v)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A = [7907672172473958392 4938237561047760432 5072996306459844921  800347085054263333 2241217299487989740 5452520396763079026 7354205761061650589 5632270298193588206]</span></span><br><span class="line"><span class="string">[6856262700627435223 7218982369550725117 3069216736555490147 9043167152368671477 6651431740452419751 2904199636400840775 1984801523985180355 9424612078019686546]</span></span><br><span class="line"><span class="string">[ 190015986177831045  594687507332748466 2546708346651205091 3864956414971412519 2586812319675472372 2541554633306459284 2840981234492698127  400426130440806923]</span></span><br><span class="line"><span class="string">[ 354930743948767363  374079227033274174 7821379197355217415 4073976921774664952 8974661879090783904 8725597754431417139 1723115467249027682  914056616366301410]</span></span><br><span class="line"><span class="string">[9032929938905307703  569436029465728354 3230536280479973685 9499318835507740454  460664783708095350 3815328100857956310 6866516203996475375 9142528333783640721]</span></span><br><span class="line"><span class="string">[6647724854667560614 1564543033588842443  980081446425820918 4482664640152609224 9361385831487208956 5729265277086036438 8521779175294512538 7872078731489374461]</span></span><br><span class="line"><span class="string">[2426759667632064565 2564361116290067541 5109836057988930695 3948680632682199428 8561341181219447072 5099840518920477627 9347277712921710222 4364598388067284951]</span></span><br><span class="line"><span class="string">[2143804620259054744 4318231909289693782 6284698432978577252 5529804751795288609 7903556036971407808 3730126758887833322 8782120630459581951 9050476736532525999]</span></span><br><span class="line"><span class="string">v = (4088048241727106122, 258857328202723850, 7303598013681209756, 3446975206276714926, 176458751236949790, 8151363680348349027, 8771366063042882128, 9003511237633705064)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直接在sage中求解逆矩阵即可</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9536720961414799253</span></span><br><span class="line">A = [[<span class="number">7907672172473958392</span>,<span class="number">4938237561047760432</span>,<span class="number">5072996306459844921</span>,<span class="number">800347085054263333</span>,<span class="number">2241217299487989740</span>,<span class="number">5452520396763079026</span>,<span class="number">7354205761061650589</span>,<span class="number">5632270298193588206</span>],</span><br><span class="line">[<span class="number">6856262700627435223</span>,<span class="number">7218982369550725117</span>,<span class="number">3069216736555490147</span>,<span class="number">9043167152368671477</span>,<span class="number">6651431740452419751</span>,<span class="number">2904199636400840775</span>,<span class="number">1984801523985180355</span>,<span class="number">9424612078019686546</span>],</span><br><span class="line">[<span class="number">190015986177831045</span>,<span class="number">594687507332748466</span>,<span class="number">2546708346651205091</span>,<span class="number">3864956414971412519</span>,<span class="number">2586812319675472372</span>,<span class="number">2541554633306459284</span>,<span class="number">2840981234492698127</span>,<span class="number">400426130440806923</span>],</span><br><span class="line">[<span class="number">354930743948767363</span>,<span class="number">374079227033274174</span>,<span class="number">7821379197355217415</span>,<span class="number">4073976921774664952</span>,<span class="number">8974661879090783904</span>,<span class="number">8725597754431417139</span>,<span class="number">1723115467249027682</span>,<span class="number">914056616366301410</span>],</span><br><span class="line">[<span class="number">9032929938905307703</span>,<span class="number">569436029465728354</span>,<span class="number">3230536280479973685</span>,<span class="number">9499318835507740454</span>,<span class="number">460664783708095350</span>,<span class="number">3815328100857956310</span>,<span class="number">6866516203996475375</span>,<span class="number">9142528333783640721</span>],</span><br><span class="line">[<span class="number">6647724854667560614</span>,<span class="number">1564543033588842443</span>,<span class="number">980081446425820918</span>,<span class="number">4482664640152609224</span>,<span class="number">9361385831487208956</span>,<span class="number">5729265277086036438</span>,<span class="number">8521779175294512538</span>,<span class="number">7872078731489374461</span>],</span><br><span class="line">[<span class="number">2426759667632064565</span>,<span class="number">2564361116290067541</span>,<span class="number">5109836057988930695</span>,<span class="number">3948680632682199428</span>,<span class="number">8561341181219447072</span>,<span class="number">5099840518920477627</span>,<span class="number">9347277712921710222</span>,<span class="number">4364598388067284951</span>],</span><br><span class="line">[<span class="number">2143804620259054744</span>,<span class="number">4318231909289693782</span>,<span class="number">6284698432978577252</span>,<span class="number">5529804751795288609</span>,<span class="number">7903556036971407808</span>,<span class="number">3730126758887833322</span>,<span class="number">8782120630459581951</span>,<span class="number">9050476736532525999</span>]]</span><br><span class="line"></span><br><span class="line">ans = [<span class="number">4088048241727106122</span>, <span class="number">258857328202723850</span>, <span class="number">7303598013681209756</span>, <span class="number">3446975206276714926</span>, <span class="number">176458751236949790</span>, <span class="number">8151363680348349027</span>, <span class="number">8771366063042882128</span>, <span class="number">9003511237633705064</span>]</span><br><span class="line">A = matrix(A)</span><br><span class="line">ans = matrix(ans)</span><br><span class="line"></span><br><span class="line">flag = ans * A.inverse()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到flag后转化为字符串</span></span><br><span class="line">flag = [<span class="number">256128467098287645152364579619033136532012336082411188262170716121111141373910417997647279385874168289963422098883372524388175789168151018039664118938</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">275157020682273200260243873388370073035487413746791277567209773631463468440360425377838149581773104213153845176881963804588249058534505227929576082442</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">205418055261423253440834873996888852743735400527184165431288083430874722579052114104669136088527642186595043026543683492544648632576976821633919688987</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,<span class="number">18887682222057954947813918789359532063827948125435329591909175563625225112660734620218938715145807440112704581336669611824654566923603748916776016972</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>,-<span class="number">25792447761509638420556125881168126603544490324749544374648563355312526747005861915100426458158515036632551136815312658182069136958880193280291853604</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">263743295233022646271965564265774549530140797857736570979958721892220519418537528753856004044323800915867363751008926223858363297878551362225736657993</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,-<span class="number">839256526384408301445325525932265486477039492555936647496320730347707472223889935476141937534810747723549651396954028900430020396698162916210131940419</span>/<span class="number">201110710500527103391704345109970877861492963385688540350899980246056954432876844511421798766202341953924005687593642435623584608348351172354206968203</span>,<span class="number">165200370960939593750718733159922760922513289005013438437371715048231002848101266223391623531454692435044072426966916629687643829467166749676754679429</span>/<span class="number">67036903500175701130568115036656959287164321128562846783633326748685651477625614837140599588734113984641335229197880811874528202782783724118068989401</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(i % p)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{Line8ar alg3ebra 1s 50 i0mportant!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="HomoBlock"><a href="#HomoBlock" class="headerlink" title="HomoBlock"></a>HomoBlock</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个，一个一个一个Homo啊啊啊啊啊啊啊</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;cnss&#123;I_a&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)%<span class="number">8</span>==<span class="number">0</span></span><br><span class="line">MASK1 = getRandomNBitInteger(<span class="number">32</span>)|(<span class="number">0xffffffff00000000</span>)</span><br><span class="line">MASK2 = getRandomNBitInteger(<span class="number">32</span>)&lt;&lt;<span class="number">32</span></span><br><span class="line">ROUND = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>():</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        tmp.append(getRandomNBitInteger(<span class="number">64</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NotHomoFunction</span>(<span class="params">x,iv,key</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x&lt;&lt;iv)&amp;MASK1)^((x&gt;&gt;iv)|MASK2)^key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,iv,key</span>):</span><br><span class="line">    cipher = bytes_to_long(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        cipher = NotHomoFunction(cipher,iv,key)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">cipher = []</span><br><span class="line">iv = <span class="number">32</span></span><br><span class="line">key = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">8</span>):</span><br><span class="line">    cipher.append(encrypt(flag[i:i+<span class="number">8</span>],iv,key))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(MASK2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">[4840951631397558164, 5492303526413306583, 6271460196030786735, 6127905759336302986, 601209385465514967]</span></span><br><span class="line"><span class="string">32</span></span><br><span class="line"><span class="string">16500653344889503744</span></span><br></pre></td></tr></table></figure>
<p>观察加密方式，发现具有以下特点:</p>
<ul>
<li>明文按长度为8分组，分别加密</li>
<li>每一轮交换上一轮得到结果的高低32位，然后异或 MASK2 ，异或key。</li>
</ul>
<p>可以发现，这样交换4次后就会恢复初值，所以实际交换5次后，就能得到初始值异或 MASK2 并异或key的结果。又因为明文的第一部分已经给出，所以可以根据这个明文恢复key，后续逐步恢复即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;cnss&#123;I_a&#x27;</span></span><br><span class="line">f0 = bytes_to_long(flag)</span><br><span class="line">p = [<span class="number">4840951631397558164</span>, <span class="number">5492303526413306583</span>, <span class="number">6271460196030786735</span>, <span class="number">6127905759336302986</span>, <span class="number">601209385465514967</span>]</span><br><span class="line">MASK2 = <span class="number">16500653344889503744</span></span><br><span class="line">f1 = p[<span class="number">0</span>]</span><br><span class="line">hf0, lf0 = (f0 &gt;&gt; <span class="number">32</span>, f0 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hf1, lf1 = (f1 &gt;&gt; <span class="number">32</span>, f1 % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">hk = hf1 ^ lf0 ^ (MASK2 &gt;&gt; <span class="number">32</span>)</span><br><span class="line">lk = lf1 ^ hf0</span><br><span class="line">key = (hk &lt;&lt; <span class="number">32</span>) + lk</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">	l, h = ((i ^ MASK2 ^ key) &gt;&gt; <span class="number">32</span>, (i ^ MASK2 ^ key) % (<span class="number">2</span> ** <span class="number">32</span>))</span><br><span class="line">	flag += long_to_bytes((h &lt;&lt; <span class="number">32</span>) | l).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{I_am_n0t_HHHHHHoooommmmmmmoooo0000}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezLFSR"><a href="#ezLFSR" class="headerlink" title="ezLFSR"></a>ezLFSR</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do you know LFSR?</span><br><span class="line">Hint1:考点： LFSR流密码</span><br><span class="line">Hint2:可以使用 z3solver 。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> mask,seed</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cipher, ipath, opath</span>):</span><br><span class="line">    ifile=<span class="built_in">open</span>(ipath,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    ofile=<span class="built_in">open</span>(opath,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    plaintext=ifile.read()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:</span><br><span class="line">        c=ch^cipher.getrandbit(<span class="number">8</span>)</span><br><span class="line">        ofile.write(long_to_bytes(c))</span><br><span class="line">    ifile.close()</span><br><span class="line">    ofile.close()</span><br><span class="line"></span><br><span class="line">lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">encrypt(lfsr,<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;cipher.enc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;seed = <span class="subst">&#123;seed&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># seed = 37285</span></span><br></pre></td></tr></table></figure>
<p>cipher.enc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5</span><br></pre></td></tr></table></figure>
<p>注意到mask也仅取了低16位，那么爆破的范围也仅有65536，因此直接爆破出符合要求的明文串即可。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, mask, length</span>):</span><br><span class="line">        self.length_mask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.length_mask</span><br><span class="line">        self.state = seed &amp; self.length_mask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        next_state = (self.state &lt;&lt; <span class="number">1</span>) &amp; self.length_mask</span><br><span class="line">        i = self.state &amp; self.mask &amp; self.length_mask</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            output ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        next_state ^= output</span><br><span class="line">        self.state = next_state</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getrandbit</span>(<span class="params">self, nbit</span>):</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">            output = (output &lt;&lt; <span class="number">1</span>) ^ self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">seed = <span class="number">37285</span></span><br><span class="line">hex_string = <span class="string">&quot;E3306EA1B67E13D02B59A0DEA270AD8C3AF0110FBF60C07740A699A5918E7DC5&quot;</span></span><br><span class="line"><span class="comment"># 每两个字符一组拆分</span></span><br><span class="line">split_hex = [hex_string[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_string), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> split_hex:</span><br><span class="line">    c.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    mask = i</span><br><span class="line">    lfsr = LFSR(seed, mask, <span class="number">16</span>)</span><br><span class="line">    clist = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> c:</span><br><span class="line">        temp=ch^lfsr.getrandbit(<span class="number">8</span>)</span><br><span class="line">        clist.append(<span class="built_in">chr</span>(temp))</span><br><span class="line">    str1 = <span class="string">&quot;&quot;</span>.join(clist)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;cnss&quot;</span> <span class="keyword">in</span> str1):</span><br><span class="line">        <span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>
<p>运行时间大概需要不到1分钟。</p>
<p>flag:</p>
<font size="4" color="red">cnss{Y0u_can_brust_0r_F1nd_seed}</font>

<p>从flag串以及hint可以看出，本题应该是可以通过LFSR的方式恢复明文的，但是数量级太小，没必要。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="RSA-Ⅱ"><a href="#RSA-Ⅱ" class="headerlink" title="RSA Ⅱ"></a>RSA Ⅱ</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It&#x27;s more difficult than RSA Ⅰ,right? Can you factorize n ?</span><br><span class="line">Hint:查找有关RSA攻击的资料是一个很重要的技能。</span><br></pre></td></tr></table></figure>
<p>并提供了一篇论文链接：<a href="https://eprint.iacr.org/2020/1506.pdf">1506.pdf (iacr.org)</a></p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">mask1 = getPrime(<span class="number">512</span>)</span><br><span class="line">mask2 = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask1 = <span class="subst">&#123;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask2 = <span class="subst">&#123;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h1 = <span class="subst">&#123;p&amp;mask1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h2 = <span class="subst">&#123;q&amp;mask2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line"><span class="string">n = 87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line"><span class="string">mask1 = 8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line"><span class="string">mask2 = 10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line"><span class="string">h1 = 6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line"><span class="string">h2 = 6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br></pre></td></tr></table></figure>
<p>相较于RSA1，这一次不能根据位运算结果完全确定出p、q的比特位了，不过仍然可以利用以下线索还原：</p>
<ul>
<li>&amp;运算为1，则p该位必为1</li>
<li>&amp;运算为0，mask该位为1，则p该位必为0</li>
</ul>
<p>而当&amp;运算为0，mask也为0时，p的该比特位就存在两种结果，无法完全确定。可是这题不仅给了p，还给了q的位运算结果，因此我们可以利用下面这一点信息，从高位向低位进行深度优先搜索，显著降低复杂度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将p、q当前确定的二进制位后方全部填充0，直至填满512位，此时p、q乘积应小于n。</span><br><span class="line">2、将p、q当前确定的二进制位后方全部填充1，直至填满512位，此时p、q乘积应大于n。</span><br></pre></td></tr></table></figure>
<p>如此就能在极短时间内还原出p、q。</p>
<p><br></p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">21645208345867622053024283678631971385301103104312441336174301067402923208233033116071987870811290403578077414872467955871236843078200772311176723821275372545792521252126496488134168455430882670865862282658077115199048181151105823370547063726203692258934054391552916645628374539820099986794258298843501009240</span></span><br><span class="line">n = <span class="number">87282921750815275717132715603847471604654006135344540742956637574882193904171665195367477260090328888053170090015909620539666069545618781812315864580009968838414539707616636379202667918204792277927294032362873240288573251987386601263377458038218959813925307265939433229169884527274177006792047369788293125409</span></span><br><span class="line">mask1 = <span class="number">8802124635072632944677646490123224379036416333544329119490072003355821545476873187055484863111312282268555945525261726909784693138184611507738758202965723</span></span><br><span class="line">mask2 = <span class="number">10267484648659998697412163107809730542736732193409802323765378917769614002176050843098384409535095473863894691160595931186139418791709781214996751031082601</span></span><br><span class="line">h1 = <span class="number">6706231204421711988537353586716977912583550778985616494052350868539347641557164021930575245010900470979740623857738159245103694128834121517146255441177729</span></span><br><span class="line">h2 = <span class="number">6704397956705493482354535847135592349486638396996488745737387153856868045426992197309829534096366784379171117205125136777653995357887539312554042026362473</span></span><br><span class="line">mask1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask1)[<span class="number">2</span>:])</span><br><span class="line">mask2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(mask2)[<span class="number">2</span>:])</span><br><span class="line">h1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h1)[<span class="number">2</span>:])</span><br><span class="line">h2 = <span class="built_in">str</span>(<span class="built_in">bin</span>(h2)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">512</span>):</span><br><span class="line">        <span class="comment">#print(tmp0)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(tmq0,<span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;1&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>((mask1[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h1[l] == <span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> (mask2[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> h2[l] == <span class="string">&quot;0&quot;</span>)):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find(tempp,tempq)</span></span><br><span class="line">P = <span class="number">10172774442863868719013872884099170294615753094066736187886125116462340120031133533430755779832487215255546434139069419394249074006281284289077492708469893</span></span><br><span class="line">Q = <span class="number">8580050824978592226795441601299432164577158891190171233964440597982925469924083252289609500726234367555160732119333211934059529993446003001925910065317613</span></span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{A1g0r1thm_1s_5o_hard_for_Me!}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="BabyLattice"><a href="#BabyLattice" class="headerlink" title="BabyLattice"></a>BabyLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Do you know SVP and LLL?</span><br><span class="line">Hint:在解决本题的过程中你会接触到格(Lattice)的一些基本概念,以及LLL算法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line">flagArg = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>,<span class="number">8</span>):</span><br><span class="line">    flag_tmp = bytes_to_long(flag[i:i+<span class="number">8</span>])</span><br><span class="line">    <span class="keyword">assert</span> flag_tmp &lt; <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    flagArg.append(flag_tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Equation</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,arg</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(arg)==<span class="number">4</span></span><br><span class="line">        self.arg = arg</span><br><span class="line">        self.modulus = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the modulus is <span class="subst">&#123;self.modulus&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp = getRandomInteger(<span class="number">512</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;The number of the <span class="subst">&#123;i&#125;</span> round is <span class="subst">&#123;tmp&#125;</span>&#x27;</span>)</span><br><span class="line">            ans+=self.arg[i]*tmp</span><br><span class="line">        ans = ans%self.modulus</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The result is <span class="subst">&#123;ans&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">EzLineModulus = Equation(flagArg)</span><br><span class="line">EzLineModulus.output()</span><br><span class="line"></span><br><span class="line"><span class="comment">#the modulus is 4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line"><span class="comment">#The number of the 0 round is 7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line"><span class="comment">#The number of the 1 round is 13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line"><span class="comment">#The number of the 2 round is 8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line"><span class="comment">#The number of the 3 round is 798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line"><span class="comment">#The result is 58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br></pre></td></tr></table></figure>
<p>招新赛前的夏令营就出Lattice的题目了。。确实狠</p>
<p>不过确实是最基础的Lattice题目了，大致思路就是列出线性关系式，转化为矩阵形式，并保证较短向量都在等式右侧，即可对构造出来的格进行规约得到短向量。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">4653980939589101565044285021945025573290906789132633751963110127801187748089540230208429714310516635848025358481189017398970169440484136391436220837417791</span></span><br><span class="line">a1 = <span class="number">7163515288721018524391838724005494502072524058809935946689587023614778895762400663698973734684519790842142248155478226513293289043832391054661263177469005</span></span><br><span class="line">a2 = <span class="number">13155134533945105613277690072743652931283618211062662861216511364398097684219572559463369279253337759860439150691008846033587645344197431244106331100681641</span></span><br><span class="line">a3 = <span class="number">8450640520436960190933104494093081291057363628588171820766164606066614201483259024304043681871965360847257453187101669512010469318096007617859083021766564</span></span><br><span class="line">a4 = <span class="number">798383352075970107818638521362593273862636131165588181505120596765884650403289567593307005746576184176902675297124272602141002375036927828390204063589274</span></span><br><span class="line">ans = <span class="number">58831711102590059067743519228568722360433408071362335858674496753241059990433991177195518029785828762522018556332340356592798263267784406825183284767956</span></span><br><span class="line">inv = inverse(a1,n)</span><br><span class="line">L = Matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,-ans*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,a2*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,a3*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,a4*inv],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,n]])</span><br><span class="line"></span><br><span class="line">v = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[<span class="number">4</span>])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(v)-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">abs</span>(v[i])))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{W0w!Y0u_know_WhatisL4ttice}</font>

<p>（有关格的问题本篇不会展开讲，因为它需要对一些基本原理的了解，想要明白此类问题需要先自行查阅一些格相关的基本概念）</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="ezSignature"><a href="#ezSignature" class="headerlink" title="ezSignature"></a>ezSignature</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这样使用数字签名是否安全呢？</span><br><span class="line">nc 43.156.14.141 6943</span><br><span class="line"></span><br><span class="line">Hint1:推荐使用pwntools进行交互。</span><br><span class="line">Hint2:建议先了解 DSA 数字签名流程。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalSignatureAlgorithm</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.p = key.p</span><br><span class="line">        self.q = key.q</span><br><span class="line">        self.g = key.g</span><br><span class="line">        self.y = key.y</span><br><span class="line">        self.x = key.x</span><br><span class="line">        self.k = randint(<span class="number">1</span>, self.q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, m</span>):</span><br><span class="line">        k = self.k</span><br><span class="line">        h = bytes_to_long(sha256(m).digest())</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = inverse(k, self.q) * (h + self.x * r) % self.q</span><br><span class="line">        <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, m, signature</span>):</span><br><span class="line">        r, s = signature</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= r &lt;= self.q - <span class="number">1</span>)) <span class="keyword">or</span> (<span class="keyword">not</span> (<span class="number">1</span> &lt;= s &lt;= self.q - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        z = bytes_to_long(sha256(m).digest())</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (z * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = (<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p % self.q</span><br><span class="line">        <span class="keyword">return</span> r == v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myDSA = DigitalSignatureAlgorithm(DSA.generate(<span class="number">1024</span>))</span><br><span class="line">MENU = <span class="string">br&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[1] Sign.</span></span><br><span class="line"><span class="string">[2] Verify.</span></span><br><span class="line"><span class="string">[3] Get_public_key.</span></span><br><span class="line"><span class="string">[4] Exit.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        proof = (<span class="string">&#x27;&#x27;</span>.join([choice(table) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])).encode()</span><br><span class="line">        sha = sha256(proof).hexdigest().encode()</span><br><span class="line">        self.send(<span class="string">b&quot;[+] sha256(XXXX+&quot;</span> + proof[<span class="number">4</span>:] + <span class="string">b&quot;) == &quot;</span> + sha)</span><br><span class="line">        XXXX = self.recv(prompt=<span class="string">b&#x27;[+] Plz Tell Me XXXX :&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(XXXX) != <span class="number">4</span> <span class="keyword">or</span> sha256(XXXX + proof[<span class="number">4</span>:]).hexdigest().encode() != sha:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self</span>):</span><br><span class="line">        m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">        m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">        signature1 = myDSA.sign(m1)</span><br><span class="line">        signature2 = myDSA.sign(m2)</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature1 is:&#x27;</span> + <span class="built_in">str</span>(signature1).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;Your signature2 is:&#x27;</span> + <span class="built_in">str</span>(signature2).encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self</span>):</span><br><span class="line">        m = self.recv(<span class="string">b&#x27;message:&#x27;</span>)</span><br><span class="line">        r = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;r:&#x27;</span>))</span><br><span class="line">        s = <span class="built_in">int</span>(self.recv(<span class="string">b&#x27;s:&#x27;</span>))</span><br><span class="line">        signature = (r, s)</span><br><span class="line">        <span class="keyword">if</span> m == <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> myDSA.verify(m, signature):</span><br><span class="line">                self.send(<span class="string">b&#x27;Hello there.This is what you want.&#x27;</span>)</span><br><span class="line">                self.send(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;Who are U?Get out!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        self.send(<span class="string">b&#x27;p = &#x27;</span> + <span class="built_in">str</span>(myDSA.p).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;q = &#x27;</span> + <span class="built_in">str</span>(myDSA.q).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;g = &#x27;</span> + <span class="built_in">str</span>(myDSA.g).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;y = &#x27;</span> + <span class="built_in">str</span>(myDSA.y).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            self.send(<span class="string">b&#x27;You must pass the P0W!!!&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.send(MENU)</span><br><span class="line">            option = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;Give me your option:&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">                self.sign()</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">                self.verify()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">                self.get_public_key()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HOST:POST &quot;</span> + HOST + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT))</span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一道靶机交互题，代码较长，但是其实大部分是交互相关的函数，细读发现是很正常的DSA，需要用给定明文通过他的验签操作。（如果不熟悉DSA签名流程，一定要自行查阅了解一下）</p>
<p>检查代码发现漏洞出在sign，由于交互开始时，随机密钥k就不会再变动，因此两个明文共用了k用作签名，因此直接使用共享k攻击即可，具体原理也很简单，自行搜索共享k攻击即可。进阶的还有对线性k、指数k等相关攻击方式。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">172961942888113119438093761564402163853274437530074061334853565231663662473345365517029153614577994838261528197758562341350007269014020447862968046418219322983982857376325091297503076457294884011022491521807290579653731078712552375942815577480924479760060089879761373677236785972440188569442167867715538948131</span></span><br><span class="line">q = <span class="number">1238294525750070611176801188652181858159488474961</span></span><br><span class="line">g = <span class="number">75657702601417227921344829575623735976532473731371029415534443940309702116075857552168402559956825576158353466597825895213717785384352099702983338787137184850387592826820271959589796127014544636714131043162304391677607332131259874984936943058742638800688694139378157588974460944304847089533750902878536046649</span></span><br><span class="line">y = <span class="number">7749296960818920297640684628219596188301310658741359444363507697372166821952159177715756651776536866582220227892407461198512231438360662343916445812054004711764127526569139925464723782772657462476688091598602960531766048824996984183046388253897618420503521674510979988799110962834514762035965219607971731464</span></span><br><span class="line"></span><br><span class="line">r1,s1 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">246708316787437486170638565016913560785356026546</span>)</span><br><span class="line">r2,s2 = (<span class="number">952312130113235199710494038379463278196320139331</span>, <span class="number">604408984593559575502554675534691666132540008638</span>)</span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&#x27;I want to tell you a secret&#x27;</span></span><br><span class="line">m2 = <span class="string">b&#x27;Can you find it?&#x27;</span></span><br><span class="line">h1 = bytes_to_long(sha256(m1).digest())</span><br><span class="line">h2 = bytes_to_long(sha256(m2).digest())</span><br><span class="line"></span><br><span class="line">k = (h1-h2)*inverse(s1-s2,q)</span><br><span class="line">x = (k*s1 - h1)*inverse(r1,q) % q</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;I&#x27;m Admin.I want flag.&quot;</span></span><br><span class="line">h = bytes_to_long(sha256(m).digest())</span><br><span class="line">r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">s = inverse(k, q) * (h + x * r) % q</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>(这题没有完整脚本，拿着这个r，s去交互就可以了；因为比较懒，当时直接用xshell连接上后手动过的sha256爆破，手动提交的r，s。。所以就没有完整pwntools交互脚本)</p>
<p>flag:</p>
<font size="4" color="red">cnss{1ts_Dr4nger0us_t0_u5eThe_Same_K}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="StrangeCurve"><a href="#StrangeCurve" class="headerlink" title="StrangeCurve"></a>StrangeCurve</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The Cruve is SOO0000 Strange!</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">&#x27;cnss&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag_k = bytes_to_long(flag[<span class="number">5</span>:-<span class="number">1</span>].encode())</span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> E.order() == p </span><br><span class="line">base_point = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> base_point <span class="keyword">in</span> E</span><br><span class="line"><span class="keyword">assert</span> flag_k &lt; p </span><br><span class="line"></span><br><span class="line">Q = flag_k*base_point</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (240653647745552223089451307742208085297121769374 : 1041806436100548540817642210994295951394712587396 : 1)</span></span><br></pre></td></tr></table></figure>
<p>椭圆曲线加密，下面这行是重要信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> E.order() == p </span><br></pre></td></tr></table></figure>
<p>因此可以确定是Smart’s attack。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1096126227998177188652856107362412783873814431647</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line">P = E(<span class="number">626099523290649705896889901241128842906228328604</span>,<span class="number">886038875771695334071307095455656761758842526929</span>)</span><br><span class="line">Q = E(<span class="number">240653647745552223089451307742208085297121769374</span>,<span class="number">1041806436100548540817642210994295951394712587396</span>)</span><br><span class="line"></span><br><span class="line">n = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cnss&#123;&quot;</span> + <span class="built_in">str</span>(long_to_bytes(n))[<span class="number">2</span>:-<span class="number">1</span>] + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<font size="4" color="red">cnss{DLPise45y_if5pecia1}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="一🔪一个牛头人"><a href="#一🔪一个牛头人" class="headerlink" title="一🔪一个牛头人"></a>一🔪一个牛头人</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学了NTRU,就要NTR u(❌)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">Zx = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = Zx.gen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convolution</span>(<span class="params">f, g, R</span>):</span><br><span class="line">    <span class="keyword">return</span> (f * g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balancedmod</span>(<span class="params">f, q, R</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: ((x + q//<span class="number">2</span>) % q) - q//<span class="number">2</span>, f.<span class="built_in">list</span>()))</span><br><span class="line">    <span class="keyword">return</span> Zx(g) % R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_poly</span>(<span class="params">n, d1, d2</span>):</span><br><span class="line">    <span class="keyword">assert</span> d1 + d2 &lt;= n</span><br><span class="line">    result = d1 * [<span class="number">1</span>] + d2 * [-<span class="number">1</span>] + (n - d1 - d2) * [<span class="number">0</span>]</span><br><span class="line">    shuffle(result)</span><br><span class="line">    <span class="keyword">return</span> Zx(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_prime</span>(<span class="params">f, R, p</span>):</span><br><span class="line">    T = Zx.change_ring(Integers(p)).quotient(R)</span><br><span class="line">    <span class="keyword">return</span> Zx(lift(<span class="number">1</span> / T(f)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_poly_mod_powerof2</span>(<span class="params">f, R, q</span>):  <span class="comment"># Hensel Lemma </span></span><br><span class="line">    g = invert_poly_mod_prime(f, R, <span class="number">2</span>)</span><br><span class="line">    e = log(q, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        g = ((<span class="number">2</span> * g - f * g ** <span class="number">2</span>) % R) % q</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NTRUCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, N, p, q, d</span>):</span><br><span class="line">        self.N = N</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.d = d</span><br><span class="line">        self.R = x ** N - <span class="number">1</span></span><br><span class="line">        <span class="comment"># key generation</span></span><br><span class="line">        self.g = random_poly(self.N, d, d)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.f = random_poly(self.N, d + <span class="number">1</span>, d)</span><br><span class="line">                self.fp = invert_poly_mod_prime(self.f, self.R, self.p)</span><br><span class="line">                self.fq = invert_poly_mod_powerof2(self.f, self.R, self.q)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.h = balancedmod(self.p * convolution(self.fq, self.g, self.R), self.q, self.R)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPubKey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.h</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, m</span>):</span><br><span class="line">        r = random_poly(self.N, self.d, self.d)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(self.h, r, self.R) + m, self.q, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        a = balancedmod(convolution(c, self.f, self.R), self.q, self.R)</span><br><span class="line">        <span class="keyword">return</span> balancedmod(convolution(a, self.fp, self.R), self.p, self.R)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, val</span>):</span><br><span class="line">        poly = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.N):</span><br><span class="line">            poly += ((val % self.p) - self.p // <span class="number">2</span>) * (x ** i)</span><br><span class="line">            val //= self.p</span><br><span class="line">        <span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, poly</span>):</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        ll = poly.<span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(ll):</span><br><span class="line">            result += (val + self.p // <span class="number">2</span>) * (self.p ** idx)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">poly_from_list</span>(<span class="params">self, l: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="keyword">return</span> Zx(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">160</span></span><br><span class="line">    d = <span class="number">30</span></span><br><span class="line">    p = <span class="number">3</span></span><br><span class="line">    q = <span class="number">65536</span></span><br><span class="line"></span><br><span class="line">    cipher = NTRUCipher(N, p, q, d) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[PubKey]---------&quot;</span>)</span><br><span class="line">    h = cipher.getPubKey()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line">    msg = bytes_to_long(flag)</span><br><span class="line">    encode_msg = cipher.encode(msg)</span><br><span class="line">    c = cipher.encrypt(encode_msg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[Cipher]---------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    mm = cipher.decrypt(c)</span><br><span class="line">    decode_msg = cipher.decode(mm)</span><br><span class="line">    <span class="keyword">assert</span> decode_msg == msg</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[PubKey]---------</span></span><br><span class="line"><span class="string">h = -11891*x^159 + 16347*x^158 - 32137*x^157 + 14988*x^156 + 16657*x^155 - 25785*x^154 - 21976*x^153 - 31745*x^152 - 4232*x^151 + 29569*x^150 + 27140*x^149 + 19617*x^148 - 16656*x^147 + 8925*x^146 + 8728*x^145 - 8802*x^144 - 10794*x^143 - 28159*x^142 - 6454*x^141 - 10259*x^140 - 19169*x^139 - 14357*x^138 + 3501*x^137 + 9885*x^136 - 7441*x^135 + 18268*x^134 - 27183*x^133 + 26085*x^132 + 19147*x^131 + 17153*x^130 - 22887*x^129 + 32476*x^128 - 21698*x^127 + 19138*x^126 + 11585*x^125 + 22755*x^124 - 5920*x^123 + 7581*x^122 + 25973*x^121 + 13787*x^120 - 22762*x^119 + 29207*x^118 - 17916*x^117 - 11502*x^116 + 18275*x^115 + 318*x^114 - 6890*x^113 - 22751*x^112 - 27677*x^111 - 11114*x^110 + 8623*x^109 - 15725*x^108 - 6835*x^107 - 8288*x^106 - 5235*x^105 - 28697*x^104 + 10696*x^103 + 17117*x^102 + 24696*x^101 - 7801*x^100 - 31874*x^99 - 17668*x^98 - 11204*x^97 + 19147*x^96 + 24644*x^95 - 29380*x^94 - 26237*x^93 - 27390*x^92 + 19982*x^91 + 4074*x^90 - 17248*x^89 - 11027*x^88 - 32690*x^87 + 5124*x^86 - 20823*x^85 - 11779*x^84 + 13781*x^83 + 29356*x^82 - 9740*x^81 - 31484*x^80 - 540*x^79 + 32360*x^78 + 24795*x^77 - 8864*x^76 + 17363*x^75 + 9670*x^74 + 32268*x^73 + 17961*x^72 + 6388*x^71 + 580*x^70 + 128*x^69 + 339*x^68 + 3412*x^67 - 4519*x^66 - 25056*x^65 + 6096*x^64 + 18720*x^63 - 5338*x^62 + 16910*x^61 + 3353*x^60 + 15433*x^59 - 28053*x^58 - 18883*x^57 + 7688*x^56 - 31198*x^55 + 9950*x^54 - 9388*x^53 + 21235*x^52 + 2847*x^51 + 24383*x^50 + 19431*x^49 + 21244*x^48 - 8498*x^47 - 28998*x^46 + 962*x^45 + 20579*x^44 + 28002*x^43 - 6040*x^42 + 4241*x^41 + 11655*x^40 - 32419*x^39 + 21531*x^38 + 7348*x^37 - 5503*x^36 + 29820*x^35 + 28896*x^34 + 8754*x^33 + 17978*x^32 + 7552*x^31 + 27240*x^30 - 29515*x^29 - 20322*x^28 + 2201*x^27 + 8857*x^26 - 50*x^25 - 3780*x^24 - 12138*x^23 + 10893*x^22 + 23133*x^21 + 6142*x^20 - 23798*x^19 - 15236*x^18 + 32564*x^17 + 25683*x^16 - 24010*x^15 - 4355*x^14 + 22552*x^13 - 27155*x^12 + 27649*x^11 + 17781*x^10 + 7115*x^9 + 27465*x^8 - 4369*x^7 + 24882*x^6 - 11675*x^5 - 612*x^4 + 12361*x^3 + 20120*x^2 + 6190*x - 10843</span></span><br><span class="line"><span class="string">[Cipher]---------</span></span><br><span class="line"><span class="string">c = -26801*x^159 - 25103*x^158 + 29811*x^157 - 12251*x^156 - 13386*x^155 - 28030*x^154 - 16511*x^153 + 23761*x^152 + 28329*x^151 - 16406*x^150 + 30931*x^149 + 5326*x^148 + 19877*x^147 - 23165*x^146 - 31540*x^145 - 7923*x^144 + 5880*x^143 - 27078*x^142 - 25436*x^141 - 17162*x^140 + 1471*x^139 + 14486*x^138 + 7702*x^137 - 29890*x^136 + 29315*x^135 + 558*x^134 - 22429*x^133 - 361*x^132 + 19049*x^131 - 30437*x^130 - 32610*x^129 - 3024*x^128 - 4313*x^127 + 29174*x^126 - 2837*x^125 - 2812*x^124 + 13450*x^123 - 15001*x^122 - 25791*x^121 - 8702*x^120 - 4968*x^119 - 15340*x^118 + 31744*x^117 - 32478*x^116 + 19737*x^115 - 12629*x^114 - 27847*x^113 + 27322*x^112 - 31375*x^111 + 14777*x^110 + 29825*x^109 - 25883*x^108 - 13335*x^107 + 32517*x^106 + 14871*x^105 - 7287*x^104 + 13398*x^103 - 32710*x^102 + 20805*x^101 + 29734*x^100 - 14579*x^99 + 17483*x^98 - 16864*x^97 - 26745*x^96 + 3254*x^95 + 7280*x^94 - 29046*x^93 - 7531*x^92 - 8791*x^91 + 15033*x^90 - 1125*x^89 - 14713*x^88 - 12273*x^87 + 8616*x^86 + 2486*x^85 + 31810*x^84 + 27795*x^83 - 21731*x^82 + 21743*x^81 - 27595*x^80 - 3592*x^79 - 27206*x^78 - 32156*x^77 + 32124*x^76 - 11212*x^75 - 6662*x^74 - 23103*x^73 - 3660*x^72 - 31043*x^71 - 17131*x^70 + 24544*x^69 - 32326*x^68 - 31047*x^67 + 19814*x^66 + 10874*x^65 - 8449*x^64 + 11744*x^63 + 2245*x^62 - 967*x^61 + 9120*x^60 + 8983*x^59 - 24573*x^58 + 24885*x^57 + 15649*x^56 - 18970*x^55 + 7354*x^54 - 12282*x^53 - 22474*x^52 + 4395*x^51 + 8428*x^50 - 32592*x^49 + 25980*x^48 - 4599*x^47 + 16310*x^46 + 18559*x^45 + 22897*x^44 + 19080*x^43 - 26065*x^42 - 9*x^41 + 29202*x^40 + 2121*x^39 - 5004*x^38 + 5299*x^37 - 28301*x^36 - 13519*x^35 + 24241*x^34 + 529*x^33 - 20574*x^32 - 27391*x^31 + 31976*x^30 + 22824*x^29 - 31410*x^28 - 20976*x^27 + 21661*x^26 - 15132*x^25 + 1905*x^24 - 30870*x^23 + 18109*x^22 - 17373*x^21 + 5342*x^20 - 22447*x^19 + 1893*x^18 - 17545*x^17 + 30097*x^16 - 21731*x^15 + 17390*x^14 + 10991*x^13 - 5384*x^12 + 15960*x^11 + 24268*x^10 - 29867*x^9 + 22532*x^8 + 10133*x^7 - 26576*x^6 - 5742*x^5 - 16252*x^4 + 13019*x^3 - 25984*x^2 + 14004*x + 22500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一个普通的NTRU多项式密码，也是与格有关的，其具体原理可以参考：(甚至详细阐述了每个函数的作用)</p>
<p><a href="http://blog.k1rit0.eu.org/2021/03/28/Translation-of-LatticeHacks/">Translation of LatticeHacks · K1rit0’s Blog</a> </p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">160</span></span><br><span class="line">d = <span class="number">30</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">65536</span></span><br><span class="line">PR = PolynomialRing(ZZ, name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line">R = PR.quotient_ring(x ^ n - <span class="number">1</span>, names = <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">y = R.gen()</span><br><span class="line"></span><br><span class="line">pubkey = -<span class="number">11891</span>*x^<span class="number">159</span> + <span class="number">16347</span>*x^<span class="number">158</span> - <span class="number">32137</span>*x^<span class="number">157</span> + <span class="number">14988</span>*x^<span class="number">156</span> + <span class="number">16657</span>*x^<span class="number">155</span> - <span class="number">25785</span>*x^<span class="number">154</span> - <span class="number">21976</span>*x^<span class="number">153</span> - <span class="number">31745</span>*x^<span class="number">152</span> - <span class="number">4232</span>*x^<span class="number">151</span> + <span class="number">29569</span>*x^<span class="number">150</span> + <span class="number">27140</span>*x^<span class="number">149</span> + <span class="number">19617</span>*x^<span class="number">148</span> - <span class="number">16656</span>*x^<span class="number">147</span> + <span class="number">8925</span>*x^<span class="number">146</span> + <span class="number">8728</span>*x^<span class="number">145</span> - <span class="number">8802</span>*x^<span class="number">144</span> - <span class="number">10794</span>*x^<span class="number">143</span> - <span class="number">28159</span>*x^<span class="number">142</span> - <span class="number">6454</span>*x^<span class="number">141</span> - <span class="number">10259</span>*x^<span class="number">140</span> - <span class="number">19169</span>*x^<span class="number">139</span> - <span class="number">14357</span>*x^<span class="number">138</span> + <span class="number">3501</span>*x^<span class="number">137</span> + <span class="number">9885</span>*x^<span class="number">136</span> - <span class="number">7441</span>*x^<span class="number">135</span> + <span class="number">18268</span>*x^<span class="number">134</span> - <span class="number">27183</span>*x^<span class="number">133</span> + <span class="number">26085</span>*x^<span class="number">132</span> + <span class="number">19147</span>*x^<span class="number">131</span> + <span class="number">17153</span>*x^<span class="number">130</span> - <span class="number">22887</span>*x^<span class="number">129</span> + <span class="number">32476</span>*x^<span class="number">128</span> - <span class="number">21698</span>*x^<span class="number">127</span> + <span class="number">19138</span>*x^<span class="number">126</span> + <span class="number">11585</span>*x^<span class="number">125</span> + <span class="number">22755</span>*x^<span class="number">124</span> - <span class="number">5920</span>*x^<span class="number">123</span> + <span class="number">7581</span>*x^<span class="number">122</span> + <span class="number">25973</span>*x^<span class="number">121</span> + <span class="number">13787</span>*x^<span class="number">120</span> - <span class="number">22762</span>*x^<span class="number">119</span> + <span class="number">29207</span>*x^<span class="number">118</span> - <span class="number">17916</span>*x^<span class="number">117</span> - <span class="number">11502</span>*x^<span class="number">116</span> + <span class="number">18275</span>*x^<span class="number">115</span> + <span class="number">318</span>*x^<span class="number">114</span> - <span class="number">6890</span>*x^<span class="number">113</span> - <span class="number">22751</span>*x^<span class="number">112</span> - <span class="number">27677</span>*x^<span class="number">111</span> - <span class="number">11114</span>*x^<span class="number">110</span> + <span class="number">8623</span>*x^<span class="number">109</span> - <span class="number">15725</span>*x^<span class="number">108</span> - <span class="number">6835</span>*x^<span class="number">107</span> - <span class="number">8288</span>*x^<span class="number">106</span> - <span class="number">5235</span>*x^<span class="number">105</span> - <span class="number">28697</span>*x^<span class="number">104</span> + <span class="number">10696</span>*x^<span class="number">103</span> + <span class="number">17117</span>*x^<span class="number">102</span> + <span class="number">24696</span>*x^<span class="number">101</span> - <span class="number">7801</span>*x^<span class="number">100</span> - <span class="number">31874</span>*x^<span class="number">99</span> - <span class="number">17668</span>*x^<span class="number">98</span> - <span class="number">11204</span>*x^<span class="number">97</span> + <span class="number">19147</span>*x^<span class="number">96</span> + <span class="number">24644</span>*x^<span class="number">95</span> - <span class="number">29380</span>*x^<span class="number">94</span> - <span class="number">26237</span>*x^<span class="number">93</span> - <span class="number">27390</span>*x^<span class="number">92</span> + <span class="number">19982</span>*x^<span class="number">91</span> + <span class="number">4074</span>*x^<span class="number">90</span> - <span class="number">17248</span>*x^<span class="number">89</span> - <span class="number">11027</span>*x^<span class="number">88</span> - <span class="number">32690</span>*x^<span class="number">87</span> + <span class="number">5124</span>*x^<span class="number">86</span> - <span class="number">20823</span>*x^<span class="number">85</span> - <span class="number">11779</span>*x^<span class="number">84</span> + <span class="number">13781</span>*x^<span class="number">83</span> + <span class="number">29356</span>*x^<span class="number">82</span> - <span class="number">9740</span>*x^<span class="number">81</span> - <span class="number">31484</span>*x^<span class="number">80</span> - <span class="number">540</span>*x^<span class="number">79</span> + <span class="number">32360</span>*x^<span class="number">78</span> + <span class="number">24795</span>*x^<span class="number">77</span> - <span class="number">8864</span>*x^<span class="number">76</span> + <span class="number">17363</span>*x^<span class="number">75</span> + <span class="number">9670</span>*x^<span class="number">74</span> + <span class="number">32268</span>*x^<span class="number">73</span> + <span class="number">17961</span>*x^<span class="number">72</span> + <span class="number">6388</span>*x^<span class="number">71</span> + <span class="number">580</span>*x^<span class="number">70</span> + <span class="number">128</span>*x^<span class="number">69</span> + <span class="number">339</span>*x^<span class="number">68</span> + <span class="number">3412</span>*x^<span class="number">67</span> - <span class="number">4519</span>*x^<span class="number">66</span> - <span class="number">25056</span>*x^<span class="number">65</span> + <span class="number">6096</span>*x^<span class="number">64</span> + <span class="number">18720</span>*x^<span class="number">63</span> - <span class="number">5338</span>*x^<span class="number">62</span> + <span class="number">16910</span>*x^<span class="number">61</span> + <span class="number">3353</span>*x^<span class="number">60</span> + <span class="number">15433</span>*x^<span class="number">59</span> - <span class="number">28053</span>*x^<span class="number">58</span> - <span class="number">18883</span>*x^<span class="number">57</span> + <span class="number">7688</span>*x^<span class="number">56</span> - <span class="number">31198</span>*x^<span class="number">55</span> + <span class="number">9950</span>*x^<span class="number">54</span> - <span class="number">9388</span>*x^<span class="number">53</span> + <span class="number">21235</span>*x^<span class="number">52</span> + <span class="number">2847</span>*x^<span class="number">51</span> + <span class="number">24383</span>*x^<span class="number">50</span> + <span class="number">19431</span>*x^<span class="number">49</span> + <span class="number">21244</span>*x^<span class="number">48</span> - <span class="number">8498</span>*x^<span class="number">47</span> - <span class="number">28998</span>*x^<span class="number">46</span> + <span class="number">962</span>*x^<span class="number">45</span> + <span class="number">20579</span>*x^<span class="number">44</span> + <span class="number">28002</span>*x^<span class="number">43</span> - <span class="number">6040</span>*x^<span class="number">42</span> + <span class="number">4241</span>*x^<span class="number">41</span> + <span class="number">11655</span>*x^<span class="number">40</span> - <span class="number">32419</span>*x^<span class="number">39</span> + <span class="number">21531</span>*x^<span class="number">38</span> + <span class="number">7348</span>*x^<span class="number">37</span> - <span class="number">5503</span>*x^<span class="number">36</span> + <span class="number">29820</span>*x^<span class="number">35</span> + <span class="number">28896</span>*x^<span class="number">34</span> + <span class="number">8754</span>*x^<span class="number">33</span> + <span class="number">17978</span>*x^<span class="number">32</span> + <span class="number">7552</span>*x^<span class="number">31</span> + <span class="number">27240</span>*x^<span class="number">30</span> - <span class="number">29515</span>*x^<span class="number">29</span> - <span class="number">20322</span>*x^<span class="number">28</span> + <span class="number">2201</span>*x^<span class="number">27</span> + <span class="number">8857</span>*x^<span class="number">26</span> - <span class="number">50</span>*x^<span class="number">25</span> - <span class="number">3780</span>*x^<span class="number">24</span> - <span class="number">12138</span>*x^<span class="number">23</span> + <span class="number">10893</span>*x^<span class="number">22</span> + <span class="number">23133</span>*x^<span class="number">21</span> + <span class="number">6142</span>*x^<span class="number">20</span> - <span class="number">23798</span>*x^<span class="number">19</span> - <span class="number">15236</span>*x^<span class="number">18</span> + <span class="number">32564</span>*x^<span class="number">17</span> + <span class="number">25683</span>*x^<span class="number">16</span> - <span class="number">24010</span>*x^<span class="number">15</span> - <span class="number">4355</span>*x^<span class="number">14</span> + <span class="number">22552</span>*x^<span class="number">13</span> - <span class="number">27155</span>*x^<span class="number">12</span> + <span class="number">27649</span>*x^<span class="number">11</span> + <span class="number">17781</span>*x^<span class="number">10</span> + <span class="number">7115</span>*x^<span class="number">9</span> + <span class="number">27465</span>*x^<span class="number">8</span> - <span class="number">4369</span>*x^<span class="number">7</span> + <span class="number">24882</span>*x^<span class="number">6</span> - <span class="number">11675</span>*x^<span class="number">5</span> - <span class="number">612</span>*x^<span class="number">4</span> + <span class="number">12361</span>*x^<span class="number">3</span> + <span class="number">20120</span>*x^<span class="number">2</span> + <span class="number">6190</span>*x - <span class="number">10843</span></span><br><span class="line">pubkey = R(pubkey)</span><br><span class="line">c = -<span class="number">26801</span>*x^<span class="number">159</span> - <span class="number">25103</span>*x^<span class="number">158</span> + <span class="number">29811</span>*x^<span class="number">157</span> - <span class="number">12251</span>*x^<span class="number">156</span> - <span class="number">13386</span>*x^<span class="number">155</span> - <span class="number">28030</span>*x^<span class="number">154</span> - <span class="number">16511</span>*x^<span class="number">153</span> + <span class="number">23761</span>*x^<span class="number">152</span> + <span class="number">28329</span>*x^<span class="number">151</span> - <span class="number">16406</span>*x^<span class="number">150</span> + <span class="number">30931</span>*x^<span class="number">149</span> + <span class="number">5326</span>*x^<span class="number">148</span> + <span class="number">19877</span>*x^<span class="number">147</span> - <span class="number">23165</span>*x^<span class="number">146</span> - <span class="number">31540</span>*x^<span class="number">145</span> - <span class="number">7923</span>*x^<span class="number">144</span> + <span class="number">5880</span>*x^<span class="number">143</span> - <span class="number">27078</span>*x^<span class="number">142</span> - <span class="number">25436</span>*x^<span class="number">141</span> - <span class="number">17162</span>*x^<span class="number">140</span> + <span class="number">1471</span>*x^<span class="number">139</span> + <span class="number">14486</span>*x^<span class="number">138</span> + <span class="number">7702</span>*x^<span class="number">137</span> - <span class="number">29890</span>*x^<span class="number">136</span> + <span class="number">29315</span>*x^<span class="number">135</span> + <span class="number">558</span>*x^<span class="number">134</span> - <span class="number">22429</span>*x^<span class="number">133</span> - <span class="number">361</span>*x^<span class="number">132</span> + <span class="number">19049</span>*x^<span class="number">131</span> - <span class="number">30437</span>*x^<span class="number">130</span> - <span class="number">32610</span>*x^<span class="number">129</span> - <span class="number">3024</span>*x^<span class="number">128</span> - <span class="number">4313</span>*x^<span class="number">127</span> + <span class="number">29174</span>*x^<span class="number">126</span> - <span class="number">2837</span>*x^<span class="number">125</span> - <span class="number">2812</span>*x^<span class="number">124</span> + <span class="number">13450</span>*x^<span class="number">123</span> - <span class="number">15001</span>*x^<span class="number">122</span> - <span class="number">25791</span>*x^<span class="number">121</span> - <span class="number">8702</span>*x^<span class="number">120</span> - <span class="number">4968</span>*x^<span class="number">119</span> - <span class="number">15340</span>*x^<span class="number">118</span> + <span class="number">31744</span>*x^<span class="number">117</span> - <span class="number">32478</span>*x^<span class="number">116</span> + <span class="number">19737</span>*x^<span class="number">115</span> - <span class="number">12629</span>*x^<span class="number">114</span> - <span class="number">27847</span>*x^<span class="number">113</span> + <span class="number">27322</span>*x^<span class="number">112</span> - <span class="number">31375</span>*x^<span class="number">111</span> + <span class="number">14777</span>*x^<span class="number">110</span> + <span class="number">29825</span>*x^<span class="number">109</span> - <span class="number">25883</span>*x^<span class="number">108</span> - <span class="number">13335</span>*x^<span class="number">107</span> + <span class="number">32517</span>*x^<span class="number">106</span> + <span class="number">14871</span>*x^<span class="number">105</span> - <span class="number">7287</span>*x^<span class="number">104</span> + <span class="number">13398</span>*x^<span class="number">103</span> - <span class="number">32710</span>*x^<span class="number">102</span> + <span class="number">20805</span>*x^<span class="number">101</span> + <span class="number">29734</span>*x^<span class="number">100</span> - <span class="number">14579</span>*x^<span class="number">99</span> + <span class="number">17483</span>*x^<span class="number">98</span> - <span class="number">16864</span>*x^<span class="number">97</span> - <span class="number">26745</span>*x^<span class="number">96</span> + <span class="number">3254</span>*x^<span class="number">95</span> + <span class="number">7280</span>*x^<span class="number">94</span> - <span class="number">29046</span>*x^<span class="number">93</span> - <span class="number">7531</span>*x^<span class="number">92</span> - <span class="number">8791</span>*x^<span class="number">91</span> + <span class="number">15033</span>*x^<span class="number">90</span> - <span class="number">1125</span>*x^<span class="number">89</span> - <span class="number">14713</span>*x^<span class="number">88</span> - <span class="number">12273</span>*x^<span class="number">87</span> + <span class="number">8616</span>*x^<span class="number">86</span> + <span class="number">2486</span>*x^<span class="number">85</span> + <span class="number">31810</span>*x^<span class="number">84</span> + <span class="number">27795</span>*x^<span class="number">83</span> - <span class="number">21731</span>*x^<span class="number">82</span> + <span class="number">21743</span>*x^<span class="number">81</span> - <span class="number">27595</span>*x^<span class="number">80</span> - <span class="number">3592</span>*x^<span class="number">79</span> - <span class="number">27206</span>*x^<span class="number">78</span> - <span class="number">32156</span>*x^<span class="number">77</span> + <span class="number">32124</span>*x^<span class="number">76</span> - <span class="number">11212</span>*x^<span class="number">75</span> - <span class="number">6662</span>*x^<span class="number">74</span> - <span class="number">23103</span>*x^<span class="number">73</span> - <span class="number">3660</span>*x^<span class="number">72</span> - <span class="number">31043</span>*x^<span class="number">71</span> - <span class="number">17131</span>*x^<span class="number">70</span> + <span class="number">24544</span>*x^<span class="number">69</span> - <span class="number">32326</span>*x^<span class="number">68</span> - <span class="number">31047</span>*x^<span class="number">67</span> + <span class="number">19814</span>*x^<span class="number">66</span> + <span class="number">10874</span>*x^<span class="number">65</span> - <span class="number">8449</span>*x^<span class="number">64</span> + <span class="number">11744</span>*x^<span class="number">63</span> + <span class="number">2245</span>*x^<span class="number">62</span> - <span class="number">967</span>*x^<span class="number">61</span> + <span class="number">9120</span>*x^<span class="number">60</span> + <span class="number">8983</span>*x^<span class="number">59</span> - <span class="number">24573</span>*x^<span class="number">58</span> + <span class="number">24885</span>*x^<span class="number">57</span> + <span class="number">15649</span>*x^<span class="number">56</span> - <span class="number">18970</span>*x^<span class="number">55</span> + <span class="number">7354</span>*x^<span class="number">54</span> - <span class="number">12282</span>*x^<span class="number">53</span> - <span class="number">22474</span>*x^<span class="number">52</span> + <span class="number">4395</span>*x^<span class="number">51</span> + <span class="number">8428</span>*x^<span class="number">50</span> - <span class="number">32592</span>*x^<span class="number">49</span> + <span class="number">25980</span>*x^<span class="number">48</span> - <span class="number">4599</span>*x^<span class="number">47</span> + <span class="number">16310</span>*x^<span class="number">46</span> + <span class="number">18559</span>*x^<span class="number">45</span> + <span class="number">22897</span>*x^<span class="number">44</span> + <span class="number">19080</span>*x^<span class="number">43</span> - <span class="number">26065</span>*x^<span class="number">42</span> - <span class="number">9</span>*x^<span class="number">41</span> + <span class="number">29202</span>*x^<span class="number">40</span> + <span class="number">2121</span>*x^<span class="number">39</span> - <span class="number">5004</span>*x^<span class="number">38</span> + <span class="number">5299</span>*x^<span class="number">37</span> - <span class="number">28301</span>*x^<span class="number">36</span> - <span class="number">13519</span>*x^<span class="number">35</span> + <span class="number">24241</span>*x^<span class="number">34</span> + <span class="number">529</span>*x^<span class="number">33</span> - <span class="number">20574</span>*x^<span class="number">32</span> - <span class="number">27391</span>*x^<span class="number">31</span> + <span class="number">31976</span>*x^<span class="number">30</span> + <span class="number">22824</span>*x^<span class="number">29</span> - <span class="number">31410</span>*x^<span class="number">28</span> - <span class="number">20976</span>*x^<span class="number">27</span> + <span class="number">21661</span>*x^<span class="number">26</span> - <span class="number">15132</span>*x^<span class="number">25</span> + <span class="number">1905</span>*x^<span class="number">24</span> - <span class="number">30870</span>*x^<span class="number">23</span> + <span class="number">18109</span>*x^<span class="number">22</span> - <span class="number">17373</span>*x^<span class="number">21</span> + <span class="number">5342</span>*x^<span class="number">20</span> - <span class="number">22447</span>*x^<span class="number">19</span> + <span class="number">1893</span>*x^<span class="number">18</span> - <span class="number">17545</span>*x^<span class="number">17</span> + <span class="number">30097</span>*x^<span class="number">16</span> - <span class="number">21731</span>*x^<span class="number">15</span> + <span class="number">17390</span>*x^<span class="number">14</span> + <span class="number">10991</span>*x^<span class="number">13</span> - <span class="number">5384</span>*x^<span class="number">12</span> + <span class="number">15960</span>*x^<span class="number">11</span> + <span class="number">24268</span>*x^<span class="number">10</span> - <span class="number">29867</span>*x^<span class="number">9</span> + <span class="number">22532</span>*x^<span class="number">8</span> + <span class="number">10133</span>*x^<span class="number">7</span> - <span class="number">26576</span>*x^<span class="number">6</span> - <span class="number">5742</span>*x^<span class="number">5</span> - <span class="number">16252</span>*x^<span class="number">4</span> + <span class="number">13019</span>*x^<span class="number">3</span> - <span class="number">25984</span>*x^<span class="number">2</span> + <span class="number">14004</span>*x + <span class="number">22500</span></span><br><span class="line">c = R(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balance_mod</span>(<span class="params">f, q</span>):</span><br><span class="line">    g = <span class="built_in">list</span>(((f[i] + q // <span class="number">2</span>) % q) - q // <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))</span><br><span class="line">    <span class="keyword">return</span> R(g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_mod_prime</span>(<span class="params">f, p</span>):</span><br><span class="line">    T = R.base().change_ring(Integers(p)).quotient(x ^ n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> R(<span class="number">1</span> / T(f))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c, prikey</span>):</span><br><span class="line">    f, fp = prikey</span><br><span class="line">    a = balance_mod(c * f, q)</span><br><span class="line">    <span class="keyword">return</span> balance_mod(a * fp, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pubkey, c</span>):</span><br><span class="line">    A = Matrix(ZZ, <span class="number">2</span> * n, <span class="number">2</span> * n)</span><br><span class="line">    hp = inverse(p, q) * pubkey</span><br><span class="line">    hp_list = <span class="built_in">list</span>(hp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[i, i] = q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">2</span> * n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            A[i, j] = hp_list[(j - i) % n]</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">    AL = A.BKZ()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> AL:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = R(row[n:].<span class="built_in">list</span>())</span><br><span class="line">            fp = invert_mod_prime(f, p)</span><br><span class="line">            <span class="keyword">return</span> dec(c, (f, fp))</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># may failed with shortest vector(return more if failed)</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">m = crack(pubkey, c)</span><br><span class="line"></span><br><span class="line">m = m.<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    m[i] += <span class="number">1</span></span><br><span class="line">    m[i] = <span class="built_in">str</span>(m[i])</span><br><span class="line">str1 = <span class="string">&quot;&quot;</span>.join(m[::-<span class="number">1</span>])</span><br><span class="line">temp = <span class="built_in">int</span>(str1,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(temp))</span><br></pre></td></tr></table></figure>
<p>(可能需要跑几分钟)</p>
<p>flag:</p>
<font size="4" color="red">cnss{NTRU_w1th_un5afe_par4}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MidLattice"><a href="#MidLattice" class="headerlink" title="MidLattice"></a>MidLattice</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看上去像gcd，但是有区别</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">pbit = <span class="number">500</span></span><br><span class="line">qbit = <span class="number">550</span></span><br><span class="line">rbit = <span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sample</span>():</span><br><span class="line">    x_list  = []</span><br><span class="line">    p = getPrime(pbit)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        q = getPrime(qbit)</span><br><span class="line">        r = getPrime(rbit)</span><br><span class="line">        x_list.append(q*p + <span class="number">2</span>*r)</span><br><span class="line">    <span class="keyword">return</span> x_list,p</span><br><span class="line">sample,p = get_sample()</span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(sample))</span><br></pre></td></tr></table></figure>
<p>以及一个output.txt</p>
<p>题目描述的很明确了，agcd问题(近似公约数问题)，也与格相关，不进行展开。</p>
<p><br></p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">500</span></span><br><span class="line">Q_bits = <span class="number">550</span></span><br><span class="line">R_bits = <span class="number">200</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">N = <span class="comment">#自行代入</span></span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+hashlib.sha256(long_to_bytes(p)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>也需要跑几分钟才出结果，能更精确地调整参数的话可能可以减少耗时。</p>
<p>flag:</p>
<font size="4" color="red">cnss{dde0cc3ac3539c66a74ed445a81c3f5b12938c286fa569a3b143b72369c708c9}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="铜匠的世界"><a href="#铜匠的世界" class="headerlink" title="铜匠的世界"></a>铜匠的世界</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">怎样在2^512个可能中找到唯一的答案呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = isqrt(p) ^ isqrt(q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hint = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line"><span class="string">c = 19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"><span class="string">hint = 34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果给的是p^q，题目是容易的，只需要按照RSA Ⅱ类似的思路进行深搜即可。而给的是isqrt(p) ^ isqrt(q)，很容易会有思路如下：</p>
<ul>
<li>对n开根，得到isqrt(p*q) </li>
<li>将isqrt(p*q) 看作n，将isqrt(p) ^ isqrt(q)看作p^q，转化成上面给定p^q的问题求解</li>
</ul>
<p>看上去没什么问题，可是实际操作就会发现存在两点问题：</p>
<ul>
<li>由于一些低位误差，有一些可能正确的根号p、q高位被舍弃。</li>
<li>即使得到了正确的isqrt(p)与isqrt(q)，各自平方后与真正的p、q还有至少256比特的差距，即使是用coppersmith也完全满足不了使用条件。</li>
</ul>
<p>因此不能再使用RSA Ⅱ中的返回条件进行按位查找了。此时搜索题目，发现了佬的类似的题目思路：</p>
<p><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard">https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#shard</a></p>
<p>这样子查找成功后，还需要对低位进行一定程度的爆破后才能使用coppersmith，并且参数要卡的比较死，比如epsilon取0.03虽然快一些，但是跑不出结果，因此只能取0.01甚至更小，但这个就会耗费很长时间。遗憾的是我也没有想出更好的办法。</p>
<p><br></p>
<p>exp_step1.ipynb：(求出可能的p高位)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> binteger <span class="keyword">import</span> Bin</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">self, X=<span class="literal">None</span>, beta=<span class="number">1.0</span>, epsilon=<span class="literal">None</span>, **kwds</span>):</span><br><span class="line">    <span class="keyword">from</span> sage.misc.verbose <span class="keyword">import</span> verbose</span><br><span class="line">    <span class="keyword">from</span> sage.matrix.constructor <span class="keyword">import</span> Matrix</span><br><span class="line">    <span class="keyword">from</span> sage.rings.real_mpfr <span class="keyword">import</span> RR</span><br><span class="line"></span><br><span class="line">    N = self.parent().characteristic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.is_monic():</span><br><span class="line">        <span class="keyword">raise</span> ArithmeticError(<span class="string">&quot;Polynomial must be monic.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    beta = RR(beta)</span><br><span class="line">    <span class="keyword">if</span> beta &lt;= <span class="number">0.0</span> <span class="keyword">or</span> beta &gt; <span class="number">1.0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;0.0 &lt; beta &lt;= 1.0 not satisfied.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f = self.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    P, (x,) = f.parent().objgens()</span><br><span class="line"></span><br><span class="line">    delta = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epsilon <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        epsilon = beta / <span class="number">8</span></span><br><span class="line">    verbose(<span class="string">&quot;epsilon = %f&quot;</span> % epsilon, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">max</span>(beta**<span class="number">2</span> / (delta * epsilon), <span class="number">7</span> * beta / delta).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;m = %d&quot;</span> % m, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">int</span>((delta * m * (<span class="number">1</span> / beta - <span class="number">1</span>)).floor())</span><br><span class="line">    verbose(<span class="string">&quot;t = %d&quot;</span> % t, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        X = (<span class="number">0.5</span> * N ** (beta**<span class="number">2</span> / delta - epsilon)).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;X = %s&quot;</span> % X, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we could do this much faster, but this is a cheap step</span></span><br><span class="line">    <span class="comment"># compared to LLL</span></span><br><span class="line">    g = [x**j * N ** (m - i) * f**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(delta)]</span><br><span class="line">    g.extend([x**i * f**m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)])  <span class="comment"># h</span></span><br><span class="line"></span><br><span class="line">    B = Matrix(ZZ, <span class="built_in">len</span>(g), delta * m + <span class="built_in">max</span>(delta, t))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows()):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(g[i].degree() + <span class="number">1</span>):</span><br><span class="line">            B[i, j] = g[i][j] * X**j</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">sum</span>([ZZ(B[<span class="number">0</span>, i] // X**i) * x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.ncols())])</span><br><span class="line">    R = f.roots()</span><br><span class="line"></span><br><span class="line">    ZmodN = self.base_ring()</span><br><span class="line">    roots = <span class="built_in">set</span>([ZmodN(r) <span class="keyword">for</span> r, m <span class="keyword">in</span> R <span class="keyword">if</span> <span class="built_in">abs</span>(r) &lt;= X])</span><br><span class="line">    Nbeta = N**beta</span><br><span class="line">    <span class="keyword">return</span> [root <span class="keyword">for</span> root <span class="keyword">in</span> roots <span class="keyword">if</span> N.gcd(ZZ(self(root))) &gt;= Nbeta]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line">hint = <span class="number">34903932064178830653499046348212332783401351910283782992020948402621276719605</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">spv, i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">yield</span> Bin(spv, <span class="number">256</span>), Bin(Bin(spv).<span class="built_in">int</span> ^^ hint, <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">0</span>):</span><br><span class="line">        spv[i] = b</span><br><span class="line">        tsp = Bin(spv).<span class="built_in">int</span></span><br><span class="line">        tsq = tsp ^^ hint</span><br><span class="line">        p = tsp**<span class="number">2</span></span><br><span class="line">        q = tsq**<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= (pq - p * q) &lt;= <span class="number">2</span> ** (<span class="number">1024</span> - i + <span class="number">1</span>) <span class="keyword">and</span> <span class="number">0</span> &lt;= (</span><br><span class="line">            iroot(pq,<span class="number">2</span>)[<span class="number">0</span>] - tsp * tsq</span><br><span class="line">        ) &lt;= <span class="number">2</span> ** (<span class="number">512</span> - i + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> dfs(spv[:], i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spv = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> spc, sqc <span class="keyword">in</span> dfs(spv, <span class="number">0</span>):</span><br><span class="line">    d = pq - spc.<span class="built_in">int</span>**<span class="number">2</span> * sqc.<span class="built_in">int</span>**<span class="number">2</span></span><br><span class="line">    results.append((d, spc.<span class="built_in">int</span>, sqc.<span class="built_in">int</span>))</span><br><span class="line"><span class="keyword">for</span> i, (_, spci, sqci) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="comment">#print((spci - (iroot(pq,2)[0] // sqci)).bit_length())</span></span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copp_factor</span>(<span class="params">sp, leak=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak + <span class="number">1</span></span><br><span class="line">        P = Zmod(pq)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">        x = P.gen()</span><br><span class="line">        f = sp.<span class="built_in">int</span>**<span class="number">2</span> + (x &lt;&lt; shift) + <span class="number">2</span>*tb + <span class="number">1</span></span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak - <span class="number">1</span>)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        rs = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="comment">#rs = small_roots(f, X=X, beta=beta, epsilon=eps)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rs):</span><br><span class="line">            <span class="built_in">print</span>(sp.<span class="built_in">int</span>**<span class="number">2</span> + (tb &lt;&lt; shift) + <span class="built_in">int</span>(rs[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (_, spci, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(results)):</span><br><span class="line">    copp_factor(Bin(spci, <span class="number">256</span>))</span><br></pre></td></tr></table></figure>
<p>将运行结果填充至下面脚本中的sqrtplist中</p>
<p><br></p>
<p>exp_step2.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">N = <span class="number">85404423344841677974087657659736161235661371072424467828040714876602706438511794670195915251038316685200550396898521246532238184171610202260808362573973358649489859739377219665083353960986881177279315590581777896976153899765953910931555330824054172366095461986394627542626117519624886018101305667394230690241</span></span><br><span class="line">c = <span class="number">19771222413844352631385715488753476758377273736688852768996964594019231638669697870409256892886494956719082541038530128231778575768552216334354854019126139003782852207071549956953446472517410158388833668611141062328959917017080292879996106665465487753670322759387144032463518586362415629216383494479440197516</span></span><br><span class="line"></span><br><span class="line">sqrtplist = <span class="comment">#自行代入</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">6</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sqrtplist)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    sp = sqrtplist[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> tb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; leak):</span><br><span class="line">        <span class="comment">#print(&quot;copp&quot;, tb, int(time.time()))</span></span><br><span class="line">        shift = <span class="number">256</span> - leak</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">        f = sp**<span class="number">2</span> + (tb &lt;&lt; shift) + x</span><br><span class="line">        f = f.monic()</span><br><span class="line">        X = <span class="number">2</span> ** (<span class="number">256</span> - leak)</span><br><span class="line">        beta = <span class="number">0.499</span></span><br><span class="line">        eps = <span class="number">0.01</span></span><br><span class="line">        res = f.small_roots(X=X, beta=beta, epsilon=eps)</span><br><span class="line">        <span class="keyword">if</span>(res!=[]):</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="built_in">print</span>(sp**<span class="number">2</span> + (tb &lt;&lt; shift) + res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">p = <span class="number">6756521617869105417915102754795944450583448652752246233837766079298009351893501307888859133738834804209006551446537605217981998432259279870915861077557549</span></span><br><span class="line">q = N//p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>跑出结果可能需要6个小时到10个小时不等。如果你有更好的方式欢迎在评论区留言！</p>
<p>flag:</p>
<font size="4" color="red">cnss{We hav3 n0 0ther ch0ice but c0ppersm1th.}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目质量确实很不错，每道题目考察的知识点很有针对性，准备好好借鉴参考(<del>开偷</del>)。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CNSS-Summer-wp-misc</title>
    <url>/post/22e56931.html</url>
    <content><![CDATA[<p>做题记录</p>
<span id="more"></span>
<p>Rank：3</p>
<p><img src="/post/22e56931/image-20230916080821685.png" alt="image-20230916080821685"></p>
<h3 id="❤️-Signin"><a href="#❤️-Signin" class="headerlink" title="❤️ Signin"></a>❤️ Signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">听说有人在CNSS招新群的某个地方藏了一个隐秘的flag，到底在哪呢？</span><br><span class="line">快来加入招新群431060996</span><br></pre></td></tr></table></figure>
<p>题目：按照要求搜索群聊，群聊介绍中有一段base64，解密得flag：</p>
<p><img src="/post/22e56931/image-20230911100902419.png" alt="image-20230911100902419"></p>
<p>flag：</p>
<p><strong>cnss{W3Lc0m3_7o_Cn55_5umm3r！}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔎-侦探-CNSS-娘的秘密"><a href="#🔎-侦探-CNSS-娘的秘密" class="headerlink" title="🔎 侦探 CNSS 娘的秘密"></a>🔎 侦探 CNSS 娘的秘密</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">懒得写文案了，试着找出 CNSS 娘的秘密吧</span><br></pre></td></tr></table></figure>
<p>题目附件为一张图片：</p>
<p><img src="/post/22e56931/CNSSDoll.png" alt="CNSSDoll"></p>
<p>十六进制打开，在文件末尾看到flag：</p>
<p><img src="/post/22e56931/image-20230911101309673.png" alt="image-20230911101309673"></p>
<p>flag：</p>
<p><strong>cnss{W0w!!!Y0u_s4ww_m3!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🏆-重生之我在-CNSS-当-OIer"><a href="#🏆-重生之我在-CNSS-当-OIer" class="headerlink" title="🏆 重生之我在 CNSS 当 OIer"></a>🏆 重生之我在 CNSS 当 OIer</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述和输入输出格式都找不到了...但是身为超级 OIER 的你一定可以 AC 本题吧</span><br><span class="line"></span><br><span class="line">nc 47.108.140.140 1107</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">SRC = <span class="string">&#x27;/home/ctf/temp/code.c&#x27;</span></span><br><span class="line">BIN = <span class="string">&#x27;/home/ctf/temp/temp_bin&#x27;</span></span><br><span class="line">DATA = <span class="string">&#x27;/home/ctf/data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res_map = &#123;</span><br><span class="line">    <span class="string">&#x27;CE&#x27;</span>: <span class="string">&#x27;Compile Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TLE&#x27;</span>: <span class="string">&#x27;Time Limit Exceeded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;RE&#x27;</span>: <span class="string">&#x27;Runtime Error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;WA&#x27;</span>: <span class="string">&#x27;Wrong Answer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AC&#x27;</span>: <span class="string">&#x27;Accepted&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_excutable</span>(<span class="params">path, <span class="built_in">input</span>, ans, timeout</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;CE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = subprocess.run(</span><br><span class="line">            [<span class="string">f&quot;./<span class="subst">&#123;path&#125;</span>&quot;</span>],</span><br><span class="line">            <span class="built_in">input</span>=<span class="built_in">input</span>,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            timeout=timeout</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;TLE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;RE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = p.stdout.decode()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line">    lines = output.strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;AC&#x27;</span> <span class="keyword">if</span> lines == ans <span class="keyword">else</span> <span class="string">&#x27;WA&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your code (ending with two blank lines):&quot;</span>)</span><br><span class="line"></span><br><span class="line">    code1 = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        code1.append(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(code1) &gt;= <span class="number">2</span> <span class="keyword">and</span> code1[-<span class="number">1</span>] == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> code1[-<span class="number">2</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SRC, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fd1:</span><br><span class="line">        fd1.write(<span class="string">&#x27;\n&#x27;</span>.join(code1))</span><br><span class="line"></span><br><span class="line">    p = subprocess.run(</span><br><span class="line">        [<span class="string">&quot;gcc&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;-O2&quot;</span>, SRC, <span class="string">&quot;-o&quot;</span>, BIN],</span><br><span class="line">        stdout=sys.stdout,</span><br><span class="line">        stdin=subprocess.DEVNULL,</span><br><span class="line">        stderr=subprocess.STDOUT</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;input.in&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        instr = f.read()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(DATA, <span class="string">f&#x27;output.out&#x27;</span>), <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ans = f.read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    res = check_excutable(BIN, instr, ans, <span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Result: &#x27;</span>, res_map[res])</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;AC&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>简单翻译一下程序功能：输入一段c语言代码，送至code.c中，进行编译后，将input.in中的内容作为输入执行这段程序，并将程序输出结果与output.out中的内容做对比，如果结果一致，则会输出flag。</p>
<p>问题在于，我们并不知道input.in与output.out的内容是什么，也就无法根据需要写出对应程序。可是其实再仔细想想，题目要求其实仅仅是要求程序内容输出与output.out内容一致而已，而根据题目附件，output.out文件就在DATA目录下，所以其实只需要写一个能打印出output.out内容的c语言程序即可。</p>
<p>exp.c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="type">char</span> filename[] = <span class="string">&quot;/home/ctf/data/output.out&quot;</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = fgetc(file)) != EOF) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><img src="/post/22e56931/image-20230911102740014.png" alt="image-20230911102740014"></p>
<p>flag：</p>
<p><strong>cnss{y0u_4re_U1tim34ate_01er!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="❓-泻药，人在CNSS，刚打完招新"><a href="#❓-泻药，人在CNSS，刚打完招新" class="headerlink" title="❓ 泻药，人在CNSS，刚打完招新"></a>❓ 泻药，人在CNSS，刚打完招新</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参加CNSS招新赛是一种怎样的体验呢？</span><br></pre></td></tr></table></figure>
<p>题目的全部信息只有题目标题和题目描述，没有附件、没有靶机，因此基本可以确定为社工题。</p>
<p>直接搜索题目描述，就能在知乎上搜到一个回答，最后就有flag：</p>
<p><img src="/post/22e56931/image-20230911103024312.png" alt="image-20230911103024312"></p>
<p>flag：</p>
<p><strong>cnss{L3T_U$_$T4RT!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔮-東方希缇符"><a href="#🔮-東方希缇符" class="headerlink" title="🔮 東方希缇符"></a>🔮 東方希缇符</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">试着找出最新最热（确信）东方新作中的 flag 吧！</span><br><span class="line">Hint：flag 在游戏资源包内</span><br></pre></td></tr></table></figure>
<p>题目给了th08的游戏包，结合hint知道应该是要对资源包解包得flag。</p>
<p>thxx解包参考：</p>
<p><a href="https://www.bilibili.com/read/cv13353380/">关于东方project系列正作的魔改教程以及注意事项 - 哔哩哔哩 (bilibili.com)</a></p>
<p>跟着一步一步做：</p>
<p>1、下载工具</p>
<p>2、选择好文件与对应游戏(th08)，进行解包</p>
<p><img src="/post/22e56931/image-20230911103506296.png" alt="image-20230911103506296"></p>
<p>3、在解包得到的资源中发现flag.txt</p>
<p><img src="/post/22e56931/image-20230911103618535.png" alt="image-20230911103618535"></p>
<p>flag：</p>
<p><strong>cnss{Y0u_4re_T0uhou_M4st3er_n0w!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h3><p>参考我另一篇文章：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/77e39860.html#more">misc趣题(一) | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p><br></p>
<p><br></p>
<h3 id="☁️-Hurrison-的网站"><a href="#☁️-Hurrison-的网站" class="headerlink" title="☁️ Hurrison 的网站"></a>☁️ Hurrison 的网站</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hurrison 刚刚学会搭建网站，听说套了 Cloudflare 之后大黑客 Casio 就找不到服务器 IP 了</span><br><span class="line">Hint：flag格式如下：</span><br><span class="line">cnss&#123;IPv4&#125;</span><br><span class="line">IPv4 格式为 xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cnss2023catchme.hurrison.com/</span><br></pre></td></tr></table></figure>
<p>根据题目描述，这题是要寻找隐藏在Cloudflare下的服务器ip地址，直接对这个要求进行搜索：</p>
<p><img src="/post/22e56931/image-20230911104238020.png" alt="image-20230911104238020"></p>
<p>逐个尝试文章中的方法，最后发现这个方法很有效果：</p>
<p><img src="/post/22e56931/image-20230911104618404.png" alt="image-20230911104618404"></p>
<p>到<a href="https://securitytrails.com/">SecurityTrails: Data Security, Threat Hunting, and Attack Surface Management Solutions for Security Teams</a>搜索对应URL，并不能直接在历史数据里看到结果。开一开脑洞，搜索hurrison.com，就有很多子域名：</p>
<p><img src="/post/22e56931/image-20230911111836344.png" alt="image-20230911111836344"></p>
<p>逐个查看，并结合Censys逐个搜索域名，如下：</p>
<p><img src="/post/22e56931/image-20230911112020297.png" alt="image-20230911112020297"></p>
<p>找到一个在给定范围内的ip地址就可以了。</p>
<p>flag：</p>
<p><strong>cnss{103.239.247.22}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="💻-cn55Terminal"><a href="#💻-cn55Terminal" class="headerlink" title="💻 cn55Terminal"></a>💻 cn55Terminal</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述又忘了，凑合用吧👇</span><br><span class="line">curl -sL https://transfer.sh/VKyC2P8CPw/id.txt | nc 124.221.34.13 50024</span><br><span class="line">Update: 为避免这行命令可能造成不必要的误解，还是试试手动体验 cn55Terminal 吧~</span><br><span class="line">如果你访问不了，或者想手动，这里也贴出 id.txt</span><br></pre></td></tr></table></figure>
<p>id.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">.@@...........@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">..............@@......................</span><br><span class="line">.@@.....@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@.....@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@....@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@...@@@@@@@@@@......................</span><br><span class="line">.@@....@@@@@@@@@......................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br><span class="line">......................................</span><br></pre></td></tr></table></figure>
<p>xshell打开，缩小界面看到的命令如下：</p>
<p><img src="/post/22e56931/image-20230911144054892.png" alt="image-20230911144054892"></p>
<p>可以看到，命令行前的内容以字符画的形式展示出来了，合理猜测，这道题的意思是识别字符画形式的指令并执行。这样的话，我们就需要输入字符画形式的linux指令。先试一试将题目给出的id上传，看看返回内容：</p>
<p><img src="/post/22e56931/image-20230911144414307.png" alt="image-20230911144414307"></p>
<p>可以看出确实和想象的一模一样，终端执行了id指令。那么接下来就是找脚本，将”cat flag”生成为字符画。最后找到了一个脚本，但是他只能将图片转化为字符画，没事，先生成一张图片：</p>
<p><img src="/post/22e56931/image-20230911144603284.png" alt="image-20230911144603284"></p>
<p>然后用如下脚本转化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">out_img = img.convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 图片转换为灰度模式</span></span><br><span class="line">w, h = out_img.size  <span class="comment"># 返回图片大小</span></span><br><span class="line">n=<span class="number">600</span>/<span class="built_in">max</span>(w,h) <span class="comment">#图像缩小倍数，不然图片转换后会很大</span></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w * n), <span class="built_in">int</span>(h * n*<span class="number">0.5</span>)))  <span class="comment"># 因字符的宽度一般大于2倍的高度</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   out_img = out_img.resize((<span class="built_in">int</span>(w), <span class="built_in">int</span>(h )))</span><br><span class="line">w, h = out_img.size</span><br><span class="line"><span class="comment">#asciis=&#x27;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,&quot;^\ &#x27;</span></span><br><span class="line">asciis = <span class="string">&quot;@.&quot;</span>  <span class="comment"># 灰度表</span></span><br><span class="line">texts = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line"> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">       gray = out_img.getpixel((col, row))</span><br><span class="line">       texts += asciis[<span class="built_in">int</span>(gray / <span class="number">255</span> * (<span class="built_in">len</span>(asciis) - <span class="number">1</span>))]  <span class="comment"># 根据灰度值选择不同复杂度的 ASCII 字符</span></span><br><span class="line"> texts += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(texts)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<p>得到1.txt文件，打开即是字符画：</p>
<p><img src="/post/22e56931/image-20230911144716398.png" alt="image-20230911144716398"></p>
<p>上传给Terminal，即得到flag：</p>
<p><img src="/post/22e56931/image-20230911144745871.png" alt="image-20230911144745871"></p>
<p>flag：</p>
<p><strong>cnss{funny_ascii_ocr_duibudui}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>misc的知识面涉及很广，很多知识都是边做题边学，很多工具也是边做题边下的，一点一点积累吧。</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>2023-CatCTF-wp-crypto</title>
    <url>/post/9c1c22d0.html</url>
    <content><![CDATA[<p>以下为本校第一届新生赛的Crypto方向官方题解</p>
<span id="more"></span>
<h2 id="Baby"><a href="#Baby" class="headerlink" title="Baby"></a>Baby</h2><p>该分类用于热身。</p>
<h3 id="Baby-Classical"><a href="#Baby-Classical" class="headerlink" title="Baby_Classical"></a>Baby_Classical</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hvhj ucmg i ynmr ramwj wnq t abjeg jbbyqe tgkt. Jaeewhvj bhb qte mjr ygdmi mee, znb rtsg my iqq hrp zzfsdzmmpjw, wum wqi sog igwb bhnr mw lnvr ram hmiyb gmcy. Oaax amj gntx pjw a ygmbqj cnn fiij os pxl ajlicm. Jjhahqx qy xuvrxl mjr fm pmqq, aab lpj baarxl yt wryk qy fly ram ynmr, qam hfmr rh jj pnbug ix Qigrem Wjd Egwqsl Hbmw. Wsj dnw amw rogfxz xfiq rh pjw: &quot;Cbkx Tnytyc Kmi Wiqggo Mtoq. Fxzj ns n nbmhj os atsj fnq y uwyylr my ense. Gydm ymez rh gtzr tptvirogfxz. Xme vq lqhp aab pmfp, aab mpjd wvje lt mee uxtq. Riab rwzw mnlgmwx aab zqaj hrp fg lwerrbvlx. Brftdj dohplmqk oa ram bfy, nlw lt sog jxiaj tuc iiym, oe whc rngur yiqq dbug isi bects yme tjtax, fnq rams yhrpx enql oc gwymiae yww dohp lqhp geyglrttuck.</span><br><span class="line">Pfma, Amp gtz kamp emft vq Oqljnrpx isi hrpx qx dohp ytfl cnrvbkHlnqlqhflPgipjwifDnvsd!</span><br></pre></td></tr></table></figure>
<p>最简单快速的方法当然是用Vigenere在线爆破网站：</p>
<p><a href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de</a></p>
<p>但是，对维吉尼亚密码的分析是很有趣也很有价值的，想进一步了解的同学可以自己搜索一下，也可以看我写的一篇题解：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/165cec8c.html#more">Crypto趣题-古典密码 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag:catctf&#123;ClassicalCipherisFunny&#125;</span><br><span class="line"></span><br><span class="line">Key : Tiffany</span><br><span class="line"></span><br><span class="line">message : Once upon a time there was a sweet little girl. Everyone who saw her liked her, but most of all her grandmother, who did not know what to give the child next. Once she gave her a little cap made of red velvet. Because it suited her so well, and she wanted to wear it all the time, she came to be known as Little Red Riding Hood. One day her mother said to her: &quot;Come Little Red Riding Hood. Here is a piece of cake and a bottle of wine. Take them to your grandmother. She is sick and weak, and they will do her well. Mind your manners and give her my greetings. Behave yourself on the way, and do not leave the path, or you might fall down and break the glass, and then there will be nothing for your sick grandmother.</span><br><span class="line">Haha, Now you know what is Vigenere and here is your flag catctfClassicalCipherisFunny!</span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><p>该分类难度较低，适合入门新手了解各种加密基础概念以及crypto方向赛题的形式。</p>
<h3 id="Easy-AES"><a href="#Easy-AES" class="headerlink" title="Easy_AES"></a>Easy_AES</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“没有密钥还想解AES？”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(text.encode()) % <span class="number">16</span>:</span><br><span class="line">       add = <span class="number">16</span> - (<span class="built_in">len</span>(text.encode()) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       add = <span class="number">0</span></span><br><span class="line">    text = text + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line">    <span class="keyword">return</span> text.encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag</span>):</span><br><span class="line">    key=os.urandom(<span class="number">4</span>)*<span class="number">8</span></span><br><span class="line">    iv=os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;gift :&quot;</span> , bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">    aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    enc_flag = aes.encrypt(pad(flag))</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line">encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gift : 63318252562251464307452832207215838563457134165318957002450688189243132668670</span></span><br><span class="line"><span class="comment">#b&#x27;\xbc\x87\xa21\x0bK\x05!\xeeHcx\xc5\x921\x01\xea\xe6\xa1\t\x1eN\x01\xe5@t\xa4Ih\xc9\x89\xa8\xa6+5\x01\xd5\r\xea\xc2\x99\xa5Fr\x8b\x04\xc3\x81&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目传达的意思很明显，通过gift恢复出AES的key与iv向量，然后进行AES解密得到flag。</p>
<p>很自然地会有两种解题思路:</p>
<ul>
<li>爆破。由于key是由相同的四个字节拼接八次形成，那么实际需要爆破的只有四个字节，计算下来复杂度为$2^{32}$，虽然仍然比较大，但并非完全不可行。</li>
<li>直接恢复key。观察可知，key长度为32字节，而iv仅有16字节，那么二者相异或后，高位正好就是key的高位，而key是重复的字节拼接成的，就可以直接得到key，得到key后将key与gift异或即可得到iv向量，从而可以进行AES解密。</li>
</ul>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">gift = <span class="number">63318252562251464307452832207215838563457134165318957002450688189243132668670</span></span><br><span class="line">c = <span class="string">b&#x27;\xbc\x87\xa21\x0bK\x05!\xeeHcx\xc5\x921\x01\xea\xe6\xa1\t\x1eN\x01\xe5@t\xa4Ih\xc9\x89\xa8\xa6+5\x01\xd5\r\xea\xc2\x99\xa5Fr\x8b\x04\xc3\x81&#x27;</span></span><br><span class="line"></span><br><span class="line">key_low = (gift &gt;&gt; <span class="number">128</span>)</span><br><span class="line">key_num = key_low + (key_low &lt;&lt; <span class="number">128</span>)</span><br><span class="line">iv_num = key_num ^ gift</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(key_num)</span><br><span class="line">iv = long_to_bytes(iv_num)</span><br><span class="line"></span><br><span class="line">aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag = aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = &quot;catctf&#123;5d02b1a6-39f7-2bca-3807-4978f2dab90c&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Easy-ECC"><a href="#Easy-ECC" class="headerlink" title="Easy_ECC"></a>Easy_ECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">a = getPrime(<span class="number">256</span>)</span><br><span class="line">b = getPrime(<span class="number">256</span>)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = getPrime(<span class="number">16</span>)</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">c1 = m + r * K</span><br><span class="line">c2 = r * G</span><br><span class="line">c = bytes_to_long(flag) * <span class="built_in">int</span>(m[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1 = <span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2 = <span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 87092522748098669829992285868403106182336017704139443077383531853456435622471</span></span><br><span class="line"><span class="string">a = 101299657691551386965604314830539394563059305182047573016174562953680113433483</span></span><br><span class="line"><span class="string">b = 103515188195423215634716325708078231771637293454864925173213911439839009583929</span></span><br><span class="line"><span class="string">c1 = (32318985932447513653239654085604766474975548799844355660840553348774266479326 : 67713618814819066413787229141414188948309715152902332753488481625841113997553 : 1)</span></span><br><span class="line"><span class="string">c2 = (10230302454001221645915592721533577303668058584124979714911091958630449119684 : 14068985325436327334711052593723601048735307838059332297359146101024917589355 : 1)</span></span><br><span class="line"><span class="string">c = 243352246360343414630771057155785496615231620377377147256856445931803440018017495259165864356164563380145135780231169307023180916540178875184090012260135703488882798862757944415926551</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>简单的椭圆曲线加密，在完成本题前需要大致了解一下椭圆曲线加密的基本方式。</p>
<p>在本题中，椭圆曲线由下列代码段生成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">a = getPrime(<span class="number">256</span>)</span><br><span class="line">b = getPrime(<span class="number">256</span>)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br></pre></td></tr></table></figure>
<p>其生成的椭圆曲线为下列形式(也是最常用的形式)：</p>
<script type="math/tex; mode=display">
y^2 = x^3 + a*x + b \quad (mod\;p)</script><p>mod p的含义，就是指这条曲线被部署在了模p的有限域上，那么这条曲线的相关运算均在模p下进行。</p>
<p>接下来的代码段则是进行椭圆曲线上的加密过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = getPrime(<span class="number">16</span>)</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">c1 = m + r * K</span><br><span class="line">c2 = r * G</span><br><span class="line">c = bytes_to_long(flag) * <span class="built_in">int</span>(m[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>逐步解释一下：</p>
<ul>
<li>m和G为椭圆曲线上随机取的两个点</li>
<li>生成16比特的随机素数密钥k，取k倍的点G作为点K(关于椭圆曲线上的点如何数乘可以自行查阅)</li>
<li>再生成256比特的随机素数r，并使用r生成c1，c2两个点</li>
<li>用随机生成的m点的横坐标乘上flag，并给出密文</li>
</ul>
<p>目标很明确，要求出flag就需要m的坐标，因此要利用给定的c1、c2两个点以及椭圆曲线来求出m点。由于：</p>
<script type="math/tex; mode=display">
c1 = m + r*K=m+r*k*G</script><script type="math/tex; mode=display">
c2 = r*G</script><p>所以有：</p>
<script type="math/tex; mode=display">
m = c1 - k*c2</script><p>而本题中产生的随机密钥k仅有16比特，因此可以爆破求解。同时请注意，关于椭圆曲线相关点的操作需要用到sage中的一些内置函数，可以自行查阅相关用法。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">87092522748098669829992285868403106182336017704139443077383531853456435622471</span></span><br><span class="line">a = <span class="number">101299657691551386965604314830539394563059305182047573016174562953680113433483</span></span><br><span class="line">b = <span class="number">103515188195423215634716325708078231771637293454864925173213911439839009583929</span></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">c1 = E(<span class="number">32318985932447513653239654085604766474975548799844355660840553348774266479326</span> , <span class="number">67713618814819066413787229141414188948309715152902332753488481625841113997553</span>)</span><br><span class="line">c2 = E(<span class="number">10230302454001221645915592721533577303668058584124979714911091958630449119684</span> , <span class="number">14068985325436327334711052593723601048735307838059332297359146101024917589355</span>)</span><br><span class="line">c = <span class="number">243352246360343414630771057155785496615231620377377147256856445931803440018017495259165864356164563380145135780231169307023180916540178875184090012260135703488882798862757944415926551</span></span><br><span class="line"></span><br><span class="line">klist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">15</span>,<span class="number">2</span>**<span class="number">16</span>) <span class="keyword">if</span> isPrime(i)]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> klist:</span><br><span class="line">    m = <span class="built_in">int</span>((c1 - k*c2)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span>(c % m == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(c//m))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;896534a9-9498-23ea-cb65-d95693fb9a3a&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Easy-LFSR"><a href="#Easy-LFSR" class="headerlink" title="Easy_LFSR"></a>Easy_LFSR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暂无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">list</span>(<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">351</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">int</span>(flag[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    flag.append(flag[i] ^ flag[i+<span class="number">100</span>] ^ flag[i+<span class="number">200</span>] ^ flag[i+<span class="number">300</span>] ^ flag[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(flag[-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="commentspan></span><br></pre></td></tr></table></figure>
<p>线性移位反馈寄存器的特征很明显，由于给了flag的二进制串长度为定长343，所以该LFSR的流密码产生形式就可以表述为：(加为模二加法，即异或)</p>
<script type="math/tex; mode=display">
x[i+351]\;=\;x[i]\;+\; x[i+100]\;+\;x[i+200]\;+\;x[i+300]\;+\;x[i+350]</script><p>而根据异或的可逆特点，左右同时进行如下处理：</p>
<script type="math/tex; mode=display">
(x[i]\;+\;x[i+351])+\;x[i+351]\;=\;x[i]\;+\; x[i+100]\;+\;x[i+200]\;+\;x[i+300]\;+\;x[i+350]\;+(x[i]\;+\;x[i+351])</script><p>即：</p>
<script type="math/tex; mode=display">
x[i]\;=\; x[i+100]\;+\;x[i+200]\;+\;x[i+300]\;+\;x[i+350]\;+ \;x[i+351]</script><p>也就是说，已知等式右侧五个二进制位的值，就可以轻松还原出等式左侧$\;x[i]\;$的值，而题目信息虽然将flag二进制串全部隐去，却产生了充足位数的流密码，因此可以还原出flag值。</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">clist = <span class="built_in">list</span>(<span class="string">&quotquot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(clist)):</span><br><span class="line">    clist[i] = <span class="built_in">int</span>(clist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">351</span>):</span><br><span class="line">    clist.insert(<span class="number">0</span>,clist[<span class="number">100</span>-<span class="number">1</span>] ^ clist[<span class="number">200</span>-<span class="number">1</span>] ^ clist[<span class="number">300</span>-<span class="number">1</span>] ^ clist[<span class="number">349</span>] ^ clist[<span class="number">350</span>])</span><br><span class="line"></span><br><span class="line">temp = clist[:<span class="number">351</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">    temp[i] = <span class="built_in">str</span>(temp[i])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(temp),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;ea92eafe-10eb-2937-3681-ef760ea9f111&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Easy-hash"><a href="#Easy-hash" class="headerlink" title="Easy_hash"></a>Easy_hash</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">啊哈哈哈哈哈嘻嘻嘻嘻</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myhash</span>(<span class="params">m</span>):</span><br><span class="line">    blocks = [m[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        temp += ((i%<span class="number">4</span>)*bytes_to_long(blocks[i]))</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(long_to_bytes(temp)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    m = os.urandom(<span class="number">128</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m =&quot;</span>,bytes_to_long(m))</span><br><span class="line">    fake_m = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;give me a valid value:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span>(fake_m == m):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hacker!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">if</span>(myhash(fake_m) == myhash(m)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    table = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">    prefix = <span class="string">&quot;&quot;</span>.join([random.choice(table) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line">    <span class="built_in">print</span>(prefix)</span><br><span class="line">    m = <span class="built_in">input</span>(<span class="string">&quot;give me a valid message:&quot;</span>)</span><br><span class="line">    fake_prefix = <span class="built_in">str</span>(hashlib.md5(m.encode()).hexdigest())[:<span class="number">6</span>]</span><br><span class="line">    <span class="keyword">if</span>(fake_prefix == prefix):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Congratulations!The flag is :&quot;</span>,flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line"></span><br><span class="line">task1()</span><br><span class="line">task2()</span><br></pre></td></tr></table></figure>
<p>题目分为两个task，均要求给出一个指定条件的哈希碰撞，分别是：</p>
<ul>
<li>给出一个自定义的哈希函数的碰撞</li>
<li>给出一个md5的前缀的碰撞</li>
</ul>
<p>题目分析也就分两个task展开。</p>
<h4 id="task1"><a href="#task1" class="headerlink" title="task1"></a>task1</h4><p>观察自定义的哈希函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myhash</span>(<span class="params">m</span>):</span><br><span class="line">    blocks = [m[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        temp += ((i%<span class="number">4</span>)*bytes_to_long(blocks[i]))</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(long_to_bytes(temp)).hexdigest()</span><br></pre></td></tr></table></figure>
<p>可以看到，首先，他只使用了明文的前128个字节进行哈希，所以第一种做法就是：直接在给出的m串加上后缀，就能实现绕过，并成功哈希碰撞。</p>
<p>那么如果限制了输入长度也必须为128字节呢？同样可以进行碰撞。首先明白，该哈希函数把传递进来的参数，即字节串m按16字节分割成8块，并以这些块为单位进行哈希。观察到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    temp += ((i%<span class="number">4</span>)*bytes_to_long(blocks[i]))</span><br></pre></td></tr></table></figure>
<p>8个字节，但是仅仅对4取模，说明位置模4相等的块，前面的乘数是一样的，因此任取一组位置模4下相同的块进行位置调换即可实现哈希碰撞，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = </span><br><span class="line">m = long_to_bytes(m)</span><br><span class="line">blocks = [m[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">t = blocks[<span class="number">0</span>]</span><br><span class="line">blocks[<span class="number">0</span>] = blocks[<span class="number">4</span>]</span><br><span class="line">blocks[<span class="number">4</span>] = t</span><br><span class="line">b = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    b += blocks[i]</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(b))</span><br></pre></td></tr></table></figure>
<h4 id="task2"><a href="#task2" class="headerlink" title="task2"></a>task2</h4><p>第二部分要求给出一个任意字符串，其md5的前六位16进制字符与给定的前缀相等。</p>
<p>如果受思维定势影响，可能会去查阅md5的算法细节，研究如何成功实现md5的前缀碰撞，但是那样做就会非常复杂。实际上，如果将md5的前6个字符当成一个6位的完全随机的十六进制串，那么他一共存在16^6种可能性，也就是2^24种可能性。</p>
<p>也就是说，我们非常随意的生成一个字符串，如果将md5的过程近似看作完全随机的话，那么这个字符串前六位与给定的前六位相等的概率就是1/(2^24),看上去非常低。而运用概率论的相关知识，我们随机生成n个字符串，至少有一组与给定的前缀相等的概率就是：</p>
<script type="math/tex; mode=display">
1-(1-\frac{1}{2^{24}})^n</script><p>而可以计算出，当随机生成2^24个字符串，成功的概率就超过了60%，这也是生日攻击的理论基础。</p>
<p>而如何生成随机字符串就看个人喜好了。</p>
<p>flag：<strong>catctf{HHhhHHhhHHhHa4a44a4a__5s5s55ssHHhhHH!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="bear的密码机"><a href="#bear的密码机" class="headerlink" title="bear的密码机"></a>bear的密码机</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你偷偷潜入了Nemo的办公室，Nemo正在睡午觉。于是你获得了Nemo的密码机的临时加密权限。现在情况紧急，你只有三分钟的时间获得flag！</span><br></pre></td></tr></table></figure>
<p>没有题目附件，仅仅给了一个交互实例，出这题目的目的也就是让大家体验一下选择明文攻击。按照提示输入几个相同字符，就会发现同一字符都会被加密成相同字符，也就是说这就是一个单表代换密码。那么把flag所有可能的字符集合都输入进去，就能得到对应的所有加密字符集合，用这些加密字符集合对flag密文进行解密就好。</p>
<p>加密源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dic_enc = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>)]</span><br><span class="line">dic_dec = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>)]</span><br><span class="line">random.shuffle(dic_dec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m</span>):</span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        c += dic_dec[dic_enc.index(i)]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag_enc =&quot;</span>,enc(flag))</span><br><span class="line">time_start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    time_end = time.time()</span><br><span class="line">    <span class="keyword">if</span>(time_end-time_start &gt; <span class="number">180</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You&#x27;re under arrest,hacker!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    m = <span class="built_in">input</span>(<span class="string">&quot;message :&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cipher :&quot;</span>,enc(m))</span><br></pre></td></tr></table></figure>
<p>secret：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = &quot;catctf&#123;Tot4l1y_A_Cryp70_m45t3r!&#125;&quot;</span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="bear的超级数字口令"><a href="#bear的超级数字口令" class="headerlink" title="bear的超级数字口令"></a>bear的超级数字口令</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">之前的密码机导致flag失窃了！Nemo很生气，于是重新设计了一个自己都通不过的数字口令，这下flag肯定安全了！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">MENU = <span class="string">&#x27;&#x27;&#x27;1.Encrypt</span></span><br><span class="line"><span class="string">2.Submit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">table = string.digits</span><br><span class="line">temp = random.choices(table,k=<span class="number">30</span>)</span><br><span class="line">passwd = <span class="string">&quot;&quot;</span>.join(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">round</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    choice = <span class="built_in">input</span>(MENU)</span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">        enckey = [random.getrandbits(<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line">        s = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(passwd)):</span><br><span class="line">            s += <span class="built_in">str</span>((<span class="built_in">int</span>(passwd[i])+enckey[i]) % <span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">elif</span>(choice == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">        passwd_1 = <span class="built_in">input</span>(<span class="string">&quot;Give me the password :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(passwd == passwd_1):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You must be admin and here is your flag :&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hacker!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;What are you doing?&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>题目会生成一个30位的由数字组成的随机passwd串，并且提供30次交互机会：</p>
<ul>
<li>输入1，可以对这个字符串进行随机加密，并返回密文</li>
<li>输入2，可以检查passwd，若输入的数字串与passwd相等，则得到flag</li>
</ul>
<p>完成本题需要捕捉到加密方式的漏洞，仔细观察加密方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enckey = [random.getrandbits(<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(passwd)):</span><br><span class="line">    s += <span class="built_in">str</span>((<span class="built_in">int</span>(passwd[i])+enckey[i]) % <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>他的加密逻辑是，随机生成30个加数，并依次与passwd中的每个数字分别相加并模10，给出这个加密后的串。</p>
<p>那么这么做会有什么问题呢？可以看到，30个加数是由该方式产生的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.getrandbits(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>加数是三个随机比特位组成的整数，那么随机生成的加数范围仅为0-7，也就是说，每个数字+8，+9的结果，在密文中是不会出现的。因此，我们可以多次输入1，加密passwd串，统计每个位置没有出现过的数字，就能概率性获取passwd中的所有数字。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=remote(<span class="string">&quot;10.10.175.100&quot;</span>,<span class="number">36337</span>)</span><br><span class="line">        test = [&#123;<span class="built_in">str</span>(i):<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125; <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#getmsg</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">            r.recvuntil(<span class="string">b&#x27;2.Submit&#x27;</span>)</span><br><span class="line">            r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">            r.recvline()</span><br><span class="line">            s = r.recvline().strip().decode()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">                test[j][<span class="built_in">str</span>(<span class="built_in">int</span>(s[j]))] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span>(i[<span class="built_in">str</span>(j)] == <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">if</span>(j != <span class="number">0</span>):</span><br><span class="line">                        passwd += <span class="built_in">str</span>((j + <span class="number">2</span>) % <span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span>(i[<span class="built_in">str</span>(<span class="number">9</span>)] == <span class="number">0</span>):</span><br><span class="line">                            passwd += <span class="string">&quot;1&quot;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            passwd += <span class="string">&quot;2&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#getflag</span></span><br><span class="line">        r.recvuntil(<span class="string">b&#x27;2.Submit&#x27;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;Give me the password :&quot;</span>)</span><br><span class="line">        r.sendline(passwd.encode())</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        r.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        r.close()</span><br><span class="line">        </span><br><span class="line"><span class="comment">#catctf&#123;EnCrypt10n_n0t_5ecUR3_eNoUgh!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Easy-MTP"><a href="#Easy-MTP" class="headerlink" title="Easy_MTP"></a>Easy_MTP</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">assert</span>(length == <span class="number">343</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genbit</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(randint(<span class="number">0</span>,p)*randint(<span class="number">0</span>,p) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>():</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        s += genbit()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(m^genkey()))</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>题目将flag串转化为整数，并用genkey方式生成100个随机整数，分别与flag串进行异或得到密文，这个采用的方式就是多次一密(Many-Time-Pad)。</p>
<p>而突破这道题的关键也就是发现genkey的漏洞，可以看到，genkey方式就是调用343次genbit函数，而genbit函数实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genbit</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(randint(<span class="number">0</span>,p)*randint(<span class="number">0</span>,p) &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>也就是随机生成两个数，并取其乘积的最低位作为生成比特。似乎没问题，但是仔细一想就会发现，genbit生成0和1的概率有巨大差别。这是因为，只有奇数乘奇数才能得到奇数，也就是最低比特为1。因此genbit方式生成0、1的概率之比为3：1。</p>
<p>因此对任一比特位进行分析，在100条密文中，出现次数更多的就很大概率是flag串的对应比特位(因为异或0等于本身)。如此就可以进行统计从而还原flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    t.append(<span class="built_in">bin</span>(<span class="built_in">int</span>(c[i]))[<span class="number">2</span>:].zfill(<span class="number">343</span>))</span><br><span class="line"></span><br><span class="line">m = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">343</span>):</span><br><span class="line">    count0 = <span class="number">0</span></span><br><span class="line">    count1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        <span class="keyword">if</span>(t[j][i] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            count0 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(count0 &gt; count1):</span><br><span class="line">        m += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#catctf&#123;Th3_Pr0b4biI1ty_i5_n0T_th3_54meHhH!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Middle"><a href="#Middle" class="headerlink" title="Middle"></a>Middle</h2><p>该分类难度适中，存在一定思维量，适合接触crypto不久的选手进行初进阶练习。</p>
<h3 id="Middle-XOR"><a href="#Middle-XOR" class="headerlink" title="Middle_XOR"></a>Middle_XOR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异或了什么？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">dic = string.ascii_uppercase + string.ascii_lowercase + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">assert</span>(i <span class="keyword">in</span> dic)</span><br><span class="line"></span><br><span class="line">XOR_net = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">           [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">           [<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">           [<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">           [<span class="number">7</span>,<span class="number">10</span>],</span><br><span class="line">           [<span class="number">2</span>,<span class="number">9</span>,<span class="number">15</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">4</span>,<span class="number">15</span>],</span><br><span class="line">           [<span class="number">4</span>,<span class="number">9</span>,<span class="number">13</span>],</span><br><span class="line">           [<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>],</span><br><span class="line">           [<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>],</span><br><span class="line">           [<span class="number">11</span>,<span class="number">12</span>,<span class="number">15</span>],</span><br><span class="line">           [<span class="number">2</span>,<span class="number">5</span>],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">12</span>,<span class="number">14</span>],</span><br><span class="line">           [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">           [<span class="number">0</span>,<span class="number">2</span>,<span class="number">10</span>]</span><br><span class="line">           ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">block</span>):</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(block) == <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    list_block = <span class="built_in">list</span>(block)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_block)):</span><br><span class="line">        list_block[i] = <span class="built_in">int</span>(list_block[i])</span><br><span class="line">    </span><br><span class="line">    enc_block = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(XOR_net)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> XOR_net[i]:</span><br><span class="line">            enc_block[i] ^= list_block[j]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc_block)):</span><br><span class="line">        enc_block[i] = <span class="built_in">str</span>(enc_block[i])</span><br><span class="line"></span><br><span class="line">    enc_block = <span class="string">&quot;&quot;</span>.join(enc_block)</span><br><span class="line">    <span class="keyword">return</span> enc_block</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">mbin = <span class="built_in">str</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(mbin) % <span class="number">16</span> != <span class="number">0</span>):</span><br><span class="line">    pad = <span class="string">&quot;0&quot;</span>*(<span class="number">16</span>-(<span class="built_in">len</span>(mbin) % <span class="number">16</span>))</span><br><span class="line">    mbin = pad + mbin</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mbin) // <span class="number">16</span>):</span><br><span class="line">    block = mbin[<span class="number">16</span>*i:<span class="number">16</span>*i+<span class="number">16</span>]</span><br><span class="line">    cipher += encrypt(block)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="comment">#1110011101111100001111110001011000111000110001100100001111111100010000111011010001110110100110010010000111011100111001100011001100111110001000100011111101000010010110111010011001110111100110010100010100010000010001000001110001110001001011010010011000110111111000011110000010011101001010100011111001011010</span></span><br></pre></td></tr></table></figure>
<p>先理顺本题目的加密逻辑：</p>
<ul>
<li>首先，将明文转化为二进制串。</li>
<li>在该二进制串头部进行0的填充，使其长度为16的整数倍。</li>
<li>将二进制串划分为长度为16的若干组，并分别进行encrypt函数的加密。</li>
<li>将加密结果拼接为新字符串后，给出密文二进制串。</li>
</ul>
<p>那么核心就在于encrypt函数的具体实现。不难发现，encrypt函数虽然较长，但是大部分篇幅都是在进行列表与字符串、整型与字符型的转换。而真正有用的只有下面这一小段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc_block = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(XOR_net)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> XOR_net[i]:</span><br><span class="line">        enc_block[i] ^= list_block[j]</span><br></pre></td></tr></table></figure>
<p>其实也很简单，16位密文初始均为0，按照XOR_net这个异或表对明文串进行异或，得到16位密文，也就是：(以下加法均为模二加，也就是异或)</p>
<script type="math/tex; mode=display">
c[0] = m[1]+m[2]+m[3]+m[5]+m[6]</script><script type="math/tex; mode=display">
c[1] = m[1]+m[2]+m[3]+m[4]+m[5]+m[6]</script><script type="math/tex; mode=display">
...</script><script type="math/tex; mode=display">
c[15] = m[0]+m[2]+m[10]</script><p>所以现在的任务就是根据这样的加密过程找出加密过程的漏洞，从而根据密文的比特位还原出明文。而很明显，这个XOR_net存在很多明文比特位的泄漏，就拿$\;c[0]\;$和$\;c[1]\;$的产生过程来举例，因为：</p>
<script type="math/tex; mode=display">
c[0] = m[1]+m[2]+m[3]+m[5]+m[6]</script><script type="math/tex; mode=display">
c[1] = m[1]+m[2]+m[3]+m[4]+m[5]+m[6]</script><p>两式相加：</p>
<script type="math/tex; mode=display">
c[0] +c[1] = (m[1]+m[2]+m[3]+m[4]+m[5]+m[6])+(m[1]+m[2]+m[3]+m[4]+m[5]+m[6])\\
=(m[1]+m[1])+(m[2]+m[2])+(m[3]+m[3])+(m[5]+m[5])+(m[6]+m[6])+m[4]\\
=m[4]</script><p>所以$\quad m[4]=c[0]+c[1]\quad$，明文的该比特位也就因为密文的这两个比特位泄漏了。</p>
<p>继续往下看，又注意到一点重要信息：明文泄漏出的比特位也可以对还原密文产生帮助。就比如，由于：</p>
<script type="math/tex; mode=display">
c[2]=m[2]+m[4]</script><p>而我们刚才才解出了$\quad m[4]\quad$的值，那么也就能获得泄漏的$\quad m[2]\quad$，这是因为：</p>
<script type="math/tex; mode=display">
c[2]+m[4]=m[2]+m[4]+m[4]</script><p>所以：</p>
<script type="math/tex; mode=display">
m[2]=c[2]+m[4]</script><p>以此类推，我们能使用这个漏洞百出的异或表，最终获得14个完全确定的比特位，而剩下的两位比特位虽然并不确定，但经推理其异或值是确定的，同时结合题目信息：flag的字符均为给定字典中的字符，所以可以采取爆破手段进行处理，从而得到最终flag字符串。</p>
<h4 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h4><p>由于块加密的block设置的较小，仅有16位，所以可以分别对每一块进行爆破得到flag。</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.ascii_uppercase + string.ascii_lowercase + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">16</span>):</span><br><span class="line">        block = cipher[<span class="number">16</span>*i:<span class="number">16</span>*i+<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">        list_block = <span class="built_in">list</span>(block)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_block)):</span><br><span class="line">            list_block[i] = <span class="built_in">int</span>(list_block[i])</span><br><span class="line">    </span><br><span class="line">        plain = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#按顺序逆推即可</span></span><br><span class="line">        plain[<span class="number">4</span>] = list_block[<span class="number">0</span>] ^ list_block[<span class="number">1</span>]</span><br><span class="line">        plain[<span class="number">2</span>] = list_block[<span class="number">2</span>] ^ plain[<span class="number">4</span>]</span><br><span class="line">        plain[<span class="number">9</span>] = list_block[<span class="number">3</span>] ^ list_block[<span class="number">4</span>] ^ plain[<span class="number">2</span>]</span><br><span class="line">        plain[<span class="number">15</span>] = list_block[<span class="number">5</span>] ^ plain[<span class="number">2</span>] ^ plain[<span class="number">9</span>]</span><br><span class="line">        plain[<span class="number">0</span>] = list_block[<span class="number">6</span>] ^ plain[<span class="number">4</span>] ^ plain[<span class="number">15</span>]</span><br><span class="line">        plain[<span class="number">13</span>] = list_block[<span class="number">7</span>] ^ plain[<span class="number">4</span>] ^ plain[<span class="number">9</span>]</span><br><span class="line">        plain[<span class="number">8</span>] = list_block[<span class="number">8</span>] ^ plain[<span class="number">9</span>] ^ plain[<span class="number">15</span>]</span><br><span class="line">        plain[<span class="number">14</span>] = list_block[<span class="number">9</span>] ^ plain[<span class="number">15</span>]</span><br><span class="line">        plain[<span class="number">12</span>] = list_block[<span class="number">10</span>] ^ plain[<span class="number">0</span>]  ^ plain[<span class="number">9</span>] ^ plain[<span class="number">14</span>]</span><br><span class="line">        plain[<span class="number">11</span>] = list_block[<span class="number">11</span>] ^ plain[<span class="number">12</span>] ^ plain[<span class="number">15</span>]</span><br><span class="line">        plain[<span class="number">5</span>] = list_block[<span class="number">12</span>] ^ plain[<span class="number">2</span>]</span><br><span class="line">        plain[<span class="number">6</span>] = list_block[<span class="number">13</span>] ^ plain[<span class="number">12</span>] ^ plain[<span class="number">14</span>]</span><br><span class="line">        plain[<span class="number">7</span>] = list_block[<span class="number">14</span>] ^ plain[<span class="number">8</span>] ^ plain[<span class="number">9</span>]</span><br><span class="line">        plain[<span class="number">10</span>] = list_block[<span class="number">15</span>] ^ plain[<span class="number">0</span>] ^ plain[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第1位与第3位仍不确定,采用爆破处理,此处注意1与3虽不确定，但其异或值是确定的,利用这一点可以显著降低爆破复杂度</span></span><br><span class="line">        <span class="comment">#最后在打印出的字符中，依据flag字符均在字典中这一点确定flag值</span></span><br><span class="line">        xor13 = list_block[<span class="number">0</span>] ^ plain[<span class="number">2</span>] ^ plain[<span class="number">5</span>] ^ plain[<span class="number">6</span>]</span><br><span class="line">        unsurelist0 = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">        unsurelist1 = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xor13 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                plain[<span class="number">1</span>] = unsurelist0[i][<span class="number">0</span>]</span><br><span class="line">                plain[<span class="number">3</span>] = unsurelist0[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                temp = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    temp[i] = <span class="built_in">str</span>(plain[i])</span><br><span class="line">                m = <span class="string">&quot;&quot;</span>.join(temp)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(m,<span class="number">2</span>)) <span class="keyword">in</span> dic):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(m,<span class="number">2</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                plain[<span class="number">1</span>] = unsurelist1[i][<span class="number">0</span>]</span><br><span class="line">                plain[<span class="number">3</span>] = unsurelist1[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                temp = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    temp[i] = <span class="built_in">str</span>(plain[i])</span><br><span class="line">                m = <span class="string">&quot;&quot;</span>.join(temp)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(m,<span class="number">2</span>)) <span class="keyword">in</span> dic):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(m,<span class="number">2</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">16</span>):</span><br><span class="line">            temp[i-<span class="number">8</span>] = <span class="built_in">str</span>(plain[i])</span><br><span class="line">        m = <span class="string">&quot;&quot;</span>.join(temp)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(m,<span class="number">2</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&quot;1110011101111100001111110001011000111000110001100100001111111100010000111011010001110110100110010010000111011100111001100011001100111110001000100011111101000010010110111010011001110111100110010100010100010000010001000001110001110001001011010010011000110111111000011110000010011101001010100011111001011010&quot;</span></span><br><span class="line">decrypt(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = &quot;catctf&#123;not_hard_tofind_logic_of_ezxor&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>即使得到了flag，这一题仍然有很多值得思考的地方。回顾一下刚才的推理过程，本质上其实是在解一个16元的线性方程组。而由于这道题的XOR_net故意设计的过于简易，所以我们才能以逐步推理的方式，就能够获得这个方程组的解。而大部分这个类型的题目，其实是需要将加密过程与矩阵、方程组等线性代数知识结合在一起解决的，所以遇到这类问题，需要有意识地将他们在思路上联系起来。</p>
<p><br></p>
<p><br></p>
<h3 id="Middle-RSA1"><a href="#Middle-RSA1" class="headerlink" title="Middle_RSA1"></a>Middle_RSA1</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看似可能性很多。。。真的很多吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">gift1 = p&amp;q</span><br><span class="line">gift2 = p|q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gift1 =&quot;</span>,gift1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gift2 =&quot;</span>,gift2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 115758730903839231823308555023714273591262651953911464283691720682664067350659400229707324160416746737775152746540207269803723796112497613061444101549572010369152801721195466754812876024359382659819081656172178127705969863089520259632319651215562872714420716904811329771842631415638356673867277569822446803287</span></span><br><span class="line"><span class="string">c = 19993786236074237416134051906776387829349963850589489205001299400759214964614448732778917755878755728112565862722087433518362198317288759668299909895051226156644144998537549027687028684679223294371070403997272268856960556217605288582520017581689226335673569525979910948834860530832532964626446046416916617492</span></span><br><span class="line"><span class="string">gift1 = 8406236654915833058263189508088619389228000772047641065805757790945213218484636311118252420306043470365101220415601073756801274407085389643701225294932417</span></span><br><span class="line"><span class="string">gift2 = 13289555469528986889780394438366670193095841373662649462874247561169726714549417684835966455008219356338846495528222454629822321224370056043079721679634431</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>不论怎么出RSA，一个基本不变的共同特点就是：<strong>目标都是由题目给的gift、hint以及其他额外信息，去找到模数n的因子p、q，从而实现n的分解。</strong>这一题也是一样，给出了两个关于n的因子p、q的额外信息gift1、gift2，那么任务就是利用这两个信息还原出p、q。</p>
<p>而gift1、gift2均是p、q经过位运算的结果。所以我们就要以比特位为单位来分析p、q的可能取值。</p>
<p>拿gift1作为例子，已知$\quad gift1 = p\&amp;q\quad$，而对于 &amp; 运算，我们知道他的重要特性是：<strong>如果 &amp; 运算结果为1，则参与 &amp; 运算的两个比特位一定均为1。</strong>因此，将gift1转为比特串，其中为1的比特位，在p、q的二进制表示中也均为1。同理，对于gift2，由于 | 运算符的重要特性：<strong>如果 | 运算结果为0，则参与 | 运算的两个比特位一定均为0，</strong>由此，对于gift2中为0的比特位，我们也能相应的确定出p、q在当前位置的比特位均为0。</p>
<p>经过这样的分析，可以发现一个事实：当且仅当gift1某比特位为0，而gift2某比特位为1时，才存在两种可能：该位p为1、q为0或该位p为0、q为1。自然而然地就会想到：接下来的内容可以通过爆破求解。可是实际操作却不行，这是因为：刚才说的gift1某比特位为0，而gift2某比特位为1这种情况并不少见，测试一下可知一共有252位满足这个情况，也就是说直接爆破数量级达到$\;2^{252}\;$，这是显然实施不了的。那么该怎么办？</p>
<p>这种时候，一定不能忽视掉一个很重要的值：n。$\quad n=p*q\quad$这一个在RSA中像公理一样存在的式子，其实对于解决题目往往有重要作用。在这个题目中，我们就可以利用深度优先搜索替代爆破，来显著降低复杂度。具体实现思路如下：</p>
<ul>
<li>同时将gift1、gift2的二进制串从高位向低位检索，其中：</li>
<li>1、如果均为1或均为0，则可确定p、q在该位的值。<br>2、如果该位在gift1为0，而在gift2为1，则产生分支。</li>
<li>如果不满足以下条件，则结束本次向后的搜索：</li>
<li>1、将p、q当前确定的二进制位后方全部填充0，直至填满512位，此时p、q乘积应小于n。<br>2、将p、q当前确定的二进制位后方全部填充1，直至填满512位，此时p、q乘积应大于n。</li>
</ul>
<p>显然，对于正确的p、q，他会一直满足上述条件直至搜索至512位；而如果对p、q某比特判断错误，很快就会由于不满足上述条件而结束本次向后搜索。同时，由于p、q大小关系未知，所以一定能找出对称的两组解，但是谁大谁小并不重要，因此也可以设置p&gt;q这一条件来节省一半搜索时间。</p>
<p>搜索完毕后，本题迎刃而解。</p>
<p>当然，如果对位运算敏锐一点的话，很容易可以看出其实gift1+gift2=p+q，细致一点解释其原因的话其实也就是枚举每一比特位对应的四种情况：</p>
<ul>
<li>若均为0，显然等价于0+0</li>
<li>若一个0一个1，等价于0+1</li>
<li>若均为1，等价于1+1进位</li>
</ul>
<p>因此可以直接联立方程组求出p、q进而解密。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">115758730903839231823308555023714273591262651953911464283691720682664067350659400229707324160416746737775152746540207269803723796112497613061444101549572010369152801721195466754812876024359382659819081656172178127705969863089520259632319651215562872714420716904811329771842631415638356673867277569822446803287</span></span><br><span class="line">c = <span class="number">19993786236074237416134051906776387829349963850589489205001299400759214964614448732778917755878755728112565862722087433518362198317288759668299909895051226156644144998537549027687028684679223294371070403997272268856960556217605288582520017581689226335673569525979910948834860530832532964626446046416916617492</span></span><br><span class="line">gift1 = <span class="number">8406236654915833058263189508088619389228000772047641065805757790945213218484636311118252420306043470365101220415601073756801274407085389643701225294932417</span></span><br><span class="line">gift2 = <span class="number">13289555469528986889780394438366670193095841373662649462874247561169726714549417684835966455008219356338846495528222454629822321224370056043079721679634431</span></span><br><span class="line">bingift1 = <span class="built_in">bin</span>(gift1)[<span class="number">2</span>:]</span><br><span class="line">bingift2 = <span class="built_in">bin</span>(gift2)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">512</span>):</span><br><span class="line">        p = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        q = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(p*q == n):</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            exit()</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(bingift1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(bingift2[l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;1c93c635-c605-9079-53c2-1adbb1e7cfa5&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Middle-RSA2"><a href="#Middle-RSA2" class="headerlink" title="Middle_RSA2"></a>Middle_RSA2</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nemo学习了基本的RSA共模攻击后，信心满满地开始做这个题目，可是好像哪里不太一样。。。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = getPrime(<span class="number">256</span>)</span><br><span class="line">n = nextprime((bytes_to_long(flag)) &lt;&lt; <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">e = [<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>]</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    c.append(<span class="built_in">pow</span>(m,i,n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = [3584993665370794823538971526684020381334229506708133596895968409536999204984079790376149008440551028410578855094728886834755619619372578110783580710219803462890112213584230949057016656060118630104, 4989759276535357997528849922251020799165891301912783617877490602437969017607809593934852516575460413478605329176238636946693383565094312064286926114923643920846311211742857004745169805814074701829, 6642053461023663832524339460701405831900998203213451191972438266657726625218871972692446250954239707699495372072147429575168741548017508191044712022951983914898737345726236637602619748509541858367, 4193052693033474280001068591734478498106299089126282985098601018650036258306395170093507468070466042626395892208399682844273571796555401881696541571776607704920006607253483889750046907957450103890, 3947754756036180841352847778991940293340330235762075197248449949161868864279363865098593351636279205570062610031251872012378674221346372945053094003675053291245574344814943777453973251717985508145]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>首先建议想要解决本题的同学先去了解一下RSA中的经典共模攻击，对本题的思路有很大帮助。</p>
<p>梳理一下题目的加密流程：</p>
<ul>
<li>将flag转为大整数，并左移300位</li>
<li>用nextprime()函数取得最接近上面那个数的下一个质数，作为后续加密的模数n</li>
<li>取五个不同的小素数作为加密指数e，分别对明文进行模幂运算，并给出对应的密文列表。</li>
</ul>
<p>这一题并不像常规的RSA，将flag作为明文m，而是将flag参加一定运算后形成模数n，让我们求解n的值。同时，n并非两个大素数之积，而是本身就是个素数，所以难点也并不在于如何分解n了。</p>
<p>如果你了解了一下共模攻击，你就会发现与本题的情境有很大共性：</p>
<ul>
<li>进行了两次及以上的RSA加密。</li>
<li>不同次加密的加密指数e互素。</li>
<li>不同次加密的明文m、模数n相同。</li>
</ul>
<p>所以仅需要将共模攻击的思路略作调整，就能轻松解决本题，推导过程如下：</p>
<p>取前两次的加密指数e1、e2，已知：</p>
<script type="math/tex; mode=display">
c1 \equiv m^{e1} \quad(mod\;n)\\
c2 \equiv m^{e2} \quad(mod\;n)</script><p>对模等式两边略作处理：</p>
<script type="math/tex; mode=display">
c1^{-e2} \equiv m^{e1*(-e2)} \quad(mod\;n)\\
c2^{e1} \equiv m^{e2*e1} \quad(mod\;n)</script><p>由于</p>
<script type="math/tex; mode=display">
e1*(-e2) + e2*e1 = 0</script><p>所以将两式相乘可得：</p>
<script type="math/tex; mode=display">
c1^{-e2}*c2^{e1} \equiv m^{e1*(-e2)+e2*e1} \quad(mod\;n)\\
\equiv m^{0} \quad(mod\;n)\\
\equiv1 \quad(mod\;n)</script><p>将$\quad c1^{-e2}\quad$移动至右侧，并且根据同余性质，有：</p>
<script type="math/tex; mode=display">
c2^{e1} \equiv c1^{e2}\quad (mod\;n)\\
c2^{e1} - c1^{e2} = k1*n</script><p>同理，对于剩下的几组加密指数，我们两两组合同样可以得到这种形式的等式：</p>
<script type="math/tex; mode=display">
ci^{ej} - cj^{ei} = k*n</script><p>求解其gcd即可得到n(给出多组数据也是方便去除$\;ki$、$kj$之间可能存在的小公因子)，之后右移即可得到flag。</p>
<p>然后就是，这个题目其实对应了一个升级版的Hard_RSA2，但是由于题量设计未放出，可能会在校赛和大家见面。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">e = [<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>]</span><br><span class="line">c = [<span class="number">3584993665370794823538971526684020381334229506708133596895968409536999204984079790376149008440551028410578855094728886834755619619372578110783580710219803462890112213584230949057016656060118630104</span>, <span class="number">4989759276535357997528849922251020799165891301912783617877490602437969017607809593934852516575460413478605329176238636946693383565094312064286926114923643920846311211742857004745169805814074701829</span>, <span class="number">6642053461023663832524339460701405831900998203213451191972438266657726625218871972692446250954239707699495372072147429575168741548017508191044712022951983914898737345726236637602619748509541858367</span>, <span class="number">4193052693033474280001068591734478498106299089126282985098601018650036258306395170093507468070466042626395892208399682844273571796555401881696541571776607704920006607253483889750046907957450103890</span>, <span class="number">3947754756036180841352847778991940293340330235762075197248449949161868864279363865098593351636279205570062610031251872012378674221346372945053094003675053291245574344814943777453973251717985508145</span>]</span><br><span class="line">knlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    knlist.append(c[i]**e[i+<span class="number">1</span>] - c[i+<span class="number">1</span>]**e[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    kn = gcd(knlist[i],knlist[i+<span class="number">1</span>])</span><br><span class="line">n = kn</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(n&gt;&gt;<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag  = b&quot;catctf&#123;5720ce27-0932-e2c4-6a90-612238272266&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Middle-RSA3"><a href="#Middle-RSA3" class="headerlink" title="Middle_RSA3"></a>Middle_RSA3</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nemo心想：这题p、q都给好了，这不是很简单吗！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data,bit</span>):</span><br><span class="line">    temp = <span class="built_in">len</span>(<span class="built_in">bin</span>(data)[<span class="number">2</span>:])</span><br><span class="line">    pad_length = bit - temp</span><br><span class="line">    pad_data = (data &lt;&lt; pad_length) + random.getrandbits(pad_length)</span><br><span class="line">    <span class="keyword">return</span> pad_data</span><br><span class="line"></span><br><span class="line">m = pad(bytes_to_long(flag),<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime</span>(<span class="params">bit</span>):</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        p = <span class="number">2</span> * <span class="number">7</span> * getPrime(bit) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(isPrime(p)):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = get_prime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 137460191971421903248734970282666456357052936236325309267826027261381607494787596364694185586900461678150506751336121050696416964505449095599803784023985063</span></span><br><span class="line"><span class="string">q = 9860721418259980339851718535071432928232322161057043402218644294712077358246223606787338321930806481006806109681825057554152150498652811208803589672460349</span></span><br><span class="line"><span class="string">n = 1355456659130728552703937440927051368575216792075884459266902567401047511994291080770227026844213980786588891821312665440235699130632691677530305463565393918323447959981861748590308588816836911994225199705766424946089035985434128364857177612203476579345863459242384467183079400230542115729453173080726835766987</span></span><br><span class="line"><span class="string">c = 793623164043246070506550788596269184419105110303948024833215670415616888488541554681716159677641475357836697213816252101550186962854788046446099017273353937153186950442792341410723820865012183730208352789289190229327937550770892606142831977859348889398082454412733823877464089108978899912318518292672709432297</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>本题要关注两个数的生成过程，</p>
<ul>
<li>p：p由自定义的get_prime生成，满足p-1是7的倍数。</li>
<li>m：由flag串转成的大整数拼接随机比特串，最终形成1024比特的数字。</li>
</ul>
<p>看到给了p、q，第一反应肯定是直接求解私钥进行RSA解密，可是这么做会直接出现报错提示：逆元不存在。这是因为求解逆元需要：</p>
<script type="math/tex; mode=display">
gcd(e,(p-1)*(q-1))  = 1</script><p>然而在本题中：</p>
<script type="math/tex; mode=display">
gcd(e,p-1)=7</script><p>因此逆元不存在，无法进行RSA解密。而且根据m的生成过程，m的数量级显然是接近于n，而远大于p、q的，因此也无法根据同余性质转化到模q的意义下直接求解。</p>
<p>在网上搜索此类e与phi_n不互素的问题，可以发现很多文章都提到了AMM算法，这是一种当$e\mid p-1$时，可以进行的有限域开根算法。而网络上也有很多AMM算法脚本，显然这就是本题解密的关键。AMM算法实现原理暂且不论，先将其当作一个黑盒函数调用即可，下面就使用AMM算法来解决本题：</p>
<p>首先，将题目等式分别拆成模p和模q下的模等式：</p>
<script type="math/tex; mode=display">
m^e\equiv c\quad (mod\;p)\\
m^e\equiv c\quad (mod\;q)</script><p>对于模q下的模等式，由于$gcd(e,q-1)=1$，因此可以直接求解逆元，当作RSA解密得到$m\equiv mq\quad (mod\;q)$</p>
<p>对于模p下的模等式，需要使用AMM算法，那么如何调用呢？前面提到过，AMM算法解决的是$e\mid p-1$时开e次方根的问题，而本题中，虽然$gcd(e,p-1)!=1$，但同时$e\nmid p-1$，所以不能直接使用AMM开e次方根，但是，我们可以将明文在模p下的加密看作以下形式：</p>
<script type="math/tex; mode=display">
((((m^7)^7)^7)^7)^7\equiv c\quad (mod\;p)</script><p>而由于$7\mid p-1$，因此我们就可以进行一次AMM算法，将c在模p的有限域下开七次方根得到：</p>
<script type="math/tex; mode=display">
(((m^7)^7)^7)^7\equiv c1\quad (mod\;p)</script><p>此时你应该明白了，之后的工作也就是再调用4次AMM算法，并在最后一次整理出全部7个根(为什么只有最后一次需要整理出全部七个根，而前四次不需要，这个问题要弄懂AMM具体原理)，即可得到：</p>
<script type="math/tex; mode=display">
m\equiv mp\quad (mod\;p)</script><p>将这七个根依次与$m\equiv mq\quad (mod\;q)$作中国剩余定理，即可得到m的七个可能值。</p>
<p>当然，实际上可以使用sage集成的nth_root函数，会方便很多，这也是我最近才知道的。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">p = <span class="number">137460191971421903248734970282666456357052936236325309267826027261381607494787596364694185586900461678150506751336121050696416964505449095599803784023985063</span></span><br><span class="line">q = <span class="number">9860721418259980339851718535071432928232322161057043402218644294712077358246223606787338321930806481006806109681825057554152150498652811208803589672460349</span></span><br><span class="line">n = <span class="number">1355456659130728552703937440927051368575216792075884459266902567401047511994291080770227026844213980786588891821312665440235699130632691677530305463565393918323447959981861748590308588816836911994225199705766424946089035985434128364857177612203476579345863459242384467183079400230542115729453173080726835766987</span></span><br><span class="line">c = <span class="number">793623164043246070506550788596269184419105110303948024833215670415616888488541554681716159677641475357836697213816252101550186962854788046446099017273353937153186950442792341410723820865012183730208352789289190229327937550770892606142831977859348889398082454412733823877464089108978899912318518292672709432297</span></span><br><span class="line">e = <span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">amq = [<span class="built_in">pow</span>(c,inverse(e,q-<span class="number">1</span>),q)]</span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">7</span>, p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    mp = AMM_rth(mp, <span class="number">7</span>, p)</span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">7</span>, p)</span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">modlist = [p,q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> amq:</span><br><span class="line">        c = [<span class="built_in">int</span>(i),<span class="built_in">int</span>(j)]</span><br><span class="line">        m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">        temp = long_to_bytes(m&gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;catctf&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br><span class="line">            </span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;fa755bce-071e-4f1d-8cfa-37766c226065&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="RSAES"><a href="#RSAES" class="headerlink" title="RSAES"></a>RSAES</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“19937年，我学会了开汽车。。。好像多了一个3？”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">menu=<span class="string">b&#x27;&#x27;&#x27;1. gethint</span></span><br><span class="line"><span class="string">2. getflag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">data,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    encrypt = cipher.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">data,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    encrypt = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> newline:</span><br><span class="line">            msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt</span>):</span><br><span class="line">        self.send(prompt,<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">            choice = self.recv(menu)</span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="string">b&quot;1&quot;</span>):</span><br><span class="line">                temp = getrandbits(<span class="number">16</span>*<span class="number">8</span>)</span><br><span class="line">                key = (temp&lt;&lt;<span class="number">128</span>)+temp</span><br><span class="line">                iv = getrandbits(<span class="number">16</span>*<span class="number">8</span>)</span><br><span class="line">                m = getrandbits(<span class="number">32</span>*<span class="number">8</span>)</span><br><span class="line">                self.send(<span class="string">b&quot;gift =&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">                self.send(<span class="built_in">str</span>(key^iv).encode())</span><br><span class="line">                c = enc(long_to_bytes(m),long_to_bytes(key),long_to_bytes(iv))</span><br><span class="line">                self.send(<span class="string">b&quot;c =&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">                self.send(<span class="built_in">str</span>(bytes_to_long(c)).encode())</span><br><span class="line">                self.send(<span class="string">b&#x27;\n&#x27;</span>,<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">elif</span>(choice == <span class="string">b&quot;2&quot;</span>):</span><br><span class="line">                plist = [nextprime(getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">                n = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                    n *= plist[i]</span><br><span class="line">                m = bytes_to_long(flag)</span><br><span class="line">                e = <span class="number">65537</span></span><br><span class="line">                c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">                self.send(<span class="string">b&quot;n =&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">                self.send(<span class="built_in">str</span>(n).encode())</span><br><span class="line">                self.send(<span class="string">b&quot;c =&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">                self.send(<span class="built_in">str</span>(c).encode())</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;What are u doing?&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        self.task()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>这是一道交互题，需要使用pwntools工具与远程反复交互得到数据，最终解决题目。关于pwntools的具体使用可自行查阅，此处仅阐述解题思路。</p>
<p>观察题目，一共给了40次交互机会，每一次交互可以输入1或2以获取不同数据。输入1，则给出一个关于key与iv的gift，以及对随机明文m的AES加密数据；输入2，则给出RSA的n，以及对明文flag的加密数据，同时结束交互。</p>
<p>因此，想要解密明文，就需要得到n的分解，也就是3个以getrandbits()函数得到的512位素数。然而getrandbits()产生的是随机数，如何确定其取值呢？通过上网查阅，可以知道这样的伪随机数产生方式是基于MT19937算法的，因此当产生的随机数序列足够长，有充足位数时，就可以用randcrack模块中的相关工具进行预测。</p>
<p>所以思路就是：前39次交互用于拿取数据，解密出iv、key与m并依次提交这些随机数，就可以预测出最终用于RSA加密的n的素因子。而前39次解密的方法与Easy分类的baby_AES可以说完全相同，并不困难。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">data,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    encrypt = cipher.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">data,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    encrypt = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;10.10.175.100&quot;</span>,<span class="number">36341</span>)</span><br><span class="line">rc = RandCrack()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    gift = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">6</span>:]))</span><br><span class="line">    key = (gift &gt;&gt; <span class="number">128</span> &lt;&lt; <span class="number">128</span>) + (gift &gt;&gt; <span class="number">128</span>)</span><br><span class="line">    iv = key ^ gift</span><br><span class="line">    c = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">    m = bytes_to_long(dec(long_to_bytes(c),long_to_bytes(key),long_to_bytes(iv)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#提交伪随机数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>//<span class="number">32</span>):</span><br><span class="line">        t = key&amp;<span class="number">0xffffffff</span></span><br><span class="line">        rc.submit(t)</span><br><span class="line">        key=key&gt;&gt;<span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>//<span class="number">32</span>):</span><br><span class="line">        t = iv&amp;<span class="number">0xffffffff</span></span><br><span class="line">        rc.submit(t)</span><br><span class="line">        iv = iv&gt;&gt;<span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>//<span class="number">32</span>):</span><br><span class="line">        t = m&amp;<span class="number">0xffffffff</span></span><br><span class="line">        rc.submit(t)</span><br><span class="line">        m = m&gt;&gt;<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第40次，预测伪随机数从而得到plist，进而解密</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">plist = [nextprime(rc.predict_getrandbits(<span class="number">512</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">phi_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    phi_n *= (plist[i] - <span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = b&quot;TJCTF&#123;c1aa4128-87a8-bf31-85f6-ee36000e4057&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>本题主要也是想让大家体验一下crypto中交互题目的流程。密码学中很多知识点，比如选择明文攻击、选择密文攻击以及各种谕示机模型等出现在crypto赛题中时，基本是以交互题的模式出现。所以熟悉pwntools的使用也是很有必要的。</p>
<p><br></p>
<p><br></p>
<h3 id="Middle-DSA"><a href="#Middle-DSA" class="headerlink" title="Middle_DSA"></a>Middle_DSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">做本题目前可以先学习一下DSA签名的基本流程。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getkey</span>():</span><br><span class="line">    x = bytes_to_long(flag[<span class="number">7</span>:-<span class="number">1</span>])</span><br><span class="line">    q = getPrime(<span class="number">160</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        t = <span class="number">2</span>*getPrime(<span class="number">1024</span>-<span class="number">160</span>) * q</span><br><span class="line">        <span class="keyword">if</span> isPrime(t+<span class="number">1</span>):</span><br><span class="line">            p = t+<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = randint(<span class="number">1</span>, p-<span class="number">2</span>)</span><br><span class="line">    g = <span class="built_in">pow</span>(h, (p-<span class="number">1</span>)//q, p)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">    <span class="keyword">return</span>(x,(p,q,g,y))</span><br><span class="line"></span><br><span class="line">pri_key,pub_key = getkey()</span><br><span class="line">p,q,g,y = pub_key</span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&quot;I don&#x27;t know much about DSA...&quot;</span></span><br><span class="line">m2 = <span class="string">b&quot;But I can learn!!!&quot;</span></span><br><span class="line">h1 = bytes_to_long(sha256(m1).digest())</span><br><span class="line">h2 = bytes_to_long(sha256(m2).digest())</span><br><span class="line"></span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = k1**<span class="number">3</span> + k1 + randint(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">pow</span>(g, k1, p) % q</span><br><span class="line">s1 = (h1 + pri_key*r1) * inverse(k1, q) % q</span><br><span class="line">r2 = <span class="built_in">pow</span>(g, k2, p) % q</span><br><span class="line">s2 = (h2 + pri_key*r2) * inverse(k2, q) % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pub_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(r1, s1) = <span class="subst">&#123;r1&#125;</span>, <span class="subst">&#123;s1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(r2, s2) = <span class="subst">&#123;r2&#125;</span>, <span class="subst">&#123;s2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(329466618499261020048099756611587145404143744653351180336272711255920939333879618450299119449698608131120341832164819003494462044377397933259473873479544981129520716301547870347536316969557671226790609927049677795021322420364038997267210779523952466080934821495513358902014332078422005001763379935698989021107, 1348061579207087009838296193732079850287318389779, 257770881619574176520208203704245179330594957391976994619084377852591734867005999118010927921580353543603773732763824407045880545644903991068415498096711678600493155201963398581556108027668725149349354054718585325009991715550079052667715568359371255509666273500002194305492249720063712414923552380092261715706, 150342085930880938215574113969667105871121625791739541501623278623666799509331357162993064532660792772744969891506357478273134847248887611225455853281754270566903999330078733444655840263327190783676366583879206927556859616194414635400073995732715776299242379741788129952886642591635243888614430356177755217059)</span></span><br><span class="line"><span class="string">(r1, s1) = 916053866561856680020253391889758448915469093378, 1230191144384297307551839931519918456403444949778</span></span><br><span class="line"><span class="string">(r2, s2) = 277634558371960064162549113571028444063934104845, 996064415849024341126238021393257770915779481404 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>完成本题需要了解DSA签名的基本流程。了解之后再来阅读本题，发现题目泄露的信息是两次签名用的k存在一定关系，我们需要利用这个关系来求出k的值，进而恢复私钥flag。</p>
<p>具体求解过程如下：</p>
<p>由于：</p>
<script type="math/tex; mode=display">
k2 = k1^3 + k1 +i\\
s1 \equiv(h1+r1*x)*k1^{-1}\quad (mod \;q)\\
s2 \equiv(h2+r2*x)*k2^{-1}\quad (mod \;q)</script><p>将k1、k2移动至模等式左侧，有：</p>
<script type="math/tex; mode=display">
s1*k1 \equiv h1+r1*x\quad (mod \;q)\\
s2*k2 \equiv h2+r2*x\quad (mod \;q)</script><p>上下式分别乘r2、r1，作差消去x：</p>
<script type="math/tex; mode=display">
s1*k1*r2-s2*k2*r1\equiv h1*r2-h2*r1\quad (mod\;q)</script><p>代入k2，得：</p>
<script type="math/tex; mode=display">
s1*k1*r2-s2*(k1^3+k1+i)*r1\equiv h1*r2-h2*r1\quad (mod\;q)</script><p>又由于k1已知为64比特，因此可在模q的多项式环上求根，求出符合要求的k后，随意取一个等式即可求解flag：</p>
<script type="math/tex; mode=display">
x \equiv (s1*k - h1) * r1^{-1} \quad (mod\;q)</script><p>又因为在DSA密钥选取中，私钥的取值范围在(0,q)，因此解出来的模q下的根，按常理来说即是flag的原本值。本题目中flag也因此设计的较小。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p, q, g, y = (<span class="number">329466618499261020048099756611587145404143744653351180336272711255920939333879618450299119449698608131120341832164819003494462044377397933259473873479544981129520716301547870347536316969557671226790609927049677795021322420364038997267210779523952466080934821495513358902014332078422005001763379935698989021107</span>, <span class="number">1348061579207087009838296193732079850287318389779</span>, <span class="number">257770881619574176520208203704245179330594957391976994619084377852591734867005999118010927921580353543603773732763824407045880545644903991068415498096711678600493155201963398581556108027668725149349354054718585325009991715550079052667715568359371255509666273500002194305492249720063712414923552380092261715706</span>, <span class="number">150342085930880938215574113969667105871121625791739541501623278623666799509331357162993064532660792772744969891506357478273134847248887611225455853281754270566903999330078733444655840263327190783676366583879206927556859616194414635400073995732715776299242379741788129952886642591635243888614430356177755217059</span>)</span><br><span class="line">(r1, s1) = <span class="number">916053866561856680020253391889758448915469093378</span>, <span class="number">1230191144384297307551839931519918456403444949778</span></span><br><span class="line">(r2, s2) = <span class="number">277634558371960064162549113571028444063934104845</span>, <span class="number">996064415849024341126238021393257770915779481404</span> </span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&quot;I don&#x27;t know much about DSA...&quot;</span></span><br><span class="line">m2 = <span class="string">b&quot;But I can learn!!!&quot;</span></span><br><span class="line">h1 = bytes_to_long(sha256(m1).digest())</span><br><span class="line">h2 = bytes_to_long(sha256(m2).digest())</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 转化为k模多项式</span></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(GF(q))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">20</span>):</span><br><span class="line">    f = s2*(k^<span class="number">3</span>+k+i)*r1 - s1*k*r2 - h2*r1 + h1*r2</span><br><span class="line">    root = f.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> root:</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(j[<span class="number">0</span>])[<span class="number">2</span>:]) == <span class="number">64</span>):</span><br><span class="line">                k = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">                flag = (s1*k - h1) * inverse(r1, q) % q</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;catctf&#123;&quot;</span>+<span class="built_in">str</span>(long_to_bytes(flag))[<span class="number">2</span>:-<span class="number">1</span>]+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">#flag = b&#x27;catctf&#123;f1nd_x_0f_DSA&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Middle-oracle"><a href="#Middle-oracle" class="headerlink" title="Middle_oracle"></a>Middle_oracle</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不能解密文的也能叫解密机？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>])</span><br><span class="line">m2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = getPrime(<span class="number">48</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task1:&quot;</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(m1,e,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">    temp = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Now you have a chance to decrypt a cipher:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span>(temp % n == c):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hacker!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e,phi)</span><br><span class="line">        temp_dec = <span class="built_in">pow</span>(temp,d,n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The message is:&quot;</span>,temp_dec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task2&quot;</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(m2,e,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        temp = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Now you can decrypt any cipher but something lost:&quot;</span>))</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e,phi)</span><br><span class="line">        temp_dec = <span class="built_in">pow</span>(temp,d,n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The message is:&quot;</span>,temp_dec &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">task1()</span><br><span class="line">task2()</span><br></pre></td></tr></table></figure>
<p>仍然是一个分为两个task的交互题，接下来也分为两部分展开。</p>
<h4 id="task1-1"><a href="#task1-1" class="headerlink" title="task1"></a>task1</h4><p>任务1将flag的前半段作为明文，进行RSA加密后返回公钥n和密文c，而靶机端可以提供一次解密操作，但是解密的不能是c+kn。</p>
<p>那么如何不直接解密c+kn，又能通过解密得到的值求解明文呢？这里主要介绍三种方法。 </p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>(该方法在没有公钥e时无法使用)</p>
<p>传入：</p>
<script type="math/tex; mode=display">
a^e*c</script><p>其中，a可以是自己选定的任何数，一般选择2，这样解密得到的值为：</p>
<script type="math/tex; mode=display">
a*m</script><p>将该值乘上a模n下的逆元就能得到m</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>传入：</p>
<script type="math/tex; mode=display">
n-c</script><p>在模n意义下，这其实就是-c，因此解密得到的值为：</p>
<script type="math/tex; mode=display">
n-m</script><p>再用n减去该值得到m</p>
<h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>传入：</p>
<script type="math/tex; mode=display">
c^{-1}</script><p>这等价于：</p>
<script type="math/tex; mode=display">
m^{-d}</script><p>因此解密得到的值为：</p>
<script type="math/tex; mode=display">
m^{-1}</script><p>求解该值在模n下的逆元即为m</p>
<h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p>由于明文仅有前半段，故较小，所以可以传入密文的小指数加密结果如：</p>
<script type="math/tex; mode=display">
c^2</script><p>那么解密得到m^2实际小于n，可以开根得到m</p>
<h4 id="task2-1"><a href="#task2-1" class="headerlink" title="task2"></a>task2</h4><p>这个问题为Parity Oracle Attack中的LSB Oracle Attack(Least Significant Bit Oracle Attack)，是一个经典的RSA选择密文攻击谕示机模型。</p>
<p>在这个谕示机中，你可以输入任意密文，并且获得其解密后明文的最低比特位，那么怎么对这个性质加以利用呢？</p>
<p>首先，我们考虑传入：</p>
<script type="math/tex; mode=display">
2^e*c \quad (mod\;n)</script><p>解密出来的明文值为：</p>
<script type="math/tex; mode=display">
2*m \quad (mod\;n)</script><p>但是我们只能获得2m的最低比特，这有什么用呢？注意到n是由两个大素数p、q相乘得到，因此n一定为奇数，而由于：</p>
<script type="math/tex; mode=display">
0<m<n</script><p>所以：</p>
<script type="math/tex; mode=display">
0<2m<2n</script><p>那么思考一下，最低比特位会暴露什么？首先，2m一定是一个偶数，那么如果0&lt;2m&lt;n，靶机端反馈的结果就应该是0，因为他相当于没有模n；而如果n&lt;2m&lt;2n，那么靶机端就会反馈1，因为这实际上是一个偶数减去一个奇数，所以最低比特位就是个奇数。</p>
<p>也就是说，这一次返回的密文信息，能直接帮我们缩小一半m的取值范围，也就是我们能够根据结果确定m是处于(0,n/2)，还是(n/2,n)。</p>
<p>那么拓展一下思维，下一步该怎么做呢？自然是继续缩小m的范围，因此我们第二次考虑传入：</p>
<script type="math/tex; mode=display">
4^e*c \quad (mod\;n)</script><p>那么这一次解密会得到：</p>
<script type="math/tex; mode=display">
4*m \quad (mod\;n)</script><p>的最低比特位，而由前一次的结果，我们能确定4m是在(0,2n)之间还是在(2n,4n)之间，那么同理，我们能根据结果将m缩小到(0,n/4),(n/4,n/2),(n/2,3n/4),(3n/4,n)的其中一个区间内。</p>
<p>那么之后的操作也不需多说，就是一直传入2的ie次方乘c，并由此缩小区间范围，最终就能确定m的一个非常小的区间。此处要注意，由于区间//2是整除，因此会在末几位产生一定误差，不过对得到flag串没有大影响。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;10.10.175.100&quot;</span>,<span class="number">35520</span>)</span><br><span class="line"><span class="comment">#task1</span></span><br><span class="line">temp = r.recvline()</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="built_in">str</span>(n-c).encode())</span><br><span class="line">m1 = n-<span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">57</span>:]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#task2</span></span><br><span class="line">temp = r.recvline()</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">3</span>:]))</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">left = <span class="number">0</span></span><br><span class="line">right = n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1024</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;lost:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="built_in">pow</span>(<span class="number">2</span>,(e*i),n)*c).encode())</span><br><span class="line">    lastbit = <span class="built_in">int</span>(<span class="built_in">str</span>(r.recvline().decode().strip()[<span class="number">15</span>:]))</span><br><span class="line">    <span class="keyword">if</span>(lastbit == <span class="number">0</span>):</span><br><span class="line">        right = (left+right)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = (left+right)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(left == right):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(left))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#catctf&#123;N0w_Y0w_kNoW_wh4t_15_0racl3!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Middle-oracle2"><a href="#Middle-oracle2" class="headerlink" title="Middle_oracle2"></a>Middle_oracle2</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">又是一个谕示机，但是这个要怎么使用呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,fakeflag</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;1.getnum</span></span><br><span class="line"><span class="string">2.guessnum</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">secret = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    choice = <span class="built_in">input</span>(menu)</span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;a = &quot;</span>))</span><br><span class="line">            <span class="keyword">assert</span>(a &gt; <span class="number">0</span>)</span><br><span class="line">            b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;b = &quot;</span>))</span><br><span class="line">            <span class="keyword">assert</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span>(GCD(secret+a,b))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span>(choice == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">        my_secret = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Check your secret :&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span>(my_secret == secret):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congratulations!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(fakeflag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;What are you doing?&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>题目生成一个512bit的随机数作为secret，之后，我们可以选择进行如下操作：</p>
<ul>
<li>输入1，可以再提供一个a，b，靶机端会返回(secret+a,b)的最大公约数，注意a、b均为正数</li>
<li>输入2，可以核验secret，如果输入值与secret值相等，就能得到flag。</li>
</ul>
<p>如何进行利用呢？首先要明白，求解一个数与2的最大公约数，就能确定该数是奇数还是偶数。也就是说，令a=0，b=2，我们就能根据返回结果得到secret的最低比特位。然而，题目限制了a、b均为正，但是影响不大，我们只需要取a=1，b=2，依然可以确定最低比特位，只是结果要取个反而已。</p>
<p>那么第二次该传入什么呢？很容易就能想到，如果能将已知的比特位减去，那么第二次求与4的gcd就能得到secret的倒数第二位，而仍然因为a，b均需大于0，所以把减的操作改成加对应比特位的逆就能把已知位全部修改为0，而求解的结果继续取反就好。</p>
<p>在之后，就重复该操作，依次求与8、16、32……的gcd就能得到所有比特位，然后得到secret后进行核验就能得到flag。</p>
<h4 id="非预期解-1"><a href="#非预期解-1" class="headerlink" title="非预期解"></a>非预期解</h4><p>而赛后看参赛选手们的wp，发现有一个非预期解也很有意思：</p>
<p>我们取任意一个素数p作为b，并将所有小于p的正数作为a，依次发送给服务器。而在模p意义下，一定有且仅有一个a满足下式：</p>
<script type="math/tex; mode=display">
secret + a \equiv 0 \quad (mod\;p)</script><p>而当a满足上面这个式子的时候，靶机返回的结果是gcd(secret+a,p)=p，而不满足上式时会返回1。而由于交互不限次数，因此我们可以搜集到足够多的式子如：</p>
<script type="math/tex; mode=display">
secret  \equiv -a_i \quad (mod\;p_i)</script><p>只要发送的素数乘积大于secret，我们就能CRT得到secret的值了。</p>
<p>当然如果限制交互次数，比如最多进行512次，这个方法可能就用不了了。当然这个思路确实很有意思。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;10.10.175.100&quot;</span>,<span class="number">36338</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#getLSB</span></span><br><span class="line">num = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">512</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;2.guessnum&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span>):</span><br><span class="line">        tempa = <span class="number">2</span>**i - <span class="built_in">int</span>(num[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tempa = <span class="number">1</span></span><br><span class="line">    tempb = <span class="number">2</span>**(i+<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;a = &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(tempa).encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;b = &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(tempb).encode())</span><br><span class="line">    thegcd = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    <span class="keyword">if</span>(thegcd == tempb):</span><br><span class="line">        num += <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num += <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">num = <span class="built_in">int</span>(num[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;2.guessnum&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Check your secret :&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(num).encode())</span><br><span class="line">temp = r.recvline()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line">temp = r.recvline()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#catctf&#123;Ju4t_An0th3r_LSB_attACk!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h2><p>该分类存在一定难度，需要同时具有灵活的思维以及一定量的知识储备，适合想要进一步提升自己的cryptoer尝试。</p>
<h3 id="Hard-RSA"><a href="#Hard-RSA" class="headerlink" title="Hard_RSA"></a>Hard_RSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nemo也想过成为一名铜匠，奈何数论太难学了。</span><br><span class="line">*hint1对你的解题有一定帮助，但是不解出hint1仍然可以解题。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,hint1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getn</span>():</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        p = getPrime(<span class="number">128</span>)</span><br><span class="line">        error = getPrime(<span class="number">40</span>)</span><br><span class="line">        q = <span class="number">2</span>*p + error</span><br><span class="line">        r = <span class="number">2</span>*q + error</span><br><span class="line">        <span class="keyword">if</span>(isPrime(q) <span class="keyword">and</span> isPrime(r)):</span><br><span class="line">            n = p*q*r</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (p,n)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#step 1</span></span><br><span class="line">p1,n1 = getn()</span><br><span class="line">hint1_enc = <span class="built_in">pow</span>(bytes_to_long(hint1),e,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint1_enc =&quot;</span>,hint1_enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1 =&quot;</span>,p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>,n1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#step_2</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">512</span>)</span><br><span class="line">b = getPrime(<span class="number">16</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">hint2 = <span class="built_in">pow</span>((a*p + b),q,n)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint2 =&quot;</span>,hint2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hint1_enc = 81410455638978409164259444919301919004039168105498097066894873200032325739015513072857302922621201132563677863689691</span></span><br><span class="line"><span class="string">p1 = 262726397885004821911124269672266219817</span></span><br><span class="line"><span class="string">n1 = 145077853507975436750834997262072948658867600956220420571072608726655109502006223745168041173033352252243905006874073</span></span><br><span class="line"><span class="string">hint2 = 76365961284206788846337118586080088152618427584031945902089660388319933927923116270501939183895761439446801300651172452036828117326634075602939230046403952964582219445745421072754817834269688283542670097365551320401087865123678477038236635371384773086853444993428846209267595537649428971235394440131039392625</span></span><br><span class="line"><span class="string">n = 110209520206742741948506756493191161913926109540508718881123685741911222474420697491281731367887008521387736563780864849109401713213647085815879126117587521279674073324987130883917954090177227594558649375661722804112176864417280291159808392760730415028629655809584763163285199014692393327204538254936430590899</span></span><br><span class="line"><span class="string">c = 84345299633297789297352837849279001204443711590121337540969236692610027337278928626589856468208700831865337971235547581848958840387276084420274713889748413312878922978315147540373062163315353337156724430913048750658116980983932277459029396584928058181491602354057215920794976679755061517240435678912670575892</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目分为两个模块：第一部分是对hint1加密，第二部分是对flag加密。两部分除了加密指数e均为65537这一共同点外，基本没有联系。所以跳过第一部分直接做第二部分也是可以的。</p>
<p>但我们依然按顺序解题，因为hint1可能包含第二部分如何解密的提示。</p>
<p>第一部分相较于常规RSA，略有不同：</p>
<ul>
<li>模数n由三个素数组成</li>
<li>三个素数之间由明确的关系式联系起来，并且隐藏了20位的小素数error，error在这里可以理解为“噪声”</li>
</ul>
<p>所以只要能解出error的取值，就能得到三个素数的值，而多素数RSA的解密其实与常规RSA并没有区别，只是计算$\phi(n)$时略有不同。</p>
<p>（然后这里出题失误了，没有注意到其实就是一个普通一元二次方程。。接下来还是按预期的讲）</p>
<p>把error看作未知数，实际上要求解的就是在模n意义下的一个方程。而对于解出error这种相对于模数n来说较小的根，coppersmith定理给出了有力的工具：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#step 1</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n1//p1))</span><br><span class="line">f = (<span class="number">2</span>*p1 + x)*(<span class="number">4</span>*p1 + <span class="number">3</span>*x)</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">41</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    error = <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>具体原理可以自行查阅相关资料，此处不再进行展开。解得error后就可以进行RSA解密，得到hint1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try to use ilgnidoaixamief(?)</span><br></pre></td></tr></table></figure>
<p>倒着看其实就是feimaxiaodingli(费马小定理)，而之所以要倒着写，是提示第二部分需要倒着利用费马小定理。</p>
<p>有了提示后接着看第二部分，第二部分加密流程如下：</p>
<ul>
<li>随机生成素数p，q，a，b，其中b是16位的小素数。</li>
<li>将p、q用于普通RSA加密。</li>
<li>给出hint2，hint2是一个由a、b、p、q、n共同组成的提示。</li>
</ul>
<p>结合hint1，目标明确：倒着利用费马小定理，从而由hint2给出n的分解。</p>
<p>接下来就是如何倒着利用费马小定理：</p>
<script type="math/tex; mode=display">
hint2 \equiv (a*p+b)^q\quad (mod\;n)</script><p>利用同余性质，可以将其拆成以下两个模等式：</p>
<script type="math/tex; mode=display">
hint2 \equiv (a*p+b)^q\quad (mod\;p)\\
hint2 \equiv (a*p+b)^q\quad (mod\;q)</script><p>对于第一个模等式进行二项式定理展开：</p>
<script type="math/tex; mode=display">
hint2 \equiv b^q\quad (mod\;p)</script><p>这样一来就完全消除了a的影响，接着做如下处理：</p>
<script type="math/tex; mode=display">
(hint2)^p \equiv b^{q*p}\quad (mod\;p)</script><p>此时利用费马小定理：</p>
<script type="math/tex; mode=display">
hint2 \equiv b^{n}\quad (mod\;p)\\
hint2-b^n = k*p</script><p>因此，将$hint2-b^n$与$n$求gcd即可得到p，最后进行RSA常规解密即可。</p>
<p>至于为什么我把他称作倒着利用费马小定理，是因为在crypto中，一般利用费马小定理是为了去除指数，而在本题我们先进行了模数的扩大，最后才消除指数。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1_enc = <span class="number">81410455638978409164259444919301919004039168105498097066894873200032325739015513072857302922621201132563677863689691</span></span><br><span class="line">p1 = <span class="number">262726397885004821911124269672266219817</span></span><br><span class="line">n1 = <span class="number">145077853507975436750834997262072948658867600956220420571072608726655109502006223745168041173033352252243905006874073</span></span><br><span class="line">hint2 = <span class="number">76365961284206788846337118586080088152618427584031945902089660388319933927923116270501939183895761439446801300651172452036828117326634075602939230046403952964582219445745421072754817834269688283542670097365551320401087865123678477038236635371384773086853444993428846209267595537649428971235394440131039392625</span></span><br><span class="line">n = <span class="number">110209520206742741948506756493191161913926109540508718881123685741911222474420697491281731367887008521387736563780864849109401713213647085815879126117587521279674073324987130883917954090177227594558649375661722804112176864417280291159808392760730415028629655809584763163285199014692393327204538254936430590899</span></span><br><span class="line">c = <span class="number">84345299633297789297352837849279001204443711590121337540969236692610027337278928626589856468208700831865337971235547581848958840387276084420274713889748413312878922978315147540373062163315353337156724430913048750658116980983932277459029396584928058181491602354057215920794976679755061517240435678912670575892</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#step 1</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n1//p1))</span><br><span class="line">f = (<span class="number">2</span>*p1 + x)*(<span class="number">4</span>*p1 + <span class="number">3</span>*x)</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">41</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    error = <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">q1 = <span class="number">2</span>*p1 + error</span><br><span class="line">r1 = <span class="number">2</span>*q1 + error</span><br><span class="line">phi_n1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)*(r1-<span class="number">1</span>)</span><br><span class="line">d1 = inverse(e,phi_n1)</span><br><span class="line">hint1 = <span class="built_in">int</span>(<span class="built_in">pow</span>(hint1_enc,d1,n1))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(hint1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#step 2</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    h2 = <span class="built_in">pow</span>(b,n,n)</span><br><span class="line">    p = GCD(n,hint2-h2)</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse(e,phi)</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;35b4488a-596a-5ff0-dbdb-e4ec8673b55e&#125;&quot;</span></span><br><span class="line"><span class="comment">#hint1 = b&quot;try to use ilgnidoaixamief(?)&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Hard-LCG"><a href="#Hard-LCG" class="headerlink" title="Hard_LCG"></a>Hard_LCG</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“这个LCG怎么什么参数都没有？”Nemo非常抓狂。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(data) % <span class="number">8</span>):</span><br><span class="line">        data += <span class="string">b&quot;\x00&quot;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(data) % <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LCG</span>(<span class="params">a,m,b,n</span>):</span><br><span class="line">    m = (a*m + b) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">m = pad(flag)*<span class="number">2</span></span><br><span class="line">a = bytes_to_long(m[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">seed = getPrime(<span class="number">64</span>)</span><br><span class="line">n = getPrime(<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">out = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m) // <span class="number">8</span>):</span><br><span class="line">    b = bytes_to_long(m[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>])</span><br><span class="line">    seed = LCG(a,seed,b,n)</span><br><span class="line">    out.append(seed)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[11306816523806448359968744947, 36825731210294893531878483479, 34541243376991313199431099859, 20354966593817263503588124934, 37588861068580029710084832784, 46973656140717560123345808645, 41524739592939159728594635383, 146800497033274580640567704, 50488771112485302710340410522, 12385224224599902891523452952, 61520982263029439442401885206, 31363021932740609933463915946]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>梳理一下题目的加密流程：</p>
<ul>
<li>将flag填充0直至长度满足是8的倍数，并进行复制后作为m。</li>
<li>将m的首八个字符作为LCG的乘数a。</li>
<li>随机生成LCG的seed及模数n。</li>
<li>将m中每八个字符依次作为LCG的参数b，并进行加密，打印出密文列表。</li>
</ul>
<p>可以看出，要求得flag，就是要恢复出每次LCG的参数b。可是这道题目除了密文列表，a、b、n三个参数都没有给出，而这几个参数对于求解LCG基本是必不可少的，所以要找到加密过程中可能泄漏这几个参数的步骤，从而恢复参数，求解flag。</p>
<p>再看一看加密流程，能看出两个突破口：</p>
<ul>
<li>将flag填充0直至长度满足是8的倍数，<strong>并进行复制后作为m。</strong></li>
<li>将m的<strong>首八个字符作为LCG的乘数a。</strong></li>
<li>随机生成LCG的seed及模数n。</li>
<li>将m中每八个字符依次作为LCG的参数b，并进行加密，打印出密文列表。</li>
</ul>
<p>这两点分别说明了什么？第一点说明，在LCG的完整12次加密中，<strong>每个b都使用了两次，例如，第一次和第七次加密均使用了相同的b，第二次和第八次均使用了相同的b，以此类推</strong>；而第二点则为爆破a提供了可能，这是因为flag开头一定是”catctf{“这七个字符，因此仅需要爆破1个可见字符的范围，就一定存在正确的乘数a。</p>
<p>因此，我们可以暂时把a当作已知量，按照如下方式求解n：(其中，以b代指m转为整数后的列表)</p>
<p>由于有：</p>
<script type="math/tex; mode=display">
out[1] \equiv a*out[0] +b[1]\quad(mod\;n)\\
out[7] \equiv a*out[6] +b[1]\quad(mod\;n)</script><p>作差，得：</p>
<script type="math/tex; mode=display">
out[7]-out[1]\equiv a*(out[6]-out[0]) \quad (mod\;n)</script><p>所以：</p>
<script type="math/tex; mode=display">
out[7]-out[1]- a*(out[6]-out[0]) =k1*n</script><p>同理，</p>
<script type="math/tex; mode=display">
out[8]-out[2]- a*(out[7]-out[1]) =k2*n</script><p>求解gcd，即可得到模数n。</p>
<p>得到模数n后，又因为已经拥有了a，就可以逐步求解出每个b，最终就得到flag。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">out = [<span class="number">11306816523806448359968744947</span>, <span class="number">36825731210294893531878483479</span>, <span class="number">34541243376991313199431099859</span>, <span class="number">20354966593817263503588124934</span>, <span class="number">37588861068580029710084832784</span>, <span class="number">46973656140717560123345808645</span>, <span class="number">41524739592939159728594635383</span>, <span class="number">146800497033274580640567704</span>, <span class="number">50488771112485302710340410522</span>, <span class="number">12385224224599902891523452952</span>, <span class="number">61520982263029439442401885206</span>, <span class="number">31363021932740609933463915946</span>]</span><br><span class="line">ahigh = bytes_to_long(<span class="string">b&quot;catctf&#123;&quot;</span>)&lt;&lt;<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    m = []</span><br><span class="line">    a = ahigh + i</span><br><span class="line">    n = GCD(a*(out[<span class="number">6</span>] - out[<span class="number">0</span>])-(out[<span class="number">7</span>] - out[<span class="number">1</span>]),a*(out[<span class="number">7</span>] - out[<span class="number">1</span>])-(out[<span class="number">8</span>] - out[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:]) != <span class="number">96</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(out)//<span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">        temp = (out[j+<span class="number">1</span>] - a*out[j]) % n</span><br><span class="line">        m.append(<span class="built_in">str</span>(long_to_bytes(temp))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">    m.insert(<span class="number">0</span>,<span class="built_in">str</span>(long_to_bytes(a))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#flag = b&quot;catctf&#123;41f3f1ae-040f-aa60-ae0c-d6a74472c9f4&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，CatCTF2023新生赛crypto部分就全部讲解完毕啦！希望大家踊跃投入到crypto方向中来，我们校赛的时候再见！</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-DASCTF-CBCTF-wp-crypto</title>
    <url>/post/87ec16c9.html</url>
    <content><![CDATA[<p>*代表赛中未解出的题目，包含全四道赛题的复现。</p>
<span id="more"></span>
<h3 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来做简单的RSA啦</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">f</span>):</span><br><span class="line">    random_chars = <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">    f = f + random_chars</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_p</span>(<span class="params">p</span>):</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    P = p</span><br><span class="line">    n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> jacobi(<span class="number">2</span>,n1) == <span class="number">1</span>:</span><br><span class="line">            n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">while</span> P:</span><br><span class="line">            pad = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2023</span>)**<span class="number">2</span> </span><br><span class="line">            message = pad &lt;&lt; <span class="number">1</span> + P % <span class="number">2</span></span><br><span class="line">            cipher = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">            f.write(<span class="built_in">str</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            P //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>+ <span class="built_in">str</span>(n1) )    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_q</span>(<span class="params">q</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, n</span>):</span><br><span class="line">        e = random.randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">        noise = random.randint(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        c = <span class="built_in">pow</span>(q+noise,e,n)</span><br><span class="line">        <span class="keyword">return</span> e, noise,c </span><br><span class="line">    </span><br><span class="line">    n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    e1, noise1, c1 = encrypt(q, n2)</span><br><span class="line">    e2, noise2, c2 = encrypt(q, n2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>+ <span class="built_in">str</span>(n2) ) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e1, noise1, c1) =&#x27;</span>, (e1,noise1,c1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e2, noise2, c2) =&#x27;</span>, (e2,noise2,c2))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">guess_p(p)</span><br><span class="line">guess_q(q)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = padding(flag)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line"><span class="string">n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line"><span class="string">(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)</span></span><br><span class="line"><span class="string">(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)</span></span><br><span class="line"><span class="string">c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>本题分为两部分，先要用guess_p求出p、然后用guess_q求出q，之后就可以正常RSA解密得到flag。</p>
<p>其中，q的求解相对容易一点，由guess_q知道：</p>
<script type="math/tex; mode=display">
(q+noise1)^{e1} \equiv c1 \quad(mod\;n2)</script><script type="math/tex; mode=display">
(q+noise2)^{e2} \equiv c2 \quad(mod\;n2)</script><p>将q看作未知数，写作多项式如下：</p>
<script type="math/tex; mode=display">
(x+noise1)^{e1} \equiv c1 \quad(mod\;n2)</script><script type="math/tex; mode=display">
(x+noise2)^{e2} \equiv c2 \quad(mod\;n2)</script><p>那么显然q是两个多项式的公共根，因此两个多项式有公因式(x-q)，求解gcd即可得到(x-q)，进而得到q。</p>
<p>然后就是p的求解。这里用到了雅可比符号，因此需要先了解一下雅可比符号的一些相关概念：</p>
<p><img src="/post/87ec16c9/image-20231023200836792.png" alt="image-20231023200836792"></p>
<p>而其中勒让德符号(a,pi)的作用是判断a是否是模pi下的二次剩余，若勒让德符号值为1则是二次剩余，为-1则是二次非剩余。</p>
<p>而在这个题目中，还需要知道雅可比符号的一个性质：</p>
<ul>
<li>完全积性：</li>
</ul>
<script type="math/tex; mode=display">
(\frac{ab}{p}) = (\frac{a}{p})(\frac{b}{p})</script><p>那么再回头看这个题，首先它保证了：</p>
<script type="math/tex; mode=display">
(\frac{2}{n}) \neq 1</script><p>也就是说值为-1，而由雅可比符号的性质知道：</p>
<script type="math/tex; mode=display">
(\frac{2}{n}) = (\frac{2}{p})(\frac{2}{q}) = -1</script><p>也就是说，2不能同为p、q的二次剩余或二次非剩余，而必须是其中一个的二次剩余，是另一个的二次非剩余。不过本题后续其实没有用到这一点。</p>
<p>再看guess_p中RSA的加密过程(此处要注意优先级，先计算的是加法运算，然后才是移位运算)：</p>
<script type="math/tex; mode=display">
message = pad^2<<(1+ P_{lastbit})</script><script type="math/tex; mode=display">
cipher = message^e \quad(mod\;n1)</script><p>而由雅可比符号的完全积性，我们知道：</p>
<script type="math/tex; mode=display">
(\frac{cipher}{n1}) = (\frac{message}{n1})^e</script><p>而e是一个奇数，因此无论是-1还是1都会维持原值，也就有：</p>
<script type="math/tex; mode=display">
(\frac{cipher}{n1}) = (\frac{message}{n1})^e = (\frac{message}{n1})</script><p>也就是说，我们计算密文的雅可比符号，其实就能得到明文的雅可比符号，这也就是说明RSA语义不安全的其中一点。那么我们有了明文的雅可比符号后，如何得到P的取值呢？</p>
<p>试想，如果P当前位为0，那么就有：</p>
<script type="math/tex; mode=display">
message = pad^2<<1 =2*pad^2</script><script type="math/tex; mode=display">
(\frac{message}{n1}) = (\frac{2*pad^2}{n1}) = (\frac{2}{n1})(\frac{pad^2}{n1}) = -1*(\frac{pad^2}{p1})(\frac{pad^2}{q1})</script><p>显然，pad^2肯定既是p1的二次剩余，也是q1的二次剩余，因此当P的该位为0时，计算出的雅可比符号值为-1</p>
<p>而当P当前位为1时，有如下式：</p>
<script type="math/tex; mode=display">
message = pad^2<<2 =4*pad^2</script><script type="math/tex; mode=display">
(\frac{message}{n1}) = (\frac{4*pad^2}{n1})  = (\frac{4*pad^2}{p1})(\frac{4*pad^2}{q1})=(\frac{4}{p1})(\frac{4}{q1})(\frac{pad^2}{p1})(\frac{pad^2}{q1})</script><p>显然全部都是二次剩余，因此该部分一定是1。所以我们可以把这个作为判断依据来还原P的每一个比特位，还原p、q后就可以解密RSA了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line">n2 = <span class="number">103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line">(e1, noise1, c1) = (<span class="number">1743</span>, <span class="number">44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776</span>, <span class="number">65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983</span>)</span><br><span class="line">(e2, noise2, c2) = (<span class="number">1325</span>, <span class="number">35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683</span>, <span class="number">50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714</span>)</span><br><span class="line">c = <span class="number">124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getq</span></span><br><span class="line">PR.&lt;x&gt;=PolynomialRing(Zmod(n2))</span><br><span class="line">g1 = (x+noise1)^e1-c1</span><br><span class="line">g2 = (x+noise2)^e2-c2</span><br><span class="line">q = <span class="built_in">int</span>(-gcd(g1, g2)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\题\CBCTF 2023\crypto\CB_rsa\enc.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c1 = f.read().split(<span class="string">&quot;n&quot;</span>)</span><br><span class="line">tt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(jacobi(<span class="built_in">int</span>(c1[i]),n1) == -<span class="number">1</span>):</span><br><span class="line">        tt += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tt += <span class="string">&quot;1&quot;</span></span><br><span class="line">p = <span class="built_in">int</span>(tt[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,p*q))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;W05-y03r_m2st1r-j2c0b1_2nd_p01yn0mi2l!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-backpack"><a href="#CB-backpack" class="headerlink" title="CB backpack"></a>CB backpack</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on 8-balanced-backpack</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_e</span>():</span><br><span class="line">    e = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        ee = [<span class="number">0</span>]*<span class="number">3</span>+[<span class="number">1</span>]*<span class="number">3</span></span><br><span class="line">        shuffle(ee)</span><br><span class="line">        e += ee</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">    </span><br><span class="line">e = gen_e()</span><br><span class="line">nbit = <span class="built_in">len</span>(e)</span><br><span class="line">flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> e]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = [randint(<span class="number">1</span>,<span class="number">2</span>^nbit) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit)]</span><br><span class="line"></span><br><span class="line">re = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    re += e[i]*a[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(re)</span><br></pre></td></tr></table></figure>
<p>相较于普通的01背包密码，这一题的背包有一个特别之处，即每六个比特位之和为3。</p>
<p>开始觉得影响好像不大，但是直接上普通背包的LLL会发现规约不出全为0、1的最短向量，因此肯定需要用上这个特别之处来构造格。</p>
<p>先看看普通的背包密码的格是怎么样的：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1}\\
     & 1 &   &   &   &a_{2} \\
     &   &...&   &   & ...\\
     &   &   & 1 &   & a_{47} \\
     &   &   &   & 1 & a_{48} \\
     &   &   &   &   &-c  \\
  \end{matrix}
  \right)</script><p>这是因为，这个格具有如下线性关系：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1}\\
     & 1 &   &   &   &a_{2} \\
     &   &...&   &   & ...\\
     &   &   & 1 &   & a_{47} \\
     &   &   &   & 1 & a_{48} \\
     &   &   &   &   &-c  \\
  \end{matrix}
  \right)
  =
  (b_1,b_1,...b_{47},b_{48},0)</script><p>而由于有每六个的和为3，所以可以尝试扩充八列格，如下：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 &   &   \\
     & 1 &   &   &   &a_{2} & 1 &   &   \\
     &   &...&   &   &...   &   &...&   \\
     &   &   & 1 &   &a_{47}&   &   & 1  \\
     &   &   &   & 1 &a_{48}&   &   & 1 \\
     &   &   &   &   &-c    &-3 &   &-3  \\
  \end{matrix}
  \right)</script><p>右边新增的八列，每一列对应位置有6个1，然后最后一行为-3。这样构造格的依据是下列线性关系：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 &   &   \\
     & 1 &   &   &   &a_{2} & 1 &   &   \\
     &   &...&   &   &...   &   &...&   \\
     &   &   & 1 &   &a_{47}&   &   & 1  \\
     &   &   &   & 1 &a_{48}&   &   & 1 \\
     &   &   &   &   &-c    &-3 &   &-3  \\
  \end{matrix}
  \right)
  = (b_1,b_1,...b_{47},b_{48},0,0,0,0,0,0,0,0,0)</script><p>其中，后九列可以乘上K倍系数来确保规约得到0。但是这样构造格，规约出来的仍然没有满足条件的01向量。然后又改变思路，构造下面的格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 \\
     & 1 &   &   &   &a_{2} & 1 \\
     &   &...&   &   &...   & 1   \\
     &   &   & 1 &   &a_{47}& 1\\
     &   &   &   & 1 &a_{48}& 1   \\
     &   &   &   &   &-c    &-24  \\
  \end{matrix}
  \right)</script><p>其线性关系如下：</p>
<script type="math/tex; mode=display">
(b_1,b_1,...b_{47},b_{48},1)*
\left(
 \begin{matrix}
   1 &   &   &   &   &a_{1} & 1 \\
     & 1 &   &   &   &a_{2} & 1 \\
     &   &...&   &   &...   & 1   \\
     &   &   & 1 &   &a_{47}& 1\\
     &   &   &   & 1 &a_{48}& 1   \\
     &   &   &   &   &-c    &-24  \\
  \end{matrix}
  \right)
  =
  (b_1,b_1,...b_{47},b_{48},0,0)</script><p>仍然是将最后两列扩充K倍，保证规约出0，这样用LLL之后可以找到对应01向量。</p>
<p>不过应该依然是运气好，碰上非预期解，因为前一个格出不来，没想通为什么这个格能出来。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line">b = [<span class="number">65651991706497</span>, <span class="number">247831871690373</span>, <span class="number">120247087605020</span>, <span class="number">236854536567393</span>, <span class="number">38795708921144</span>, <span class="number">256334857906663</span>, <span class="number">120089773523233</span>, <span class="number">165349388120302</span>, <span class="number">123968326805899</span>, <span class="number">79638234559694</span>, <span class="number">259559389823590</span>, <span class="number">256776519514651</span>, <span class="number">107733244474073</span>, <span class="number">216508566448440</span>, <span class="number">39327578905012</span>, <span class="number">118682486932022</span>, <span class="number">263357223061004</span>, <span class="number">132872609024098</span>, <span class="number">44605761726563</span>, <span class="number">24908360451602</span>, <span class="number">237906955893793</span>, <span class="number">204469770496199</span>, <span class="number">7055254513808</span>, <span class="number">221802659519968</span>, <span class="number">169686619990988</span>, <span class="number">23128789035141</span>, <span class="number">208847144870760</span>, <span class="number">272339624469135</span>, <span class="number">269511404473473</span>, <span class="number">112830627321371</span>, <span class="number">73203551744776</span>, <span class="number">42843503010671</span>, <span class="number">118193938825623</span>, <span class="number">49625220390324</span>, <span class="number">230439888723036</span>, <span class="number">241486656550572</span>, <span class="number">107149406378865</span>, <span class="number">233503862264755</span>, <span class="number">269502011971514</span>, <span class="number">181805192674559</span>, <span class="number">152612003195556</span>, <span class="number">184127512098087</span>, <span class="number">165959151027513</span>, <span class="number">188723045133473</span>, <span class="number">241615906682300</span>, <span class="number">216101484550038</span>, <span class="number">81190147709444</span>, <span class="number">124498742419309</span>]</span><br><span class="line">c = <span class="number">4051501228761632</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">2</span>] = b[i]*K</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">2</span>] = -c*K</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">1</span>*K</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -<span class="number">24</span>*K</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(L)</span></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    error = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">if</span>(j != <span class="number">1</span> <span class="keyword">and</span> j != <span class="number">0</span>):</span><br><span class="line">            error = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(error == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(error == <span class="number">0</span>):</span><br><span class="line">        e = i[:-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> e]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;22a53e95a21f1000ac5dcc618f67586c412e1072f5bb1fee0ee5ce3d1794e3f3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-curve"><a href="#CB-curve" class="headerlink" title="*CB curve"></a>*CB curve</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on curve</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = <span class="number">1141741939958844590498346884870015122543626602665954681008204697160652371664923</span></span><br><span class="line">        self.a = <span class="number">727131475903635498678013730344448225340496007388151739960305539398192321065043</span></span><br><span class="line">        self.b = <span class="number">840714623434321649308065401328602364673881568379142278640950034404861312007307</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">ecc = CB_curve()</span><br><span class="line">G = (<span class="number">586066762126624229327260483658353973556531595840920560414263113786807168248797</span>, <span class="number">66727759687879628160487324122999265926655929132333860726404158613654375336028</span>)</span><br><span class="line">P = (ecc.mul(bytes_to_long(flag),G)[<span class="number">0</span>],randint(<span class="number">1</span>,ecc.p))</span><br><span class="line">Q = (<span class="number">460843895959181097343292934009653542386784127282375019764638432240505304648101</span>, <span class="number">739422832583403823403837831802136107593509589942947902014204968923412689379907</span>)</span><br><span class="line"></span><br><span class="line">e = randint(<span class="number">1</span>,p)</span><br><span class="line">pl = [ecc.add(P,ecc.mul(<span class="number">10</span>-i,ecc.negG(Q)))[<span class="number">0</span>] + e <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">ph = [ecc.add(P,ecc.mul(<span class="number">10</span>-i,Q))[<span class="number">0</span>] + e <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pl)</span><br><span class="line"><span class="built_in">print</span>(ph)</span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程：</p>
<ul>
<li>定义了一条曲线ecc，并给定其上的点加法与倍乘法</li>
<li>给出两点G、Q</li>
<li>对于G，将flag转为大整数后，求出G的flag倍点并取其横坐标作为P点的横坐标，并另生成一个随机数作为P点的纵坐标</li>
<li>对于Q，生成一个随机数e，然后进行10次如下运算(其中，[0]代表取横坐标，negG是取逆元点)：</li>
</ul>
<script type="math/tex; mode=display">
pl_i = (P + (10-i)*negG(Q))[0] + e</script><script type="math/tex; mode=display">
ph_i = (P + (10-i)*Q)[0] + e</script><p>那么大致思路就是：</p>
<ul>
<li>先通过pl、ph求出点P的坐标</li>
<li>通过曲线映射求解DLP，得到flag</li>
</ul>
<p>接下来进入具体题目分析。</p>
<h4 id="negG"><a href="#negG" class="headerlink" title="negG"></a>negG</h4><p>要求出P点的坐标就要利用pli与phi，但是利用pli之前，首先要知道negG(Q)的具体坐标是多少。由题目中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">    <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br></pre></td></tr></table></figure>
<p>可以看出，negG(Q)操作其实就是在取Q的该曲线上的逆元，但是我们没有order，也没有有效的计算order的方法，因此只能用题目已知信息推算Q逆元的坐标形式。</p>
<p>首先要确认曲线的单位元O，由于普通ECC的单位元是无穷远点，不好计算，所以我们先测试O=(0，0)，看他是不是单位元。测试方法就是看对于曲线上任意一点X，是否有O+X=X。</p>
<p>而我们有该曲线的加法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br></pre></td></tr></table></figure>
<p>把数学表达式写的直观一点(以下均在模p下进行)：</p>
<script type="math/tex; mode=display">
x_3 = \frac{(x_1+x_2)(1+ay_1y_2)}{(1+bx_1x_2)(1-ay_1y_2)}</script><script type="math/tex; mode=display">
y_3 = \frac{(y_1+y_2)(1+bx_1x_2)}{(1-bx_1x_2)(1+ay_1y_2)}</script><p>很显然对曲线上任意一点X，O=(0，0)满足O+X=X，因此(0，0)是该曲线的单位元。这一点也可以用题目给定的add函数测试。</p>
<p>那么有了单位元后，由于negG(Q)是Q的逆元，所以有：</p>
<script type="math/tex; mode=display">
negG(Q) + Q = O</script><p>那么设negG(Q)=(x1,y1)，代入点加法就有：</p>
<script type="math/tex; mode=display">
0 = \frac{(x_1+x_Q)(1+ay_1y_Q)}{(1+bx_1x_Q)(1-ay_1y_Q)}</script><script type="math/tex; mode=display">
0 = \frac{(y_1+y_Q)(1+bx_1x_Q)}{(1-bx_1x_Q)(1+ay_1y_Q)}</script><p>这个时候就可以看出来其实Q和negG(Q)的坐标关系其实就是模p下互为相反数，因此我们就有了negG(Q)的坐标了。可能有的师傅看到这里会觉得这很显然，但其实对于认识一个曲线，这些分析步骤其实并不显然，而且很重要。</p>
<h4 id="groebner求P点坐标"><a href="#groebner求P点坐标" class="headerlink" title="groebner求P点坐标"></a>groebner求P点坐标</h4><p>那么现在有了negG(Q)的坐标，我们就可以着手利用pl和ph了。仍然把他们先写成直观的数学表达式如下：</p>
<script type="math/tex; mode=display">
pl_i = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)} + e</script><script type="math/tex; mode=display">
ph_i = \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)} + e</script><p>其中，(xi,yi)是当次Q的(10-i)倍点的坐标。现在有了十组pli、phi，而这些方程组只有三个未知数xP、yP、e，因此朴素的想法是直接groebner基求出三个未知数就有P点的坐标。但是实际上这样是求不出的，我觉得可能是以下两个原因：</p>
<ul>
<li>yP并不是P点在该曲线上的纵坐标，而是一个随机数，因此直接用曲线加法会产生一些错误</li>
<li>多项式形式过于复杂，直接groebner难以求解</li>
</ul>
<p>赛后看别的师傅wp，才发现只要采用一个小技巧，这两个问题就可以同时解决。这个技巧就是发现平方差公式可以利用在消元中，如下：</p>
<script type="math/tex; mode=display">
pl_i - e = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)}</script><script type="math/tex; mode=display">
ph_i - e = \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)}</script><p>上下两式相乘可以得到：</p>
<script type="math/tex; mode=display">
(pl_i - e)(ph_i - e) = \frac{(x_P-x_i)(1-ay_Py_i)}{(1-bx_Px_i)(1+ay_Py_i)} \frac{(x_P+x_i)(1+ay_Py_i)}{(1+bx_Px_i)(1-ay_Py_i)}</script><p>就可以消掉yP，并得到：</p>
<script type="math/tex; mode=display">
(pl_i - e)(ph_i - e) = \frac{xP^2-x_i^2}{1-b^2x_P^2x_i^2}</script><p>而这样用groebner基就可以求出xP和e了，当然求出来的xP有两种取值。</p>
<h4 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h4><p>这也是赛后看别的师傅wp(<a href="https://www.cnblogs.com/ZimaBlue/articles/17780216.html">DASCTF-CBCTF 2023 - ZimaB1ue - 博客园 (cnblogs.com)</a>)才看到的，赛中没找到这是huff曲线(其实赛后自己找也没找到)。而huff曲线可以利用如下映射mapping到普通椭圆曲线上(也就是常见的Weiestrass Curve)：</p>
<p><img src="/post/87ec16c9/image-20231023200412149.png" alt="image-20231023200412149"></p>
<p>那么就先用huff曲线方程求出P点坐标，然后将P点映射到对应椭圆曲线上。</p>
<p>然后由于映射是一一对应，因此曲线阶不会变，所以我们可以直接用order函数求出映射后的曲线阶，发现其除了一个因子外都光滑，因此之后就是pohlig_Hellman求一个DLP就能得到flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = <span class="number">1141741939958844590498346884870015122543626602665954681008204697160652371664923</span></span><br><span class="line">        self.a = <span class="number">727131475903635498678013730344448225340496007388151739960305539398192321065043</span></span><br><span class="line">        self.b = <span class="number">840714623434321649308065401328602364673881568379142278640950034404861312007307</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">ecc = CB_curve()</span><br><span class="line">G = (<span class="number">586066762126624229327260483658353973556531595840920560414263113786807168248797</span>, <span class="number">66727759687879628160487324122999265926655929132333860726404158613654375336028</span>)</span><br><span class="line">Q = (<span class="number">460843895959181097343292934009653542386784127282375019764638432240505304648101</span>, <span class="number">739422832583403823403837831802136107593509589942947902014204968923412689379907</span>)</span><br><span class="line">pl = [<span class="number">908996880816674413953945844149350915331956247471480600840221415119794882139724</span>, <span class="number">971918808384910355828135603762747020183688585728289421786279444571287619529246</span>, <span class="number">1285550352531583269956802123237391199017403081800977678246201935580429758051904</span>, <span class="number">1551774945769448705387900437472951015954157193946719575845523359198154668857591</span>, <span class="number">676185408751480221545400062950292727848016906516506232986883519673765317932582</span>, <span class="number">1250300209784131850574858927023046353058343552115735540789593580037130054384362</span>, <span class="number">1298409778422699298367007023890818793557023853717180295526932023194697263501748</span>, <span class="number">1332552452292482549702793642987623159617988974910321945878093492007278710993114</span>, <span class="number">1030239404875082841481045525469865919289388171602293245905162820968158543176773</span>, <span class="number">1154148024180033719999293176590867264297899817449945744942661351655533433871621</span>]</span><br><span class="line">ph = [<span class="number">584297112520340495757457954416165393828472756298945167299482077258411155766756</span>, <span class="number">886432149227960827335266910774569034430464592640209168563805700117347063152246</span>, <span class="number">613528590036968449893421430816319461615130635882647544978722093413694101540550</span>, <span class="number">576162106332135829961234799085370038425761945928004579456101802617485243023987</span>, <span class="number">627570890346195626159365118862437334953500165050236216404858019114288681512171</span>, <span class="number">1015503424232985454098149884321288932492551183126601131968495641510550575005042</span>, <span class="number">1532737675157046782602115678180407262847166210963507805526455422934164759886583</span>, <span class="number">1540047002602145805476906585925538790245968214992837106009502002588479779602195</span>, <span class="number">505097517314409449404205152068185149808364887623922221197462411159844816865696</span>, <span class="number">873498218680784138428154510303205366133389839886911286745954821800632158315951</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#get coordinate_P</span></span><br><span class="line">PR.&lt;xp,e&gt; = PolynomialRing(Zmod(ecc.p))</span><br><span class="line">F = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    f = (pl[i]-e)*(ph[i]-e)*(<span class="number">1</span>-ecc.b^<span class="number">2</span>*xp^<span class="number">2</span>*(ecc.mul(<span class="number">10</span>-i,Q)[<span class="number">0</span>]^<span class="number">2</span>)) - (xp^<span class="number">2</span>-(ecc.mul(<span class="number">10</span>-i,Q)[<span class="number">0</span>]^<span class="number">2</span>))</span><br><span class="line">    F.append(f)</span><br><span class="line">res = Ideal(F).groebner_basis()</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"><span class="comment">#[xp^2 + 219493165434454878473973957507132663767650700404392831423708684433961924200902, e + 716700711017198421972376297958894204723153539777056104579499803899129208364755]</span></span><br><span class="line"></span><br><span class="line">xp_2 = -<span class="number">219493165434454878473973957507132663767650700404392831423708684433961924200902</span></span><br><span class="line">F = Zmod(ecc.p)</span><br><span class="line">xp_2 = F(xp_2)</span><br><span class="line">xp = xp_2.nth_root(<span class="number">2</span>,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">points = []</span><br><span class="line">PR.&lt;yp&gt; = PolynomialRing(Zmod(ecc.p))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xp:</span><br><span class="line">    f = x*(ecc.a*yp^<span class="number">2</span>-<span class="number">1</span>) - yp*(ecc.b*x^<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line">    res = f.roots()</span><br><span class="line">    points.append((<span class="built_in">int</span>(x),<span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>])))</span><br><span class="line">    points.append((<span class="built_in">int</span>(x),<span class="built_in">int</span>(res[<span class="number">1</span>][<span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mapping and pohlig_hellman</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">point</span>):</span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    Ex = (ecc.b*x-ecc.a*y) * inverse(y-x,ecc.p) % ecc.p</span><br><span class="line">    Ey = (ecc.b-ecc.a) * inverse(y-x,ecc.p) % ecc.p</span><br><span class="line">    <span class="keyword">return</span> (Ex,Ey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pohlig_hellman</span>(<span class="params">q,g,primes,order</span>):</span><br><span class="line">    logs=[]</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t=<span class="built_in">int</span>(order)//<span class="built_in">int</span>(fac)</span><br><span class="line">        log=discrete_log(t*q,t*g,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        logs+=[log]</span><br><span class="line">    m = crt(logs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DLP</span></span><br><span class="line">E = EllipticCurve(GF(ecc.p),[<span class="number">0</span>,ecc.a+ecc.b,<span class="number">0</span>,ecc.a*ecc.b,<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line">order = <span class="number">1141741939958844590498346884870015122544171009688372185479632675211885925945760</span></span><br><span class="line">order_factors = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">37</span>,<span class="number">271</span>,<span class="number">4297</span>,<span class="number">6983</span>,<span class="number">9679</span>,<span class="number">52631</span>,<span class="number">139571</span>,<span class="number">84666937</span>,<span class="number">558977989</span>]</span><br><span class="line">EG = E(mapping(G))</span><br><span class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        EP = E(mapping(point))</span><br><span class="line">        m = pohlig_hellman(EP,EG,order_factors,order)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;goodathuff&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="CB-cipher"><a href="#CB-cipher" class="headerlink" title="*CB cipher"></a>*CB cipher</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cryptography Based on cipher</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> pylfsr <span class="keyword">import</span> LFSR</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> state1,state2,state3,flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> flag</span><br><span class="line"></span><br><span class="line">fpoly1 = [<span class="number">14</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">fpoly2 = [<span class="number">20</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">fpoly3 = [<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iv</span>():</span><br><span class="line">    a,b,c = L1.<span class="built_in">next</span>(),L2.<span class="built_in">next</span>(),L3.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">return</span> (a &amp; b) ^ (b &amp; c) ^ c</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_cipher</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        key = [<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(randint(<span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">        self.key = [[<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">        </span><br><span class="line">        self.sbox = [<span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>,</span><br><span class="line">                     <span class="number">0x0</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">                     <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0xd</span>,</span><br><span class="line">                     <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0xb</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,pltxt</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            ct = key_add(ct,self.key[i%<span class="number">2</span>])</span><br><span class="line">            ct = self.s_trans(ct)</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">                ct = bit_move(ct)</span><br><span class="line">        </span><br><span class="line">        ct = key_add(ct,self.key[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bt_to_bin</span>(<span class="params">self,msg</span>):</span><br><span class="line">        msg = msg <span class="keyword">if</span> (<span class="built_in">len</span>(msg)+<span class="number">1</span>)%<span class="number">2</span> <span class="keyword">else</span> msg+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:].rjust(<span class="number">8</span>*<span class="built_in">len</span>(msg),<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">txt_encrypt</span>(<span class="params">self,msg</span>):</span><br><span class="line">        time = (<span class="built_in">len</span>(msg)+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        pltxt = [self.bt_to_bin(msg)[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time)]</span><br><span class="line">        <span class="comment">#print(pltxt)</span></span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">            now_re = self.encrypt(pltxt[i])</span><br><span class="line">            <span class="keyword">if</span> output != []:</span><br><span class="line">                now_re = <span class="built_in">bin</span>(<span class="built_in">int</span>(now_re,<span class="number">2</span>) ^ <span class="built_in">int</span>(output[-<span class="number">1</span>],<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            output.append(now_re)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(output),<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">L1 = LFSR(fpoly = fpoly1, initstate = state1)</span><br><span class="line">L2 = LFSR(fpoly = fpoly2, initstate = state2)</span><br><span class="line">L3 = LFSR(fpoly = fpoly3, initstate = state3)</span><br><span class="line"></span><br><span class="line">iv_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>(iv())</span><br><span class="line">    </span><br><span class="line">a = CB_cipher()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iv_txt[:<span class="number">320</span>])</span><br><span class="line"><span class="built_in">print</span>(a.txt_encrypt(<span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(bytes_to_long(a.txt_encrypt(flag))^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101</span></span><br><span class="line"><span class="comment">#b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line"><span class="comment">#b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br></pre></td></tr></table></figure>
<p>分析一下题目流程：</p>
<ul>
<li>题目给出了三个LFSR，并结合三个LFSR的每一比特输出生成了iv_txt，并给出了iv_txt的前320位</li>
<li>题目自定义了一个CB_cipher类，并生成一个对象a，对一段已知明文进行了加密，并给出密文</li>
<li>将flag也用对象a加密后，与完整的iv_txt异或，并给出密文</li>
</ul>
<h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><p>首先，三个LFSR这部分有点类似于前段时间柏鹭杯的Stream。</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/812dabe5.html#more">2023-网信柏鹭杯-wp-crypto | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>只是这道题里采用了pylfsr实现，把特征多项式换成等价的移位操作就仍然可以用z3解出三个state，从而还原出完整iv_txt，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_init_state</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">13</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">19</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">14</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        sol.add(((lfsr1(R1) &amp; lfsr2(R2))^(lfsr2(R2) &amp; lfsr3(R3))^lfsr3(R3)) == <span class="built_in">int</span>(c[i]))</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>得到三个初始state：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[R2 = <span class="number">68217</span>, R3 = <span class="number">3230</span>, R1 = <span class="number">6464</span>]</span><br></pre></td></tr></table></figure>
<p>可以验证该种子产生的iv_txt前320位与给定的相等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part2 check_init_state</span></span><br><span class="line">R2 = <span class="number">68217</span>;R3 = <span class="number">3230</span>;R1 = <span class="number">6464</span></span><br><span class="line">iv_txt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">98</span>*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>((lfsr1(R1)&amp;lfsr2(R2)) ^ (lfsr2(R2)&amp;lfsr3(R3)) ^ lfsr3(R3))</span><br><span class="line">    R1 = (R1 &lt;&lt; <span class="number">1</span>) ^ lfsr1(R1)</span><br><span class="line">    R2 = (R2 &lt;&lt; <span class="number">1</span>) ^ lfsr2(R2)</span><br><span class="line">    R3 = (R3 &lt;&lt; <span class="number">1</span>) ^ lfsr3(R3)</span><br><span class="line"><span class="built_in">print</span>(iv_txt[:<span class="number">320</span>] == c)</span><br></pre></td></tr></table></figure>
<p>然后我们就可以去除iv_txt对flag的密文异或的影响。</p>
<p>接下来的问题就是：如何由一组已知的明密文对，解密flag对应的密文？这就需要分析加密的具体过程了。不过大致浏览一下可以发现几个比较重要的性质：</p>
<ul>
<li>把明文每两个字节分为一组，对于相同的两个字节，encrypt的结果是一样的</li>
<li>txt_encrypt其实只是对每个明文分组encrypt的结果做了一个类似CBC的操作，也就是当前组的最终密文，由该组encrypt的加密结果与前一组的最终密文异或得到</li>
</ul>
<p>可以发现，性质二其实提供了一个逆操作，我们只需要知道前一组的最终密文，与当前分组的最终密文异或，就能得到当前分组的encrypt结果。比如对于题目中给定的已知的一组明文c1，可以用以下操作恢复其encrypt结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="string">b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line">plain = <span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span></span><br><span class="line"></span><br><span class="line">final_c1 = <span class="string">b&quot;\x10\x07&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c1),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c1[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c1[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c1 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_c1)</span><br></pre></td></tr></table></figure>
<p>得到的结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x10\x07d&gt;\xfc\xac\x03\xb39\xa9\xc2h\xbe\xbb\xa5&#x27;\xd0\x9e\x1c]5\x06C\xb4U$e\xceJ\xe8&lt;\x9a\x8d/\xc5=\x8d&gt;\xb0:\x03\xb3\xf5\xbd\x13\x89\x80*5\x8f\xe5\x9c\x8d&gt;\x83\xa1\x93\xb3\xa5&#x27;\xfc\xac\x03\xb3]&#125;\x1b\x98\x9d?\x93\xb3&quot;</span></span><br></pre></td></tr></table></figure>
<p>得到了原始的encrypt的结果，其用处是什么呢？这个时候就需要用到刚才提到的性质一：把明文每两个字节分为一组，对于相同的两个字节，encrypt的结果是一样的。</p>
<p>而由于两次加密用的是同一个对象a，因此密钥key不变，所以同样的两字节密文肯定会得到同样的两字节密文。而我们现在相当于有了36组2字节的明密文对应关系，也许可以根据这些关系恢复一部分flag串，然后用猜单词之类的方式猜测flag的完整串？</p>
<p>那么如法炮制，先把c2的CBC加密去掉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c2 = <span class="string">b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br><span class="line">c2 = long_to_bytes(bytes_to_long(c2)^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>))</span><br><span class="line">final_c2 = <span class="string">b&quot;F\x8c&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c2),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c2[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c2[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c2 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(final_c2)</span><br></pre></td></tr></table></figure>
<p>得到的结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;F\x8cu\t\x82\x98\xec\x02\xc5\xf6\x9at\xdf\xdb\xf9\x01k\x8f\xf8\xbc\xd7\xf9$\xf5\xc1YZg\x99s\xcf\x82\x0f\xe52=\xbe\xf9\x9b\x89+\xdf\x8dYr\xac\x06\xf3W\x8e\x81\x82\x00L\xf0%\xd7*Ea\xb6=\xd4(\x1f\x17Gck2\xde\xc1r8\xcdSY\x8a\xd63\xfa\x1a&#123;yNO\xe5\xe7%\x98\xc7\x84\xff\x9cr\r\xf3!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>然后由于题目保证了”DASCTF”在flag串中，然后由已知明密文对可以分析出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;TF&quot;</span> --&gt; <span class="string">&quot;\x1c]&quot;</span></span><br></pre></td></tr></table></figure>
<p>但是很可惜在密文串中没有发现这组加密结果，这说明”DASCTF”应该是按如下分组加密的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;xD&quot;</span>,<span class="string">&quot;AS&quot;</span>,<span class="string">&quot;CT&quot;</span>,<span class="string">&quot;Fx&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后就期望可以找到别的已有的密文对，结果<strong>一组都没有找到</strong>，尝试彻底失败！</p>
<p>那么通过这种方式肯定是不行的，还是要结合提示”中间相遇”去分析具体加密流程才能找出密钥，从而进行解密。</p>
<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><p>在研究了wp以及与出题师傅交流后，基本理清了这道题的思路，接下来我会尝试把wp的思路阐述的更清楚一点。</p>
<h5 id="iv"><a href="#iv" class="headerlink" title="iv"></a>iv</h5><p>首先就是纠正一下尝试中对于iv求解的一点小错误。这里的错误主要是由于题目iv的生成方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iv_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>(iv())</span><br></pre></td></tr></table></figure>
<p>可以看到，他生成了flag长度乘8个比特，也就是flag长度个字节。而由于题目中给定的flag最终密文是98字节，所以很容易就会像我一样直接认为iv也是98个字节的长度。但其实并不一定，因为flag在txt_encrypt中可能会进行填充，因此flag的初始长度<strong>既可能是98字节，也可能是97字节！</strong></p>
<p>而在上面我的尝试中，我生成了98字节的iv并消除类似CBC的影响后，竟然一组明文都找不到(包括”TF”这种很大概率存在的明文对)，因此很可能iv其实是97个字节。我们生成97字节的iv后重新求解，就可以重新得到c2的两两一组的纯encrypt加密结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;F\x8cJ\xe8&lt;\x9a\xfa\xe3\xff\xcf\xc5\x1f-\x06L_\x8d/\x93\x13L_Oo\x87?,\x9b\x8d/&lt;\x9a\x84\x9b\xd2x9\t8\xb8W\xc9W\xc9W\xc9\xe3\xe4\x1b\x98\x03\xb3\xb5\x1b\xa0*\xd2x\xb9\x92P%\xa0.\x1c]]\xc5\x0c\x88\x97\xc5T\xbf\xc5\x7f\xa7\x16L\xaem\xed\xa2*\x92\x18&amp;89\xa9o\xc0\x82\xabu6\x7f\x0c&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个时候可以发现里面就存在包括”\x1c]”在内的一些密文对了，并且拓展一下也可以知道诸如”DA”、”SC”之类明文对应的密文，不过这已经不重要了，因为还有非常多对密文对没有出现在已知明密文对中，所以这个方法无法完全求解。</p>
<p>不过至少这说明iv长度为97应该才是正解。</p>
<h5 id="中间相遇"><a href="#中间相遇" class="headerlink" title="中间相遇"></a>中间相遇</h5><p>然后接下来是对中间相遇步骤的分析，这才是本题的重头戏。</p>
<p>首先由之前的分析我们可以知道，我们完全可以把每两个字节都当作独立的明文进行处理。因此现在我们只需要关注encrypt函数的加密流程了。而encrypt函数一共加密五轮，再贴一下其加密流程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,pltxt</span>):</span><br><span class="line">    key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">    bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">    </span><br><span class="line">    ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        ct = key_add(ct,self.key[i%<span class="number">2</span>])</span><br><span class="line">        ct = self.s_trans(ct)</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">            ct = bit_move(ct)</span><br><span class="line">    </span><br><span class="line">    ct = key_add(ct,self.key[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br></pre></td></tr></table></figure>
<p>其中，s_trans函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">    pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">    pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">    ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">    <span class="keyword">return</span> ct</span><br></pre></td></tr></table></figure>
<p>它实现的功能是：把输入的长度为16的01列表，转化为4个十六进制数，并使用sbox对这4个十六进制数分别进行代换，代换完毕后，将其重新转为长度为16的01列表并返回。</p>
<p>然后还有一个bit_move函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br></pre></td></tr></table></figure>
<p>它实现的功能是一个比特置换，我们打印一下其置换结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"><span class="built_in">print</span>([(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure>
<p>这也就是说，进行bit_move操作后，位置为0的比特换到位置0，位置为4的比特换到位置1，位置为8的比特换到位置2，以此类推。其实这两个函数也就是一个代换置换网络每一轮的代换与置换操作。</p>
<p>那么我们可以发现encrypt函数几个不安全的地方：</p>
<ul>
<li>加密轮数只有5轮，轮数比较少</li>
<li>只有1、3、5轮进行了bit_move，2、4轮没有进行</li>
<li>bit_move函数中，有4个比特位并没有进行置换，分别是：0，5，10，15</li>
</ul>
<p>那么接下来我们尝试进行中间相遇攻击，那么首先假设我们通过爆破操作，可以拥有正确的密钥K[0]的全16个比特以及密钥K[1]的前4个比特，然后对已知的明文加密三轮。我们把已知的两字节明文分成每4bit一组，这样符合每一轮的代换置换过程，然后对前三轮依次进行分析：</p>
<ul>
<li><p>第一轮：由于我们拥有完全正确的K[0]，因此我们可以获得完全正确的第一轮加密结果。</p>
</li>
<li><p>第二轮：由于我们只拥有K[1]的前四个比特，而第二轮只进行了S盒代换没有进行bit_move，因此我们能获得完全正确的第二轮加密得到的前4bit</p>
</li>
<li>第三轮：仍然由于拥有K[0]的全16个bit，因此自然拥有完全正确的K[0]前4bit，所以在第三轮bit_move之前，得到的前4bit加密结果仍然是完全正确的。然后就需要进行bit_move，而正如刚才分析得到的一样，由于bit_move中第0比特位并没有进行置换，所以三轮加密完全结束后，我们可以得到完全正确的第0比特。</li>
</ul>
<p>也就是说，我们爆破密钥K[0]的全16个比特以及密钥K[1]的前4个比特，其中正确的那一组就可以得到36组已知明文的三轮加密的第0比特，所以我们可以依据此建立中间相遇攻击的字典。</p>
<p>同理，对于解密操作，我们爆破正确的密钥K[1]的全16个比特以及密钥K[0]的前4个比特，就可以得到完全正确的三轮解密得到的前四个bit，但是我们只需要第0比特来进行中间相遇攻击。</p>
<p>而这个步骤还可以简化，就是wp说的那样分为内层和外层，外层爆破两个密钥的前4bit，内层使用两个密钥的后12bit去中间相遇。这样就可以每次建立一个较小字典进行中间相遇攻击，而不需要先花较长时间把完整的很大的加密字典完全建立好，然后再通过解密操作反查字典进行中间相遇。</p>
<p>现在我们有已知的36组明密文，那么如果中间相遇攻击发现了一组密钥对36个碰撞比特都满足，那么就很大概率是正确的密钥了。有了正确密钥后写个解密逆操作就可以得到flag。</p>
<p>exp(偷了点懒，完整的CB_cipher类就直接用wp的了)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;10101010100110100000111111011110111101010010011000011011001010010010111000100101011111010001110110110111000010100001010111110110000011110100110011011110001100100011101101110001000100111100001111100111010100010000001101001001000011110001100110101100101000101001110011101100001100100000011101011110100110110110000110010101&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_init_state</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">13</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">19</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">14</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">11</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        sol.add(((lfsr1(R1) &amp; lfsr2(R2))^(lfsr2(R2) &amp; lfsr3(R3))^lfsr3(R3)) == <span class="built_in">int</span>(c[i]))</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"><span class="comment">#z3_sol()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 check_init_state</span></span><br><span class="line">R2 = <span class="number">68217</span>;R3 = <span class="number">3230</span>;R1 = <span class="number">6464</span></span><br><span class="line">iv_txt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>*<span class="number">8</span>):</span><br><span class="line">    iv_txt += <span class="built_in">str</span>((lfsr1(R1)&amp;lfsr2(R2)) ^ (lfsr2(R2)&amp;lfsr3(R3)) ^ lfsr3(R3))</span><br><span class="line">    R1 = (R1 &lt;&lt; <span class="number">1</span>) ^ lfsr1(R1)</span><br><span class="line">    R2 = (R2 &lt;&lt; <span class="number">1</span>) ^ lfsr2(R2)</span><br><span class="line">    R3 = (R3 &lt;&lt; <span class="number">1</span>) ^ lfsr3(R3)</span><br><span class="line"><span class="comment">#print(iv_txt[:320] == c)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 get_cipher</span></span><br><span class="line">c1 = <span class="string">b&#x27;\x10\x07t9\x88\x95\x8b&amp;\xb2\x8fp\xe7\xce\\k&#123;\xbb\xe5\xa7\xb8\x92\xbe\xd1\n\x84.\xe1\xe0\xab\x08\x97\x92\x1a\xbd\xdf\x80R\xbe\xe2\x84\xe17\x14\x8a\x07\x03\x87)\xb2\xa6W:\xda\x04Y\xa5\xca\x16o1\x93\x9d\x90.\xcdS\xd6\xcbK\xf4\xd8G&#x27;</span></span><br><span class="line">plain = <span class="string">b&#x27;Welcome to our CBCTF! I hope you can have a nice day here. Come with me.&#x27;</span></span><br><span class="line">final_c1 = <span class="string">b&quot;\x10\x07&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c1),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c1[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c1[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c1 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c2 = <span class="string">b&quot;\xec\x16&lt;[D;F6\xb6\xcc\x7f\x80jL1\xb1@\x84iF[\xfcW\xbbbp\xdc\x0fI,%\x15\x1a\xbe\x86hT\r\xf0\x8a\xa91\x9aF\xe3\x84n\xeb\xe9\xa3,T\xec\x8f\xdbb\xc1\xd7\xe7&amp;&#x27;u\xe9A\xe9\x03\xe1\x89\x04\x8f\xa77\x8a\xd7\x97x\xccl\x1e\xc6\xea%\xb1/P\x98\x8e\x9bS\xca\xf5kR\x98H\xc6d\x15&quot;</span></span><br><span class="line">c2 = long_to_bytes(bytes_to_long(c2)^<span class="built_in">int</span>(iv_txt,<span class="number">2</span>))</span><br><span class="line">final_c2 = <span class="string">b&quot;F\x8c&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(c2),<span class="number">2</span>):</span><br><span class="line">    tt1 = bytes_to_long(c2[i:i+<span class="number">2</span>])</span><br><span class="line">    tt2 = bytes_to_long(c2[i-<span class="number">2</span>:i])</span><br><span class="line">    final_c2 += long_to_bytes(tt1^tt2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part4 Meet-in-the-Middle attack</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_cipher</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):      </span><br><span class="line">        self.sbox = [<span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>,</span><br><span class="line">                     <span class="number">0x0</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">                     <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0xd</span>,</span><br><span class="line">                     <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0xb</span>]</span><br><span class="line">        self.inv_sbox = [<span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, </span><br><span class="line">                         <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, </span><br><span class="line">                         <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, </span><br><span class="line">                         <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0x9</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inv_s_trans</span>(<span class="params">self,pt</span>):</span><br><span class="line">        pt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        pt = [self.inv_sbox[<span class="built_in">int</span>(i,<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(pt,<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        ct = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pt])</span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]</span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">e1</span>(<span class="params">self,pltxt,k0,k1_4</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        ct = key_add(ct,k0)</span><br><span class="line">        ct = self.s_trans(ct)</span><br><span class="line">        ct = bit_move(ct)</span><br><span class="line">        ct = key_add(ct[:<span class="number">4</span>],k1_4)</span><br><span class="line">        ct = self.sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = key_add([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(ct)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)],k0[:<span class="number">4</span>])</span><br><span class="line">        ct = self.sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = ct&gt;&gt;<span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> ct</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">d1</span>(<span class="params">self,pltxt,k1,k0_4</span>):</span><br><span class="line">        <span class="comment">#print(self)</span></span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        ct = key_add(ct,k1)</span><br><span class="line">        ct = bit_move(ct)</span><br><span class="line">        ct = self.inv_s_trans(ct)</span><br><span class="line">        ct = key_add(ct[:<span class="number">4</span>],k0_4)</span><br><span class="line">        ct = self.inv_sbox[<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]),<span class="number">2</span>)]</span><br><span class="line">        ct = key_add([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(ct)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)],k1[:<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">return</span> ct[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bt_to_bin</span>(<span class="params">self,msg</span>):</span><br><span class="line">        msg = msg <span class="keyword">if</span> (<span class="built_in">len</span>(msg)+<span class="number">1</span>)%<span class="number">2</span> <span class="keyword">else</span> msg+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:].rjust(<span class="number">8</span>*<span class="built_in">len</span>(msg),<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,pltxt,key</span>):</span><br><span class="line">        key_add = <span class="keyword">lambda</span> x,key : [x[i]^key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        bit_move = <span class="keyword">lambda</span> x : [x[(i//<span class="number">4</span>)+(i%<span class="number">4</span>)*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        </span><br><span class="line">        ct = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> pltxt]</span><br><span class="line">        <span class="comment">#print(ct,key)</span></span><br><span class="line">        ct = key_add(ct,key[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">2</span>:</span><br><span class="line">                ct = bit_move(ct)</span><br><span class="line">            ct = self.inv_s_trans(ct)</span><br><span class="line">            ct = key_add(ct,key[i%<span class="number">2</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ct]) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">txt_decrypt</span>(<span class="params">self,msg,key</span>):</span><br><span class="line">        output = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)):</span><br><span class="line">            now_re = self.decrypt(msg[i],key)</span><br><span class="line">            output.append(now_re)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(output),<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = [<span class="built_in">bin</span>(bytes_to_long(plain[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">c1 = [<span class="built_in">bin</span>(bytes_to_long(final_c1[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">c2 = [<span class="built_in">bin</span>(bytes_to_long(final_c2[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]))[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line">a = CB_cipher()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    dic_encbit = &#123;&#125;</span><br><span class="line">    k0_4 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(i&amp;<span class="number">0xffff0000</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    k1_4 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(i&amp;<span class="number">0x0000ffff</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">        k0_12 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(j)[<span class="number">2</span>:].rjust(<span class="number">12</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        k0 = k0_4+k0_12</span><br><span class="line">        enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">            enc += <span class="built_in">str</span>(a.e1(m1[i],k0,k1_4))</span><br><span class="line">        enc = <span class="built_in">int</span>(enc,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(enc <span class="keyword">in</span> dic_encbit.keys()):</span><br><span class="line">            dic_encbit[enc].append(k0)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dic_encbit[enc] = [k0]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">        k1_12 = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(j)[<span class="number">2</span>:].rjust(<span class="number">12</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        k1 = k1_4+k1_12</span><br><span class="line">        dec = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">            dec += <span class="built_in">str</span>(a.d1(c1[i],k1,k0_4))</span><br><span class="line">        dec = <span class="built_in">int</span>(dec,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(dec <span class="keyword">in</span> dic_encbit.keys()):</span><br><span class="line">            <span class="keyword">for</span> k0 <span class="keyword">in</span> dic_encbit[dec]:</span><br><span class="line">                message = a.txt_decrypt(c2,[k0,k1])</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> message):</span><br><span class="line">                    <span class="built_in">print</span>(message)</span><br><span class="line">                    exit()</span><br></pre></td></tr></table></figure>
<p>解得：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;n\xa3 you break the cipher!!how could it be??????? the flag is:DASCTF&#123;God_on_syM@etric_cRypto9raPhy&#125;\x00&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其实前两个字节还有点小错误，正确flag中是”oh”，不过这个小bug暂时就不d了。</p>
<p>这样利用中间相遇攻击，复杂度就由爆破完整密钥的2^32降低到了2*2^20，因此最多约半小时就能爆破出结果。而且运气比较好，其实一分多钟就有正确结果。</p>
<h5 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h5><p>在复现完成后，出题师傅对我的一些说法进行了更细致的补充。就比如，其实再回头看我们刚才讲的encrypt函数不安全的第三点：</p>
<ul>
<li>bit_move函数中，有4个比特位并没有进行置换，分别是：0，5，10，15</li>
</ul>
<p>其实这一点对安全性影响并不大，因为即使进行了置换，依然是可以中间相遇攻击的，步骤并没有什么大变化。这是因为，第三轮如何置换并不重要，我们需要的其实只是<strong>加密三轮和解密三轮后得到的位置相同的碰撞比特</strong>。这也就是说，我们其实也不一定非要在外层爆破K[0]，K[1]的前四比特，其实任选两组，只要能得到满足要求的碰撞比特，都是可以建立字典的。</p>
<p>通过这题收获到了很多，也非常感谢出题师傅对我思路上的帮助。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-MoeCTF-wp-crypto</title>
    <url>/post/aa501114.html</url>
    <content><![CDATA[<p>记录Crypto学习之路</p>
<span id="more"></span>
<h2 id="Classical-Crypto"><a href="#Classical-Crypto" class="headerlink" title="Classical Crypto"></a>Classical Crypto</h2><h3 id="ezrot"><a href="#ezrot" class="headerlink" title="ezrot"></a>ezrot</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ezrot</span><br></pre></td></tr></table></figure>
<p>Hint:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If you have no idea what kind of classical cipher this is, go to Classical Cipher entry of wikipedia for a hint</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@64E7LC@Ecf0:D0;FDE020D:&gt;!=60=6EE6C0DF3DE:EFE:@?04:!96C0tsAJdEA6d;F&#125;%0N</span><br></pre></td></tr></table></figure>
<p>rot47解密。(不知道为啥缺了个m，补上就好)</p>
<p><img src="/post/aa501114/image-20230917145802110.png" alt="image-20230917145802110"></p>
<p>flag：</p>
<p><strong>moectf{rot47_is_just_a_simPle_letter_substitution_ciPher_EDpy5tpe5juNT_}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="可可的新围墙"><a href="#可可的新围墙" class="headerlink" title="可可的新围墙"></a>可可的新围墙</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可可的新围墙</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mt3_hsTal3yGnM_p3jocfFn3cp3_hFs3c_3TrB__i3_uBro_lcsOp&#125;e&#123;ciri_hT_avn3Fa_j</span><br></pre></td></tr></table></figure>
<p>栅栏密码，手动调整一下栏数。</p>
<p><img src="/post/aa501114/image-20230917150048133.png" alt="image-20230917150048133"></p>
<p>flag：</p>
<p><strong>moectf{F3nc3_ciph3r_shiFTs_3ach_l3TT3r_By_a_Giv3n_nuMB3r_oF_plac3s_Ojpj}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="皇帝的新密码"><a href="#皇帝的新密码" class="headerlink" title="皇帝的新密码"></a>皇帝的新密码</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">皇帝的新密码</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tvljam&#123;JhLzhL_JPwoLy_Pz_h_cLyF_zPtwPL_JPwoLy!_ZmUVUA40q5KbEQZAK5Ehag4Av&#125;</span><br></pre></td></tr></table></figure>
<p>题目名字在暗指凯撒皇帝，但是其实是个移位为7的移位密码。</p>
<p><img src="/post/aa501114/image-20230917150328337.png" alt="image-20230917150328337"></p>
<p>flag：</p>
<p><strong>moectf{CaEsaE_CIphEr_Is_a_vErY_sImpIE_CIphEr!_SfNONT40j5DuXJSTD5Xatz4To}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="不是“皇帝的新密码”"><a href="#不是“皇帝的新密码”" class="headerlink" title="不是“皇帝的新密码”"></a>不是“皇帝的新密码”</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不是“皇帝的新密码”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scsfct&#123;wOuSQNfF_IWdkNf_Jy_o_zLchmK_voumSs_zvoQ_loFyof_FRdiKf_4i4x4NLgDn&#125;</span><br><span class="line"></span><br><span class="line">md5 of flag (utf-8) `ea23f80270bdd96b5fcd213cae68eea5`</span><br></pre></td></tr></table></figure>
<p>题目描述看上去像是在指变异凯撒，不过因为懒，直接先上了维吉尼亚尝试：</p>
<p><img src="/post/aa501114/image-20230917150659188.png" alt="image-20230917150659188"></p>
<p>可以看出已经出了密钥的前缀<code>goodjo</code>，可以猜想密钥应该是<code>goodjob</code>，进行解密：</p>
<p><img src="/post/aa501114/image-20230917150945439.png" alt="image-20230917150945439"></p>
<p>flag：</p>
<p><strong>moectf{vIgENErE_CIphEr_Is_a_lIttlE_hardEr_thaN_caEsar_CIphEr_4u4u4EXfXz}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="猫言喵语"><a href="#猫言喵语" class="headerlink" title="猫言喵语"></a>猫言喵语</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">狗曰：”喵喵喵喵喵？？“</span><br><span class="line">请解出后请转换为全大写，单词间以下划线分隔，套上moectf&#123;&#125;后提交</span><br></pre></td></tr></table></figure>
<p>Hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Morse Code</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">喵喵？ 喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵？喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵 喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵？喵喵喵 喵喵？喵喵？喵喵？ 喵喵喵喵喵喵喵喵？ 喵喵？喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵？喵喵喵喵喵？喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵 喵喵？喵喵喵喵喵喵喵喵？</span><br></pre></td></tr></table></figure>
<p>题目提示摩斯电码，因此多次尝试后，可以发现：</p>
<ul>
<li>“喵喵喵” 换成 “.”</li>
<li>“喵喵？” 换成 “-“</li>
</ul>
<p>再用摩斯电码解密，就能得到flag。</p>
<p>flag：</p>
<p><strong>moectf{THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX}</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto-入门指北"><a href="#Crypto-入门指北" class="headerlink" title="Crypto 入门指北"></a>Crypto 入门指北</h3><p>略</p>
<h3 id="baby-e"><a href="#baby-e" class="headerlink" title="baby_e"></a>baby_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~小小的也很可爱~~</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c =  147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line"><span class="comment"># n =  553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br></pre></td></tr></table></figure>
<p>可以看出p、q都很大，n更是达到了4096bit，因此m的比特只要小于<code>4096//7</code>，就能将密文直接开根得到明文。事实也是如此。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">c =  <span class="number">147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line">n =  <span class="number">553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br><span class="line"></span><br><span class="line">m = iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{SMaLL_3xPon3nt_Mak3_rSa_w3ak!_!lP0iYlJf!M3rux9G9Vf!JoxiMl903lllA}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="bad-E"><a href="#bad-E" class="headerlink" title="bad_E"></a>bad_E</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这个e怎么解密不了啊，怎么会事呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment"># 6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line"><span class="built_in">print</span>(q) <span class="comment"># 11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br></pre></td></tr></table></figure>
<p>题目直接给了p、q，所以可以直接RSA解密，但是尝试后报错，因为e是p-1的因子，所以e在phi_n下的逆元不存在。</p>
<p>通常这时候会有两种思路：AMM和转化到模q上求解。考虑到这只是第三题，并且65537用于AMM有点过大了，因此应该是模q下求解。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = <span class="number">11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line">c = <span class="number">63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,q-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{N0w_Y0U_hAve_kN0w_h0w_rsA_w0rks!_f!lP0iYlJf!M3ru}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="factor-signin"><a href="#factor-signin" class="headerlink" title="factor_signin"></a>factor_signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">坏了，p q被狗子吃了</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(flag[:<span class="number">36</span>],<span class="string">&quot;big&quot;</span>)</span><br><span class="line">m2 = <span class="built_in">int</span>.from_bytes(flag[<span class="number">36</span>:],<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">n1 = p*q</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1,e,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 = &quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>,n1)</span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">64</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">n2 = prod(primes)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2,e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 = &quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>,n2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 =  10004937130983861141937782436252502991050957330184611684406783226971057978666503675149401388381995491152372622456604317681236160071166819028679754762162125904637599991943368450200313304999566592294442696755822585022667008378021280392976010576970877334159755332946926433635584313137140987588847077645814987268595739733550220882135750267567373532603503399428451548677091911410732474324157868011686641243202218731844256789044721309478991918322850448456919991540932206923861653518190974620161055008847475600980152660468279765607319838003177639654115075183493029803981527882155542925959658123816315099271123470754815045214896642428657264709805029840253303446203030294879166242867850331945166255924821406218090304893024711068773287842075208409312312188560675094244318565148284432361706108491327014254387317744284876018328591380705408407853404828189643214087638328376675071962141118973835178054884474523241911240926274907256651801384433652425740230755811160476356172444327762497910600719286629420662696949923799255603628210458906831175806791599965316549386396788014703044837917283461862338269599464440202019922379625071512100821922879623930069349084917919100015782270736808388388006084027673781004085620817521378823838335749279055639005125</span></span><br><span class="line"><span class="comment"># n1 =  343504538870081878757729748260620800783581983635281373321527119223374418103340873199654926888439040391545101913132680017655039577253974802351999985470115474655124168592386965001556620077117966153475518658881140827499124290142523464795351995478153288872749817655925271395693435582010998996210909883510311066017237567799370371513462802547313382594409676803895262837061350017911885033133654781876923251129406855067993830824618637981136966134029212516871210627954762147349788788999116702635535406398258621926040887099782494271000823401788337120154104692934583729065189687995570122890809807661370008740283447636580308161498808092269041815719148127168137018600113465985504975054319601741498799761500526467431533990903047624407330243357514588557352746347337683868781554819821575385685459666842162355673947984514687068626166144076257334426612302554448774082488600083569900006274897032242821388126274957846236552373226099112200392102883351088570736254707966329366625911183721875374731791052229266503696334310835323523568132399330263642353927504971311717117370721838701629885670598853025212521537158141447625623337563164790788106598854822686494249848796441153496412236527242235888308435573209980270776407776277489669763803746640746378181948641</span></span><br><span class="line"><span class="comment"># c2 =  4948422459907576438725352912593232312182623872749480015295307088166392790756090961680588458629287353136729331282506869598853654959933189916541367579979613191505226006688017103736659670745715837820780269669982614187726024837483992949073998289744910800139692315475427811724840888983757813069849711652177078415791290894737059610056340691753379065563574279210755232749774749757141836708161854072798697882671844015773796030086898649043727563289757423417931359190238689436180953442515869613672008678717039516723747808793079592658069533269662834322438864456440701995249381880745586708718334052938634931936240736457181295</span></span><br><span class="line"><span class="comment"># n2 =  8582505375542551134698364096640878629785534004976071646505285128223700755811329156276289439920192196962008222418309136528180402357612976316670896973298407081310073283979903409463559102445223030866575563539261326076167685019121804961393115251287057504682389257841337573435085535013992761172452417731887700665115563173984357419855481847035192853387338980937451843809282267888616833734087813693242841580644645315837196205981207827105545437201799441352173638172133698491126291396194764373021523547130703629001683366722885529834956411976212381935354905525700646776572036418453784898084635925476199878640087165680193737</span></span><br></pre></td></tr></table></figure>
<p>没有别的信息能用于分解n，那么也只有可能这两个n的分解都被上传到在线网站了，一用发现果然都可以直接分解：</p>
<p>n1：</p>
<p><img src="/post/aa501114/image-20230917152722626.png" alt="image-20230917152722626"></p>
<p>n2：</p>
<p><img src="/post/aa501114/image-20230917152642113.png" alt="image-20230917152642113"></p>
<p>那么直接RSA解密，并将flag拼接起来即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">10004937130983861141937782436252502991050957330184611684406783226971057978666503675149401388381995491152372622456604317681236160071166819028679754762162125904637599991943368450200313304999566592294442696755822585022667008378021280392976010576970877334159755332946926433635584313137140987588847077645814987268595739733550220882135750267567373532603503399428451548677091911410732474324157868011686641243202218731844256789044721309478991918322850448456919991540932206923861653518190974620161055008847475600980152660468279765607319838003177639654115075183493029803981527882155542925959658123816315099271123470754815045214896642428657264709805029840253303446203030294879166242867850331945166255924821406218090304893024711068773287842075208409312312188560675094244318565148284432361706108491327014254387317744284876018328591380705408407853404828189643214087638328376675071962141118973835178054884474523241911240926274907256651801384433652425740230755811160476356172444327762497910600719286629420662696949923799255603628210458906831175806791599965316549386396788014703044837917283461862338269599464440202019922379625071512100821922879623930069349084917919100015782270736808388388006084027673781004085620817521378823838335749279055639005125</span></span><br><span class="line">n1 = <span class="number">343504538870081878757729748260620800783581983635281373321527119223374418103340873199654926888439040391545101913132680017655039577253974802351999985470115474655124168592386965001556620077117966153475518658881140827499124290142523464795351995478153288872749817655925271395693435582010998996210909883510311066017237567799370371513462802547313382594409676803895262837061350017911885033133654781876923251129406855067993830824618637981136966134029212516871210627954762147349788788999116702635535406398258621926040887099782494271000823401788337120154104692934583729065189687995570122890809807661370008740283447636580308161498808092269041815719148127168137018600113465985504975054319601741498799761500526467431533990903047624407330243357514588557352746347337683868781554819821575385685459666842162355673947984514687068626166144076257334426612302554448774082488600083569900006274897032242821388126274957846236552373226099112200392102883351088570736254707966329366625911183721875374731791052229266503696334310835323523568132399330263642353927504971311717117370721838701629885670598853025212521537158141447625623337563164790788106598854822686494249848796441153496412236527242235888308435573209980270776407776277489669763803746640746378181948641</span></span><br><span class="line">c2 = <span class="number">4948422459907576438725352912593232312182623872749480015295307088166392790756090961680588458629287353136729331282506869598853654959933189916541367579979613191505226006688017103736659670745715837820780269669982614187726024837483992949073998289744910800139692315475427811724840888983757813069849711652177078415791290894737059610056340691753379065563574279210755232749774749757141836708161854072798697882671844015773796030086898649043727563289757423417931359190238689436180953442515869613672008678717039516723747808793079592658069533269662834322438864456440701995249381880745586708718334052938634931936240736457181295</span></span><br><span class="line">n2 = <span class="number">8582505375542551134698364096640878629785534004976071646505285128223700755811329156276289439920192196962008222418309136528180402357612976316670896973298407081310073283979903409463559102445223030866575563539261326076167685019121804961393115251287057504682389257841337573435085535013992761172452417731887700665115563173984357419855481847035192853387338980937451843809282267888616833734087813693242841580644645315837196205981207827105545437201799441352173638172133698491126291396194764373021523547130703629001683366722885529834956411976212381935354905525700646776572036418453784898084635925476199878640087165680193737</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c1</span></span><br><span class="line">p1 = <span class="number">18055722101348711626577381571859114850735298658417345663254295930584841136416234624852520581982069555948490061840244710773146585295336094872892685938420880462305333393436098181186277450475949236132458958671804132443554885896037342335902958516394876382378829317303693655605215373555988755516058130500801822723195474873517960624159417903134580987202400855946137101429970119186394052011747475879598126195607938106163892658285305921071673588966184054026228745012993740035399652049777986535759039077634555909031397541116025395236871778797949216479130412500655359057128438928721459688727543057760739527720641179290282309741</span></span><br><span class="line">q1 = <span class="number">19024691283015651666032297670418553586155390575928421823630922553034857624430114628839720683172187406577114034710093054198921843669645736474448836706112221787749688565566635453151716934583685087745112614898780150391513798368931496744574075511968933800467288441832780919514199410584786925010518564670786685241724643282580795568609339268652910564215887176803735675069372979560024792322029911970574914829712553975379661212645059271137916107885326625543090473004683836665262304916304580076748336858662108554591235698235221618061328251985929904075811056422186525179189846420226944944513865790999242309352900287977666792901</span></span><br><span class="line">phi_n1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d1 = inverse(e,phi_n1)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c2</span></span><br><span class="line">plist = [<span class="number">9949603102225364603</span>,<span class="number">10049235158029375571</span>,<span class="number">10547615587767500213</span>,<span class="number">10596280721192026229</span>,<span class="number">10864078180916418691</span>,<span class="number">11092420583960163379</span>,<span class="number">11853704782834170959</span>,<span class="number">12034779627328165471</span>,<span class="number">12404642343676224637</span>,<span class="number">12448177342966243757</span>,<span class="number">13062839684118954553</span>,<span class="number">13645878578452317313</span>,<span class="number">14397830993057803133</span>,<span class="number">14619040595108594017</span>,<span class="number">14678737767649343977</span>,<span class="number">14745811312384518031</span>,<span class="number">14813953870710226847</span>,<span class="number">15175734709842430433</span>,<span class="number">15211380502610462057</span>,<span class="number">15332916111580607077</span>,<span class="number">15751974537676958401</span>,<span class="number">16123604149048919099</span>,<span class="number">16408421615173973083</span>,<span class="number">16870346804576162551</span>,<span class="number">17093292308638969889</span>,<span class="number">17265001711647542137</span>,<span class="number">17289161209347211817</span>,<span class="number">17543713628803023199</span>,<span class="number">17673334943789572513</span>,<span class="number">18106525049998616747</span>,<span class="number">18345408081492711641</span>,<span class="number">18390046459144888243</span>]</span><br><span class="line">phi_n2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi_n2 *= (i-<span class="number">1</span>)</span><br><span class="line">d2 = inverse(e,phi_n2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{fACtord6_And_YAfu_Are_6oth_good_utils_to_fACtorize_num6ers_ff90S}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="feistel"><a href="#feistel" class="headerlink" title="feistel"></a>feistel</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很喜欢shallow的一句话：白给捏</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span> = <span class="number">2</span></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;./secret&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key, <span class="built_in">round</span></span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    left = bytes_to_long(m[:<span class="number">8</span>])</span><br><span class="line">    right = bytes_to_long(m[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">        left, right = right, f(right, key) ^ left</span><br><span class="line">    left, right = right, left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>) + long_to_bytes(right).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x0b\xa7\xc6J\xf6\x80T\xc6\xfbq\xaa\xd8\xcc\x95\xad[\x1e\&#x27;W5\xce\x92Y\xd3\xa0\x1fL\xe8\xe1&quot;^\xad&#x27;</span></span><br></pre></td></tr></table></figure>
<p>分析一下题目的加密流程：</p>
<ul>
<li>将flag经padding填充长度至16的整数倍</li>
<li>填充后，将flag每16个分为一组，各自进行加密(类似ECB模式，组与组间不进行干扰)</li>
<li>每组的加密方式为：分为左右两部分，每部分各8字节，进行feistel网络加密，共两轮。</li>
</ul>
<p>再看看feistel型网络结构：</p>
<p><img src="/post/aa501114/image-20230917153853700.png" alt="image-20230917153853700"></p>
<p>分析可以知道，只要拥有密钥，那么只需要简单的异或就可以逐层还原明文，而不需要关注f函数的具体执行过程，这是因为对某一轮而言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L,R = R,f(R)^L</span><br></pre></td></tr></table></figure>
<p>此时，令新的左右两部分为newL,newR：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newL = R</span><br><span class="line">newR = f(R)^L</span><br></pre></td></tr></table></figure>
<p>只需要按下列方式即可还原出L、R：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R = newL</span><br><span class="line">L = f(newL)^newR = f(R)^(f(R)^L) = L</span><br></pre></td></tr></table></figure>
<p>所以对于n层的feistel，仅需要对应还原n次即可。在本题中为还原两次。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;\x0b\xa7\xc6J\xf6\x80T\xc6\xfbq\xaa\xd8\xcc\x95\xad[\x1e\&#x27;W5\xce\x92Y\xd3\xa0\x1fL\xe8\xe1&quot;^\xad&#x27;</span></span><br><span class="line">key = <span class="string">b&quot;wulidego&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c,key</span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    right = bytes_to_long(c[:<span class="number">8</span>])</span><br><span class="line">    left = bytes_to_long(c[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        left,right = f(left,key)^right,left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left) + long_to_bytes(right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_dec</span>(<span class="params">c, key</span>):</span><br><span class="line">    m = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c) // <span class="number">16</span>):</span><br><span class="line">        m += dec(c[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_dec(c,key))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{M@g1cA1_Encr1tion!!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="n-amp-n"><a href="#n-amp-n" class="headerlink" title="n&amp;n"></a>n&amp;n</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modulus and modulus~</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip().encode()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p * q</span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n)</span><br><span class="line"><span class="built_in">print</span>(c1) </span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line"><span class="comment"># 4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line"><span class="comment"># 13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br></pre></td></tr></table></figure>
<p>简单的共模攻击。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">19198101</span></span><br><span class="line">c1 = <span class="number">5776799746376051463605370130675046329799612910435315968508603116759552095183027263116443417343895252766060748671845650457077393391989018107887540639775168897954484319381180406512474784571389477212123123540984850033695748142755414954158933345476509573211496722528388574841686164433315356667366007165419697987147258498693175698918104120849579763098045116744389310549687579302444264316133642674648294049526615350011916160649448726069001139749604430982881450187865197137222762758538645387391379108182515717949428258503254717940765994927802512049427407583200118969062778415073135339774546277230281966880715506688898978925</span></span><br><span class="line">c2 = <span class="number">4664955020023583143415931782261983177552050757537222070347847639906354901601382630034645762990079537901659753823666851165175187728532569040809797389706253282757017586285211791297567893874606446000074515260509831946210526182765808878824360460569061258723122198792244018463880052389205906620425625708718545628429086424549277715280217165880900037900983008637302744555649467104208348070638137050458275362152816916837534704113775562356277110844168173111385779258263874552283927767924979691542028126412133709129601685315027689094437957165812994784648540588277901241854031439324974562449032290219652206466731675967045633360</span></span><br><span class="line">n = <span class="number">13612969130810965900902742090064423006385890357159609755971027204203418808937093492927060428980020085273603754747223030702684866992231913349067578014240319426522039068836171388168087260774376277346092066880984406890296520951318296354893551565670293486797637522297989653182109744864444697818991039473180752980752117041574628063002176339235126861152739066489620021077091941250365101779354009854706729448088217051728432010328667839532327286559570597994183126402340332924370812383312664419874352306052467284992411543921858024469098268800500500651896608097346389396273293747664441553194179933758992070398387066135330851531</span></span><br><span class="line"></span><br><span class="line">_, s1, s2 = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n)*<span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{dO_nOt_u53_5AM3_MOdulu5_tO_3ncrYPt_dIFF3r3nt_dAtA!_JY63x33iiA0Ji}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="p-q"><a href="#p-q" class="headerlink" title="|p-q|"></a>|p-q|</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">what will `next_prime` cause?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p += <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line"><span class="comment"># c = 307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br></pre></td></tr></table></figure>
<p>关注到q的生成过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = next_prime(p)</span><br></pre></td></tr></table></figure>
<p>因此p、q相差过小，n开根后简单爆破即可得到分解。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">329960318345010350458589325571454799968957932130539403944044204698872359769449414256378111233592533561892402020955736786563103586897940757198920737583107357264433730515123570697570757034221232010688796344257587359198400915567115397034901247038275403825404094129637119512164953012131445747740645183682571690806238508035172474685818036517880994658466362305677430221344381425792427288500814551334928982040579744048907401043058567486871621293983772331951723963911377839286050368715384227640638031857101612517441295926821712605955984000617738833973829140899288164786111118033301974794123637285172303688427806450817155786233788027512244397952849209700013205803489334055814513866650854230478124920442832221946442593769555237909177172933634236392800414176981780444770542047378630756636857018730168151824307814244094763132088236333995807013617801783919113541391133267230410179444855465611792191833319172887852945902960736744468250550722314565805440432977225703650102517531531476188269635151281661081058374242768608270563131619806585194608795817118466680430500830137335634289617464844004904410907221482919453859885955054140320857757297655475489972268282336250384384926216818756762307686391740965586168590784252524275489515352125321398406426217</span></span><br><span class="line">c = <span class="number">307746143297103281117512771170735061509547958991947416701685589829711285274762039205145422734327595082350457374530975854337055433998982493020603245187129916580627539476324521854057990929173492940833073106540441902619425074887573232779899379436737429823569006431370954961865581168635086246592539153824456681688944066925973182272443586463636373955966146029489121226571408532284480270826510961605206483011204059402338926815599691009406841471142048842308786000059979977645988396524814553253493672729395573658564825709547262230219183672493306100392069182994445509803952976016630731417479238769736432223194249245020320183199001774879893442186017555682902409661647546547835345461056900610391514595370600575845979413984555709077635397717741521573798309855584473259503981955303774208127361309229536010653615696850725905168242705387575720694946072789441481191449772933265705810128547553027708513478130258801233619669699177901566688737559102165508239876805822898509541232565766265491283807922473440397456701500524925191214292669986798631732639221198138026031561329502985577205314190565609214349344303324429408234237832110076900414483795318189628198913032900272406887003325858236057373096880675754802725017537119549989304878960436575670784578550</span></span><br><span class="line"></span><br><span class="line">p = iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(n % p == <span class="number">0</span>):</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{it_iS_vUlnErablE_iF_p_iS_aboUt_thE_SaME_SiZE_aS_Q_MVoAYArrlG3uco}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="rsa-signin"><a href="#rsa-signin" class="headerlink" title="rsa_signin"></a>rsa_signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真 signin</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line"><span class="string">c = 6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line"><span class="string">n = 24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line"><span class="string">c = 10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line"><span class="string">n = 14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line"><span class="string">c = 415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line"><span class="string">n = 12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line"><span class="string">c = 2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line"><span class="string">n = 18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line"><span class="string">c = 2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line"><span class="string">n = 22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line"><span class="string">c = 12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line"><span class="string">n = 19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line"><span class="string">c = 9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line"><span class="string">n = 16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line"><span class="string">c = 16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line"><span class="string">n = 16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line"><span class="string">c = 11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line"><span class="string">n = 13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line"><span class="string">c = 6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line"><span class="string">n = 21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line"><span class="string">c = 6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>同样的m、e，不同的模数n，一般有两种考虑方式：中国剩余定理或模不互素。</p>
<p>同样的，如果用中国剩余定理，65537对于开根来说仍然过大了，因此应该是模不互素。观察数据也可以发现，c、n共有11组，而题目仅生成了10组，因此可能也是对模不互素的一种暗示。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">17524722204224696445172535263975543817720644608816706978363749891469511686943372362091928951563219068859089058278944528021615923888948698587206920445508493551162845371086030869059282352535451058203615402089133135136481314666971507135484450966505425514285114192275051972496161810571035753943880190780759479521486741046704043699838021850105638224212696697865987677760179564370167062037563913329993433080123575434871852732981112883423565015771421868680113407260917902892944119552200927337996135278491046562185003012971570532979090484837684759828977460570826320870379601193678304983534424368152743368343335213808684523217</span></span><br><span class="line">c1 = <span class="number">6870605439714128574950893771863182370595667973241984289208050776870220326525943524507319708560433091378319367164606150977103661770065561661544375425887970907060665421562712515902428061727268441585629591525591001533188276465911918724808701356962871139957343861919730086334623932624184172272488406793955068827527130338853980609365042071290967556159598511667974987218999253443575482949258292953639729393456515185185102248985930422080581185292420347510600574229080211050520146551505605537486989306457793451086767402197128573781597156939709237045132856159368959981648969874765462190363842275826077556314448408825308218451</span></span><br><span class="line">n2 = <span class="number">24974121071274650888046048586598797033399902532613815354986756278905133499432183463847175542164798764762683121930786715931063152122056911933710481566265603626437742951648885379847799327315791800670175616973945640322985175516271373004547752061826574576722667907302681961850865961386200909397231865804894418194711076667760169256682834206788730947602211228930301853348503098156592000286467190760378847541148772869356389938999094673945092387627113807899212568399028514283219850734634544982646070106811651490010946670117927664594365986238107951837041859682547029079035013475238052160645871718246031144694712586073789250183</span></span><br><span class="line">c2 = <span class="number">10324627733161143472233272675096997859064721978612320424254305978486200326061730105384511258706433940176741256952824288120499229240005823611541292676234913505775165761543820764046537413943393325463602612485849366939102550336256797820440347815027443410399157963547486098366749815425187247171697678576246606105486928212486117878157055321965270364583625270716186820068538749425299073309429589410882809098930213978117176627031795312102177342499674234163614021182116065492884880492891668658240362567156235958605768725892407536211503981819707919444725863397622629226309480836486427388484176463279384813974310500625102568341</span></span><br><span class="line">n3 = <span class="number">14215826065753265334521416948225868542990756976323308408298887797364519400310818641526401662106853573185085731682502059761982246604277475488691297554851873224516934619888327644352138127883043558424300092247604877819821625587944308487310522092440517150600171819145803937177931473336108429889165189521078678397694303305705260759351843006130968234071638035667854938070597400634242396852782331461576526836227336952718230741560369621645218729592233657856104560425642219241082727756696967324334634822771842625681505869025740662258929200756109704988223034840699133778958569054445520305361142302393767439478256174414187983763</span></span><br><span class="line">c3 = <span class="number">415916446053083522663299405080903121619846594209033663622616979372099135281363175464579440520262612010099820951944229484417996994283898028928384268216113118778734726335389504987546718739928112684600918108591759061734340607527889972020273454098314620790710425294297542021830654957828983606433731988998097351888879368160881316237557097381718444193741788664735559392675419489952796677690968481917700683813252460912749931286739585465657312416977086336732056497161860235343155953578618273940135486362350057858779130960380833359506761436212727289297656191243565734621757889931250689354508999144817518599291078968866323093</span></span><br><span class="line">n4 = <span class="number">12221355905532691305226996552124162033756814028292708728711809229588190407700199452617060657420166395065565154239801465361510672853972152857415394695376825120759202857555325904640144375262531345320714166285999668052224661520834318497234299585219832943519644095197479639328120838919035625832361810964127485907587199925564724081163804724975965691571850962714258888527902920462746795712011579424322515292865504642938090200503979483095345893697972170153990274670257331483858538617460680462369680572833191232126527727222302641204529110948993583190295067970240051042000918629138767209918572311469915774910003970381965123241</span></span><br><span class="line">c4 = <span class="number">2248834602646305164283014556051672824689884721514190813323189875541899566338153534858709617544459297836048770439230174669883719627734394673012731609952869246171300132019334542245094425654362711870373095782083791160029789553806741967408922001051006100049326921742208757147339981269528740944842177729701945606827918253016001436218891580980192743564642120923356793292885805519110411357830040053435569937296612987581482128241218218550319154933831743819546558930918761162723110000328532730751591375727881221199739397698390594797621758011191224528339478784930214820615602510460640307707682865125229937141010351138099874025</span></span><br><span class="line">n5 = <span class="number">18152103454920389919231636321286527841833809319334215885641536161086810144890443857211776387914779781628740172079478910188540146498426564211851629962338413488555121865779016981727229209606498886170396500155102635962395243364899026418106378234307821492609778555173516000309435730752571818439328803899462791834490025768785383592935046996428331508608555503567191807692523852530836008436655164751054189301721070209363416058642811329040202582026786024825518381761299547703962502636888833428457116986351812252188468878701301184044948733274488264320930936362549028124581962244201377136969591119942276742760215403738913067567</span></span><br><span class="line">c5 = <span class="number">2797812094994121597295362327809389195134238119144547570610194659000554967367804835006774413888965325870488368112707535584687083342412367127561646136089638402907513075405746055834487062923240856950047936297155455745928810738711368950139327254040579266046642851362228893522740216519732851152162928545416236075387903789535000820423985522550638100049857678600662008021574841083416323980817348573062083159710189689337626277009675683473560325178417766400002763719953723259300977655801234386662217462862844994462505601804422871991694828697337752697234180117437785537788728412520613916334045368736691714704501962513954509705</span></span><br><span class="line">n6 = <span class="number">22877887459293720334652698748191453972019668578065068224653972884599636421200068659750242304040301306798039254241668648594556654589309801728248683586229288074709849246660525799452637187132633064172425677552176203292787732404537215347782229753837476655088638984496409603054524994383358547132112778403912563916886533181616856401929346567686400616307916690806467019665390260267596320840786982457521423178851498130935577260638269429250197050326097193841333205073650802709022947551398142692735680419453533128176592587955634333425401930362881423044363132586170013458300714163531162544301477356808388416864173949089028317961</span></span><br><span class="line">c6 = <span class="number">12271947322974809255127222556723394446467844330408506340843897575503534175121932185624776713618037572593449207329510171212097269297133492090526270770286000839978630002819714376964416081198925899119135271459404333829811516667576167576916805217016117373027245648473458331936273975110163065432285322832123169216976420362833557809289561705091817949915218278430834098156335989014645979633658818904753942786129126233956314517292746008579152368541316795082120147520597254020266752859205131887527661767589367756335766220841483940854397440079467053684289006956034944336788288196391829411432383541473132962783883758561108297747</span></span><br><span class="line">n7 = <span class="number">19844333358004073542783728196775487079202832688982038135532362073659058674903791697765527614270399097276261983744620537925712167578187109058145015032736796457938148615396547198728652435169126585595701228287449135664667959433491335769206692390262797325133960778920452511673878233190120432257482339068405290918739453464061987163074129048150451046315248186376609350095502130018696275764450248681787926130463463923862832714969425813770847493135627599129546112143050369344208092649256659330284904392961574494907186727388685504929586018639846040474616307662546605623294842316524163106100888851228858194942825157286544846177</span></span><br><span class="line">c7 = <span class="number">9531264751315473345056673937611382755236533664089452852716992791452558274873158812669513178040971923528201631609089069182049526587423864397527252061341857426422965190913745048414029690931254119437249218321954899956104589066479231204536856131403590472063496956452030342299863907499976917750846369802185896519725837163530049157920978007252920334447236842959033879772444475877613295594785710745889554296655932909212643500877218304116451889820444820534937901427158918411546484157737612926382420354101675658160847653151539420222526999426483473829341628599881460824765758346670633385844187252696874025582747177333702736465</span></span><br><span class="line">n8 = <span class="number">16956880944655068255446705024149899655327230949463546092744762226005904114738078692036960935391303255804754787864713189658290361949509917704853428701870609882427423574672772606814823959758208695540116440342488334213300943604780971422918744381486937517952553797134323570131582724393100092308466968491068503301604506186521656059375518680612292667310641047190088814753025794048591445267711939066523165042651430468971452726568222388482323097260496415484997546126185688914792795834046855221759289007609518312601640548469651358391745947588643697900883634533872314566389446271647587564348026861264979727062157272541149018781</span></span><br><span class="line">c8 = <span class="number">16110326928338602237561005337578085623028116490564329920738844771341250444164294693848130674347672763073995755532723894042946521372321947507527854966013459795492930736187058535665041545095683801386814190612817128504426590828954205050425979880047802547011117626354405687170961272200066258220699329112978151044633994329352673342582175349200008181837211288847301836681860817044391028992501763375849046751094019224570802498414368189170656992427042010362385494565216988561215657424755648213390551881450141899860811844684546992754530755092358644968088017107313907435586729574798046187046145596726569637758312033849476689378</span></span><br><span class="line">n9 = <span class="number">16472195897077185060734002588086375750797253422014472876266294484788862733424113898147596402056889527985731623940969291811284437034420929030659419753779530635563455664549165618528767491631867637613948406196511848103083967995689432928779805192695209899686072900265108597626632371718430059561807147486376536203800038054012500244392964187780217667805308512187849789773573138494622201856638931435423778275004491853486855300574479177472267767506041000072575623287557610576406578525902565241580838652860552046216587141709709405062150243990097835181557208274750462554811004137033087430556692966525170882625891516050207318491</span></span><br><span class="line">c9 = <span class="number">11867731823522211833301190385669833752050387304375114576570892885641949969365352586215693183003550684262313893105989683214739695968039039944442567581277252581988489020834299896625977474857889570528169919064941042132119301236852358823696947330423679033138054012027878783478922023431469564210485180679933264749281963405243082505688901662659030897104957499953192201440290084373968716271056483463909282407034181891901928790601973222643210525000717355062752079302291729448234374709852429885984987094307177760741403086538949190424454337896501402430653783597070178968921411867485584517214777073301007918941216316241784521708</span></span><br><span class="line">n10 = <span class="number">13890749889361612188368868998653029697326614782260719535555306236512452110708495623964530174188871342332417484996749651846510646453983388637377706674890018646246874688969342600780781646175634455109757266442675502522791531161284420286435654971819525519296719668701529481662071464145515727217108362496784024871976015116522898184301395037566514980846499856316532479656908169681719288258287756566886281183699239684997698487409138330229321935477734921670373632304542254938831218652340699024011371979519574576890581492623709896310465567043899767342676912434857372520308852745792360420376574037705943820090308501053778144141</span></span><br><span class="line">c10 = <span class="number">6250115196713939477947942995075509357173312813431601073354390451609559579925704891503987992181988654989477525811826607070378476102616752398280691012244301950194800995432882828020405062344160270290542566163969692748126314259624623341922057435728127596172871894887055305291345372720594481096374310285437492746765510292863238933163142677773310305789984897974266961231555124787205980411992251387207335655129551950825339766848166539671565212408741432649813058363660321480995187545006718837863674527475323414266732366507905974800565463011676462244368010182725161416783875646259625352308599198614681446394427674340328493047</span></span><br><span class="line">n11 = <span class="number">21457499145521259498911107987303777576783467581104197687610588208126845121702391694574491025398113729462454256070437978257494064504146718372095872819969887408622112906108590961892923178192792218161103488204912792358327748493857104191029765218471874759376809136402361582721860433355338373725980783308091544879562698835405262108188595630215081260699112737457564998798692048522706388318528370551365364702529068656665853097899157141017378975007689790000067275142731212069030175682911154288533716549782283859340452266837760560153014200605378914071410125895494331253564598702942990036163269043699029806343766286247742865671</span></span><br><span class="line">c11 = <span class="number">6269656777204332618433779865483197625538144405832409880710764183039800286008967127279281167109250083159801218370191973055663058165456565194979210256278526713608759141588082614531352489547674696723140599892318118960648862531538435596775798128845789504910467783731144808685373807716609662688064728614003904579841055786083326311313295311152563668422289435606771091246147867715987583149743032723028324394173498623642539175178996531881058274717907066845565199058931743481410454382746158558886667761300257488769795092777021292335562818583719708133179974425584610403335487082478848975656282384575767178925517257692365828720</span></span><br><span class="line"></span><br><span class="line">n = [n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11]</span><br><span class="line">c = [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">if</span>(GCD(n[i],n[j]) != <span class="number">1</span>):</span><br><span class="line">            p = GCD(n[i],n[j])</span><br><span class="line">            q = n[i] // p</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c[i],d,n[i])</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{it_is_re@lly_@_signin_level_cryPto_ch@ll@nge_ng92WPIBung92WPIBun}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="xorrrrrrrrr"><a href="#xorrrrrrrrr" class="headerlink" title="xorrrrrrrrr"></a>xorrrrrrrrr</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">芝士什么运算？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;moectf&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">article = <span class="built_in">open</span>(<span class="string">&#x27;article.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">strxor = <span class="keyword">lambda</span> x,y: <span class="built_in">bytes</span>([a^b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x,y)])</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    range_start = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(article) - <span class="built_in">len</span>(flag))</span><br><span class="line">    mask = article[range_start:range_start + <span class="built_in">len</span>(flag)]</span><br><span class="line">    result.append(strxor(flag,mask))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.log&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.writelines([<span class="built_in">str</span>(i)+<span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> result])</span><br></pre></td></tr></table></figure>
<p>经典的MTP，用相同的flag串反复与文本随机段落异或，并给出了每一次异或后的密文。</p>
<p>由于直到flag开头为<code>moectf&#123;</code>，因此可以当作密钥依次解密各段文本，并分析可能的后续文本的单词。分析出来后延长已知的密钥，如此反复。我就是这样手动做的，大概花费了一小时。</p>
<p>flag：</p>
<p><strong>moectf{W0W_y0U_HaVe_mastered_tHe_x0r_0Peart0r!_0iYlJf!M3rux9G9Vf!JoxiMl}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="ez-chain"><a href="#ez-chain" class="headerlink" title="ez_chain"></a>ez_chain</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你说的对，但是我的key呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    key = <span class="built_in">int</span>(fs.read().strip())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockize</span>(<span class="params">long</span>):</span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        out.append(long % base)</span><br><span class="line">        long //= base</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(out))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blocks = blockize(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block_cbc</span>(<span class="params">blocks, iv, key</span>):</span><br><span class="line">    encrypted = [iv]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        encrypted.append(blocks[i] ^ encrypted[i] ^ key)</span><br><span class="line">    <span class="keyword">return</span> encrypted[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt_block_cbc(blocks, iv, key))</span><br><span class="line"><span class="comment"># [8490961288, 122685644196, 349851982069, 319462619019, 74697733110, 43107579733, 465430019828, 178715374673, 425695308534, 164022852989, 435966065649, 222907886694, 420391941825, 173833246025, 329708930734]</span></span><br></pre></td></tr></table></figure>
<p>题目首先将flag串转为一个大整数，并且将大整数按如下方式转化为一个列表：</p>
<script type="math/tex; mode=display">
flag = a[n]*base^n+a[n-1]*base^{n-1}+...+a[1]*base^1 + a[0]*base[0]</script><p>可以发现，这种方式其实就是把flag转化成了一个base进制数，并将系数存储在<code>blocks</code>列表中。</p>
<p>在这之后，题目进行了一个类似于CBC模式的加密，列举一下前三项：</p>
<script type="math/tex; mode=display">
enc[0] = iv\\
enc[1] = blocks[0]\oplus enc[0]\oplus key\\
enc[2] = blocks[1]\oplus enc[1]\oplus key</script><p>把<code>enc[i]</code>的内容代入到<code>enc[i+1]</code>中，就可以发现：</p>
<script type="math/tex; mode=display">
enc[1] = blocks[0]\oplus iv\oplus key\\
enc[2] = blocks[1]\oplus (blocks[0]\oplus iv\oplus key)\oplus key</script><p>消掉key，可以得到：</p>
<script type="math/tex; mode=display">
enc[2] = blocks[1]\oplus blocks[0]\oplus iv</script><p>依此类推，就可以推出剩余的<code>enc[i]</code>：</p>
<script type="math/tex; mode=display">
enc[2] = blocks[1]\oplus blocks[0]\oplus iv\\
enc[3] =  blocks[2]\oplus blocks[1]\oplus blocks[0]\oplus iv\oplus key\\
enc[4] =  blocks[3]\oplus blocks[2]\oplus blocks[1]\oplus blocks[0]\oplus iv\\
...\\
enc[n] = (\bigoplus\limits_{i=0}^{n-1}blocks[i]) \oplus iv \;(\oplus key)</script><p>两两组合一下，就可以得到所有的：</p>
<script type="math/tex; mode=display">
blocks[i]\oplus key</script><p>因此，只要拥有任何一段<code>blocks[i]</code>，就可以还原出key，从而解密所有段。而幸运的是，我们知道flag开头总是<code>moectf&#123;</code>，其转化为整数是大于base的，因此<code>blocks[0]</code>是可以计算出来的，因此可以进行完整明文解密。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">base = bytes_to_long(<span class="string">b&quot;koito&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证可以发现，由于开头恒为moectf&#123;，所以明文第一块不变</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">f = b&quot;moectf&#123;&quot; + 64*b&quot;\x00&quot; + b&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">def blockize(long):</span></span><br><span class="line"><span class="string">    out = []</span></span><br><span class="line"><span class="string">    while long &gt; 0:</span></span><br><span class="line"><span class="string">        out.append(long % base)</span></span><br><span class="line"><span class="string">        long //= base</span></span><br><span class="line"><span class="string">    return list(reversed(out))</span></span><br><span class="line"><span class="string">blocks = blockize(bytes_to_long(f))</span></span><br><span class="line"><span class="string">print(blocks)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">iv = <span class="number">3735927943</span></span><br><span class="line">c = [<span class="number">8490961288</span>, <span class="number">122685644196</span>, <span class="number">349851982069</span>, <span class="number">319462619019</span>, <span class="number">74697733110</span>, <span class="number">43107579733</span>, <span class="number">465430019828</span>, <span class="number">178715374673</span>, <span class="number">425695308534</span>, <span class="number">164022852989</span>, <span class="number">435966065649</span>, <span class="number">222907886694</span>, <span class="number">420391941825</span>, <span class="number">173833246025</span>, <span class="number">329708930734</span>]</span><br><span class="line">m0 = <span class="number">5329712293</span></span><br><span class="line">key = m0^iv^c[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = [m0]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">    m.append(c[i]^c[i-<span class="number">1</span>]^key)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    flag += base**(<span class="built_in">len</span>(m)-i-<span class="number">1</span>) * m[i]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{thE_c6c_Is_not_so_hard_9ifxi9i!JGofMJ36D9cPMxroif6!M6oSMuliPPcA3}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="flag-exchange"><a href="#flag-exchange" class="headerlink" title="flag_exchange"></a>flag_exchange</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“你这flag多少钱一斤？”</span><br><span class="line">“白给。”</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">p, flag</span>):</span><br><span class="line">    alice_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    alice_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, alice_privKey, p)</span><br><span class="line">    bob_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    bob_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, bob_privKey, p)</span><br><span class="line"></span><br><span class="line">    superkey = <span class="built_in">pow</span>(bob_pubKey, alice_privKey, p)</span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (m * superkey) % p, alice_pubKey, bob_pubKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() &gt;= <span class="number">1024</span>:</span><br><span class="line">        c, alice_pubKey, bob_pubKey = diffie_hellman(p, flag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alice&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(alice_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bob&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bob_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid P&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>题目基于Diffie-Hellman密钥交换协议，具体流程如下：</p>
<ul>
<li>随机生成Alice、Bob的私钥，记为a、b</li>
<li>计算Alice、Bob的公钥，分别为：</li>
</ul>
<script type="math/tex; mode=display">
puba = 7^a\quad (mod\;p)\\
pubb = 7^b\quad (mod\;p)</script><ul>
<li>计算出公共密钥：</li>
</ul>
<script type="math/tex; mode=display">
key = 7^{a*b}\quad(mod\;p)</script><ul>
<li>然后将flag对应的明文用公共密钥进行如下加密：</li>
</ul>
<script type="math/tex; mode=display">
cipher = m*key\quad(mod\;p)</script><p>而我们能做的，就是发送给靶机端一个大于1024bit的p，之后靶机端会用该p生成各个密钥，并返回给我们密文以及Alice、Bob的公钥。而如果能求出<code>key</code>，那么解密是简单的，只需要：</p>
<script type="math/tex; mode=display">
m = cipher * key^{-1}\quad(mod\;p)</script><p>因此，我们的任务就变成了：已知</p>
<script type="math/tex; mode=display">
puba = 7^a\quad (mod\;p)\\
pubb = 7^b\quad (mod\;p)</script><p>求：</p>
<script type="math/tex; mode=display">
key = 7^{a*b}\quad(mod\;p)</script><p>这实质上是一个CDH问题。而突破点就在于，群G是由我们给出的素数p生成的，而当p-1光滑时，求解离散对数问题会变得容易。因此我们只需要使生成的p满足p-1光滑即可。</p>
<p>exp.py：(羊城杯的时候已经生成了一个满足要求的p，依然可以用)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这一部分交互拿数据</span></span><br><span class="line"><span class="string">r = remote(&quot;localhost&quot;,59807)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p = 11008176197295908754556650686251647243706292498034472501168046085732945809887313362518690275918394335207633925834115240024616753739067618316748808578650362774171917441376968722226626556434005996618900469687913893028687318661542559912265616293448246676128025762514511346750336107659243985471781068580223900395847</span></span><br><span class="line"><span class="string">p = str(p).encode()</span></span><br><span class="line"><span class="string">r.sendline(p)</span></span><br><span class="line"><span class="string">r.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line">p = <span class="number">11008176197295908754556650686251647243706292498034472501168046085732945809887313362518690275918394335207633925834115240024616753739067618316748808578650362774171917441376968722226626556434005996618900469687913893028687318661542559912265616293448246676128025762514511346750336107659243985471781068580223900395847</span></span><br><span class="line">a_pub = <span class="number">3041998234690140733154003929351315749694173007295647496020072713756720943209175213390528908881513815372353043112125543782015504010903067412373671589783193113333759484653654593846608999327295977564591176273803313231805537606967793412594198900106990579441541583887521372737380085485236123798080560570278014966702</span></span><br><span class="line">b_pub = <span class="number">5019111378107696236906829966236801209683272037829678336595795065089184558620835243572805945837441564532780156063311684567652666178983348141519659763620244199977854812815568555236825281860924772124922980859797186639597490335115982316718963668010854994814229912399401172971794319506936755236803999795167503841257</span></span><br><span class="line">c = <span class="number">5757579635901147336595005390089603141773004178520561180663592936976073539821329993954175682240078485514741790990274876586653742472291327751694366705347330014705598863958938830082576802663476872305215648921055853375365278016644634303502905192252207112762958399098960852167171887363633849097395446708067829178184</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">a = discrete_log(mod(a_pub,p),mod(g,p))</span><br><span class="line">b = discrete_log(mod(b_pub,p),mod(g,p))</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(c * <span class="built_in">pow</span>(<span class="number">7</span>,-(a*b),p) %p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{diffie_he11man_key_exChange_is_not_so_hard_2WPIBung92WPIBung9?WP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="giant-e"><a href="#giant-e" class="headerlink" title="giant_e"></a>giant_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这个e，红豆泥呆胶布得丝噶？（</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&quot;big&quot;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n) <span class="comment"># 0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br></pre></td></tr></table></figure>
<p>e过大说明私钥d很可能较小，因此可以采用wiener攻击。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">n = <span class="number">0xbaa70ba4c29eb1e6bb3458827540fce84d40e1c966db73c0a39e4f9f40e975c42e02971dab385be27bd2b0687e2476894845cc46e55d9747a5be5ca9d925931ca82b0489e39724ea814800eb3c0ea40d89ebe7fe377f8d3f431a68d209e7a149851c06a4e67db7c99fcfd9ec19496f29d59bb186feb44a36fe344f11d047b9435a1c47fa2f8ed72f59403ebb0e439738fd550a7684247ab7da64311690f461e6dce03bf2fcd55345948a3b537087f07cd680d7461d326690bf21e39dff30268cb33f86eeceff412cd63a38f7110805d337dcad25e6f7e3728b53ca722b695b0d9db37361b5b63213af50dd69ee8b3cf2085f845d7932c08b27bf638e98497239</span></span><br><span class="line">c = <span class="number">0x45a9ce4297c8afee693d3cce2525d3399c5251061ddd2462513a57f0fd69bdc74b71b519d3a2c23209d74fcfbcb6b196b5943838c2441cb34496c96e0f9fc9f0f80a2f6d5b49f220cb3e78e36a4a66595aa2dbe3ff6e814d84f07cb5442e2d5d08d08aa9ccde0294b39bfde79a6c6dcd2329e9820744c4deb34a039da7933ddf00b0a0469afb89cba87490a39783a9b2f8f0274f646ca242e78a326dda886c213bc8d03ac1a9150de4ba08c5936c3fe924c8646652ef85aa7ac0103485f472413427a0e9d9a4d416b99e24861ca8499500c693d7a07360158ffffa543480758cafff2a09a9f6628f92767764fa026d48a9dd899838505ae16e38910697f9de14</span></span><br><span class="line">e = <span class="number">0x609778981bfbb26bb93398cb6d96984616a6ab08ade090c1c0d4fedb00f44f0552a1555efec5cc66e7960b61e94e80e7483b9f906a6c8155a91cdc3e4917fa5347c58a2bc85bb160fcf7fe98e3645cfea8458ea209e565e4eb72ee7cbb232331a862d8a84d91a0ff6d74aa3c779b2b129c3d8148b090c4193234764f2e5d9b2170a9b4859501d07c0601cdd18616a0ab2cf713a7c785fd06f27d68dff24446d884644e08f31bd37ecf48750e4324f959a8d37c5bef25e1580851646d57b3d4f525bc04c7ddafdf146539a84703df2161a0da7a368675f473065d2cb661907d990ba4a8451b15e054bfc4dd73e134f3bf7d8fa4716125d8e21f946d16b7b0fc43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        self.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;moectf&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{too_larGe_exponent_is_not_a_iDea_too!_Bung92WPIBung92WPIBung9?WP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="minipack"><a href="#minipack" class="headerlink" title="minipack"></a>minipack</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">super backpack!!!</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">72</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;\xff&quot;</span> + flag + <span class="string">b&quot;\xff&quot;</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long2bits</span>(<span class="params">long</span>):</span><br><span class="line">    bits = []</span><br><span class="line">    <span class="keyword">while</span> long &gt; <span class="number">0</span>:</span><br><span class="line">        bits.append(long &amp; <span class="number">1</span>)</span><br><span class="line">        long &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(bits))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">        delta = random.randint(<span class="number">1</span>, <span class="number">10000</span>)</span><br><span class="line">        x = <span class="built_in">sum</span> + delta</span><br><span class="line">        out.append(x)</span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = genkey(<span class="number">74</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.write(<span class="built_in">str</span>(key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, keys</span>):</span><br><span class="line">    data = long2bits(m)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) == <span class="built_in">len</span>(keys)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>((k <span class="keyword">if</span> (p == <span class="number">1</span>) <span class="keyword">else</span> <span class="number">1</span>) <span class="keyword">for</span> p, k <span class="keyword">in</span> <span class="built_in">zip</span>(data, keys))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ciphertext.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.write(<span class="built_in">str</span>(encrypt(m, key)))</span><br></pre></td></tr></table></figure>
<p>观察可以发现，这个背包密码用的是超递增序列，因此可以直接从尾部逐个判断是否在背包中。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = </span><br><span class="line">c = <span class="number">44096612931024003148407895164090667174657344536623354666642108463093659898867859567157728084018394988840266329206836985537987081415020571845239234014695335928717091578810470705259929</span></span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="keyword">if</span>(c &gt; key[<span class="built_in">len</span>(key)-<span class="number">1</span>-i]):</span><br><span class="line">        m.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        c -= key[<span class="built_in">len</span>(key)-<span class="number">1</span>-i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(m)[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{superiNcreasiNg_sequeNce_is_useful_tO_cONstruct_a_KNapsacK_MAxSM}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="bad-random"><a href="#bad-random" class="headerlink" title="bad_random"></a>bad_random</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你能猜出这个随机数生成器生成的下一个数吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_params</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = random.randint(<span class="number">10000</span>, <span class="number">20000</span>)</span><br><span class="line">        self.a = random.randint(<span class="number">10000</span>, <span class="number">20000</span>)</span><br><span class="line">        self.c = random.randint(<span class="number">1</span>, self.a-<span class="number">1</span>)</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, self.m-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_output</span>(<span class="params">self</span>):</span><br><span class="line">        x0 = self.x</span><br><span class="line">        s = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> (t := self()) <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            s.add(t)</span><br><span class="line">        self.x = x0</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.set_params()</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.get_all_output()) &lt; <span class="number">10</span>:</span><br><span class="line">            self.set_params()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = (self.a * self.x + self.c) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    <span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">    <span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(random.choices(ascii_letters, k=<span class="number">16</span>))</span><br><span class="line">    h = md5(s.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;!&gt; md5(XXXXXXXX+<span class="subst">&#123;s[<span class="number">8</span>:]&#125;</span>) == <span class="subst">&#123;h&#125;</span>&quot;</span>)</span><br><span class="line">    i = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXXXXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> md5((i + s[<span class="number">8</span>:]).encode()).hexdigest() != h:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;!&gt; ACCESS DENIED &lt;!&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    inst = LCG()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s play a simple game! If you can guess the right number, I will give your the flag! You have 10 tries&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        i = <span class="built_in">input</span>(<span class="string">f&quot;Give me a number, you have failed for <span class="subst">&#123;tries&#125;</span> times: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(i) == (right := inst()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Congurations! You win the game! Your flag is here: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Oh, you are wrong! The right number is <span class="subst">&#123;right&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先要通过一个md5的爆破，这个不用多说，通过后进入主要任务。(题目附件应该是错了，实际并不需要爆破8位，仅需要爆破4位)</p>
<p>主要任务如下：</p>
<ul>
<li>靶机端随机生成一个LCG，并且各参数均未知。</li>
<li>随机生成一个种子x，以其为基础生成后续伪随机数。</li>
<li>我们有十次机会猜测下一个伪随机数是什么。如果猜错，靶机端会告诉你正确的当前数应该是多少；如果猜对则给flag。</li>
</ul>
<p>因此，我们需要在10次以内正确恢复本次LCG的参数，并正确预测下一个伪随机数。而其实5组数据就可以，推导如下:</p>
<script type="math/tex; mode=display">
x[1] \equiv a*x[0] + c\quad(mod \;m)\\
x[2] \equiv a*x[1] + c\quad(mod \;m)\\
x[3] \equiv a*x[2] + c\quad(mod \;m)\\
x[4] \equiv a*x[3] + c\quad(mod \;m)\\
x[5] \equiv a*x[4] + c\quad(mod \;m)</script><p>有：</p>
<script type="math/tex; mode=display">
x[4]-x[3]\equiv a*(x[3]-x[2])\quad(mod\;m)\\
x[3]-x[2]\equiv a*(x[2]-x[1])\quad(mod\;m)</script><p>所以：</p>
<script type="math/tex; mode=display">
x[4]-x[3]\equiv a^2*(x[2]-x[1])\quad(mod\;m)\\
(x[4]-x[3])*(x[2]-x[1])\equiv a^2*(x[2]-x[1])^2\quad(mod\;m)</script><p>又因为：</p>
<script type="math/tex; mode=display">
(x[3]-x[2])^2\equiv a^2*(x[2]-x[1])^2\quad(mod\;m)</script><p>所以：</p>
<script type="math/tex; mode=display">
(x[4]-x[3])*(x[2]-x[1]) -(x[3]-x[2])^2\equiv 0\quad(mod\;m)</script><p>即：</p>
<script type="math/tex; mode=display">
(x[4]-x[3])*(x[2]-x[1]) -(x[3]-x[2])^2 = k1*m</script><p>同理有：</p>
<script type="math/tex; mode=display">
(x[5]-x[4])*(x[3]-x[2]) -(x[4]-x[3])^2 = k2*m</script><p>因此求解两者gcd便可以得到m(这里存在一点问题，先假设我们得到的就是m而不是k*m)：</p>
<p>得到m后，我们只需要利用一个式子就可以求出a：</p>
<script type="math/tex; mode=display">
a \equiv (x[5]-x[4])*(x[4]-x[3])^{-1}\quad(mod\;m)</script><p>求出a后，恢复c是简单的，这样一来我们就顺利得到了LCG的所有参数，因此只需要再计算一遍：</p>
<script type="math/tex; mode=display">
x[6] \equiv a*x[5] + c\quad(mod \;m)</script><p>并提交<code>x[6]</code>，就可以从靶机端收到flag。</p>
<p>但是这样存在一定失败的概率，这是因为本题中，m并不是素数，而是一个随机数，这导致了两个潜在问题：</p>
<ul>
<li>第一步得到的km，可能并不好确定到底k是多少，因为无法通过消除km的小因子来得到m</li>
<li>如果m不是素数，gcd((x[i+1]-x[i]),m)可能不为1，这就导致其逆元不存在，而无法求解a。</li>
</ul>
<p>我们可以简单测试一下10000-20000间，m是素数的概率是多少：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">20000</span>):</span><br><span class="line">    <span class="keyword">if</span>(isprime(i)):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count / <span class="number">10000</span>)</span><br></pre></td></tr></table></figure>
<p>结果是0.1033。也就是说，我们需要平均十次才能获得一个素数m。</p>
<p>不过并不算一个大问题，多交互几次就行了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;localhost&quot;</span>,<span class="number">63150</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    temp = <span class="built_in">str</span>(r.recvline().strip())[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ascii_letters:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ascii_letters:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                    s = i+j+k+l + temp[<span class="number">13</span>:<span class="number">17</span>]</span><br><span class="line">                    h = md5(s.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span>(h == temp[-<span class="number">32</span>:]):</span><br><span class="line">                        r.sendline((i+j+k+l).encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    t = r.recvuntil(<span class="string">b&quot;number is&quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(r.recvline().decode())</span><br><span class="line">    x.append(num)</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求m</span></span><br><span class="line">t1 = x[<span class="number">1</span>] - x[<span class="number">0</span>]</span><br><span class="line">t2 = x[<span class="number">2</span>] - x[<span class="number">1</span>]</span><br><span class="line">t3 = x[<span class="number">3</span>] - x[<span class="number">2</span>]</span><br><span class="line">t4 = x[<span class="number">4</span>] - x[<span class="number">3</span>]</span><br><span class="line">T1 = t4*t2 - t3*t3</span><br><span class="line">T2 = t3*t1 - t2*t2</span><br><span class="line">m = GCD(T1,T2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#求a,b</span></span><br><span class="line">a = inverse((x[<span class="number">1</span>] - x[<span class="number">0</span>]),m)*(x[<span class="number">2</span>] - x[<span class="number">1</span>]) % m</span><br><span class="line">b = (-a*x[<span class="number">1</span>] + x[<span class="number">2</span>]) % m</span><br><span class="line"></span><br><span class="line">xx = <span class="built_in">str</span>((a*x[-<span class="number">1</span>] + b) % m).encode()</span><br><span class="line">r.sendline(xx)</span><br><span class="line"><span class="built_in">print</span>((r.recvline()))</span><br><span class="line"><span class="built_in">print</span>((r.recvline()))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{u5e_5ingle_lcg_a5_a_RanDoM_nuMbeR_geneRaToR_i5_noT_a_gooD_iDea!_}</strong></p>
<p>其实仔细想一下，因为随机数总是小于m的，而m的范围有点过小，因此完全可以反复发送某个数(比如10)，多次发送后总有可能猜对，可能仍然可以短时间内就得到flag(时间主要花费在md5爆破)</p>
<p><br></p>
<p><br></p>
<h3 id="broken-hash"><a href="#broken-hash" class="headerlink" title="broken_hash"></a>broken_hash</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你这hash，保熟吗</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; ~y) ^ (y &amp; ~z) ^ (z &amp; ~x)) ^ (</span><br><span class="line">        ((x + y) * (y + z) + (x + z)) &amp; <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_block_hash</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    x, y, z, w = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</span><br><span class="line">    <span class="keyword">return</span> (a ^ b ^ c ^ d ^ x ^ y ^ z ^ w) ^ <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_hash</span>(<span class="params">blocks: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(blocks)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        padding = <span class="number">4</span> - length % <span class="number">4</span></span><br><span class="line">        blocks += [<span class="number">0</span>] * padding</span><br><span class="line">        length += padding</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _block_hash(*blocks)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        block_size = length // <span class="number">4</span></span><br><span class="line">        h1 = _<span class="built_in">hash</span>(blocks[:block_size])</span><br><span class="line">        h2 = _<span class="built_in">hash</span>(blocks[block_size : block_size * <span class="number">2</span>])</span><br><span class="line">        h3 = _<span class="built_in">hash</span>(blocks[block_size * <span class="number">2</span> : block_size * <span class="number">3</span>])</span><br><span class="line">        h4 = _<span class="built_in">hash</span>(blocks[block_size * <span class="number">3</span> :])</span><br><span class="line">        <span class="keyword">return</span> _block_hash(h1, h2, h3, h4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes2blocks</span>(<span class="params">data: <span class="built_in">bytes</span>, block_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) % block_size != <span class="number">0</span>:</span><br><span class="line">        data += <span class="string">b&quot;\x00&quot;</span> * (block_size - <span class="built_in">len</span>(data) % block_size)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(data[i : i + block_size], <span class="string">&quot;little&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), block_size)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">*data: <span class="built_in">list</span>[<span class="built_in">bytes</span>]</span>):</span><br><span class="line">    <span class="keyword">return</span> _<span class="built_in">hash</span>(bytes2blocks(<span class="string">b&quot;&quot;</span>.join(data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randbytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>: <span class="type">Callable</span>[[<span class="built_in">str</span>], <span class="literal">None</span>], <span class="built_in">print</span>: <span class="type">Callable</span>[[<span class="built_in">str</span>], <span class="literal">None</span>]</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&quot;&quot;</span>.join(choices(ascii_letters, k=<span class="number">16</span>))</span><br><span class="line">        h = md5(s.encode()).hexdigest()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&lt;!&gt; md5(XXXXXXXX+<span class="subst">&#123;s[<span class="number">8</span>:]&#125;</span>) == <span class="subst">&#123;h&#125;</span>&quot;</span>)</span><br><span class="line">        i = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXXXXXX: &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> md5((i + s[<span class="number">8</span>:]).encode()).hexdigest() == h</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;!&gt; ACCESS DENIED &lt;!&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    b = randbytes(<span class="number">256</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;this is a random bytes: <span class="subst">&#123;b64encode(b).decode()&#125;</span>&quot;</span>)</span><br><span class="line">    i = <span class="built_in">input</span>(<span class="string">&quot;give me another bytes with the same hash: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = b64decode(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;invaild input&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hash</span>(b) == <span class="built_in">hash</span>(d) <span class="keyword">and</span> d!=b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;congurations! and your flag is <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>任务很简单，根据给定的哈希函数，寻找一个哈希碰撞即可得到flag。</p>
<p>简单看一下哈希函数：</p>
<ul>
<li>把256字节的明文按每16个字节分为16组。</li>
<li>每一组的16字节再按每4个字节分为4组，记为(a,b,c,d)</li>
<li>对每一块进行如下哈希后，再组合起来：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; ~y) ^ (y &amp; ~z) ^ (z &amp; ~x)) ^ (</span><br><span class="line">        ((x + y) * (y + z) + (x + z)) &amp; <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_block_hash</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    x, y, z, w = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</span><br><span class="line">    <span class="keyword">return</span> (a ^ b ^ c ^ d ^ x ^ y ^ z ^ w) ^ <span class="number">0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF</span></span><br></pre></td></tr></table></figure>
<p>容易发现，如果<code>_block_hash</code>函数按照(a,b,c,d)的顺序传参，得到的是：</p>
<script type="math/tex; mode=display">
x1, y1, z1, w1 = F(a, b, c), F(b, c, d), F(c, d, a), F(d, a, b)</script><p>而如果按照(c,d,a,b)的顺序传参，得到的是：</p>
<script type="math/tex; mode=display">
x2, y2, z2, w2 = F(c, d, a), F(d, a, b), F(a, b, c), F(b, c, d)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
x1=z2,y1=w2,z1=x2,w1=y2</script><p>可以说仅仅是调换了相对位置，而这种相对位置的调换对于异或运算来说是没有影响的，因此我们就找到了碰撞。</p>
<p>exp.py：(注意需要将满足碰撞的字节串用base64编码后再发送)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;localhost&quot;</span>,<span class="number">65309</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    temp = <span class="built_in">str</span>(r.recvline().strip())[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ascii_letters:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ascii_letters:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> ascii_letters:</span><br><span class="line">                    s = i+j+k+l + temp[<span class="number">13</span>:<span class="number">17</span>]</span><br><span class="line">                    h = md5(s.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span>(h == temp[-<span class="number">32</span>:]):</span><br><span class="line">                        r.sendline((i+j+k+l).encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;this is a random bytes:&quot;</span>)</span><br><span class="line">data1 = r.recvline().strip()</span><br><span class="line"><span class="comment">#print(data1)</span></span><br><span class="line">data2 = b64decode(data1)</span><br><span class="line">data3 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ta = data2[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">16</span>]</span><br><span class="line">    tb = data2[i*<span class="number">64</span>+<span class="number">16</span>:i*<span class="number">64</span>+<span class="number">32</span>]</span><br><span class="line">    tc = data2[i*<span class="number">64</span>+<span class="number">32</span>:i*<span class="number">64</span>+<span class="number">48</span>]</span><br><span class="line">    td = data2[i*<span class="number">64</span>+<span class="number">48</span>:i*<span class="number">64</span>+<span class="number">64</span>]</span><br><span class="line">    data3 += (tc+td+ta+tb)</span><br><span class="line"><span class="comment">#r.interactive()</span></span><br><span class="line">r.sendline(b64encode(data3))</span><br><span class="line"><span class="comment">#print(len(data3))</span></span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{a_hash_FUNCtioN_With_sYMMEtRY_is_vERY_vUlNERa6lE_3iiA0JiuP0DxuuP}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="factorize-me"><a href="#factorize-me" class="headerlink" title="factorize_me!"></a>factorize_me!</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">can you factorize me?</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(primes) = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;prod(p - <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> primes) = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">primes2 = [nextprime(p) <span class="keyword">for</span> p <span class="keyword">in</span> choices(primes, k=<span class="number">3</span>)]</span><br><span class="line">n = prod(primes2)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>), e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836866602305788131186220057989320357344904731322223310531945208433910803617954798258382169132907508787682006064930747033681966462568715421005454243255297306718356766130469885581576362173340673516476386201173298433892314145854649884922769732583885904512624543994675379894718657682146178638074984373206937523380103438050549181568015985546172618830480078894445808092527561363650503540062128543705172678754195578429520889784813733491180748361345720247750720179608752244490362713103319685024237941527268458213442611663415417005556439749055222361212059968254748751273361732365487788593341859760309778894350385339764442343374673786357175846291309425081492959910254127778240522152676060766139057453197528944251599979227271074508795482632471242983094008619339488744362509349734218480932255216087706001484182136783834973304870508270118505737767002256270427907341952256516206663258530300791364944105025764611810001781971638030661367630116818647252727909489405550104641122269772492252464714694507693447974171377200402508765841829763548525530878309985480248379655169722567051495205792089930014228403456098065971372039443284193603395249634283366194562380309469628114581468645669390610963076340643757972439104287127375438663839421605531570285615180251</span></span><br><span class="line"><span class="comment"># 363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836492373364350673588273863828369502073826782362255108313852264064760467561392054178047091483873483255491431451728274259516789065331176728192953741805933100379191778599394515981288225535175013258094287912195847642598436035132783919453991516358280321085873745330313812205910011387125778714795906023110368957596998222544234082487264006696812862179916726781327290284827659294751262185328816323311831349296593013038823107653943652771448719760448938995150646738377177532550757319539185878535087009904848382493668686831331474113789651777885239747000076063679062106375348803749466079052774597412239427050432901553466002731972993029311850718200685157193170716432600165476733200831046297530470544781309612128231925681374239849452623513538498417735984094919756374577623486416462101457492789215144166273775249387638107644634704270216130852885082174564648445147377239033930079759024399532146184753110240154062693457622208373371290126810856885343328090305620627668495081760346853701632815149478447405718664667978825807101325764916405446176183238866136433205933785973568759281210319422288153910340542098573782006262190181726245838857185687242960093445000287347616796984610291664809895901301187179157382169999966124177588884152267266994164841066291200</span></span><br><span class="line"><span class="comment"># n = 899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = 841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br></pre></td></tr></table></figure>
<p>已知n与phi分解n，这是一个老问题了，现成脚本很多。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line">N = <span class="number">363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836866602305788131186220057989320357344904731322223310531945208433910803617954798258382169132907508787682006064930747033681966462568715421005454243255297306718356766130469885581576362173340673516476386201173298433892314145854649884922769732583885904512624543994675379894718657682146178638074984373206937523380103438050549181568015985546172618830480078894445808092527561363650503540062128543705172678754195578429520889784813733491180748361345720247750720179608752244490362713103319685024237941527268458213442611663415417005556439749055222361212059968254748751273361732365487788593341859760309778894350385339764442343374673786357175846291309425081492959910254127778240522152676060766139057453197528944251599979227271074508795482632471242983094008619339488744362509349734218480932255216087706001484182136783834973304870508270118505737767002256270427907341952256516206663258530300791364944105025764611810001781971638030661367630116818647252727909489405550104641122269772492252464714694507693447974171377200402508765841829763548525530878309985480248379655169722567051495205792089930014228403456098065971372039443284193603395249634283366194562380309469628114581468645669390610963076340643757972439104287127375438663839421605531570285615180251</span></span><br><span class="line">phi = <span class="number">363364907814244019888662301376841344262476227242899756862391470731421569394957444030214887114615748277199649349781524749919652160244484352285668794188836492373364350673588273863828369502073826782362255108313852264064760467561392054178047091483873483255491431451728274259516789065331176728192953741805933100379191778599394515981288225535175013258094287912195847642598436035132783919453991516358280321085873745330313812205910011387125778714795906023110368957596998222544234082487264006696812862179916726781327290284827659294751262185328816323311831349296593013038823107653943652771448719760448938995150646738377177532550757319539185878535087009904848382493668686831331474113789651777885239747000076063679062106375348803749466079052774597412239427050432901553466002731972993029311850718200685157193170716432600165476733200831046297530470544781309612128231925681374239849452623513538498417735984094919756374577623486416462101457492789215144166273775249387638107644634704270216130852885082174564648445147377239033930079759024399532146184753110240154062693457622208373371290126810856885343328090305620627668495081760346853701632815149478447405718664667978825807101325764916405446176183238866136433205933785973568759281210319422288153910340542098573782006262190181726245838857185687242960093445000287347616796984610291664809895901301187179157382169999966124177588884152267266994164841066291200</span></span><br><span class="line">n = <span class="number">899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - iroot(d,<span class="number">2</span>)[<span class="number">0</span>]) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + iroot(d,<span class="number">2</span>)[<span class="number">0</span>]) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(<span class="built_in">int</span>(N), <span class="built_in">int</span>(sqrt_1 + <span class="number">1</span>))</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br><span class="line"></span><br><span class="line">primelist = factorize_multi_prime(N,phi)</span><br><span class="line">plist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primelist:</span><br><span class="line">    <span class="keyword">if</span>(n % nextprime(i) == <span class="number">0</span>):</span><br><span class="line">        plist.append(nextprime(i))</span><br><span class="line"></span><br><span class="line">phi_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plist:</span><br><span class="line">    phi_n *= (i-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{you_KNow_how_to_faCtorize_N_right?_9?WPIBung6?WPIBung6?WPIBund6?}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="feistel-promax"><a href="#feistel-promax" class="headerlink" title="feistel_promax"></a>feistel_promax</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很喜欢shallow的一句话：会python，上过小学，就能做</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span> = <span class="number">2</span></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;./secret&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key, <span class="built_in">round</span></span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    left = bytes_to_long(m[:<span class="number">8</span>])</span><br><span class="line">    right = bytes_to_long(m[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">        left, right = right, f(right, key) ^ left</span><br><span class="line">    left, right = right, left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>) + long_to_bytes(right).rjust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br><span class="line"><span class="comment"># b&#x27;B\xf5\xd8gy\x0f\xaf\xc7\xdf\xabn9\xbb\xd0\xe3\x1e0\x9eR\xa9\x1c\xb7\xad\xe5H\x8cC\x07\xd5w9Ms\x03\x06\xec\xb4\x8d\x80\xcb&#125;\xa9\x8a\xcc\xd1W\x82[\xd3\xdc\xb4\x83P\xda5\xac\x9e\xb0)\x98R\x1c\xb3h&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相较于上面那道feistel，看似仅仅是更换了key的生成方式，变成了随机的八字节，并且并没有给出key。也因此我们没有办法顺利的使用f函数，也就没有办法还原feistel网络。</p>
<p>但是仔细对比一下发现还有细微区别。</p>
<p>本题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br></pre></td></tr></table></figure>
<p>而上一道题是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = padding(m)</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mlen // <span class="number">16</span>):</span><br><span class="line">        c += enc(m[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key, <span class="built_in">round</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>有没有发现区别？这里留了一个很微妙的坑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> : <span class="built_in">print</span>(ecb_enc(padding(flag), key))</span><br><span class="line"><span class="number">2</span> : <span class="built_in">print</span>(ecb_enc(flag, <span class="string">b&quot;wulidego&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>可以发现，本题对flag进行了两次padding！而padding函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">m</span>):</span><br><span class="line">    mlen = <span class="built_in">len</span>(m)</span><br><span class="line">    pad = <span class="number">16</span> - mlen % <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> m + pad * <span class="built_in">bytes</span>([pad])</span><br></pre></td></tr></table></figure>
<p>也就是说，如果消息长度恰为16字节的整数倍长度，他仍然会进行填充，填充的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&quot;\x10&quot;*16</span><br></pre></td></tr></table></figure>
<p>也就是说，现在我们拥有了一组明文以及它对应的feistel加密结果，而feistel网络中，f函数均是线性的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p>这就给解方程带来了希望。</p>
<p>而我们拥有什么方程呢？我们将填充的16字节拆成左右两部分，相应的也就有对应加密过程的密文，此时把key当作未知数，我们就能列出两个方程，这就是我们待解的方程组。</p>
<p>事实也是如此，z3可以轻松求解这个方程组，从而得到key。得到key后解密方法与上一道题目完全相同。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = l = <span class="string">b&quot;\x10\x10\x10\x10\x10\x10\x10\x10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, x</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> (((x^m)*<span class="number">1145</span>+<span class="number">14</span>)*<span class="number">1919</span>+<span class="number">810</span>)*x % (<span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic1</span>(<span class="params">x</span>):</span><br><span class="line">    m = bytes_to_long(<span class="string">b&#x27;\x9e\xb0)\x98R\x1c\xb3h&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> f(m,x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic2</span>(<span class="params">x</span>):</span><br><span class="line">    m = bytes_to_long(r)</span><br><span class="line">    <span class="keyword">return</span> f(m,x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kkp_sol</span>():</span><br><span class="line">    x = BitVec(<span class="string">&#x27;x&#x27;</span>,<span class="number">64</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(magic2(x) == bytes_to_long(<span class="string">b&#x27;\x9e\xb0)\x98R\x1c\xb3h&#x27;</span>) ^ bytes_to_long(r))</span><br><span class="line">    sol.add(magic1(x) == bytes_to_long(<span class="string">b&quot;\xd3\xdc\xb4\x83P\xda5\xac&quot;</span>) ^ bytes_to_long(l))</span><br><span class="line">    sol.check()</span><br><span class="line">    <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">kkp_sol()</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(<span class="number">3779692691923971252</span>)</span><br><span class="line">c = <span class="string">b&#x27;B\xf5\xd8gy\x0f\xaf\xc7\xdf\xabn9\xbb\xd0\xe3\x1e0\x9eR\xa9\x1c\xb7\xad\xe5H\x8cC\x07\xd5w9Ms\x03\x06\xec\xb4\x8d\x80\xcb&#125;\xa9\x8a\xcc\xd1W\x82[\xd3\xdc\xb4\x83P\xda5\xac\x9e\xb0)\x98R\x1c\xb3h&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">m, key</span>):</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    m = m ^ (m &lt;&lt; <span class="number">5</span>)</span><br><span class="line">    m = m ^ (m &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    m ^= key</span><br><span class="line">    m = (m * <span class="number">1145</span> + <span class="number">14</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * <span class="number">1919</span> + <span class="number">810</span>) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    m = (m * key) % <span class="number">2</span>**<span class="number">64</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c,key</span>):</span><br><span class="line">    key = bytes_to_long(key)</span><br><span class="line">    right = bytes_to_long(c[:<span class="number">8</span>])</span><br><span class="line">    left = bytes_to_long(c[<span class="number">8</span>:])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        left,right = f(left,key)^right,left</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(left) + long_to_bytes(right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_dec</span>(<span class="params">c, key</span>):</span><br><span class="line">    m = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c) // <span class="number">16</span>):</span><br><span class="line">        m += dec(c[i * <span class="number">16</span> : i * <span class="number">16</span> + <span class="number">16</span>], key)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ecb_dec(c,key))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>moectf{F_func_1s_n1t_Ve5y_$EcU%e}</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习了不少，继续加油。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-NewStarCTF-wp-crypto</title>
    <url>/post/9e0dbdd4.html</url>
    <content><![CDATA[<p>比赛记录</p>
<span id="more"></span>
<h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><p>题目很基础，这里就不讲了。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><p>挑一道题说一说。</p>
<h3 id="partial-decrypt"><a href="#partial-decrypt" class="headerlink" title="partial decrypt"></a>partial decrypt</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解密, 但是只解密一半</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q </span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">dp = inverse(e, (p-<span class="number">1</span>))</span><br><span class="line">dq = inverse(e, (q-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c,dp, p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c,dq, q)</span><br><span class="line">q_inv = inverse(q, p)</span><br><span class="line">h = (q_inv*(m1-m2)) % p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m2 =&#x27;</span>, m2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q =&#x27;</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m2 = 4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884</span></span><br><span class="line"><span class="comment"># h = 4180720137090447835816240697100630525624574275</span></span><br><span class="line"><span class="comment"># q = 7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931</span></span><br></pre></td></tr></table></figure>
<p>之所以想说一下这个题，是因为可能不少cryptoer随便试了试，发现h*q+m2就能得出答案，却不明白这是否是一个巧合。</p>
<p>这里先说结论，无论明文m长度多大，只要他小于n，这个求解方法都是完全可行的，原理如下。</p>
<p>首先由题目可以看出，m1，m2其实就是：</p>
<script type="math/tex; mode=display">
m1 \equiv m \quad(mod\;p)</script><script type="math/tex; mode=display">
m2 \equiv m \quad(mod\;q)</script><p>我们先把此处的模等式展开，写成等式形式：</p>
<script type="math/tex; mode=display">
m1 = m - k1*p</script><script type="math/tex; mode=display">
m2 = m - k2*q</script><p>然后，由题目知道，h满足：</p>
<script type="math/tex; mode=display">
h \equiv q^{-1}(m1-m2) \quad (mod\;p)</script><p>不妨把刚才得到的等式代入上式：</p>
<script type="math/tex; mode=display">
h \equiv q^{-1}(m - k1*p-(m - k2*q)) \quad (mod\;p)</script><p>即：</p>
<script type="math/tex; mode=display">
h \equiv q^{-1}(k1*p + k2*q) \quad (mod\;p)</script><p>展开就能消去q^-1*q，得到：</p>
<script type="math/tex; mode=display">
h \equiv q^{-1}*k1*p + k2 \quad (mod\;p)</script><p>又因为在模p意义下，所以：</p>
<script type="math/tex; mode=display">
h \equiv  k2 \quad (mod\;p)</script><p>而这两者仅仅是模p下相等吗？事实上他们完全相等，这是因为：(//代表整除)</p>
<script type="math/tex; mode=display">
k2 = m // q < n // q = p</script><p>也就是说k2&lt;p，因此k2模p等于没模，所以k2 = h。</p>
<p>因此就有：</p>
<script type="math/tex; mode=display">
m2 + h*q = m2+k*q = m</script><p>所以上式一定成立，因此就能恢复明文。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m2 = <span class="number">4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884</span></span><br><span class="line">h = <span class="number">4180720137090447835816240697100630525624574275</span></span><br><span class="line">q = <span class="number">7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m1 = h*q + m2</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;rsa_with_crt#b12a3a020c9cc5f1a6df4618256f7c88c83fdd95aab1a2b2656d760475bd0bf1&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="Rabin’s-RSA"><a href="#Rabin’s-RSA" class="headerlink" title="Rabin’s RSA"></a>Rabin’s RSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Michael O. Rabin的加密方案</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">64</span>)</span><br><span class="line">q = getPrime(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">assert</span> p % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> q % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 201354090531918389422241515534761536573</span></span><br><span class="line"><span class="comment"># c = 20442989381348880630046435751193745753</span></span><br></pre></td></tr></table></figure>
<p>首先观察到n较小，因此可以直接factordb分解出p、q。然后就是普通Rabin加密，原理不详述了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n = <span class="number">201354090531918389422241515534761536573</span></span><br><span class="line">c1 = <span class="number">20442989381348880630046435751193745753</span></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">p = <span class="number">13934102561950901579</span></span><br><span class="line">q = <span class="number">14450452739004884887</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span>  <span class="title function_">merge</span>(<span class="params">a1,n1,a2,n2</span>):</span><br><span class="line">    d = math.gcd(n1,n2)</span><br><span class="line">    c = a2-a1</span><br><span class="line">    <span class="keyword">if</span> c%d!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    c = (c%n2+n2)%n2</span><br><span class="line">    c = c//d</span><br><span class="line">    n1 = n1//d</span><br><span class="line">    n2 = n2//d</span><br><span class="line">    c *= gmpy2.invert(n1,n2)</span><br><span class="line">    c %= n2</span><br><span class="line">    c *= n1*d</span><br><span class="line">    c += a1</span><br><span class="line">    <span class="keyword">global</span> n3</span><br><span class="line">    <span class="keyword">global</span> a3</span><br><span class="line">    n3 = n1*n2*d</span><br><span class="line">    a3 = (c%n3+n3)%n3</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exCRT</span>(<span class="params">a,n</span>):</span><br><span class="line">    a1=a[<span class="number">0</span>]</span><br><span class="line">    n1=n[<span class="number">0</span>]</span><br><span class="line">    le= <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2=n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1,n1,a2,n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">global</span> mod</span><br><span class="line">    mod=n1</span><br><span class="line">    <span class="keyword">return</span> (a1%n1+n1)%n1</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exCRT_getequation</span>(<span class="params">a,n</span>):</span><br><span class="line">    a1=a[<span class="number">0</span>]</span><br><span class="line">    n1=n[<span class="number">0</span>]</span><br><span class="line">    le= <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2=n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1,n1,a2,n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">return</span> (a1,n1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =  [p,q]</span><br><span class="line">c =  [<span class="built_in">pow</span>(c1,(p+<span class="number">1</span>)//<span class="number">4</span>,p),<span class="built_in">pow</span>(c1,(q+<span class="number">1</span>)//<span class="number">4</span>,q)]</span><br><span class="line">m =exCRT(c,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">n =  [p,q]</span><br><span class="line">c =  [<span class="built_in">pow</span>(c1,(p+<span class="number">1</span>)//<span class="number">4</span>,p),-<span class="built_in">pow</span>(c1,(q+<span class="number">1</span>)//<span class="number">4</span>,q)]</span><br><span class="line">m =exCRT(c,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">n =  [p,q]</span><br><span class="line">c =  [-<span class="built_in">pow</span>(c1,(p+<span class="number">1</span>)//<span class="number">4</span>,p),<span class="built_in">pow</span>(c1,(q+<span class="number">1</span>)//<span class="number">4</span>,q)]</span><br><span class="line">m =exCRT(c,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">n =  [p,q]</span><br><span class="line">c =  [-<span class="built_in">pow</span>(c1,(p+<span class="number">1</span>)//<span class="number">4</span>,p),-<span class="built_in">pow</span>(c1,(q+<span class="number">1</span>)//<span class="number">4</span>,q)]</span><br><span class="line">m =exCRT(c,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;r4b1n#4c58&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="小明的密码题"><a href="#小明的密码题" class="headerlink" title="小明的密码题"></a>小明的密码题</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小明正在完成课后作业, 但是屏幕的某一块地方被墨水涂黑了(我们不妨假设小明无法擦去墨水, 并且该电脑是一个真空中的球形电脑)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line">flag_part = flag_content + <span class="string">&#x27;#&#x27;</span> + secret_token</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag_part.encode())</span><br><span class="line"></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag_part =&#x27;</span>, flag_part)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--- hint begin ---&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag = &quot;flag&#123;&quot; + flag_part + &quot;&#125;&quot;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;type of secret_token is&#x27;</span>, <span class="built_in">type</span>(secret_token))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;length of secret_token is&#x27;</span>, <span class="built_in">len</span>(secret_token))</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 131889193322687215946601811511407251196213571687093913054335139712633125177496800529685285401802802683116451016274353008428347997732857844896393358010946452397522017632024075459908859131965234835870443110233375074265933004741459359128684375786221535003839961829770182916778717973782408036072622166388614214899</span></span><br><span class="line"><span class="comment"># c = 11188201757361363141578235564807411583085091933389381887827791551369738717117549969067660372214366275040055647621817803877495473068767571465521881010707873686036336475554105314475193676388608812872218943728455841652208711802376453034141883236142677345880594246879967378770573385522326039206400578260353074379</span></span><br><span class="line"><span class="comment"># flag_part = sm4ll_r00ts_is_brilliant#◼️◼️◼️◼️◼️◼️◼️◼️</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># --- hint begin ---</span></span><br><span class="line"><span class="comment"># flag = &quot;flag&#123;&quot; + flag_part + &quot;&#125;&quot;</span></span><br><span class="line"><span class="comment"># type of secret_token is &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># length of secret_token is 8</span></span><br></pre></td></tr></table></figure>
<p>已知m高位攻击，构造的多项式如下：</p>
<script type="math/tex; mode=display">
f(x) = (m_{high} + x)^5 - c \quad (mod\;n)</script><p>x为未知的m低位小根，smallroots求解该多项式即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">131889193322687215946601811511407251196213571687093913054335139712633125177496800529685285401802802683116451016274353008428347997732857844896393358010946452397522017632024075459908859131965234835870443110233375074265933004741459359128684375786221535003839961829770182916778717973782408036072622166388614214899</span></span><br><span class="line">c = <span class="number">11188201757361363141578235564807411583085091933389381887827791551369738717117549969067660372214366275040055647621817803877495473068767571465521881010707873686036336475554105314475193676388608812872218943728455841652208711802376453034141883236142677345880594246879967378770573385522326039206400578260353074379</span></span><br><span class="line">m = bytes_to_long(<span class="string">b&quot;sm4ll_r00ts_is_brilliant#&quot;</span> + <span class="string">b&quot;\x00&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m + x)^<span class="number">5</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X = <span class="number">2</span>^<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">m = m + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;sm4ll_r00ts_is_brilliant#cc0dac72&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="babyrandom"><a href="#babyrandom" class="headerlink" title="babyrandom"></a>babyrandom</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个简易的LCG随机数生成器</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">p = <span class="number">64999433139797068147576269731948390094958654326970231465808792590598519729077</span></span><br><span class="line"></span><br><span class="line">a = randrange(<span class="number">2</span>, p)</span><br><span class="line">b = randrange(<span class="number">2</span>, p)</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Random as a Service with LCG backend</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enter your option</span></span><br><span class="line"><span class="string">1. Reset</span></span><br><span class="line"><span class="string">2. Get</span></span><br><span class="line"><span class="string">3. Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetRandom</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    nx = (a*x + b) % p</span><br><span class="line">    <span class="built_in">print</span>(nx)</span><br><span class="line">    x = nx</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(menu)</span><br><span class="line">    opt = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt = <span class="built_in">int</span>(opt)</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="number">1</span>:</span><br><span class="line">            x = bytes_to_long(flag)</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">2</span>:</span><br><span class="line">            GetRandom()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;invalid option&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oh no, something wrong!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<p>其实就是一个未知a、b的LCG，只是换成了交互题。先发送1设置种子为flag，再发送2申请三组未知数即可还原参数a、b，进而得到种子flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29676</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    c.append(<span class="built_in">int</span>(r.recvline().strip().decode()))</span><br><span class="line"></span><br><span class="line">p = <span class="number">64999433139797068147576269731948390094958654326970231465808792590598519729077</span></span><br><span class="line">c1,c2,c3 = c</span><br><span class="line"></span><br><span class="line">a = inverse(c2-c1,p)*(c3-c2) %p</span><br><span class="line">b = (-a*c1 + c2) % p</span><br><span class="line"></span><br><span class="line">temp = c1</span><br><span class="line">temp = ((temp - b) * inverse(a,p)) % p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(temp))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;lcg_1s_n0t_s3cur3#fb528ba5&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="knapsack"><a href="#knapsack" class="headerlink" title="knapsack"></a>knapsack</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来自ASIS Quals 的背包密码题</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">m = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(codecs.encode(flag,  <span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>))[<span class="number">2</span>:]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># from ASIS Cyber Security Contest Quals 2014</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeKey</span>(<span class="params">n</span>):</span><br><span class="line">    privKey = [random.randint(<span class="number">1</span>, <span class="number">4</span>**n)]</span><br><span class="line">    s = privKey[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        privKey.append(random.randint(s + <span class="number">1</span>, <span class="number">4</span>**(n + i)))</span><br><span class="line">        s += privKey[i]</span><br><span class="line">    q = random.randint(privKey[n-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">2</span>*privKey[n-<span class="number">1</span>])</span><br><span class="line">    r = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">while</span> gmpy2.gcd(r, q) != <span class="number">1</span>:</span><br><span class="line">        r = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    pubKey = [ r*w % q <span class="keyword">for</span> w <span class="keyword">in</span> privKey ]</span><br><span class="line">    <span class="keyword">return</span> privKey, q, r, pubKey</span><br><span class="line"></span><br><span class="line">priv, q, r, pub = makeKey(<span class="built_in">len</span>(m))</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="built_in">sum</span>([i*j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(pub, m)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(pub)</span><br></pre></td></tr></table></figure>
<p>作为ctf wiki讲解背包加密的例题，其经典性无需多言：</p>
<p><a href="https://ctf-wiki.org/crypto/asymmetric/knapsack/knapsack/">背包加密 - CTF Wiki (ctf-wiki.org)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = </span><br><span class="line">b = </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = len(b)</span></span><br><span class="line"><span class="string">L = Matrix(ZZ, n+1, n+1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(n):</span></span><br><span class="line"><span class="string">    L[i,i] = 1</span></span><br><span class="line"><span class="string">    L[i,-1] = b[i]</span></span><br><span class="line"><span class="string">L[-1,-1] = -c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">res = L.LLL()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(n + 1):</span></span><br><span class="line"><span class="string">    M = res.row(i).list()</span></span><br><span class="line"><span class="string">    flag = True</span></span><br><span class="line"><span class="string">    for m in M:</span></span><br><span class="line"><span class="string">        if m != 0 and m != 1:</span></span><br><span class="line"><span class="string">            flag = False</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    if flag:</span></span><br><span class="line"><span class="string">        print(i, M)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag =  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, flag[:-<span class="number">1</span>]))), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Lattice_reduction#c3662541&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Door"><a href="#Door" class="headerlink" title="Door"></a>Door</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你被锁在了自然哲学学院里面, 想办法逃出来吧</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">key = urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[+] WatchDog Security System</span></span><br><span class="line"><span class="string">[+] Copyright (c) 1010 by School of Natural Philosophy </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">please select your option:</span></span><br><span class="line"><span class="string">1. Unlock Secret Entry</span></span><br><span class="line"><span class="string">2. Help</span></span><br><span class="line"><span class="string">3. Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">valid_code = [<span class="number">1033</span>,<span class="number">3329</span>,<span class="number">4431</span>,<span class="number">5052</span>]</span><br><span class="line"></span><br><span class="line">auth_context_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^SoNP#[0-9]&#123;4&#125;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth_context_checker</span>(<span class="params">ctx : <span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> ctx:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> auth_context_pattern.<span class="keyword">match</span>(ctx.decode()) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unlock</span>():</span><br><span class="line">    token = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Enter your token &gt; &#x27;</span>))</span><br><span class="line">    auth_code = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Enter your authentication code &gt; &#x27;</span>))</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC,token)</span><br><span class="line">    </span><br><span class="line">    check = cipher.decrypt(auth_code)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        </span><br><span class="line">        msg = unpad(check, <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> auth_context_checker(msg) <span class="keyword">and</span> <span class="built_in">int</span>(msg[<span class="number">5</span>:].decode()) <span class="keyword">in</span> valid_code:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;door unlocked, here is your reward&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;get out&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oops, something wrong&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;To unlock the door, please enter your token and authentication code.&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(menu)</span><br><span class="line">    opt = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt = <span class="built_in">int</span>(opt)</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="number">1</span>:</span><br><span class="line">            unlock()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">help</span>()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;invalid option&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oh no, something wrong!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>CBC模式的预言填充攻击，这是我从Xenny师傅的密码工坊里学到的我觉得很有意思的一种攻击方式，所以在这里展开说一说。</p>
<p>首先看看靶机能够提供什么样的功能，首先，在与靶机连接后，靶机生成一个16字节的随机串作为AES的密钥key，然后可以：</p>
<ul>
<li>选择1，可以输入两段十六进制串，分别是token和auth_code。靶机将会把token作为AES中CBC模式的iv向量，将auth_code作为密文进行解密。</li>
<li>在成功解密之后，靶机将尝试对密文进行解填充，如果解填充失败，将会输出”oops, something wrong”</li>
<li>如果解填充成功，靶机将会对解密得到的明文进行核验，核验要求：1、明文为”SoNP#”+4个数字的字符串的形式；2、四个数字需要是valid_code中的其中之一。</li>
<li>通过核验，则得到flag；通不过核验，则输出”get out”</li>
</ul>
<p>那么分几个部分讲一下如何进行这个攻击。</p>
<h4 id="解填充"><a href="#解填充" class="headerlink" title="解填充"></a>解填充</h4><p>很重要的一点是，解密出来的明文通不过核验，和解填充失败，靶机输出的信息分别是”get out”和”oops, something wrong”，这个区别是很重要的。那么到底针对一个明文是如何解填充的呢？查看unpad源码可以知道，pad和unpad函数默认使用的是PKCS7的填充模式。</p>
<p>在这个模式下，如果最后一组明文长度为15，就需要填充一字节的b”\x01”；如果为14，就需要填充两字节的b”\x02”，以此类推。需要注意的是，当明文恰好为16的整数倍时，仍然需要填充16字节的b”\x10”，这是为了在解密时能正确地识别填充字节。</p>
<p>可以发现，以这种方式填充，填充后的明文会有一个很重要的特性：</p>
<ul>
<li>填充后的明文的最后一字节等于填充的字节的长度</li>
</ul>
<p>因此，明文只要满足上述特性，就能正确解填充。</p>
<h4 id="预言填充攻击"><a href="#预言填充攻击" class="headerlink" title="预言填充攻击"></a>预言填充攻击</h4><p>那么如何利用解填充的这个特性进行CBC模式下的预言填充攻击呢？我们先画一个只有一个分组的CBC模式解密图示：</p>
<p><img src="/post/9e0dbdd4/image-20231016231545646.png" alt="image-20231016231545646"></p>
<p>其中，cipher是我们输入的auth_code，iv是我们输入的token。cipher经AES解密后，得到dec_msg，并与iv异或后得到plain，也就是题目中的msg。</p>
<p>由于密钥key随机且未知，因此我们不管输入什么auth_code，我们都没有办法获得dec_msg的具体值。然而，dec_msg需要和iv异或，而iv是我们自行输入的。因此我们完全可以固定cipher，调整iv，来改变最终解密得到的plain。</p>
<p>那么我们假设某一次输入的cipher，iv，解密后得到的恰好是下面这样的plain：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;justatest\x07\x07\x07\x07\x07\x07\x07&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，他满足PKCS7的填充模式，因此unpad是可以正确解密的。而我们可以调整iv的最后一字节，从而对应改变plain的最后一字节，这样他就无法正确解填充了。</p>
<p>然而，在某一个特殊的iv下，他仍然能正确解密，这也是我们进行攻击的根本依据。想一想在什么时候他仍然会正确解填充？</p>
<p>其实就是当我们输入的iv使得明文变成下面这样时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;justatest\x07\x07\x07\x07\x07\x07\x01&quot;</span></span><br></pre></td></tr></table></figure>
<p>这也是满足PKCS7填充模式的吧！所以当iv使得plain变成上面这种形式时，靶机会返回”get out”，而不是”oops, something wrong”。而这为我们也带来了一个很重要的信息，也就是dec_msg的最后一字节的值，就等于当前iv的最后一字节异或b”\x01”的值。</p>
<p>在这之后呢，我们将iv的最后一字节对应修改一下，使得其解密得到的plain最后一字节变成b”\x02”，接下来就如法炮制，爆破iv的倒数第二个字节，使得明文为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;justatest\x07\x07\x07\x07\x07\x02\x02&quot;</span></span><br></pre></td></tr></table></figure>
<p>此时也可以正确解填充，对应的，dec_msg的倒数第二个字节值就为当前iv的倒数第二个字节异或b”\x02”的值。</p>
<p>那么接下来就是对剩下十四个字节按这个方式逐个爆破，就能获得完整的dec_msg，而此时我们取token为dec_msg异或需要的msg值，就可以解密出我们需要的明文值，从而得到flag了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">valid_code = [<span class="number">1033</span>,<span class="number">3329</span>,<span class="number">4431</span>,<span class="number">5052</span>]</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28412</span>)</span><br><span class="line"></span><br><span class="line">dec_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">use_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">auth_code = (<span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>).<span class="built_in">hex</span>().encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;token &gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line">        temp1 = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> use_list[:<span class="number">15</span>-j]:</span><br><span class="line">            temp1 += long_to_bytes(k)</span><br><span class="line">        temp2 = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> use_list[<span class="number">15</span>-j+<span class="number">1</span>:]:</span><br><span class="line">            temp2 += long_to_bytes(k)</span><br><span class="line">        change_byte = long_to_bytes(i)</span><br><span class="line">        token = (temp1 + change_byte + temp2).<span class="built_in">hex</span>().encode()</span><br><span class="line"></span><br><span class="line">        r.sendline(token)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;code &gt; &quot;</span>)</span><br><span class="line">        r.sendline(auth_code)</span><br><span class="line"></span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;get out&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            dec_list[<span class="number">15</span>-j] = i ^ (j+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>):</span><br><span class="line">                use_list[<span class="number">15</span>-k] = dec_list[<span class="number">15</span>-k] ^ (j+<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">final = bytes_to_long(pad(<span class="string">b&quot;SoNP#1033&quot;</span>,<span class="number">16</span>))</span><br><span class="line">temp = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dec_list:</span><br><span class="line">    temp += long_to_bytes(k)</span><br><span class="line">temp = final ^ bytes_to_long(temp)</span><br><span class="line">final_token = long_to_bytes(temp).<span class="built_in">hex</span>().encode()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;token &gt; &quot;</span>)</span><br><span class="line">r.sendline(final_token)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;code &gt; &quot;</span>)</span><br><span class="line">r.sendline(auth_code)</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;d0_n0t_3xpose_th3_padd1ng_5tatus&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="eazy-crt"><a href="#eazy-crt" class="headerlink" title="eazy_crt"></a>eazy_crt</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, p, q</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;flag&#123;&#x27;</span> + md5(<span class="built_in">str</span>(p).encode()).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span> == flag</span><br><span class="line"><span class="keyword">assert</span> isPrime(p), isPrime(q)</span><br><span class="line"><span class="keyword">assert</span> p.bit_length() == <span class="number">1024</span>, q.bit_length() == <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">m = random.getrandbits(<span class="number">400</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">r1, r2, r3 = getPrime(<span class="number">20</span>), getPrime(<span class="number">20</span>), getPrime(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">dp, dq = d % (p - <span class="number">1</span>), d % (q - <span class="number">1</span>)</span><br><span class="line">Sp, Sq = <span class="built_in">pow</span>(m + getPrime(<span class="number">10</span>), dp, r1 * p), <span class="built_in">pow</span>(m, dq, r2 * q)</span><br><span class="line">s1, s2 = <span class="built_in">pow</span>(m, dp % (r1 - <span class="number">1</span>), r1), <span class="built_in">pow</span>(m, dq % (r2 - <span class="number">1</span>), r2)</span><br><span class="line">S_ = Sq + (q * r2) * (<span class="built_in">int</span>(inverse(q * r2, p * r1)) * (Sp - Sq) % (p * r1))</span><br><span class="line">c1, c2 = (S_ - s1 + <span class="number">1</span>) % r1, (S_ - s2 + <span class="number">1</span>) % r2</span><br><span class="line">gamma = (r3 * c1 + (<span class="number">2</span> ** <span class="number">10</span> - r3) * c2) // (<span class="number">2</span> ** <span class="number">10</span>)</span><br><span class="line">S = <span class="built_in">pow</span>(S_, gamma, p * q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(p * q)</span><br><span class="line"><span class="built_in">print</span>(S_)</span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">m=2180240512138982889935733758776025289492848542072999905411903898302427496814336475436552230920326681809745778470583226987</span></span><br><span class="line"><span class="string">n=25505131259827344749407187081729819350996141100990518281765117676936124636084125400315049858697199427401342785804654120926568235761577895862889807660442415521870277729420875825744007886870384790308986342360349597392841568418588521694478184632631896474390291958350681472768485356865513284619086754437723630874827593280089682939629265210875169009057935264259019861755270570945614034505771690412042781423771110441028258110022746603974882162934979726300741541857444013708508946471384525030286343828680432038605288717842755346907256658746733811881247992925881684393431852248253701825024590345480994598867741811599162649467</span></span><br><span class="line"><span class="string">S_=5510086561842250138908875342533294108331951659612671466695801343686972919443402163401521040457640602756777910081639191753436122171756174730531385913865951826869995984787102439679170684422717808771260217541439878677750508065703064081375473845405916674327932798153100574555933448570618732842365795738120491532398081467312017203933413296779070611024124965772787502242499016884537233028947865288037718074352448773759363242111080540630360902388540661831992776707600133253329779003707938065020121645530719140954554800986771763343191398210100325971573069812381693089384221441735278736889673500218274673196333806222266248844379127652366</span></span><br><span class="line"><span class="string">S=11422623501509574650959962952004985925543723972567988534433510888436662069119800576321679344425052011563473005275801787271861671898318523033415642388512047035650991047953319601346912194462122313366888126100093635969476696871403883687946617575837061694813669883782221006701704487938500886952347003631626326127154081787016692856628561200386941683756397734100698520464199249811238013146899352390453500132666840606585760306723894654933077094375810666168464835756607377998959675132305971721109661644231613426322675350973373434138686086023265910883509514575554429502214217460059521619625693750938117427832654792355808803321</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目改编自广东强网杯2021的easycrt，并且这一题给出了S，更加简单。具体题解见我的另一篇博客：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/ea445335.html#more">Crypto趣题-RSA | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m=<span class="number">2180240512138982889935733758776025289492848542072999905411903898302427496814336475436552230920326681809745778470583226987</span></span><br><span class="line">n=<span class="number">25505131259827344749407187081729819350996141100990518281765117676936124636084125400315049858697199427401342785804654120926568235761577895862889807660442415521870277729420875825744007886870384790308986342360349597392841568418588521694478184632631896474390291958350681472768485356865513284619086754437723630874827593280089682939629265210875169009057935264259019861755270570945614034505771690412042781423771110441028258110022746603974882162934979726300741541857444013708508946471384525030286343828680432038605288717842755346907256658746733811881247992925881684393431852248253701825024590345480994598867741811599162649467</span></span><br><span class="line">S_=<span class="number">5510086561842250138908875342533294108331951659612671466695801343686972919443402163401521040457640602756777910081639191753436122171756174730531385913865951826869995984787102439679170684422717808771260217541439878677750508065703064081375473845405916674327932798153100574555933448570618732842365795738120491532398081467312017203933413296779070611024124965772787502242499016884537233028947865288037718074352448773759363242111080540630360902388540661831992776707600133253329779003707938065020121645530719140954554800986771763343191398210100325971573069812381693089384221441735278736889673500218274673196333806222266248844379127652366</span></span><br><span class="line">S=<span class="number">11422623501509574650959962952004985925543723972567988534433510888436662069119800576321679344425052011563473005275801787271861671898318523033415642388512047035650991047953319601346912194462122313366888126100093635969476696871403883687946617575837061694813669883782221006701704487938500886952347003631626326127154081787016692856628561200386941683756397734100698520464199249811238013146899352390453500132666840606585760306723894654933077094375810666168464835756607377998959675132305971721109661644231613426322675350973373434138686086023265910883509514575554429502214217460059521619625693750938117427832654792355808803321</span></span><br><span class="line"></span><br><span class="line">c2 = <span class="number">1</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(S,<span class="number">65537</span>,n)</span><br><span class="line">q = GCD(<span class="built_in">pow</span>(S_,<span class="number">65537</span>,n)-m,n)</span><br><span class="line">p = n // q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5(<span class="built_in">str</span>(p).encode()).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;b40ea076da8c73572ae5d067aa0fc22e&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><p>第四周题目其实我觉得比第三周更容易一点。</p>
<h3 id="RSA-Variation-II"><a href="#RSA-Variation-II" class="headerlink" title="RSA Variation II"></a>RSA Variation II</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Schmidt Samoa&quot;</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p*p*q</span><br><span class="line"></span><br><span class="line">d= inverse(N, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)//GCD(p-<span class="number">1</span>, q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, N, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d =&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 1653396627113549535760516503668455111392369905404419847336187180051939350514408518095369852411718553340156505246372037811032919080426885042549723125598742783778413642221563616358386699697645814225855089454045984443096447166740882693228043505960011332616740785976743150624114653594631779427044055729185392854961786323215146318588164139423925400772680226861699990332420246447180631417523181196631188540323779487858453719444807515638025771586275969579201806909799448813112034867089866513864971414742370516244653259347267231436131850871346106316007958256749016599758599549180907260093080500469394473142003147643172770078092713912200110043214435078277125844112816260967490086038358669788006182833272351526796228536135638071670829206746835346784997437044707950580087067666459222916040902038574157577881880027391425763503693184264104932693985833980182986816664377018507487697769866530103927375926578569947076633923873193100147751463</span></span><br><span class="line"><span class="comment"># N = 1768427447158131856514034889456397424027937796617829756303525705316152314769129050888899742667986532346611229157207778487065194513722005516611969754197481310330149721054855689646133721600838194741123290410384315980339516947257172981002480414254023253269098539962527834174781356657779988761754582343096332391763560921491414520707112852896782970123018263505426447126195645371941116395659369152654368118569516482251442513192892626222576419747048343942947570016045016127917578272819812760632788343321742583353340158009324794626006731057267603803701663256706597904789047060978427573361035171008822467120148227698893238773305320215769410594974360573727150122036666987718934166622785421464647946084162895084248352643721808444370307254417501852264572985908550839933862563001186477021313236113690793843893640190378131373214104044465633483953616402680853776480712599669132572907096151664916118185486737463253559093537311036517461749439</span></span><br><span class="line"><span class="comment"># d = 20650646933118544225095544552373007455928574480175801658168105227037950105642248948645762488881219576174131624593293487325329703919313156659700002234392400636474610143032745113473842675857323774566945229148664969659797779146488402588937762391470971617163496433008501858907585683428652637958844902909796849080799141999490231877378863244093900363251415972834146031490928923962271054053278056347181254936750536280638321211545167520935870220829786490686826062142415755063724639110568511969041175019898031990455911525941036727091961083201123910761290998968240338217895275414072475701909497518616112236380389851984377079</span></span><br></pre></td></tr></table></figure>
<p>题目已经告知是Schmidt Samoa加密方式，其加密流程类似RSA却又有不同，具体如下：</p>
<script type="math/tex; mode=display">
N = p^2q</script><script type="math/tex; mode=display">
e = N</script><script type="math/tex; mode=display">
d \equiv e^{-1} \quad (mod\;\phi(pq))</script><p>其加密为：</p>
<script type="math/tex; mode=display">
c \equiv m^N \quad(mod\;N)</script><p>解密为：</p>
<script type="math/tex; mode=display">
m \equiv c^d \quad(mod\;pq)</script><p>之所以可以正确解密是因为：</p>
<script type="math/tex; mode=display">
c^d \equiv m^{Nd} \equiv m^{1+\phi(pq)} \equiv m \quad(mod\;pq)</script><p>而现在我们有N和d，则由解密流程知道，对于任意x，有：</p>
<script type="math/tex; mode=display">
x^{Nd} \equiv x \quad(mod\;pq)</script><p>因此有：</p>
<script type="math/tex; mode=display">
gcd(x^{Nd}-x,n) = pq</script><p>然后我们就能得到pq，就可以用他的解密方法解密得到明文了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">1653396627113549535760516503668455111392369905404419847336187180051939350514408518095369852411718553340156505246372037811032919080426885042549723125598742783778413642221563616358386699697645814225855089454045984443096447166740882693228043505960011332616740785976743150624114653594631779427044055729185392854961786323215146318588164139423925400772680226861699990332420246447180631417523181196631188540323779487858453719444807515638025771586275969579201806909799448813112034867089866513864971414742370516244653259347267231436131850871346106316007958256749016599758599549180907260093080500469394473142003147643172770078092713912200110043214435078277125844112816260967490086038358669788006182833272351526796228536135638071670829206746835346784997437044707950580087067666459222916040902038574157577881880027391425763503693184264104932693985833980182986816664377018507487697769866530103927375926578569947076633923873193100147751463</span></span><br><span class="line">n = <span class="number">1768427447158131856514034889456397424027937796617829756303525705316152314769129050888899742667986532346611229157207778487065194513722005516611969754197481310330149721054855689646133721600838194741123290410384315980339516947257172981002480414254023253269098539962527834174781356657779988761754582343096332391763560921491414520707112852896782970123018263505426447126195645371941116395659369152654368118569516482251442513192892626222576419747048343942947570016045016127917578272819812760632788343321742583353340158009324794626006731057267603803701663256706597904789047060978427573361035171008822467120148227698893238773305320215769410594974360573727150122036666987718934166622785421464647946084162895084248352643721808444370307254417501852264572985908550839933862563001186477021313236113690793843893640190378131373214104044465633483953616402680853776480712599669132572907096151664916118185486737463253559093537311036517461749439</span></span><br><span class="line">d = <span class="number">20650646933118544225095544552373007455928574480175801658168105227037950105642248948645762488881219576174131624593293487325329703919313156659700002234392400636474610143032745113473842675857323774566945229148664969659797779146488402588937762391470971617163496433008501858907585683428652637958844902909796849080799141999490231877378863244093900363251415972834146031490928923962271054053278056347181254936750536280638321211545167520935870220829786490686826062142415755063724639110568511969041175019898031990455911525941036727091961083201123910761290998968240338217895275414072475701909497518616112236380389851984377079</span></span><br><span class="line"></span><br><span class="line">pq = GCD(<span class="built_in">pow</span>(<span class="number">2</span>,n*d,n)-<span class="number">2</span>,n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,pq)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;l3arn_s0m3_e1ement4ry_numb3r_the0ry&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="babyNTRU"><a href="#babyNTRU" class="headerlink" title="babyNTRU"></a>babyNTRU</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NTRU, 但是只有常数项</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">f = getPrime(<span class="number">1024</span>)</span><br><span class="line">g = getPrime(<span class="number">768</span>)</span><br><span class="line"></span><br><span class="line">h = (inverse(f, q) * g) % q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">e = (getPrime(<span class="number">32</span>) * h + m) % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((h, q))</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (8916452722821418463248726825721257021744194286874706915832444631771596616116491775091473142798867278598586482678387668986764461265131119164500473719939894343163496325556340181429675937641495981353857724627081847304246987074303722642172988864138967404024201246050387152854001746763104417773214408906879366958729744259612777257542351501592019483745621824894790096639205771421560295175633152877667720038396154571697861326821483170835238092879747297506606983322890706220824261581533324824858599082611886026668788577757970984892292609271082176311433507931993672945925883985629311514143607457603297458439759594085898425992, 31985842636498685945330905726539498901443694955736332073639744466389039373143618920511122288844282849407290205804991634167816417468703459229138891348115191921395278336695684210437130681337971686008048054340499654721317721241239990701099685207253476642931586563363638141636011941268962999641130263828151538489139254625099330199557503153680089387538863574480134898211311252227463870838947777479309928195791241005127445821671684607237706849308372923372795573732000365072815112119533702614620325238183899266147682193892866330678076925199674554569018103164228278742151778832319406135513140669049734660019551179692615505961)</span></span><br><span class="line"><span class="comment"># 20041713613876382007969284056698149007154248857420752520496829246324512197188211029665990713599667984019715503486507126224558092176392282486689347953069815123212779090783909545244160318938357529307482025697769394114967028564546355310883670462197528011181768588878447856875173263800885048676190978206851268887445527785387532167370943745180538168965461612097037041570912365648125449804109299630958840398397721916860876687808474004391843869813396858468730877627733234832744328768443830669469345926766882446378765847334421595034470639171397587395341977453536859946410431252287203312913117023084978959318406160721042580688</span></span><br></pre></td></tr></table></figure>
<p>格入门时肯定会见过的一个题目，这里不做阐述了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">h,q = (<span class="number">8916452722821418463248726825721257021744194286874706915832444631771596616116491775091473142798867278598586482678387668986764461265131119164500473719939894343163496325556340181429675937641495981353857724627081847304246987074303722642172988864138967404024201246050387152854001746763104417773214408906879366958729744259612777257542351501592019483745621824894790096639205771421560295175633152877667720038396154571697861326821483170835238092879747297506606983322890706220824261581533324824858599082611886026668788577757970984892292609271082176311433507931993672945925883985629311514143607457603297458439759594085898425992</span>, <span class="number">31985842636498685945330905726539498901443694955736332073639744466389039373143618920511122288844282849407290205804991634167816417468703459229138891348115191921395278336695684210437130681337971686008048054340499654721317721241239990701099685207253476642931586563363638141636011941268962999641130263828151538489139254625099330199557503153680089387538863574480134898211311252227463870838947777479309928195791241005127445821671684607237706849308372923372795573732000365072815112119533702614620325238183899266147682193892866330678076925199674554569018103164228278742151778832319406135513140669049734660019551179692615505961</span>)</span><br><span class="line">e = <span class="number">20041713613876382007969284056698149007154248857420752520496829246324512197188211029665990713599667984019715503486507126224558092176392282486689347953069815123212779090783909545244160318938357529307482025697769394114967028564546355310883670462197528011181768588878447856875173263800885048676190978206851268887445527785387532167370943745180538168965461612097037041570912365648125449804109299630958840398397721916860876687808474004391843869813396858468730877627733234832744328768443830669469345926766882446378765847334421595034470639171397587395341977453536859946410431252287203312913117023084978959318406160721042580688</span></span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ, [[<span class="number">1</span>, h],</span><br><span class="line">                [<span class="number">0</span>, q]])</span><br><span class="line"></span><br><span class="line">f, g = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = (f*e) % q % g * inverse_mod(f, g) % g</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Lattice_reduction_magic_on_NTRU#82b08b2d&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Smart"><a href="#Smart" class="headerlink" title="Smart"></a>Smart</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个解决ECDLP的好方法</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = <span class="number">75206427479775622966537995406541077245842499523456803092204668034148875719001</span></span><br><span class="line">a = <span class="number">40399280641537685263236367744605671534251002649301968428998107181223348036480</span></span><br><span class="line">b = <span class="number">34830673418515139976377184302022321848201537906033092355749226925568830384464</span></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line"></span><br><span class="line">d = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">G = E.random_element()</span><br><span class="line"></span><br><span class="line">P = d * G</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(G)</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (63199291976729017585116731422181573663076311513240158412108878460234764025898 : 11977959928854309700611217102917186587242105343137383979364679606977824228558 : 1)</span></span><br><span class="line"><span class="comment"># (75017275378438543246214954287362349176908042127439117734318700769768512624429 : 39521483276009738115474714281626894361123804837783117725653243818498259351984 : 1)</span></span><br></pre></td></tr></table></figure>
<p>题目标题明示Smart attack，那么也不需要检查曲线阶是否等于p了，直接Smart attack就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MD5</span>(<span class="params">m</span>):<span class="keyword">return</span> md5(<span class="built_in">str</span>(m).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">p = <span class="number">75206427479775622966537995406541077245842499523456803092204668034148875719001</span></span><br><span class="line">a = <span class="number">40399280641537685263236367744605671534251002649301968428998107181223348036480</span></span><br><span class="line">b = <span class="number">34830673418515139976377184302022321848201537906033092355749226925568830384464</span></span><br><span class="line">G = (<span class="number">63199291976729017585116731422181573663076311513240158412108878460234764025898</span> , <span class="number">11977959928854309700611217102917186587242105343137383979364679606977824228558</span>)</span><br><span class="line">dG = (<span class="number">75017275378438543246214954287362349176908042127439117734318700769768512624429</span> , <span class="number">39521483276009738115474714281626894361123804837783117725653243818498259351984</span>)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"></span><br><span class="line">P = E(G)</span><br><span class="line">Q = E(dG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">int</span>(SmartAttack(P, Q, p))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(d)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;m1nd_y0ur_p4rameter#167d&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">签个道吧</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime,bytes_to_long, sieve_base</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uniPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(sieve_base)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=uniPrime(<span class="number">512</span>)</span><br><span class="line">q=uniPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e= <span class="number">196608</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 3326716005321175474866311915397401254111950808705576293932345690533263108414883877530294339294274914837424580618375346509555627578734883357652996005817766370804842161603027636393776079113035745495508839749006773483720698066943577445977551268093247748313691392265332970992500440422951173889419377779135952537088733</span></span><br><span class="line"><span class="string">c= 2709336316075650177079376244796188132561250459751152184677022745551914544884517324887652368450635995644019212878543745475885906864265559139379903049221765159852922264140740839538366147411533242116915892792672736321879694956051586399594206293685750573633107354109784921229088063124404073840557026747056910514218246</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以发现素数的生成方式均满足p-1光滑，因此可以求出p、q。然后发现：</p>
<script type="math/tex; mode=display">
e = 2^{16}*3</script><p>那么预期应该是先求出3的逆元，然后高次Rabin解。不过最近才新学了一招nth_root，试验一下发现真行，这函数很舒服。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">n= <span class="number">3326716005321175474866311915397401254111950808705576293932345690533263108414883877530294339294274914837424580618375346509555627578734883357652996005817766370804842161603027636393776079113035745495508839749006773483720698066943577445977551268093247748313691392265332970992500440422951173889419377779135952537088733</span></span><br><span class="line">c= <span class="number">2709336316075650177079376244796188132561250459751152184677022745551914544884517324887652368450635995644019212878543745475885906864265559139379903049221765159852922264140740839538366147411533242116915892792672736321879694956051586399594206293685750573633107354109784921229088063124404073840557026747056910514218246</span></span><br><span class="line"><span class="comment">#e = 2^16*3</span></span><br><span class="line">e= <span class="number">196608</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#smooth p-1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 2</span></span><br><span class="line"><span class="string">m = 2</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    a = pow(a, m, n)</span></span><br><span class="line"><span class="string">    p = GCD(a-1, n)</span></span><br><span class="line"><span class="string">    if p != 1 and p != n:</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">    m += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">q = n // p</span></span><br><span class="line"><span class="string">print(p)</span></span><br><span class="line"><span class="string">print(q)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p = <span class="number">11104262127139631006017377403513327506789883414594983803879501935187577746510780983414313264114974863256190649020310407750155332724309172387489473534782137699</span></span><br><span class="line">q = <span class="number">299589109769881744982450090354913727490614194294955470269590615599558785111624291036465332556249607131912597764625231248581361283506625311199114064303807167</span></span><br><span class="line"></span><br><span class="line">dp = inverse(<span class="number">3</span>,p-<span class="number">1</span>)</span><br><span class="line">dq = inverse(<span class="number">3</span>,q-<span class="number">1</span>)</span><br><span class="line">cp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">cq = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line"></span><br><span class="line">F = Zmod(p)</span><br><span class="line">cp = F(cp)</span><br><span class="line">resp = cp.nth_root(<span class="number">2</span>^<span class="number">16</span>,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">F = Zmod(q)</span><br><span class="line">cq = F(cq)</span><br><span class="line">resq = cq.nth_root(<span class="number">2</span>^<span class="number">16</span>,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        mod = [p,q]</span><br><span class="line">        c = [<span class="built_in">int</span>(i),<span class="built_in">int</span>(j)]</span><br><span class="line">        m = crt(mod,c)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> long_to_bytes(m)):</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;new1sstar_welcome_you&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从错误中学习</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">data = [<span class="built_in">ord</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag]</span><br><span class="line"></span><br><span class="line">mod = <span class="number">0x42</span></span><br><span class="line">n = <span class="number">200</span></span><br><span class="line">p = <span class="number">5</span></span><br><span class="line">q = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>():</span><br><span class="line">  <span class="keyword">return</span> vector(ZZ, [<span class="number">1</span> - random.randint(<span class="number">0</span>,p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creatematrix</span>():</span><br><span class="line">  <span class="keyword">return</span> matrix(ZZ, [[q//<span class="number">2</span> - random.randint(<span class="number">0</span>,q) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(mod)])</span><br><span class="line"></span><br><span class="line">A, B, C= creatematrix(), creatematrix(), creatematrix()</span><br><span class="line">x = vector(ZZ, data[<span class="number">0</span>:mod])</span><br><span class="line">y = vector(ZZ, data[mod:<span class="number">2</span>*mod])</span><br><span class="line">z = vector(ZZ, data[<span class="number">2</span>*mod:<span class="number">3</span>*mod])</span><br><span class="line">e = E()</span><br><span class="line">b = x*B+y*A+z*C + e</span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line">res += <span class="string">&quot;A=&quot;</span> + <span class="built_in">str</span>(A) +<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">res += <span class="string">&quot;B=&quot;</span> + <span class="built_in">str</span>(B) +<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">res += <span class="string">&quot;C=&quot;</span> + <span class="built_in">str</span>(C) +<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">res += <span class="string">&quot;b=&quot;</span> + <span class="built_in">str</span>(b) +<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;enc.out&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(res)</span><br></pre></td></tr></table></figure>
<p>题目描述与标题都说明这是一个LWE(Learning With Errors)问题，不过这道题目自己造格也很容易，这里还是先梳理一下题目加密流程。</p>
<ul>
<li>将flag每个字符的ASCII码存储到列表data中，并将data分为长度相等的三段，分别作为向量x、y、z</li>
<li>生成三个随机矩阵A、B、C，其大小均为mod*n，其中元素为(-q/2,q/2)之间的随机数</li>
<li>生成一个误差向量e，其元素为(-4,1)的随机数</li>
<li>计算向量b，满足：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = x*B+y*A+z*C + e</span><br></pre></td></tr></table></figure>
<ul>
<li>给出A、B、C、b，要求还原flag</li>
</ul>
<p>由于flag的ASCII码被存在列表data中，而data又被分为三段向量x、y、z，因此本题其实就是要还原x、y、z向量。而我们拥有的等量关系是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = x*B+y*A+z*C + e</span><br></pre></td></tr></table></figure>
<p>把他展开写为直观形式：</p>
<script type="math/tex; mode=display">
(b_1,b_2,...b_n)
=
(x_1,x_2,...x_{mod})*
\left(
 \begin{matrix}
   A_{1,1}&A_{1,2}&    &\\
   A_{2,1}&A_{2,2}&    &\\
          &       &... &\\
          &       &    &A_{mod,n}
  \end{matrix}
  \right)
  +
  (y_1,y_2,...y_{mod})*
\left(
 \begin{matrix}
   B_{1,1}&B_{1,2}&    &\\
   B_{2,1}&B_{2,2}&    &\\
          &       &... &\\
          &       &    &B_{mod,n}
  \end{matrix}
  \right)
  +
  (z_1,z_2,...z_{mod})*
\left(
 \begin{matrix}
   C_{1,1}&C_{1,2}&    &\\
   C_{2,1}&C_{2,2}&    &\\
          &       &... &\\
          &       &    &C_{mod,n}
  \end{matrix}
  \right)
  +
  (e_1,e_2,...,e_n)</script><p>其实也就是下面的形式：</p>
<script type="math/tex; mode=display">
b
=
(x,y,z)*
\left(
 \begin{matrix}
   A\\
   B\\
   C\\
  \end{matrix}
  \right)
  +
  e</script><p>稍微移项变形一下：</p>
<script type="math/tex; mode=display">
-e
=
(x,y,z,-1)*
\left(
 \begin{matrix}
   A\\
   B\\
   C\\
   b\\
  \end{matrix}
  \right)</script><p>而由于误差e是个很短的向量，那么以此关系就能构造一个格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   A\\
   B\\
   C\\
   b\\
  \end{matrix}
  \right)</script><p>LLL就能规约得到向量e，然后解下面这个矩阵方程就能得到x、y、z，就能还原flag了：</p>
<script type="math/tex; mode=display">
b - e
=
(x,y,z)*
\left(
 \begin{matrix}
   A\\
   B\\
   C\\
  \end{matrix}
  \right)</script><p>实际上手操作时，由于sage矩阵的输出形式有点不尽人意，没办法直接读取，所以需要做一点处理。我的处理方式是：</p>
<ul>
<li>新建一个空白matrix.txt文件</li>
<li>把enc.out的所有内容粘贴到matrix.txt文件中</li>
<li>将”    “(四个空格)全局替换为”,”，再将”   “(三个空格)全局替换为”,”，再将”   “(两个空格)全局替换为”,”，再将”   “(一个空格)全局替换为”,”</li>
<li>将”[,”全局替换为”[“，并在每个矩阵开头多加一个”[“，在每个矩阵结尾多加一个”]”</li>
<li>将”A=”、”B=”、”C=”、”b=”全部替换为”=”，主要是为了分隔几个矩阵</li>
<li>再进行一些可能进行的微调</li>
</ul>
<p>然后就可以以如下方式读入矩阵和向量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;matrix.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">A = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">0</span>].strip()))</span><br><span class="line">B = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">1</span>].strip()))</span><br><span class="line">C = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">2</span>].strip()))</span><br><span class="line">b = vector(ZZ, <span class="built_in">eval</span>(data[<span class="number">3</span>].strip()))</span><br></pre></td></tr></table></figure>
<p>其实用正则表达式来寻找每一行的所有数字应该会更方便，但是我不太会操作。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;matrix.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">A = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">0</span>].strip()))</span><br><span class="line">B = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">1</span>].strip()))</span><br><span class="line">C = matrix(ZZ, <span class="built_in">eval</span>(data[<span class="number">2</span>].strip()))</span><br><span class="line">b = vector(ZZ, <span class="built_in">eval</span>(data[<span class="number">3</span>].strip()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#LLL</span></span><br><span class="line">L = block_matrix([[A],[B],[C],[matrix(b)]])</span><br><span class="line">res = L.LLL()</span><br><span class="line">e = vector(ZZ, res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#getflag</span></span><br><span class="line">coeffients = block_matrix([[A],[B],[C]])</span><br><span class="line">flag = coeffients.solve_left(b-e)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;try_lear1n_wi0h_t1e_error&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h2><h3 id="last-signin"><a href="#last-signin" class="headerlink" title="last_signin"></a>last_signin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coppersmith可以帮助你</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line">gift = p&amp;(<span class="number">2</span>**<span class="number">923</span>-<span class="number">2</span>**<span class="number">101</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = &quot;</span>,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gift = &quot;</span>,gift)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N =  12055968471523053394851394038007091122809367392467691213651520944038861796011063965460456285088011754895260428814358599592032865236006733879843493164411907032292051539754520574395252298997379020268868972160297893871261713263196092380416876697472160104980015554834798949155917292189278888914003846758687215559958506116359394743135211950575060201887025032694825084104792059271584351889134811543088404952977137809673880602946974798597506721906751835019855063462460686036567578835477249909061675845157443679947730585880392110482301750827802213877643649659069945187353987713717145709188790427572582689339643628659515017749</span></span><br><span class="line"><span class="string">p0 =  70561167908564543355630347620333350122607189772353278860674786406663564556557177660954135010748189302104288155939269204559421198595262277064601483770331017282701354382190472661583444774920297367889959312517009682740631673940840597651219956142053575328811350770919852725338374144</span></span><br><span class="line"><span class="string">c =  2475592349689790551418951263467994503430959303317734266333382586608208775837696436139830443942890900333873206031844146782184712381952753718848109663188245101226538043101790881285270927795075893680615586053680077455901334861085349972222680322067952811365366282026756737185263105621695146050695385626656638309577087933457566501579308954739543321367741463532413790712419879733217017821099916866490928476372772542254929459218259301608413811969763001504245717637231198848196348656878611788843380115493744125520080930068318479606464623896240289381601711908759450672519228864487153103141218567551083147171385920693325876018</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这题前段时间也有个师傅问过我，其实是D3CTF的一道原题，wp如下：</p>
<p><a href="https://www.anquanke.com/post/id/193939#h3-28">D^3CTF 官方Write Up-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>用wp中的exp可以进行这道题目的二元copper求解，而用普通的二元copper的话，不管是调参还是多爆破几位也出不来结果，具体原因就没研究过了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N =  <span class="number">12055968471523053394851394038007091122809367392467691213651520944038861796011063965460456285088011754895260428814358599592032865236006733879843493164411907032292051539754520574395252298997379020268868972160297893871261713263196092380416876697472160104980015554834798949155917292189278888914003846758687215559958506116359394743135211950575060201887025032694825084104792059271584351889134811543088404952977137809673880602946974798597506721906751835019855063462460686036567578835477249909061675845157443679947730585880392110482301750827802213877643649659069945187353987713717145709188790427572582689339643628659515017749</span></span><br><span class="line">p0 =  <span class="number">70561167908564543355630347620333350122607189772353278860674786406663564556557177660954135010748189302104288155939269204559421198595262277064601483770331017282701354382190472661583444774920297367889959312517009682740631673940840597651219956142053575328811350770919852725338374144</span></span><br><span class="line">c =  <span class="number">2475592349689790551418951263467994503430959303317734266333382586608208775837696436139830443942890900333873206031844146782184712381952753718848109663188245101226538043101790881285270927795075893680615586053680077455901334861085349972222680322067952811365366282026756737185263105621695146050695385626656638309577087933457566501579308954739543321367741463532413790712419879733217017821099916866490928476372772542254929459218259301608413811969763001504245717637231198848196348656878611788843380115493744125520080930068318479606464623896240289381601711908759450672519228864487153103141218567551083147171385920693325876018</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bivariate</span>(<span class="params">pol, XX, YY, kk=<span class="number">4</span></span>):</span><br><span class="line">    N = pol.parent().characteristic()</span><br><span class="line"></span><br><span class="line">    f = pol.change_ring(ZZ)</span><br><span class="line">    PR, (x, y) = f.parent().objgens()</span><br><span class="line"></span><br><span class="line">    idx = [(k - i, i) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(kk + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>)]</span><br><span class="line">    monomials = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> t: PR(x ** t[<span class="number">0</span>] * y ** t[<span class="number">1</span>]), idx))</span><br><span class="line">    <span class="comment"># collect the shift-polynomials</span></span><br><span class="line">    g = []</span><br><span class="line">    <span class="keyword">for</span> h, i <span class="keyword">in</span> idx:</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">0</span>:</span><br><span class="line">            g.append(y ** h * x ** i * N)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            g.append(y ** (h - <span class="number">1</span>) * x ** i * f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice basis</span></span><br><span class="line">    M = Matrix(ZZ, <span class="built_in">len</span>(g))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(M.nrows()):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(M.ncols()):</span><br><span class="line">            h, i = idx[col]</span><br><span class="line">            M[row, col] = g[row][h, i] * XX ** h * YY ** i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    B = M.LLL()</span><br><span class="line"></span><br><span class="line">    PX = PolynomialRing(ZZ, <span class="string">&#x27;xs&#x27;</span>)</span><br><span class="line">    xs = PX.gen()</span><br><span class="line">    PY = PolynomialRing(ZZ, <span class="string">&#x27;ys&#x27;</span>)</span><br><span class="line">    ys = PY.gen()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Transform LLL-reduced vectors to polynomials</span></span><br><span class="line">    H = [(i, PR(<span class="number">0</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows())]</span><br><span class="line">    H = <span class="built_in">dict</span>(H)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows()):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(B.ncols()):</span><br><span class="line">            H[i] += PR((monomials[j] * B[i, j]) / monomials[j](XX, YY))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the root</span></span><br><span class="line">    poly1 = H[<span class="number">0</span>].resultant(H[<span class="number">1</span>], y).subs(x=xs)</span><br><span class="line">    poly2 = H[<span class="number">0</span>].resultant(H[<span class="number">2</span>], y).subs(x=xs)</span><br><span class="line">    poly = gcd(poly1, poly2)</span><br><span class="line">    x_root = poly.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    poly1 = H[<span class="number">0</span>].resultant(H[<span class="number">1</span>], x).subs(y=ys)</span><br><span class="line">    poly2 = H[<span class="number">0</span>].resultant(H[<span class="number">2</span>], x).subs(y=ys)</span><br><span class="line">    poly = gcd(poly1, poly2)</span><br><span class="line">    y_root = poly.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_root, y_root</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(Zmod(N), names=<span class="string">&#x27;x,y&#x27;</span>)</span><br><span class="line">x, y = PR.gens()</span><br><span class="line">pol = <span class="number">2</span> ** <span class="number">924</span> * x + y + p0</span><br><span class="line"></span><br><span class="line">x, y = bivariate(pol, <span class="number">2</span> ** <span class="number">100</span>, <span class="number">2</span> ** <span class="number">100</span>)</span><br><span class="line">p = <span class="number">2</span> ** <span class="number">924</span> * x + y + p0</span><br><span class="line">q = N // p</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>)*(q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, N))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;although_11ts_norma11_tis_still_stay_dsadsa&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="School-of-CRC32"><a href="#School-of-CRC32" class="headerlink" title="School of CRC32"></a>School of CRC32</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来点CRC32挑战</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">ROUND = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">LENGTH = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Extreme hard CRC32 challenge&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ARE YOU READY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ROUND&#x27;</span>, i, <span class="string">&#x27;!&#x27;</span>*<span class="built_in">int</span>(i/<span class="number">75</span> + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    target = secrets.randbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Here is my CRC32 value: &#x27;</span>, <span class="built_in">hex</span>(target))</span><br><span class="line"></span><br><span class="line">    dat = <span class="built_in">input</span>(<span class="string">&#x27;Show me some data &gt; &#x27;</span>)</span><br><span class="line">    raw = <span class="built_in">bytes</span>.fromhex(dat)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> zlib.crc32(raw) == target <span class="keyword">and</span> <span class="built_in">len</span>(raw) == LENGTH:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;GREAT&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OH NO&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Congratulation! Here is your flag&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>题目要求进行一百轮挑战，全部通过就有flag，挑战的具体内容是：</p>
<ul>
<li>生成32bit的随机数target，作为CRC32的目标值</li>
<li>输入一段长度为20的字节流，使得该字节流的CRC32值与给定target相等</li>
</ul>
<p>当然可以去根据CRC的仿射与差分的相关性质去建立矩阵，然后求解矩阵方程得到碰撞。但是实际上知道有个轮子的话就很简单了：</p>
<p><a href="https://pypi.org/project/crcsolver/">crcsolver · PyPI</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> crcsolver</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28240</span>)</span><br><span class="line"></span><br><span class="line">ROUND = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(ROUND):</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;CRC32 value:  &quot;</span>)</span><br><span class="line">    temp = <span class="built_in">eval</span>(sh.recvline().strip().decode())</span><br><span class="line">    cc = crcsolver.solve(<span class="string">b&#x27;_&#x27;</span>*<span class="number">20</span>, <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>*<span class="number">8</span>), temp, binascii.crc32)</span><br><span class="line">    raw = <span class="built_in">bytes</span>.fromhex(cc.<span class="built_in">hex</span>())</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;Show me some data &gt; &quot;</span>)</span><br><span class="line">    sh.sendline(cc.<span class="built_in">hex</span>().encode())</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.recvline()</span><br><span class="line"><span class="built_in">print</span>(sh.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;a1gebra_i5_ma4ic#cf5d4a5d&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="PseudoHell-EASY-PseudoHell-HARD"><a href="#PseudoHell-EASY-PseudoHell-HARD" class="headerlink" title="PseudoHell_EASY/PseudoHell_HARD"></a>PseudoHell_EASY/PseudoHell_HARD</h3><p>两个题其实共用一个附件，因此也放在一起说了</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎来到随机天堂，来猜猜我投的硬币是1还是0吧</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>problems.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> challenge <span class="keyword">import</span> Challenge1,Challenge2,Challenge3,Challenge4,Challenge5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag_easy,flag_hard</span><br><span class="line">roll_left = <span class="number">56</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_coin</span>(<span class="params">level, query_num</span>):</span><br><span class="line">    Ch = level()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(query_num):</span><br><span class="line">        msg = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;msg? &gt; &quot;</span>))</span><br><span class="line">        inverse = <span class="built_in">input</span>(<span class="string">&quot;inverse? &gt; &quot;</span>) == <span class="string">&#x27;y&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(msg) == Ch.input_size</span><br><span class="line">        <span class="built_in">print</span>(Ch.roll(msg, inverse).<span class="built_in">hex</span>())</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">input</span>(<span class="string">&quot;coin? &gt; &quot;</span>) == <span class="built_in">str</span>(Ch.coin) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_challenge</span>(<span class="params">challenge_level, challenge</span>):</span><br><span class="line">    <span class="keyword">global</span> roll_left</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Challenge Level: <span class="subst">&#123;challenge_level&#125;</span>&quot;</span>)</span><br><span class="line">    roll_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&quot;How many times are required to roll for solving <span class="subst">&#123;challenge_level&#125;</span>? &gt; &quot;</span>))</span><br><span class="line">    roll_left -= roll_num</span><br><span class="line">    [guess_coin(challenge, roll_num) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">roll_challenge(<span class="string">&quot;1&quot;</span>, Challenge1)</span><br><span class="line">roll_challenge(<span class="string">&quot;2&quot;</span>, Challenge2)</span><br><span class="line">roll_challenge(<span class="string">&quot;3&quot;</span>, Challenge3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> roll_left &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You passed all challenges for EASY but times limit exceeded. Try harder :(&quot;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag for easy is &quot;</span>, flag_easy)</span><br><span class="line"></span><br><span class="line">roll_challenge(<span class="string">&quot;4&quot;</span>, Challenge4)</span><br><span class="line">roll_challenge(<span class="string">&quot;5&quot;</span>, Challenge5)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> roll_left &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You passed all challenges for HARD but times limit exceeded. Try harder :(&quot;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag for hard is &quot;</span>, flag_hard)</span><br></pre></td></tr></table></figure>
<p>challenge.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a:<span class="built_in">bytes</span>,b:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(a) == <span class="built_in">len</span>(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRP</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        self.domain_cache = &#123;&#125;</span><br><span class="line">        self.range_cache = &#123;&#125;</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tran</span>(<span class="params">self, m, inverse = <span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inverse:</span><br><span class="line">            x = m</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> self.domain_cache:</span><br><span class="line">                <span class="keyword">return</span> self.domain_cache[x]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                y = os.urandom(self.n)</span><br><span class="line">                <span class="keyword">if</span> y <span class="keyword">in</span> self.range_cache:<span class="keyword">continue</span></span><br><span class="line">                self.domain_cache[x] = y</span><br><span class="line">                self.range_cache[y] = x    </span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = m</span><br><span class="line">            <span class="keyword">if</span> y <span class="keyword">in</span> self.range_cache:</span><br><span class="line">                <span class="keyword">return</span> self.range_cache[y]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                x = os.urandom(self.n)</span><br><span class="line">                <span class="keyword">if</span> x <span class="keyword">in</span> self.domain_cache:<span class="keyword">continue</span></span><br><span class="line">                self.domain_cache[x] = y</span><br><span class="line">                self.range_cache[y] = x    </span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRF</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        self.domain_cache = &#123;&#125;</span><br><span class="line">        self.range_cache = &#123;&#125;</span><br><span class="line">        self.n = n </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tran</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.domain_cache:</span><br><span class="line">            self.domain_cache[x] = os.urandom(self.n)</span><br><span class="line">        <span class="keyword">return</span> self.domain_cache[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge1, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge2, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge3</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inverse:</span><br><span class="line">            L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">if</span> inverse <span class="keyword">or</span> <span class="keyword">not</span> inverse:        </span><br><span class="line">            <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M,inverse)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.PRP1 = PRP(self.block_size)</span><br><span class="line">        self.PRP2 = PRP(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        X, T = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        X = xor(X, T)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            X = xor(self.PRP1.tran(X, inverse),T)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> self.PRP2.tran(M, inverse)[:self.block_size]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M,inverse)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge5</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">1</span></span><br><span class="line">        self.input_size = self.block_size</span><br><span class="line">        self.PRP = PRP(self.block_size)</span><br><span class="line">        self.PRF = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> xor(<span class="built_in">bytes</span>(<span class="number">1</span>),self.PRP.tran(M))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> xor(self.PRF.tran(M),<span class="built_in">bytes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge 5, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br></pre></td></tr></table></figure>
<p>题目代码挺长的，先简要地描述一下主要任务：</p>
<ul>
<li>题目连续生成五个猜硬币挑战，通过一个挑战才能进行下一个挑战</li>
<li>对于每个挑战，需要猜测成功33次硬币即可通过挑战</li>
<li>猜测硬币的依据是：靶机提供输入功能可以输入一段字节流，而对于硬币为0或为1，会有不同的随机数产生方式，对输入的字节流产生随机数并返回。</li>
<li>对于每个挑战中的每一次猜硬币，可以指定输入次数，这个次数是五次挑战共享的，也就是说，如果前面用的次数多，后面能用的次数就少；前面用的少，后面能用的次数就很充裕。</li>
<li>对于指定的challenge，可以使用inverse功能，获取某个输入的解密结果</li>
</ul>
<p>那么核心任务就是：</p>
<ul>
<li>判断出每个challenge中，硬币为0或1时产生的随机数有什么不同，从而构造对应的输入，用得到的对应输出的特点去判断</li>
<li>对每一次挑战，尽可能用更少的输入次数，从而使后面的次数更加充裕</li>
</ul>
<p>然后，对于5个challenge，其随机数产生都是基于两个类的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PRP</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        self.domain_cache = &#123;&#125;</span><br><span class="line">        self.range_cache = &#123;&#125;</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tran</span>(<span class="params">self, m, inverse = <span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inverse:</span><br><span class="line">            x = m</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> self.domain_cache:</span><br><span class="line">                <span class="keyword">return</span> self.domain_cache[x]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                y = os.urandom(self.n)</span><br><span class="line">                <span class="keyword">if</span> y <span class="keyword">in</span> self.range_cache:<span class="keyword">continue</span></span><br><span class="line">                self.domain_cache[x] = y</span><br><span class="line">                self.range_cache[y] = x    </span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = m</span><br><span class="line">            <span class="keyword">if</span> y <span class="keyword">in</span> self.range_cache:</span><br><span class="line">                <span class="keyword">return</span> self.range_cache[y]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                x = os.urandom(self.n)</span><br><span class="line">                <span class="keyword">if</span> x <span class="keyword">in</span> self.domain_cache:<span class="keyword">continue</span></span><br><span class="line">                self.domain_cache[x] = y</span><br><span class="line">                self.range_cache[y] = x    </span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRF</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        self.domain_cache = &#123;&#125;</span><br><span class="line">        self.range_cache = &#123;&#125;</span><br><span class="line">        self.n = n </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tran</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.domain_cache:</span><br><span class="line">            self.domain_cache[x] = os.urandom(self.n)</span><br><span class="line">        <span class="keyword">return</span> self.domain_cache[x]</span><br></pre></td></tr></table></figure>
<p>这两个类分别指的是伪随机置换(PRP)和伪随机函数(PRF)，其具体区别可以参考：</p>
<p><a href="https://blog.csdn.net/m0_50984266/article/details/109551506">【密码学】PRP和PRF_prf算法-CSDN博客</a></p>
<p>那么接下来就逐个挑战分析：</p>
<h4 id="challenge-1"><a href="#challenge-1" class="headerlink" title="challenge 1"></a>challenge 1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge1, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br></pre></td></tr></table></figure>
<p>可以看到，对于硬币为0或为1，其对输入的串的处理方式不同：</p>
<ul>
<li>为0，把输入串分为左右两部分，然后如下得到结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L, R = R, xor(L, self.RO1.tran(R))</span><br></pre></td></tr></table></figure>
<ul>
<li>为1，直接输出一个长度为16的随机字节流</li>
</ul>
<p>那么如何区分也很显然。我们请求一次输入次数，然后输入长度为16的全0字节，然后若靶机返回的输出前8个字节为全0，说明硬币为0；否则为1。</p>
<h4 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge2, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br></pre></td></tr></table></figure>
<p>与challenge1的区别在于，硬币为0时，这个类feistel结构多进行了一轮，因此无法直接从输出进行判断。</p>
<p>但是解决方式也很容易，我们请求两次输入次数：</p>
<p>如果硬币是0：</p>
<ul>
<li>第一次，输入长度为16的全0字节流，得到对应输出，推导一下可以知道输出的左右两部分是如下形式：</li>
</ul>
<script type="math/tex; mode=display">
t(0),t(t(0))</script><ul>
<li>第二次，我们输入：</li>
</ul>
<script type="math/tex; mode=display">
t(0),0</script><ul>
<li>可以简单推导一下，我们得到的输出应该是：</li>
</ul>
<script type="math/tex; mode=display">
0,t(0)</script><p>而如果硬币是1，显然输出不会是这个结构，因此我们就可以通过挑战二。</p>
<h4 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge3</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.RO1 = PRF(self.block_size)</span><br><span class="line">        self.RO2 = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inverse:</span><br><span class="line">            L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">            L, R = R, xor(L, self.RO1.tran(R))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            L, R = M[:self.block_size], M[self.block_size:]</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">            L, R = xor(R, self.RO1.tran(L)), L</span><br><span class="line">        <span class="keyword">return</span> L+R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">if</span> inverse <span class="keyword">or</span> <span class="keyword">not</span> inverse:        </span><br><span class="line">            <span class="keyword">return</span> self.RO2.tran(M)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M,inverse)</span><br></pre></td></tr></table></figure>
<p>相比起challenge2，又多加了一轮feistel，不过不同的是，我们可以通过inverse进行解密。</p>
<p>那就很简单了，我们请求两次输入次数，第一次随便输入一个字节流并获得其加密结果，第二轮输入得到的加密结果，并看inverse的结果与第一轮是否相等就好了。相等为0，否则为1。</p>
<h4 id="challenge-4"><a href="#challenge-4" class="headerlink" title="challenge 4"></a>challenge 4</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">8</span></span><br><span class="line">        self.input_size = <span class="number">2</span> * self.block_size</span><br><span class="line">        self.PRP1 = PRP(self.block_size)</span><br><span class="line">        self.PRP2 = PRP(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        X, T = M[:self.block_size], M[self.block_size:]</span><br><span class="line">        X = xor(X, T)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            X = xor(self.PRP1.tran(X, inverse),T)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> self.PRP2.tran(M, inverse)[:self.block_size]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M,inverse)</span><br></pre></td></tr></table></figure>
<p>挑战4中，如果硬币为0，则会将输入分为左右两部分，并反复进行tran和异或操作。不过可以看出，如果我们将输入的右半部分取为全0，异或操作相当于没有进行，而只有两轮tran。</p>
<p>那么同样，我们请求两次输入，第一次输入长度为16的全0字节流得到加密结果，然后第二次将加密结果再连接上8字节的0去inverse，解密得到全0说明硬币为0，否则为1。</p>
<h4 id="challenge-5"><a href="#challenge-5" class="headerlink" title="challenge 5"></a>challenge 5</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge5</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.coin = os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &amp; <span class="number">1</span></span><br><span class="line">        self.block_size = <span class="number">1</span></span><br><span class="line">        self.input_size = self.block_size</span><br><span class="line">        self.PRP = PRP(self.block_size)</span><br><span class="line">        self.PRF = PRF(self.input_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> xor(<span class="built_in">bytes</span>(<span class="number">1</span>),self.PRP.tran(M))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">self, M</span>):</span><br><span class="line">        <span class="keyword">return</span> xor(self.PRF.tran(M),<span class="built_in">bytes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self, M, inverse</span>):</span><br><span class="line">        <span class="keyword">assert</span> inverse == <span class="literal">False</span>, <span class="string">&quot;In Challenge 5, inverse is not allowed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [self.function1,self.function2][self.coin](M)</span><br></pre></td></tr></table></figure>
<p>这题与前面的4个challenge有两个明显区别：</p>
<ul>
<li>加密的明文仅有1字节</li>
<li>既有PRP又有PRF</li>
</ul>
<p>那么肯定就是要利用两者的区别。而最明显的区别就在于，PRP会建立一个双射，从而保证能进行逆操作，但是PRF不会。</p>
<p>什么意思呢？比如我们输入1和2，PRP能保证输入的两个自变量对应的函数值不同，但是PRF不保证，也就是说输入1，2，返回值可能均为1。</p>
<p>而我们前面共请求了1+2+2+2次，还可以用48次。因此可以请求48次输入次数，并用靶机返回的值建立字典并检查字典长度。如果长度为48则硬币大概率为0，否则为1。</p>
<p>注意我这里说的是大概率为0，概率具体有多大呢？我们其实可以把他看做一个等价的事件，也就是：</p>
<ul>
<li>从0-255中随机抽取48次，48次全部都不一样。</li>
</ul>
<p>这个时候我们的判断就会失败，因为此时PRF和PRP字典长度均为48。而这个失败的概率为：</p>
<script type="math/tex; mode=display">
\frac{256}{256}*\frac{255}{256}*\frac{254}{256}*...\frac{209}{256}</script><p>而经计算，这个概率大约为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">0.009029416209217144</span></span><br></pre></td></tr></table></figure>
<p>可以看到对于每一次，我们只有不到1%的非常小的概率失败，而我们同样也可以计算33次全部成功的概率如下：</p>
<script type="math/tex; mode=display">
P = (1-t)^{33}</script><p>计算得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.7413190801200953</span><br></pre></td></tr></table></figure>
<p>所以我们有很大概率成功，这也是生日攻击的理论基础。</p>
<p>完整exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27756</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Easy</span></span><br><span class="line"><span class="comment">#challenge1</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;solving 1? &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">33</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;0&quot;</span> * <span class="number">32</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">    temp = r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;0000000000000000&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#challenge2</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;solving 2? &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">33</span>):</span><br><span class="line">    temp = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#first</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;0&quot;</span> * <span class="number">32</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">    temp[<span class="number">0</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="comment">#second</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline((temp[<span class="number">0</span>][:<span class="number">16</span>]+<span class="string">&quot;0&quot;</span>*<span class="number">16</span>).encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">    temp[<span class="number">1</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">if</span>(temp[<span class="number">1</span>][:<span class="number">16</span>] == <span class="string">&quot;0000000000000000&quot;</span>):</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#challenge3</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;solving 3? &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">33</span>):</span><br><span class="line">    temp = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#first</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;0&quot;</span> * <span class="number">32</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">    temp[<span class="number">0</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="comment">#second</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(temp[<span class="number">0</span>].encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;y&quot;</span>)</span><br><span class="line">    temp[<span class="number">1</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="comment">#third</span></span><br><span class="line">    <span class="keyword">if</span>(temp[<span class="number">1</span>][:<span class="number">16</span>] == <span class="string">&quot;0000000000000000&quot;</span>):</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="comment">#flag&#123;7b106778-5048-4d9d-bd30-84cfc7d5b48e&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Hard</span></span><br><span class="line"><span class="comment">#challenge4</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;solving 4? &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">33</span>):</span><br><span class="line">    temp = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#first</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;0&quot;</span> * <span class="number">32</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">    temp[<span class="number">0</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="comment">#second</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">    r.sendline((temp[<span class="number">0</span>]+<span class="string">&quot;0&quot;</span>*<span class="number">16</span>).encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;y&quot;</span>)</span><br><span class="line">    temp[<span class="number">1</span>] = r.recvline().strip().decode()</span><br><span class="line">    <span class="comment">#third</span></span><br><span class="line">    <span class="keyword">if</span>(temp[<span class="number">1</span>] == <span class="string">&quot;0000000000000000&quot;</span>):</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#challenge5</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;solving 5? &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;48&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">33</span>):</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;msg? &gt;&quot;</span>)</span><br><span class="line">        r.sendline((<span class="built_in">hex</span>(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>).encode()))</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;inverse? &gt;&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">        temp = r.recvline().strip().decode()</span><br><span class="line">        dic[temp] = j</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(dic) == <span class="number">48</span>):</span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;u_4re_Prf&amp;Pr9_M4st3r!#28a3gg31_82jf124d3_3842sa16ds29&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-强网拟态-wp-crypto</title>
    <url>/post/e69bccb7.html</url>
    <content><![CDATA[<p>*代表赛中未出题目。赛中一共做出两道，最后一道目前还没有进一步的思路，所以先阐述一下自己的想法，希望能给各位师傅一些启发。</p>
<span id="more"></span>
<h3 id="一眼看出"><a href="#一眼看出" class="headerlink" title="一眼看出"></a>一眼看出</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一眼看穿</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = getPrime(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.next_prime(a - r)</span><br><span class="line">q = gmpy2.next_prime(gmpy2.next_prime(a) + r)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">flag, n</span>):</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, <span class="number">65537</span>, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = enc(flag, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;n =&#x27;, mpz(121027298948349995679677982412648544403333177260975245569073983061538581058440163574922807151182889153495253964764966037308461724272151584478723275142858008261257709817963330011376266261119767294949088397671360123321149414700981035517299807126625758046100840667081332434968770862731073693976604061597575813313L))</span></span><br><span class="line"><span class="comment"># (&#x27;c =&#x27;, mpz(42256117129723577554705402387775886393426604555611637074394963219097781224776058009003521565944180241032100329456702310737369381890041336312084091995865560402681403775751012856436207938771611177592600423563671217656908392901713661029126149486651409531213711103407037959788587839729511719756709763927616470267L))</span></span><br></pre></td></tr></table></figure>
<p>签到题，没有太多可说的东西。主要就是r只有六位，因此可以爆破求出n的分解。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">121027298948349995679677982412648544403333177260975245569073983061538581058440163574922807151182889153495253964764966037308461724272151584478723275142858008261257709817963330011376266261119767294949088397671360123321149414700981035517299807126625758046100840667081332434968770862731073693976604061597575813313</span></span><br><span class="line">c = <span class="number">42256117129723577554705402387775886393426604555611637074394963219097781224776058009003521565944180241032100329456702310737369381890041336312084091995865560402681403775751012856436207938771611177592600423563671217656908392901713661029126149486651409531213711103407037959788587839729511719756709763927616470267</span></span><br><span class="line">a = <span class="number">11001240791308496565411773845509754352597481464288272699325231395472137144610774645372812149675141360600469640492874223541765389441131365669731006263464699</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">    p = gmpy2.next_prime(a - r)</span><br><span class="line">    q = gmpy2.next_prime(gmpy2.next_prime(a) + r)</span><br><span class="line">    <span class="keyword">if</span>(n % p == <span class="number">0</span>):</span><br><span class="line">        d = inverse(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;621f7c4f-21de-8566-649e-5a883ce318dc&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="almostlinear"><a href="#almostlinear" class="headerlink" title="almostlinear"></a>almostlinear</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的Sbox不是线性的！原来随便调整一下就好了，那么用这样的Sbox就安全了……叭？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> myAES <span class="keyword">import</span> myAES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">            [choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chal</span>(<span class="params">self</span>):</span><br><span class="line">        key = long_to_bytes(getrandbits(<span class="number">128</span>)).rjust(<span class="number">16</span>, <span class="string">b&quot;\00&quot;</span>)</span><br><span class="line">        token = <span class="built_in">hex</span>(getrandbits(<span class="number">64</span>))[<span class="number">2</span>:].zfill(<span class="number">16</span>).encode()</span><br><span class="line">        cipher = myAES(key)</span><br><span class="line">        flag = cipher.encrypt(token)</span><br><span class="line">        self.send((<span class="string">&quot;flag: &quot;</span>+flag.<span class="built_in">hex</span>()).encode())</span><br><span class="line">        test = <span class="built_in">bytes</span>.fromhex(self.recv(<span class="string">b&quot;try: &quot;</span>)[:<span class="number">32</span>].decode())</span><br><span class="line">        ctx = cipher.encrypt(test)</span><br><span class="line">        self.send((<span class="string">&quot;your ans: &quot;</span>+ctx.<span class="built_in">hex</span>()).encode())</span><br><span class="line">        ans = self.recv(<span class="string">b&quot;token: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> token == ans:</span><br><span class="line">            f=<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            FLAG=f.read()</span><br><span class="line">            f.close()</span><br><span class="line">            self.send(FLAG)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&quot;wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.send(<span class="string">b&quot;try again!&quot;</span>)</span><br><span class="line">                self.close()</span><br><span class="line">                exit()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">                self.chal()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.send(<span class="string">b&quot;something wrong! plz try again!&quot;</span>)</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">12345</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>cons.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> sbox_linear</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">sbox_change = (</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x39</span>, <span class="number">0x47</span>, <span class="number">0x6d</span>, <span class="number">0xbb</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x58</span>, <span class="number">0x72</span>, <span class="number">0x0c</span>, <span class="number">0x26</span>, <span class="number">0xf0</span>, <span class="number">0xda</span>, <span class="number">0xa4</span>, <span class="number">0x8e</span>, </span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0xaf</span>, <span class="number">0xd1</span>, <span class="number">0xfb</span>, <span class="number">0x2d</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0xce</span>, <span class="number">0xe4</span>, <span class="number">0x9a</span>, <span class="number">0xb0</span>, <span class="number">0x66</span>, <span class="number">0x4c</span>, <span class="number">0x32</span>, <span class="number">0x18</span>, </span><br><span class="line">        <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x70</span>, <span class="number">0x0a</span>, <span class="number">0x8c</span>, <span class="number">0xa6</span>, <span class="number">0x5a</span>, <span class="number">0xf2</span>, <span class="number">0x6f</span>, <span class="number">0x45</span>, <span class="number">0x3b</span>, <span class="number">0x11</span>, <span class="number">0xc7</span>, <span class="number">0xed</span>, <span class="number">0x93</span>, <span class="number">0xb9</span>, </span><br><span class="line">        <span class="number">0xb2</span>, <span class="number">0x98</span>, <span class="number">0xe6</span>, <span class="number">0xcc</span>, <span class="number">0x1a</span>, <span class="number">0x30</span>, <span class="number">0x4e</span>, <span class="number">0x64</span>, <span class="number">0xf9</span>, <span class="number">0xd3</span>, <span class="number">0xad</span>, <span class="number">0x87</span>, <span class="number">0x51</span>, <span class="number">0x7b</span>, <span class="number">0x05</span>, <span class="number">0x2f</span>, </span><br><span class="line">        <span class="number">0x7d</span>, <span class="number">0x57</span>, <span class="number">0x29</span>, <span class="number">0x03</span>, <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0x81</span>, <span class="number">0xab</span>, <span class="number">0x36</span>, <span class="number">0x1c</span>, <span class="number">0x62</span>, <span class="number">0x48</span>, <span class="number">0x9e</span>, <span class="number">0xb4</span>, <span class="number">0xca</span>, <span class="number">0xe0</span>, </span><br><span class="line">        <span class="number">0xeb</span>, <span class="number">0xc1</span>, <span class="number">0xbf</span>, <span class="number">0x95</span>, <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0x17</span>, <span class="number">0x3d</span>, <span class="number">0xa0</span>, <span class="number">0x8a</span>, <span class="number">0xf4</span>, <span class="number">0xde</span>, <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0x5c</span>, <span class="number">0x76</span>, </span><br><span class="line">        <span class="number">0x4a</span>, <span class="number">0x60</span>, <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xe2</span>, <span class="number">0xc8</span>, <span class="number">0xb6</span>, <span class="number">0x9c</span>, <span class="number">0x01</span>, <span class="number">0x2b</span>, <span class="number">0x55</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x83</span>, <span class="number">0xfd</span>, <span class="number">0xd7</span>, </span><br><span class="line">        <span class="number">0xdc</span>, <span class="number">0xf6</span>, <span class="number">0x88</span>, <span class="number">0xa2</span>, <span class="number">0x74</span>, <span class="number">0x5e</span>, <span class="number">0x20</span>, <span class="number">0x15</span>, <span class="number">0x97</span>, <span class="number">0xbd</span>, <span class="number">0xc3</span>, <span class="number">0xe9</span>, <span class="number">0x3f</span>, <span class="number">0x59</span>, <span class="number">0x6b</span>, <span class="number">0x41</span>, </span><br><span class="line">        <span class="number">0xcf</span>, <span class="number">0xe5</span>, <span class="number">0x9b</span>, <span class="number">0xb1</span>, <span class="number">0x67</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x19</span>, <span class="number">0x84</span>, <span class="number">0xae</span>, <span class="number">0xd0</span>, <span class="number">0xfa</span>, <span class="number">0x2c</span>, <span class="number">0x06</span>, <span class="number">0x78</span>, <span class="number">0x52</span>, </span><br><span class="line">        <span class="number">0xd8</span>, <span class="number">0x73</span>, <span class="number">0x0d</span>, <span class="number">0x27</span>, <span class="number">0xf1</span>, <span class="number">0xdb</span>, <span class="number">0xa5</span>, <span class="number">0x8f</span>, <span class="number">0x12</span>, <span class="number">0x38</span>, <span class="number">0x46</span>, <span class="number">0x6c</span>, <span class="number">0xba</span>, <span class="number">0x90</span>, <span class="number">0xee</span>, <span class="number">0xc4</span>, </span><br><span class="line">        <span class="number">0xf8</span>, <span class="number">0xd2</span>, <span class="number">0xac</span>, <span class="number">0x86</span>, <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0x04</span>, <span class="number">0x2e</span>, <span class="number">0xb3</span>, <span class="number">0x99</span>, <span class="number">0xe7</span>, <span class="number">0xcd</span>, <span class="number">0x1b</span>, <span class="number">0x31</span>, <span class="number">0x4f</span>, <span class="number">0x65</span>, </span><br><span class="line">        <span class="number">0x6e</span>, <span class="number">0x44</span>, <span class="number">0x3a</span>, <span class="number">0x10</span>, <span class="number">0xc6</span>, <span class="number">0xec</span>, <span class="number">0x92</span>, <span class="number">0xb8</span>, <span class="number">0x25</span>, <span class="number">0x0f</span>, <span class="number">0x71</span>, <span class="number">0x5b</span>, <span class="number">0x8d</span>, <span class="number">0xa7</span>, <span class="number">0xd9</span>, <span class="number">0xf3</span>, </span><br><span class="line">        <span class="number">0xa1</span>, <span class="number">0x8b</span>, <span class="number">0xf5</span>, <span class="number">0xdf</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x5d</span>, <span class="number">0x77</span>, <span class="number">0xea</span>, <span class="number">0xc0</span>, <span class="number">0xbe</span>, <span class="number">0x94</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x16</span>, <span class="number">0x3c</span>, </span><br><span class="line">        <span class="number">0x37</span>, <span class="number">0x1d</span>, <span class="number">0x63</span>, <span class="number">0x49</span>, <span class="number">0x9f</span>, <span class="number">0xb5</span>, <span class="number">0xcb</span>, <span class="number">0xe1</span>, <span class="number">0x7c</span>, <span class="number">0x56</span>, <span class="number">0x28</span>, <span class="number">0x02</span>, <span class="number">0xd4</span>, <span class="number">0xfe</span>, <span class="number">0x80</span>, <span class="number">0xaa</span>, </span><br><span class="line">        <span class="number">0x96</span>, <span class="number">0xbc</span>, <span class="number">0xc2</span>, <span class="number">0xe8</span>, <span class="number">0x3e</span>, <span class="number">0x14</span>, <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0xdd</span>, <span class="number">0xf7</span>, <span class="number">0x89</span>, <span class="number">0xa3</span>, <span class="number">0x75</span>, <span class="number">0x5f</span>, <span class="number">0x21</span>, <span class="number">0x0b</span>, </span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x2a</span>, <span class="number">0x54</span>, <span class="number">0x7e</span>, <span class="number">0xa8</span>, <span class="number">0x82</span>, <span class="number">0xfc</span>, <span class="number">0xd6</span>, <span class="number">0x4b</span>, <span class="number">0x61</span>, <span class="number">0x1f</span>, <span class="number">0x35</span>, <span class="number">0xe3</span>, <span class="number">0xc9</span>, <span class="number">0xb7</span>, <span class="number">0x9d</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rcon = (<span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line">gmul2 = (</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0x0a</span>, <span class="number">0x0c</span>, <span class="number">0x0e</span>, <span class="number">0x10</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0x16</span>, <span class="number">0x18</span>, <span class="number">0x1a</span>, <span class="number">0x1c</span>, <span class="number">0x1e</span>, </span><br><span class="line">        <span class="number">0x20</span>, <span class="number">0x22</span>, <span class="number">0x24</span>, <span class="number">0x26</span>, <span class="number">0x28</span>, <span class="number">0x2a</span>, <span class="number">0x2c</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x32</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x3a</span>, <span class="number">0x3c</span>, <span class="number">0x3e</span>, </span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x42</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x48</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x4e</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x56</span>, <span class="number">0x58</span>, <span class="number">0x5a</span>, <span class="number">0x5c</span>, <span class="number">0x5e</span>, </span><br><span class="line">        <span class="number">0x60</span>, <span class="number">0x62</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x6a</span>, <span class="number">0x6c</span>, <span class="number">0x6e</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x76</span>, <span class="number">0x78</span>, <span class="number">0x7a</span>, <span class="number">0x7c</span>, <span class="number">0x7e</span>, </span><br><span class="line">        <span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x86</span>, <span class="number">0x88</span>, <span class="number">0x8a</span>, <span class="number">0x8c</span>, <span class="number">0x8e</span>, <span class="number">0x90</span>, <span class="number">0x92</span>, <span class="number">0x94</span>, <span class="number">0x96</span>, <span class="number">0x98</span>, <span class="number">0x9a</span>, <span class="number">0x9c</span>, <span class="number">0x9e</span>, </span><br><span class="line">        <span class="number">0xa0</span>, <span class="number">0xa2</span>, <span class="number">0xa4</span>, <span class="number">0xa6</span>, <span class="number">0xa8</span>, <span class="number">0xaa</span>, <span class="number">0xac</span>, <span class="number">0xae</span>, <span class="number">0xb0</span>, <span class="number">0xb2</span>, <span class="number">0xb4</span>, <span class="number">0xb6</span>, <span class="number">0xb8</span>, <span class="number">0xba</span>, <span class="number">0xbc</span>, <span class="number">0xbe</span>, </span><br><span class="line">        <span class="number">0xc0</span>, <span class="number">0xc2</span>, <span class="number">0xc4</span>, <span class="number">0xc6</span>, <span class="number">0xc8</span>, <span class="number">0xca</span>, <span class="number">0xcc</span>, <span class="number">0xce</span>, <span class="number">0xd0</span>, <span class="number">0xd2</span>, <span class="number">0xd4</span>, <span class="number">0xd6</span>, <span class="number">0xd8</span>, <span class="number">0xda</span>, <span class="number">0xdc</span>, <span class="number">0xde</span>, </span><br><span class="line">        <span class="number">0xe0</span>, <span class="number">0xe2</span>, <span class="number">0xe4</span>, <span class="number">0xe6</span>, <span class="number">0xe8</span>, <span class="number">0xea</span>, <span class="number">0xec</span>, <span class="number">0xee</span>, <span class="number">0xf0</span>, <span class="number">0xf2</span>, <span class="number">0xf4</span>, <span class="number">0xf6</span>, <span class="number">0xf8</span>, <span class="number">0xfa</span>, <span class="number">0xfc</span>, <span class="number">0xfe</span>, </span><br><span class="line">        <span class="number">0x1b</span>, <span class="number">0x19</span>, <span class="number">0x1f</span>, <span class="number">0x1d</span>, <span class="number">0x13</span>, <span class="number">0x11</span>, <span class="number">0x17</span>, <span class="number">0x15</span>, <span class="number">0x0b</span>, <span class="number">0x09</span>, <span class="number">0x0f</span>, <span class="number">0x0d</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, </span><br><span class="line">        <span class="number">0x3b</span>, <span class="number">0x39</span>, <span class="number">0x3f</span>, <span class="number">0x3d</span>, <span class="number">0x33</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0x35</span>, <span class="number">0x2b</span>, <span class="number">0x29</span>, <span class="number">0x2f</span>, <span class="number">0x2d</span>, <span class="number">0x23</span>, <span class="number">0x21</span>, <span class="number">0x27</span>, <span class="number">0x25</span>, </span><br><span class="line">        <span class="number">0x5b</span>, <span class="number">0x59</span>, <span class="number">0x5f</span>, <span class="number">0x5d</span>, <span class="number">0x53</span>, <span class="number">0x51</span>, <span class="number">0x57</span>, <span class="number">0x55</span>, <span class="number">0x4b</span>, <span class="number">0x49</span>, <span class="number">0x4f</span>, <span class="number">0x4d</span>, <span class="number">0x43</span>, <span class="number">0x41</span>, <span class="number">0x47</span>, <span class="number">0x45</span>, </span><br><span class="line">        <span class="number">0x7b</span>, <span class="number">0x79</span>, <span class="number">0x7f</span>, <span class="number">0x7d</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x6b</span>, <span class="number">0x69</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, </span><br><span class="line">        <span class="number">0x9b</span>, <span class="number">0x99</span>, <span class="number">0x9f</span>, <span class="number">0x9d</span>, <span class="number">0x93</span>, <span class="number">0x91</span>, <span class="number">0x97</span>, <span class="number">0x95</span>, <span class="number">0x8b</span>, <span class="number">0x89</span>, <span class="number">0x8f</span>, <span class="number">0x8d</span>, <span class="number">0x83</span>, <span class="number">0x81</span>, <span class="number">0x87</span>, <span class="number">0x85</span>, </span><br><span class="line">        <span class="number">0xbb</span>, <span class="number">0xb9</span>, <span class="number">0xbf</span>, <span class="number">0xbd</span>, <span class="number">0xb3</span>, <span class="number">0xb1</span>, <span class="number">0xb7</span>, <span class="number">0xb5</span>, <span class="number">0xab</span>, <span class="number">0xa9</span>, <span class="number">0xaf</span>, <span class="number">0xad</span>, <span class="number">0xa3</span>, <span class="number">0xa1</span>, <span class="number">0xa7</span>, <span class="number">0xa5</span>, </span><br><span class="line">        <span class="number">0xdb</span>, <span class="number">0xd9</span>, <span class="number">0xdf</span>, <span class="number">0xdd</span>, <span class="number">0xd3</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0xd5</span>, <span class="number">0xcb</span>, <span class="number">0xc9</span>, <span class="number">0xcf</span>, <span class="number">0xcd</span>, <span class="number">0xc3</span>, <span class="number">0xc1</span>, <span class="number">0xc7</span>, <span class="number">0xc5</span>, </span><br><span class="line">        <span class="number">0xfb</span>, <span class="number">0xf9</span>, <span class="number">0xff</span>, <span class="number">0xfd</span>, <span class="number">0xf3</span>, <span class="number">0xf1</span>, <span class="number">0xf7</span>, <span class="number">0xf5</span>, <span class="number">0xeb</span>, <span class="number">0xe9</span>, <span class="number">0xef</span>, <span class="number">0xed</span>, <span class="number">0xe3</span>, <span class="number">0xe1</span>, <span class="number">0xe7</span>, <span class="number">0xe5</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">gmul3 = (</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x0c</span>, <span class="number">0x0f</span>, <span class="number">0x0a</span>, <span class="number">0x09</span>, <span class="number">0x18</span>, <span class="number">0x1b</span>, <span class="number">0x1e</span>, <span class="number">0x1d</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, </span><br><span class="line">        <span class="number">0x30</span>, <span class="number">0x33</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x3c</span>, <span class="number">0x3f</span>, <span class="number">0x3a</span>, <span class="number">0x39</span>, <span class="number">0x28</span>, <span class="number">0x2b</span>, <span class="number">0x2e</span>, <span class="number">0x2d</span>, <span class="number">0x24</span>, <span class="number">0x27</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, </span><br><span class="line">        <span class="number">0x60</span>, <span class="number">0x63</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x6a</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x7b</span>, <span class="number">0x7e</span>, <span class="number">0x7d</span>, <span class="number">0x74</span>, <span class="number">0x77</span>, <span class="number">0x72</span>, <span class="number">0x71</span>, </span><br><span class="line">        <span class="number">0x50</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x5c</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0x4b</span>, <span class="number">0x4e</span>, <span class="number">0x4d</span>, <span class="number">0x44</span>, <span class="number">0x47</span>, <span class="number">0x42</span>, <span class="number">0x41</span>, </span><br><span class="line">        <span class="number">0xc0</span>, <span class="number">0xc3</span>, <span class="number">0xc6</span>, <span class="number">0xc5</span>, <span class="number">0xcc</span>, <span class="number">0xcf</span>, <span class="number">0xca</span>, <span class="number">0xc9</span>, <span class="number">0xd8</span>, <span class="number">0xdb</span>, <span class="number">0xde</span>, <span class="number">0xdd</span>, <span class="number">0xd4</span>, <span class="number">0xd7</span>, <span class="number">0xd2</span>, <span class="number">0xd1</span>, </span><br><span class="line">        <span class="number">0xf0</span>, <span class="number">0xf3</span>, <span class="number">0xf6</span>, <span class="number">0xf5</span>, <span class="number">0xfc</span>, <span class="number">0xff</span>, <span class="number">0xfa</span>, <span class="number">0xf9</span>, <span class="number">0xe8</span>, <span class="number">0xeb</span>, <span class="number">0xee</span>, <span class="number">0xed</span>, <span class="number">0xe4</span>, <span class="number">0xe7</span>, <span class="number">0xe2</span>, <span class="number">0xe1</span>, </span><br><span class="line">        <span class="number">0xa0</span>, <span class="number">0xa3</span>, <span class="number">0xa6</span>, <span class="number">0xa5</span>, <span class="number">0xac</span>, <span class="number">0xaf</span>, <span class="number">0xaa</span>, <span class="number">0xa9</span>, <span class="number">0xb8</span>, <span class="number">0xbb</span>, <span class="number">0xbe</span>, <span class="number">0xbd</span>, <span class="number">0xb4</span>, <span class="number">0xb7</span>, <span class="number">0xb2</span>, <span class="number">0xb1</span>, </span><br><span class="line">        <span class="number">0x90</span>, <span class="number">0x93</span>, <span class="number">0x96</span>, <span class="number">0x95</span>, <span class="number">0x9c</span>, <span class="number">0x9f</span>, <span class="number">0x9a</span>, <span class="number">0x99</span>, <span class="number">0x88</span>, <span class="number">0x8b</span>, <span class="number">0x8e</span>, <span class="number">0x8d</span>, <span class="number">0x84</span>, <span class="number">0x87</span>, <span class="number">0x82</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x9b</span>, <span class="number">0x98</span>, <span class="number">0x9d</span>, <span class="number">0x9e</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x83</span>, <span class="number">0x80</span>, <span class="number">0x85</span>, <span class="number">0x86</span>, <span class="number">0x8f</span>, <span class="number">0x8c</span>, <span class="number">0x89</span>, <span class="number">0x8a</span>, </span><br><span class="line">        <span class="number">0xab</span>, <span class="number">0xa8</span>, <span class="number">0xad</span>, <span class="number">0xae</span>, <span class="number">0xa7</span>, <span class="number">0xa4</span>, <span class="number">0xa1</span>, <span class="number">0xa2</span>, <span class="number">0xb3</span>, <span class="number">0xb0</span>, <span class="number">0xb5</span>, <span class="number">0xb6</span>, <span class="number">0xbf</span>, <span class="number">0xbc</span>, <span class="number">0xb9</span>, <span class="number">0xba</span>, </span><br><span class="line">        <span class="number">0xfb</span>, <span class="number">0xf8</span>, <span class="number">0xfd</span>, <span class="number">0xfe</span>, <span class="number">0xf7</span>, <span class="number">0xf4</span>, <span class="number">0xf1</span>, <span class="number">0xf2</span>, <span class="number">0xe3</span>, <span class="number">0xe0</span>, <span class="number">0xe5</span>, <span class="number">0xe6</span>, <span class="number">0xef</span>, <span class="number">0xec</span>, <span class="number">0xe9</span>, <span class="number">0xea</span>, </span><br><span class="line">        <span class="number">0xcb</span>, <span class="number">0xc8</span>, <span class="number">0xcd</span>, <span class="number">0xce</span>, <span class="number">0xc7</span>, <span class="number">0xc4</span>, <span class="number">0xc1</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xd0</span>, <span class="number">0xd5</span>, <span class="number">0xd6</span>, <span class="number">0xdf</span>, <span class="number">0xdc</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>, </span><br><span class="line">        <span class="number">0x5b</span>, <span class="number">0x58</span>, <span class="number">0x5d</span>, <span class="number">0x5e</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x4f</span>, <span class="number">0x4c</span>, <span class="number">0x49</span>, <span class="number">0x4a</span>, </span><br><span class="line">        <span class="number">0x6b</span>, <span class="number">0x68</span>, <span class="number">0x6d</span>, <span class="number">0x6e</span>, <span class="number">0x67</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x73</span>, <span class="number">0x70</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x7f</span>, <span class="number">0x7c</span>, <span class="number">0x79</span>, <span class="number">0x7a</span>, </span><br><span class="line">        <span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x3d</span>, <span class="number">0x3e</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x23</span>, <span class="number">0x20</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x2f</span>, <span class="number">0x2c</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>, </span><br><span class="line">        <span class="number">0x0b</span>, <span class="number">0x08</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x13</span>, <span class="number">0x10</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x1f</span>, <span class="number">0x1c</span>, <span class="number">0x19</span>, <span class="number">0x1a</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">assert</span>(<span class="number">5</span>&lt;=<span class="built_in">sum</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(sbox_change,sbox_linear)])&lt;<span class="number">0x500</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="number">5</span>&lt;=<span class="built_in">sum</span>([(i-j)&amp;<span class="number">0xff</span> <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(sbox_change,sbox_linear)])&lt;<span class="number">0x500</span>)</span><br><span class="line">    key=sha256(<span class="built_in">bytes</span>(sbox_linear)).digest()</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&quot;hint.py&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    hints=f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    cipher=AES.new(key,AES.MODE_ECB)</span><br><span class="line">    hints_enc=cipher.encrypt(pad(hints,<span class="number">16</span>))</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&quot;hint.py.enc&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    f.write(hints_enc)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<p>还有一个AES的具体实现，和加密后的hint，需要全部附件的师傅可以找我要。</p>
<p>这个题抢到一个一血，值得纪念。回到题目，还是简单分析一下题目任务：</p>
<ul>
<li>通过proof</li>
<li>随机生成16字节的AES密钥，并随机生成一个十六字节且每个字节都是十六进制数的token</li>
<li>首先给出用他的AES加密后的token</li>
<li>然后，我们可以输入一段值，并获得这段值用他的AES加密的结果</li>
<li>最后我们需要用这些信息解出token值并传回给他，token正确就能得到flag</li>
<li>有一个需要额外注意的点，就是每一次连接靶机有一千次机会可以传回token，正确一次就可以得到flag。所以解决这题应该是个概率性的问题</li>
</ul>
<p>那么首先观察他的AES究竟做了一些什么变化，测试出来其实就是S盒改变了而已。结合题目提示，这个S盒肯定有不安全的地方。这一部分让我想到前一段时间做的羊城杯决赛的newAES一题，于是我先分析一下这个S盒的抗差分性质，然后发现果然这个S盒的抗差分性质非常差。</p>
<p>对于S盒的差分分析不太清楚的可以看看我写的这篇：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/a5bd8c0d.html">Crypto趣题-分组密码 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>但是，newAES那个题目中，他的S盒是完全差分可逆的，但是这一题的S盒只是抗差分性质较差，并不完全可逆。这里我具体列举一下差分分布表的其中一行让大家可以看出区别：</p>
<p>正常S盒：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>羊城杯那题S盒的差分分布：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>本题S盒的差分分布：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">246</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>对于完全差分可逆的S盒(如羊城杯那题的S盒)，我们拥有输入的值的密文以及token的密文，所以就有密文差分，然后由于差分可逆，就可以逐步将差分逆回去得到明文差分，然后将明文差分与我们的输入值异或，就得到了token。</p>
<p>而本题S盒虽然并不是完全差分可逆的，但是可以观察到，他的差分分布仍然极不均匀，一个明文差分在经历S盒后，大部分会集中在另一个差分。因此，我们可以把这个集中分布的差分视作是差分可逆的，去求解我们的密文差分。而只要我们随机到一个token，使其与我们的输入密文满足AES中所有差分均对应在这个集中分布的差分上，就可以解出token。因此解法是概率性的，具体的概率我简单想了一下，应该是这样计算：记AES中用到差分S盒的次数为n，那么成功概率应该是：</p>
<script type="math/tex; mode=display">
P = (\frac{246}{256})^n</script><p>理论上来说非常低，但是既然提供了多次交互次数，那么由生日攻击的原理知道，我们交互多次就有大概率得到一组满足题意的解。</p>
<p>这就是我的做法，我赛中连接几十次靶机就随机到了一组满足条件的token值，进而获得flag。这个解法也并没有用到题目的hint，所以可能有其他进一步的优化方法可以提高这个概率，使其能在一次连接靶机内就随机出能解的token。(因为并没有具体计算这个概率为多大，所以也可能是运气非常好，才能在几十次内得到解)</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Rcon = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    text = <span class="built_in">int</span>(text.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2text</span>(<span class="params">matrix</span>):</span><br><span class="line">    text = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text |= (matrix[i][j] &lt;&lt; (<span class="number">120</span> - <span class="number">8</span> * (<span class="number">4</span> * i + j)))</span><br><span class="line">    <span class="keyword">return</span> text.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Sbox</span>):</span><br><span class="line">        self.Sbox = Sbox</span><br><span class="line">        self.InvSbox = [<span class="number">0</span>]* <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            self.InvSbox[self.Sbox[i]] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        self.cipher_state = text2matrix(ciphertext)</span><br><span class="line">        self.__inv_shift_rows(self.cipher_state)</span><br><span class="line">        self.__inv_sub_bytes(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.__round_decrypt(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_decrypt</span>(<span class="params">self, state_matrix</span>):</span><br><span class="line">        self.__inv_mix_columns(state_matrix)</span><br><span class="line">        self.__inv_shift_rows(state_matrix)</span><br><span class="line">        self.__inv_sub_bytes(state_matrix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.InvSbox[s[i][j]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_single_column</span>(<span class="params">self, a</span>):</span><br><span class="line">        t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">        u = a[<span class="number">0</span>]</span><br><span class="line">        a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">        a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">        a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">        a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.__mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">            s[i][<span class="number">0</span>] ^= u</span><br><span class="line">            s[i][<span class="number">1</span>] ^= v</span><br><span class="line">            s[i][<span class="number">2</span>] ^= u</span><br><span class="line">            s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">        self.__mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sbox_diff</span>(<span class="params">sbox</span>):          </span><br><span class="line">    t = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            t[i^j][sbox[i]^sbox[j]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    sbox_diff = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> t[i][j] == <span class="number">246</span>:</span><br><span class="line">                sbox_diff[i] = j</span><br><span class="line">    <span class="keyword">return</span> sbox_diff</span><br><span class="line"></span><br><span class="line">sbox = (</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x39</span>, <span class="number">0x47</span>, <span class="number">0x6d</span>, <span class="number">0xbb</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x58</span>, <span class="number">0x72</span>, <span class="number">0x0c</span>, <span class="number">0x26</span>, <span class="number">0xf0</span>, <span class="number">0xda</span>, <span class="number">0xa4</span>, <span class="number">0x8e</span>, </span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0xaf</span>, <span class="number">0xd1</span>, <span class="number">0xfb</span>, <span class="number">0x2d</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0xce</span>, <span class="number">0xe4</span>, <span class="number">0x9a</span>, <span class="number">0xb0</span>, <span class="number">0x66</span>, <span class="number">0x4c</span>, <span class="number">0x32</span>, <span class="number">0x18</span>, </span><br><span class="line">        <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x70</span>, <span class="number">0x0a</span>, <span class="number">0x8c</span>, <span class="number">0xa6</span>, <span class="number">0x5a</span>, <span class="number">0xf2</span>, <span class="number">0x6f</span>, <span class="number">0x45</span>, <span class="number">0x3b</span>, <span class="number">0x11</span>, <span class="number">0xc7</span>, <span class="number">0xed</span>, <span class="number">0x93</span>, <span class="number">0xb9</span>, </span><br><span class="line">        <span class="number">0xb2</span>, <span class="number">0x98</span>, <span class="number">0xe6</span>, <span class="number">0xcc</span>, <span class="number">0x1a</span>, <span class="number">0x30</span>, <span class="number">0x4e</span>, <span class="number">0x64</span>, <span class="number">0xf9</span>, <span class="number">0xd3</span>, <span class="number">0xad</span>, <span class="number">0x87</span>, <span class="number">0x51</span>, <span class="number">0x7b</span>, <span class="number">0x05</span>, <span class="number">0x2f</span>, </span><br><span class="line">        <span class="number">0x7d</span>, <span class="number">0x57</span>, <span class="number">0x29</span>, <span class="number">0x03</span>, <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0x81</span>, <span class="number">0xab</span>, <span class="number">0x36</span>, <span class="number">0x1c</span>, <span class="number">0x62</span>, <span class="number">0x48</span>, <span class="number">0x9e</span>, <span class="number">0xb4</span>, <span class="number">0xca</span>, <span class="number">0xe0</span>, </span><br><span class="line">        <span class="number">0xeb</span>, <span class="number">0xc1</span>, <span class="number">0xbf</span>, <span class="number">0x95</span>, <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0x17</span>, <span class="number">0x3d</span>, <span class="number">0xa0</span>, <span class="number">0x8a</span>, <span class="number">0xf4</span>, <span class="number">0xde</span>, <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0x5c</span>, <span class="number">0x76</span>, </span><br><span class="line">        <span class="number">0x4a</span>, <span class="number">0x60</span>, <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xe2</span>, <span class="number">0xc8</span>, <span class="number">0xb6</span>, <span class="number">0x9c</span>, <span class="number">0x01</span>, <span class="number">0x2b</span>, <span class="number">0x55</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x83</span>, <span class="number">0xfd</span>, <span class="number">0xd7</span>, </span><br><span class="line">        <span class="number">0xdc</span>, <span class="number">0xf6</span>, <span class="number">0x88</span>, <span class="number">0xa2</span>, <span class="number">0x74</span>, <span class="number">0x5e</span>, <span class="number">0x20</span>, <span class="number">0x15</span>, <span class="number">0x97</span>, <span class="number">0xbd</span>, <span class="number">0xc3</span>, <span class="number">0xe9</span>, <span class="number">0x3f</span>, <span class="number">0x59</span>, <span class="number">0x6b</span>, <span class="number">0x41</span>, </span><br><span class="line">        <span class="number">0xcf</span>, <span class="number">0xe5</span>, <span class="number">0x9b</span>, <span class="number">0xb1</span>, <span class="number">0x67</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x19</span>, <span class="number">0x84</span>, <span class="number">0xae</span>, <span class="number">0xd0</span>, <span class="number">0xfa</span>, <span class="number">0x2c</span>, <span class="number">0x06</span>, <span class="number">0x78</span>, <span class="number">0x52</span>, </span><br><span class="line">        <span class="number">0xd8</span>, <span class="number">0x73</span>, <span class="number">0x0d</span>, <span class="number">0x27</span>, <span class="number">0xf1</span>, <span class="number">0xdb</span>, <span class="number">0xa5</span>, <span class="number">0x8f</span>, <span class="number">0x12</span>, <span class="number">0x38</span>, <span class="number">0x46</span>, <span class="number">0x6c</span>, <span class="number">0xba</span>, <span class="number">0x90</span>, <span class="number">0xee</span>, <span class="number">0xc4</span>, </span><br><span class="line">        <span class="number">0xf8</span>, <span class="number">0xd2</span>, <span class="number">0xac</span>, <span class="number">0x86</span>, <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0x04</span>, <span class="number">0x2e</span>, <span class="number">0xb3</span>, <span class="number">0x99</span>, <span class="number">0xe7</span>, <span class="number">0xcd</span>, <span class="number">0x1b</span>, <span class="number">0x31</span>, <span class="number">0x4f</span>, <span class="number">0x65</span>, </span><br><span class="line">        <span class="number">0x6e</span>, <span class="number">0x44</span>, <span class="number">0x3a</span>, <span class="number">0x10</span>, <span class="number">0xc6</span>, <span class="number">0xec</span>, <span class="number">0x92</span>, <span class="number">0xb8</span>, <span class="number">0x25</span>, <span class="number">0x0f</span>, <span class="number">0x71</span>, <span class="number">0x5b</span>, <span class="number">0x8d</span>, <span class="number">0xa7</span>, <span class="number">0xd9</span>, <span class="number">0xf3</span>, </span><br><span class="line">        <span class="number">0xa1</span>, <span class="number">0x8b</span>, <span class="number">0xf5</span>, <span class="number">0xdf</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x5d</span>, <span class="number">0x77</span>, <span class="number">0xea</span>, <span class="number">0xc0</span>, <span class="number">0xbe</span>, <span class="number">0x94</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x16</span>, <span class="number">0x3c</span>, </span><br><span class="line">        <span class="number">0x37</span>, <span class="number">0x1d</span>, <span class="number">0x63</span>, <span class="number">0x49</span>, <span class="number">0x9f</span>, <span class="number">0xb5</span>, <span class="number">0xcb</span>, <span class="number">0xe1</span>, <span class="number">0x7c</span>, <span class="number">0x56</span>, <span class="number">0x28</span>, <span class="number">0x02</span>, <span class="number">0xd4</span>, <span class="number">0xfe</span>, <span class="number">0x80</span>, <span class="number">0xaa</span>, </span><br><span class="line">        <span class="number">0x96</span>, <span class="number">0xbc</span>, <span class="number">0xc2</span>, <span class="number">0xe8</span>, <span class="number">0x3e</span>, <span class="number">0x14</span>, <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0xdd</span>, <span class="number">0xf7</span>, <span class="number">0x89</span>, <span class="number">0xa3</span>, <span class="number">0x75</span>, <span class="number">0x5f</span>, <span class="number">0x21</span>, <span class="number">0x0b</span>, </span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x2a</span>, <span class="number">0x54</span>, <span class="number">0x7e</span>, <span class="number">0xa8</span>, <span class="number">0x82</span>, <span class="number">0xfc</span>, <span class="number">0xd6</span>, <span class="number">0x4b</span>, <span class="number">0x61</span>, <span class="number">0x1f</span>, <span class="number">0x35</span>, <span class="number">0xe3</span>, <span class="number">0xc9</span>, <span class="number">0xb7</span>, <span class="number">0x9d</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line">aes = AES(Sbox=get_sbox_diff(sbox))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;pwn-8ffbe21dcb.challenge.xctf.org.cn&quot;</span>, <span class="number">9999</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">    proof_of_work()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;flag: &quot;</span>)</span><br><span class="line">        c1 = r.recvline().strip().decode()</span><br><span class="line">        <span class="comment">#print(c1)</span></span><br><span class="line">        r.recvuntil(<span class="string">b&quot;try: &quot;</span>)</span><br><span class="line"></span><br><span class="line">        m2 = <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span></span><br><span class="line">        r.sendline(<span class="string">b&quot;0&quot;</span>*<span class="number">32</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;your ans: &quot;</span>)</span><br><span class="line">        c2 = r.recvline().strip().decode()</span><br><span class="line">        <span class="comment">#print(c2)</span></span><br><span class="line">        r.recvuntil(<span class="string">b&quot;token: &quot;</span>)</span><br><span class="line"></span><br><span class="line">        c1 = long_to_bytes(<span class="built_in">int</span>(c1,<span class="number">16</span>))</span><br><span class="line">        c2 = long_to_bytes(<span class="built_in">int</span>(c2,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">        diff1 = xor(c1,c2)</span><br><span class="line">        temp1 = aes.decrypt(diff1)</span><br><span class="line">        t = xor(temp1,m2)</span><br><span class="line">        <span class="comment">#print(t)</span></span><br><span class="line">        r.sendline(t)</span><br><span class="line"></span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br><span class="line">            exit()</span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;vnJnqLauu29C0nBEJ9FVgWkeyNR2meC4&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="doublecheck"><a href="#doublecheck" class="headerlink" title="*doublecheck"></a>*doublecheck</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的加密机不知道为什么莫名其妙坏了，输出的密文好像总是有些问题……不过既然如此，那我就有了一个新的加密机，一起使用的话，满足同时绕过两个加密机可就难喽~</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> popen, urandom</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">            [choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;[+] sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.send(<span class="string">b&quot;try again!&quot;</span>)</span><br><span class="line">                self.close()</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            key = <span class="built_in">hex</span>(getrandbits(<span class="number">128</span>))[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">            pts = <span class="built_in">hex</span>(getrandbits(<span class="number">64</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            ptsh = pts.encode().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">            cts1 = popen(<span class="string">&quot;./cipher &quot;</span>+key+<span class="string">&quot; &quot;</span>+ptsh).read()[:-<span class="number">1</span>].encode()</span><br><span class="line">            cts2 = popen(<span class="string">&quot;./cipher_broken &quot;</span>+key+<span class="string">&quot; &quot;</span>+ptsh).read()[:-<span class="number">1</span>].encode()</span><br><span class="line">            self.send(<span class="string">b&quot;T: &quot;</span>+cts1)</span><br><span class="line">            self.send(<span class="string">b&quot;F: &quot;</span>+cts2)</span><br><span class="line">            signal.alarm(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">            ans = self.recv()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ans == pts.encode():</span><br><span class="line">                f=<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">                FLAG=f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                self.send(FLAG)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;sorry,plz try again&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.send(<span class="string">b&quot;something wrong! plz try again!&quot;</span>)</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">12345</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>题目任务挺简单的，总结一下就是：</p>
<ul>
<li>通过proof</li>
<li>随机生成16字节的key，并随机生成一个十六字节且每个字节都是十六进制数的pts</li>
<li>将pts分别用cipher、cipher_broken进行加密，并给出两个密文</li>
<li>传给靶机pts，如果正确则得到flag</li>
</ul>
<p>那么核心任务就是找到两个加密文件的区别，并找出这个区别会对密文分别造成什么影响，然后用这个泄露信息去解密。</p>
<p>拖进IDA里看看加密过程，发现两个cipher其实都是标准AES加密，代码部分没有任何不同。那么应该也是改变了AES中的某个常量，进一步就会发现，cipher_broken的密钥扩展中的轮常量的倒数第二个值发生了变化。</p>
<p>正常的是：</p>
<p><img src="/post/e69bccb7/image-20231112102552264.png" alt="image-20231112102552264"></p>
<p>broken的是：</p>
<p><img src="/post/e69bccb7/image-20231112102541006.png" alt="image-20231112102541006"></p>
<p>那么就要通过这个区别来想办法解AES。然后我的思路如下(看不太明白的师傅可以熟悉一下AES的加密流程)：</p>
<h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><p>我的思路主要是利用第十轮解密以及第十轮密钥扩展来对第十轮密钥进行逐字节爆破：</p>
<h5 id="利用第十轮解密"><a href="#利用第十轮解密" class="headerlink" title="利用第十轮解密"></a>利用第十轮解密</h5><p>由于第九轮轮常量有区别，因此密钥扩展算法后的第九轮和第十轮轮密钥会受到影响。换一个角度，这也就是说在进行第九轮的轮密钥加之前，两个AES加密得到的结果都是完全一样的，也就是下图中，红线部分的值对于两个AES都相同，在第九轮轮密钥加之后开始产生区别：</p>
<p><img src="/post/e69bccb7/image-20231112102949899.png" alt="image-20231112102949899"></p>
<p>而由于第九轮轮常量的不同，两个AES的第九轮轮密钥会产生如下的区别(左为正常AES第九轮轮密钥，右为broken的第九轮轮密钥)：</p>
<p><img src="/post/e69bccb7/image-20231112103533388.png" alt="image-20231112103533388"></p>
<p>而现在我们拥有密文，我们可以用中间相遇攻击的类似思路来逐字节爆破第十轮轮密钥，然后有了完整的第十轮轮密钥的话就可以用AES子密钥泄漏来反推所有密钥，进而解得AES明文。逐字节爆破的思路如下，这里我以第一次爆破为例：</p>
<ul>
<li>爆破正常第十轮轮密钥的第一个字节，和broken第十轮轮密钥的第一个字节</li>
<li>将两个密文的第一个字节经过第十轮的逆轮密钥加-&gt;逆行移位-&gt;逆字节代换后，得到两个第九轮的轮密钥加之后的值，也就是下图黄线处的值：</li>
</ul>
<p><img src="/post/e69bccb7/image-20231112104102983.png" alt="image-20231112104102983"></p>
<ul>
<li>然后，由于两个AES的第九轮轮密钥差分是固定的，因此两个密文的差分应该也是固定的。比如对于第一个字节来说，黄线处的值差分应该等于1</li>
<li>满足上面条件的就是可能的第十轮轮密钥的第一个字节</li>
</ul>
<p>这样爆破完后，会发现每一个密钥仍然有256种可能性(注意一次其实是爆破两个字节，所以这里将可能性由2^16降到了2^8，确实是有效果的)。这里要注意：轮密钥有多种可能性是可以接受的，因为我们可以检查解出的密文是不是每个字节均是16进制字符。但是，显然这里的可能性还是太多了。因此还要想办法再降。</p>
<h5 id="利用第十轮密钥扩展"><a href="#利用第十轮密钥扩展" class="headerlink" title="利用第十轮密钥扩展"></a>利用第十轮密钥扩展</h5><p>然后下一步我的做法就是利用密钥扩展算法：</p>
<p><img src="/post/e69bccb7/image-20231112104654806.png" alt="image-20231112104654806"></p>
<p>也就是，我们将上一步的第十轮轮密钥的所有可能值爆破完后，继续逐字节爆破第九轮轮密钥的每个字节，并检查密钥扩展得到的两个第十轮密钥的这个字节是否在刚才得到的所有可能性里，如果不在的话，就可以从第十轮密钥的可能值中剔除掉，并且这一步是可以反复做的。经过测试发现，这样最多五轮后就无法再降低可能性，第十轮轮密钥的每个字节降低到了六十对左右(要记得这里本来是2^16对，到这里已经降低了很多)。</p>
<p>但是复杂度依然是不可接受的，我们还需要进一步减少第十轮轮密钥的可能性，但是我就没有想到进一步的做法了。</p>
<p>爆破脚本的本地实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> AES_T <span class="keyword">import</span> AES_T</span><br><span class="line"><span class="keyword">from</span> AES_F <span class="keyword">import</span> AES_F</span><br><span class="line"></span><br><span class="line">s_box = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line">inv_sbox = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    inv_sbox[s_box[i]] = i</span><br><span class="line"></span><br><span class="line">key = bytes_to_long(os.urandom(<span class="number">16</span>))</span><br><span class="line">plaintext = <span class="string">b&quot;flagflagflagflag&quot;</span></span><br><span class="line"><span class="comment">#T</span></span><br><span class="line">aes = AES_T()</span><br><span class="line">RoundKeys1 = aes.round_key_generator(key)</span><br><span class="line">cipher_T = aes.aes_encrypt(plaintext, RoundKeys1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#F</span></span><br><span class="line">aes = AES_F()</span><br><span class="line">RoundKeys2 = aes.round_key_generator(key)</span><br><span class="line">cipher_F = aes.aes_encrypt(plaintext, RoundKeys2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#逐字节爆破两个AES的第十轮轮密钥</span></span><br><span class="line">key_10_dic = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">        key10_1 = j&amp;<span class="number">0xff</span></span><br><span class="line">        key10_2 = j&gt;&gt;<span class="number">8</span></span><br><span class="line">        cT = cipher_T[i]</span><br><span class="line">        cF = cipher_F[i]</span><br><span class="line">        cT ^= key10_1</span><br><span class="line">        cF ^= key10_2</span><br><span class="line">        <span class="comment">#行移位可以不管，因为都在同一行，差分相同</span></span><br><span class="line">        cT = inv_sbox[cT]</span><br><span class="line">        cF = inv_sbox[cF]</span><br><span class="line"></span><br><span class="line">        table = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">        <span class="keyword">if</span>(cT == cF ^ table[i%<span class="number">4</span>]):</span><br><span class="line">            key_10_dic[i].append((key10_1,key10_2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#check</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key_10_dic)):</span><br><span class="line">        <span class="built_in">print</span>((RoundKeys1[-<span class="number">1</span>][i],RoundKeys2[-<span class="number">1</span>][i]) <span class="keyword">in</span> key_10_dic[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#反复去重</span></span><br><span class="line">key9 = [[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">key9_ = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="keyword">for</span> op <span class="keyword">in</span> trange(<span class="number">5</span>):</span><br><span class="line">    ti = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">if</span>(op &gt;= <span class="number">1</span>):</span><br><span class="line">        key9 = key9_</span><br><span class="line">        key9_ = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="comment">#第九轮密钥的前四个，有T函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> key9[i]:</span><br><span class="line">            key9_1 = <span class="built_in">int</span>(j)</span><br><span class="line">            table1 = [<span class="number">0x36</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            table2 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">            table3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> key_10_dic[i]:</span><br><span class="line">                temp1 = k[<span class="number">0</span>]</span><br><span class="line">                temp2 = k[<span class="number">1</span>]</span><br><span class="line">                key9_13_1 = inv_sbox[temp1 ^ key9_1 ^ table1[i%<span class="number">4</span>]]</span><br><span class="line">                key9_13_2 = inv_sbox[temp2 ^ (key9_1^table3[i%<span class="number">4</span>]) ^ table1[i%<span class="number">4</span>]]</span><br><span class="line">                <span class="keyword">if</span>(key9_13_1 == (key9_13_2^table2[i])):</span><br><span class="line">                    ti[i].append((temp1,temp2))</span><br><span class="line">                    key9_[i].append(key9_1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#第九轮密钥的后十二个，无T函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">            key9_1 = j&amp;<span class="number">0xff</span></span><br><span class="line">            key9_13 = j&gt;&gt;<span class="number">8</span></span><br><span class="line">            key_10_1 = key9_1 ^ key9_13</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> key_10_dic[i-<span class="number">4</span>]:</span><br><span class="line">                <span class="keyword">if</span>(k[<span class="number">0</span>] == key9_13):</span><br><span class="line">                    temp = k[<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            table = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">            key_10_2 = (key9_1^table[i%<span class="number">4</span>]) ^ temp</span><br><span class="line">            <span class="keyword">if</span>((key_10_1,key_10_2) <span class="keyword">in</span> key_10_dic[i]):</span><br><span class="line">                ti[i].append((key_10_1,key_10_2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ti = [<span class="built_in">set</span>(ti[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(ti[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#check</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ti)):</span><br><span class="line">            <span class="keyword">if</span>((RoundKeys1[-<span class="number">1</span>][i],RoundKeys2[-<span class="number">1</span>][i]) <span class="keyword">in</span> ti[i]):</span><br><span class="line">                <span class="built_in">print</span>(i,end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">    key_10_dic = ti</span><br></pre></td></tr></table></figure>
<p>然后其中的AES_F，AES_T是我从网上找的一个可以修改AES中任意常量的加密脚本，两者的区别也就只有轮密钥，所以在这里仅列出AES_T：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AES_T</span>:</span><br><span class="line"></span><br><span class="line">    MIX_C  = [[<span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x1</span>, <span class="number">0x1</span>], [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x1</span>], [<span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>], [<span class="number">0x3</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x2</span>]]</span><br><span class="line">    I_MIXC = [[<span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>], [<span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>], [<span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>], [<span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>]]</span><br><span class="line">    RCon   = [<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>, <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1B000000</span>, <span class="number">0x36000000</span>]</span><br><span class="line"></span><br><span class="line">    S_BOX = [[<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>],</span><br><span class="line">             [<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>],</span><br><span class="line">             [<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>],</span><br><span class="line">             [<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>],</span><br><span class="line">             [<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>],</span><br><span class="line">             [<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>],</span><br><span class="line">             [<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>],</span><br><span class="line">             [<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>],</span><br><span class="line">             [<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>],</span><br><span class="line">             [<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>],</span><br><span class="line">             [<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>],</span><br><span class="line">             [<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>],</span><br><span class="line">             [<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>],</span><br><span class="line">             [<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>],</span><br><span class="line">             [<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>],</span><br><span class="line">             [<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]]</span><br><span class="line"></span><br><span class="line">    I_SBOX = [[<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>],</span><br><span class="line">              [<span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>],</span><br><span class="line">              [<span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>],</span><br><span class="line">              [<span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>],</span><br><span class="line">              [<span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>],</span><br><span class="line">              [<span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>],</span><br><span class="line">              [<span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>],</span><br><span class="line">              [<span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>],</span><br><span class="line">              [<span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>],</span><br><span class="line">              [<span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>],</span><br><span class="line">              [<span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>],</span><br><span class="line">              [<span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>],</span><br><span class="line">              [<span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>],</span><br><span class="line">              [<span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>],</span><br><span class="line">              [<span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>],</span><br><span class="line">              [<span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SubBytes</span>(<span class="params">self, State</span>):</span><br><span class="line">        <span class="comment"># 字节替换</span></span><br><span class="line">        <span class="keyword">return</span> [self.S_BOX[i][j] <span class="keyword">for</span> i, j <span class="keyword">in</span> </span><br><span class="line">               [(_ &gt;&gt; <span class="number">4</span>, _ &amp; <span class="number">0xF</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> State]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SubBytes_Inv</span>(<span class="params">self, State</span>):</span><br><span class="line">        <span class="comment"># 字节逆替换</span></span><br><span class="line">        <span class="keyword">return</span> [self.I_SBOX[i][j] <span class="keyword">for</span> i, j <span class="keyword">in</span></span><br><span class="line">               [(_ &gt;&gt; <span class="number">4</span>, _ &amp; <span class="number">0xF</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> State]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ShiftRows</span>(<span class="params">self, S</span>):</span><br><span class="line">        <span class="comment"># 行移位</span></span><br><span class="line">        <span class="keyword">return</span> [S[ <span class="number">0</span>], S[ <span class="number">5</span>], S[<span class="number">10</span>], S[<span class="number">15</span>], </span><br><span class="line">                S[ <span class="number">4</span>], S[ <span class="number">9</span>], S[<span class="number">14</span>], S[ <span class="number">3</span>],</span><br><span class="line">                S[ <span class="number">8</span>], S[<span class="number">13</span>], S[ <span class="number">2</span>], S[ <span class="number">7</span>],</span><br><span class="line">                S[<span class="number">12</span>], S[ <span class="number">1</span>], S[ <span class="number">6</span>], S[<span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ShiftRows_Inv</span>(<span class="params">self, S</span>):</span><br><span class="line">        <span class="comment"># 逆行移位</span></span><br><span class="line">        <span class="keyword">return</span> [S[ <span class="number">0</span>], S[<span class="number">13</span>], S[<span class="number">10</span>], S[ <span class="number">7</span>],</span><br><span class="line">                S[ <span class="number">4</span>], S[ <span class="number">1</span>], S[<span class="number">14</span>], S[<span class="number">11</span>],</span><br><span class="line">                S[ <span class="number">8</span>], S[ <span class="number">5</span>], S[ <span class="number">2</span>], S[<span class="number">15</span>],</span><br><span class="line">                S[<span class="number">12</span>], S[ <span class="number">9</span>], S[ <span class="number">6</span>], S[ <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MixColumns</span>(<span class="params">self, State</span>):</span><br><span class="line">        <span class="comment"># 列混合</span></span><br><span class="line">        <span class="keyword">return</span> self.Matrix_Mul(self.MIX_C, State)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MixColumns_Inv</span>(<span class="params">self, State</span>):</span><br><span class="line">        <span class="comment"># 逆列混合</span></span><br><span class="line">        <span class="keyword">return</span> self.Matrix_Mul(self.I_MIXC, State)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RotWord</span>(<span class="params">self, _4byte_block</span>):</span><br><span class="line">        <span class="comment"># 用于生成轮密钥的字移位</span></span><br><span class="line">        <span class="keyword">return</span> ((_4byte_block &amp; <span class="number">0xffffff</span>) &lt;&lt; <span class="number">8</span>) + (_4byte_block &gt;&gt; <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SubWord</span>(<span class="params">self, _4byte_block</span>):</span><br><span class="line">        <span class="comment"># 用于生成密钥的字节替换</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> position <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            i = _4byte_block &gt;&gt; position * <span class="number">8</span> + <span class="number">4</span> &amp; <span class="number">0xf</span></span><br><span class="line">            j = _4byte_block &gt;&gt; position * <span class="number">8</span> &amp; <span class="number">0xf</span></span><br><span class="line">            result ^= self.S_BOX[i][j] &lt;&lt; position * <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">self, poly, mod = <span class="number">0b100011011</span></span>):  </span><br><span class="line">        <span class="comment"># poly模多项式mod</span></span><br><span class="line">        <span class="keyword">while</span> poly.bit_length() &gt; <span class="number">8</span>:</span><br><span class="line">            poly ^= mod &lt;&lt; poly.bit_length() - <span class="number">9</span></span><br><span class="line">        <span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, poly1, poly2</span>):</span><br><span class="line">        <span class="comment"># 多项式相乘</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(poly2.bit_length()):</span><br><span class="line">            <span class="keyword">if</span> poly2 &amp; <span class="number">1</span> &lt;&lt; index:</span><br><span class="line">                result ^= poly1 &lt;&lt; index</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Matrix_Mul</span>(<span class="params">self, M1, M2</span>):  <span class="comment"># M1 = MIX_C  M2 = State</span></span><br><span class="line">        <span class="comment"># 用于列混合的矩阵相乘</span></span><br><span class="line">        M = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">for</span> Round <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    M[row + col*<span class="number">4</span>] ^= self.mul(M1[row][Round], M2[Round+col*<span class="number">4</span>])</span><br><span class="line">                M[row + col*<span class="number">4</span>] = self.mod(M[row + col*<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round_key_generator</span>(<span class="params">self, _16bytes_key</span>):</span><br><span class="line">        <span class="comment"># 轮密钥产生</span></span><br><span class="line">        w = [_16bytes_key &gt;&gt; <span class="number">96</span>, </span><br><span class="line">             _16bytes_key &gt;&gt; <span class="number">64</span> &amp; <span class="number">0xFFFFFFFF</span>, </span><br><span class="line">             _16bytes_key &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xFFFFFFFF</span>, </span><br><span class="line">             _16bytes_key &amp; <span class="number">0xFFFFFFFF</span>] + [<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">44</span>):</span><br><span class="line">            temp = w[i-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i % <span class="number">4</span>:</span><br><span class="line">                temp = self.SubWord(self.RotWord(temp)) ^ self.RCon[i//<span class="number">4</span>-<span class="number">1</span>]</span><br><span class="line">            w[i] = w[i-<span class="number">4</span>] ^ temp</span><br><span class="line">        <span class="keyword">return</span> [self.num_2_16bytes(</span><br><span class="line">                    <span class="built_in">sum</span>([w[<span class="number">4</span> * i] &lt;&lt; <span class="number">96</span>, w[<span class="number">4</span>*i+<span class="number">1</span>] &lt;&lt; <span class="number">64</span>, </span><br><span class="line">                         w[<span class="number">4</span>*i+<span class="number">2</span>] &lt;&lt; <span class="number">32</span>, w[<span class="number">4</span>*i+<span class="number">3</span>]])</span><br><span class="line">                    ) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AddRoundKey</span>(<span class="params">self, State, RoundKeys, index</span>):</span><br><span class="line">        <span class="comment"># 异或轮密钥</span></span><br><span class="line">        <span class="keyword">return</span> self._16bytes_xor(State, RoundKeys[index])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_16bytes_xor</span>(<span class="params">self, _16bytes_1, _16bytes_2</span>):</span><br><span class="line">        <span class="keyword">return</span> [_16bytes_1[i] ^ _16bytes_2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_16bytes2num</span>(<span class="params">cls, _16<span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="comment"># 16字节转数字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(_16<span class="built_in">bytes</span>, byteorder = <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_2_16bytes</span>(<span class="params">cls, num</span>):</span><br><span class="line">        <span class="comment"># 数字转16字节</span></span><br><span class="line">        <span class="keyword">return</span> num.to_bytes(<span class="number">16</span>, byteorder = <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">self, plaintext_list, RoundKeys</span>):</span><br><span class="line">        State = plaintext_list</span><br><span class="line">        State = self.AddRoundKey(State, RoundKeys, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> Round <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            State = self.SubBytes(State)</span><br><span class="line">            State = self.ShiftRows(State)</span><br><span class="line">            State = self.MixColumns(State)</span><br><span class="line">            State = self.AddRoundKey(State, RoundKeys, Round)</span><br><span class="line">        State = self.SubBytes(State)</span><br><span class="line">        State = self.ShiftRows(State)</span><br><span class="line">        State = self.AddRoundKey(State, RoundKeys, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> State</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">self, ciphertext_list, RoundKeys</span>):</span><br><span class="line">        State = ciphertext_list</span><br><span class="line">        State = self.AddRoundKey(State, RoundKeys, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> Round <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            State = self.ShiftRows_Inv(State)</span><br><span class="line">            State = self.SubBytes_Inv(State)</span><br><span class="line">            State = self.AddRoundKey(State, RoundKeys, <span class="number">10</span>-Round)</span><br><span class="line">            State = self.MixColumns_Inv(State)</span><br><span class="line">        State = self.ShiftRows_Inv(State)</span><br><span class="line">        State = self.SubBytes_Inv(State)</span><br><span class="line">        State = self.AddRoundKey(State, RoundKeys, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> State</span><br></pre></td></tr></table></figure>
<p>如果对我的想法不太明白、或者觉得有些问题的师傅欢迎与我讨论！</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SHCTF-wp-crypto</title>
    <url>/post/11b9531d.html</url>
    <content><![CDATA[<p>大战古典</p>
<span id="more"></span>
<h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="WEEK1-立正"><a href="#WEEK1-立正" class="headerlink" title="[WEEK1]立正"></a>[WEEK1]立正</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意要 正</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wl hgrfhg 4gNUx4NgQgEUb4NC64NHxZLg636V6CDBiDNUHw8HkapH :jdoi vl vlkw  ~xrb wd nrrT Y:</span><br></pre></td></tr></table></figure>
<p>最痛苦的题其中一道。</p>
<p>首先，一眼看不出是什么编码，可以猜测是 rot ，用 cyberchef 爆破一下：</p>
<p><img src="/post/11b9531d/image-20231003161339707.png" alt="image-20231003161339707"></p>
<p>发现一点线索：</p>
<p><img src="/post/11b9531d/image-20231003161404216.png" alt="image-20231003161404216"></p>
<p>可以看到倒过来的 flag ，结合题目”立正”，把他正过来试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7V Qook at _ou&#123;  this is flag7 Em^hE5tERKAf?A@3S303dIWuEK13@K1_RBdNdK1uRKd1 decode it</span><br></pre></td></tr></table></figure>
<p>大概可以看到一段待解密的密文了，现在目标就是解码。可是可以发现，前面还有一段乱码一样的东西，问了出题人，这段也是有用的，所以第一反应是：前面这段可能是密钥，但是尝试了各种解密都不行。</p>
<p>后来发现，这样移动后，解密出的文段有很多不太合理的的地方：</p>
<ul>
<li>flag后面的7，感觉应该是某个符号才对</li>
<li>前面这段没看出任何含义，但是很近似于 Look at you</li>
</ul>
<p>然后觉得，也许移位是在字母、数字之间循环移动的，而不涉及符号，所以重新解密一次：</p>
<p><img src="/post/11b9531d/image-20231003162415082.png" alt="image-20231003162415082"></p>
<p>可以看出，这下的密文明显更合理了。首先，诸如：、~之类的符号更正确；其次中间那段密文有base64编码的样子了。</p>
<p>不过显然还差一点，但如果熟悉flag头的base64的话，可以看出Emxh与Zmxh只差一个大写字母。同时，Look at you变成了Qook at you。而他们与正确大写字母正好都相差6，说明大写字母应该还要循环移动6位，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q Look at you~  this is flag: ZmxhZ8tZMFVfTVU6N636dDRuZF46UF4yMWdIdF4uMFd4 decode it</span><br></pre></td></tr></table></figure>
<p>拿去试着解一下base64：</p>
<p><img src="/post/11b9531d/image-20231003163632938.png" alt="image-20231003163632938"></p>
<p>还是有乱码，不过大概已经能猜到是数字还需要移位了，手动调整一下数字，能发现第一个数字8改为3时，能解密出{，因此数字还需要前移5位，最终的base64如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Q Look at you~  this is flag: ZmxhZ3tZMFVfTVU1N181dDRuZF91UF9yMWdIdF9uMFd9 decode it</span><br></pre></td></tr></table></figure>
<p>base64解密得到flag。</p>
<p>flag：</p>
<p><strong>flag{Y0U_MU57_5t4nd_uP_r1gHt_n0W}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-Crypto-Checkin"><a href="#WEEK1-Crypto-Checkin" class="headerlink" title="[WEEK1]Crypto_Checkin"></a>[WEEK1]Crypto_Checkin</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QZZ|KQbjRRS8QZRQdCYwR4_DoQ7~jyO&gt;0t4R4__aQZQ9|Rz+k_Q!r#mR90+NR4_4NR%&gt;ipO&gt;0s&#123;R90|SQhHKhRz+k^S8Q5JS5|OUQZO&#125;CQfp*dS8P&amp;9R8&gt;k?QZYthRz+k_O&gt;0#&gt;</span><br></pre></td></tr></table></figure>
<p>直接丢给 cyberchef 用 magic 就可以出：</p>
<p><img src="/post/11b9531d/image-20231003164606995.png" alt="image-20231003164606995"></p>
<p>flag：</p>
<p><strong>flag{Th1s_1s_B4s3_3nc0d3}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-残缺的md5"><a href="#WEEK1-残缺的md5" class="headerlink" title="[WEEK1]残缺的md5"></a>[WEEK1]残缺的md5</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">苑晴在路边捡到了一张纸条，上面有一串字符串：KCLWG?K8M9O3?DE?84S9</span><br><span class="line">问号是被污染的部分，纸条的背面写着被污染的地方为大写字母，还给了这串字符串的md5码值：F0AF????B1F463????F7AE???B2AC4E6</span><br><span class="line">请提交完整的md5码值并用flag&#123;&#125;包裹提交</span><br></pre></td></tr></table></figure>
<p>md5爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="string">&quot;KCLWG?K8M9O3?DE?84S9&quot;</span></span><br><span class="line"><span class="comment">#F0AF????B1F463????F7AE???B2AC4E6</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic1=string.ascii_uppercase</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> dic1:</span><br><span class="line">	<span class="keyword">for</span> i2 <span class="keyword">in</span> dic1:</span><br><span class="line">		<span class="keyword">for</span> i3 <span class="keyword">in</span> dic1:</span><br><span class="line">			bb=<span class="string">&#x27;KCLWG&#x27;</span>+i1+<span class="string">&#x27;K8M9O3&#x27;</span>+i2+<span class="string">&#x27;DE&#x27;</span>+i3+<span class="string">&#x27;84S9&#x27;</span></span><br><span class="line">			aa=hashlib.md5(bb.encode())</span><br><span class="line">			bbb=aa.hexdigest().upper()</span><br><span class="line">			<span class="keyword">if</span> bbb[:<span class="number">4</span>]==<span class="string">&#x27;F0AF&#x27;</span> <span class="keyword">and</span> bbb[-<span class="number">7</span>:]==<span class="string">&#x27;B2AC4E6&#x27;</span>:</span><br><span class="line">				<span class="built_in">print</span>(bbb)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{F0AF1443B1F463EAFFF7AEBB8B2AC4E6}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-凯撒大帝"><a href="#WEEK1-凯撒大帝" class="headerlink" title="[WEEK1]凯撒大帝"></a>[WEEK1]凯撒大帝</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvkq&#123;mredsrkyxkx&#125;</span><br></pre></td></tr></table></figure>
<p>直接手动调调参数就可以出：</p>
<p><img src="/post/11b9531d/image-20231003173740411.png" alt="image-20231003173740411"></p>
<p>flag：</p>
<p><strong>flag{chutihaonan}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-进制"><a href="#WEEK1-进制" class="headerlink" title="[WEEK1]进制"></a>[WEEK1]进制</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好熟悉的进制，但不知道加密了几层</span><br><span class="line">3636366336313637376236313638363636623661366336383662363136383764</span><br></pre></td></tr></table></figure>
<p>反复转十六进制，这种事交给magic：</p>
<p><img src="/post/11b9531d/image-20231003174722126.png" alt="image-20231003174722126"></p>
<p>flag：</p>
<p><strong>flag{ahfkjlhkah}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-okk"><a href="#WEEK1-okk" class="headerlink" title="[WEEK1]okk"></a>[WEEK1]okk</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.</span><br><span class="line">Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?</span><br><span class="line">Ook. </span><br></pre></td></tr></table></figure>
<p>Ook编码，直接在线网站：</p>
<p><img src="/post/11b9531d/image-20231003175211627.png" alt="image-20231003175211627"></p>
<p>flag：</p>
<p><strong>flag{123456789}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-熊斐特"><a href="#WEEK1-熊斐特" class="headerlink" title="[WEEK1]熊斐特"></a>[WEEK1]熊斐特</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">熊斐特博士发现了一种新的密码。</span><br><span class="line">uozt&#123;zgyzhs xrksvi&#125;</span><br></pre></td></tr></table></figure>
<p>搜索一下就知道，题目名称是在暗指Atbash码，解密即可：</p>
<p><img src="/post/11b9531d/image-20231003175515597.png" alt="image-20231003175515597"></p>
<p>flag：</p>
<p><strong>flag{atbash cipher}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-佛说：只能四天"><a href="#WEEK1-佛说：只能四天" class="headerlink" title="[WEEK1]佛说：只能四天"></a>[WEEK1]佛说：只能四天</h3><p>题目：</p>
<p>hint.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">凯撒不是最后一步，by the way，想想凯撒当年用的什么规格的凯撒密码？</span><br></pre></td></tr></table></figure>
<p>密文.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">陀即我叻我莊如亦婆愍降吽兜哉念色夷嚩喼哉宣宣羅僧慧喼喃塞修菩哉菩哉吶宣囉哆念隸是喃哉嚩是念哉我嘚般訶尊是是闍哉訶咤聞訶念兜喼哉是般哉尊波祗迦念彌哆塞咤寂祗蜜劫塞迦劫諸隸菩哉缽即哉耨若夷夷吽斯空須囉諦諸須塞缽是若咤劫若哉嚴莊須哉闍須叻耨降菩哉般哆哉耨是叻色迦羅缽哉吽哉降聞叻彌蜜彌所斯嚴薩所陀波婆喃夷愍所囉哉叻伏空般耨囉隸劫般夷降嘇慧哆摩我念羅哉摩修叻喼羅般須吶囉尊伏斯若喼羅</span><br></pre></td></tr></table></figure>
<p>题目描述.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">圣经分为《旧约全书》和《新约全书》</span><br></pre></td></tr></table></figure>
<p>熟悉的题目名字，buu上有一道很类似的，所以前几步很好想，新与佛论禅+社会主义核心价值观，得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66767656676661e93ii3i098666766666677f7g39h13gf3g</span><br></pre></td></tr></table></figure>
<p>大概可以看出是16进制，但是出现了g，h，i几个字母，结合题目描述可以推测还用了凯撒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66767656676661b93ff3f098666766666677c7d39e13dc3d</span><br></pre></td></tr></table></figure>
<p>由于知道flag头对应的16进制是66，6c，61，67，所以可以猜测是用了栅栏，手动调一下栏数看看能不能出这个十六进制头，发现可以：</p>
<p><img src="/post/11b9531d/image-20231003180241908.png" alt="image-20231003180241908"></p>
<p>然后十六进制转字符串就好。</p>
<p>flag：</p>
<p><strong>flag{mission_accomplish}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-黑暗之歌"><a href="#WEEK1-黑暗之歌" class="headerlink" title="[WEEK1]黑暗之歌"></a>[WEEK1]黑暗之歌</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：</span><br><span class="line"></span><br><span class="line">⠴⡰⡭⡳⠴⡰⡭⡰⡷⡲⡢⡩⡭⡡⠯⡩⡭⡡⡺⡩⡭⡡⠳⡩⡭⡡⡺⡩⡭⡡⡶⡩⡭⡡⡶⡩⡭⡡⡲⡩⡭⡡⡺⡩⡭⡡⠯⡩⡧⡊⡢⡩⡭⡡⠯⡩⡭⡡⡺⡃⡰⠫⡋⡚⡲⡍⡋⡮⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡃⡴⡵⡋⡁⡬⡵⡋⡁⡬⡵⡋⡁⡬⡳⡋⠲⠴⡯⡃⡗⠴⡰⡭⡴⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡩⡭⡡⡺⡩⡭⡡⡺⡩⡭⡡⠳⡩⡧⡊⡢⡩⡭⡡⠯⡩⡧⡊⡢⡃⡴⡵⡋⡚⡱⠫⡋⡚⡱⠫⡋⡚⡲⠵⠲⡺⠰⠽</span><br></pre></td></tr></table></figure>
<p>明显的盲文，多试几个在线网站，发现这个可以解：</p>
<p><a href="http://www.atoolbox.net/Tool.php?Id=837">盲文点字加密/解密 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></p>
<p>能解出一串base64，扔给cyberchef看看：</p>
<p><img src="/post/11b9531d/image-20231003180528897.png" alt="image-20231003180528897"></p>
<p>音符密码，继续在线网站，就能解得flag：</p>
<p><img src="/post/11b9531d/image-20231003180750086.png" alt="image-20231003180750086"></p>
<p>flag：</p>
<p><strong>flag{b2cc-9091-8a29}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-迷雾重重"><a href="#WEEK1-迷雾重重" class="headerlink" title="[WEEK1]迷雾重重"></a>[WEEK1]迷雾重重</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：</span><br><span class="line"></span><br><span class="line">morse？ASCII？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">密文：</span><br><span class="line"></span><br><span class="line">0010 0100 01 110 1111011 11 111 010 000 0 001101 00 000 001101 0001 0 010 1011 001101 0010 001 10 1111101</span><br></pre></td></tr></table></figure>
<p>用-.替换掉10后，直接 morse 后就能基本得到flag，左右两大括号手动加一下就行，并且转一下小写：</p>
<p><img src="/post/11b9531d/image-20231003181110084.png" alt="image-20231003181110084"></p>
<p>flag：</p>
<p><strong>flag{morse_is_very_fun}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-难言的遗憾"><a href="#WEEK1-难言的遗憾" class="headerlink" title="[WEEK1]难言的遗憾"></a>[WEEK1]难言的遗憾</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：</span><br><span class="line">我们本可以早些进入信息化时代的，但是清政府拒不采纳那份编码规则。 （注：flag为中文，使用flag&#123;&#125;包裹提交）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">密文：</span><br><span class="line"></span><br><span class="line">000111310008133175592422205314327609650071810649</span><br></pre></td></tr></table></figure>
<p>这个描述也很熟悉，估计buu也出现过类似题目，中文电码解码就好：</p>
<p><img src="/post/11b9531d/image-20231003181246659.png" alt="image-20231003181246659"></p>
<p>flag：</p>
<p><strong>flag{一天不学高数我就魂身难受}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-小兔子可爱捏"><a href="#WEEK1-小兔子可爱捏" class="headerlink" title="[WEEK1]小兔子可爱捏"></a>[WEEK1]小兔子可爱捏</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述：宇宙的终极答案是什么？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U2FsdGVkX1/lKCKZm7Nw9xHLMrKHsbGQuFJU5QeUdASq3Ulcrcv9</span><br><span class="line"></span><br><span class="line">你可能会需要一把钥匙，钥匙就是问题的答案。</span><br></pre></td></tr></table></figure>
<p>根据题目名可以知道是Rabbit加密(并且密文头部U2FsdGVkX1也能看出是Rabbit加密)，同时宇宙的终极答案是42，这个之前也看到过，当作密钥解密即可：</p>
<p><img src="/post/11b9531d/image-20231003181553457.png" alt="image-20231003181553457"></p>
<p>flag：</p>
<p><strong>flag{i_love_technology}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-电信诈骗"><a href="#WEEK1-电信诈骗" class="headerlink" title="[WEEK1]电信诈骗"></a>[WEEK1]电信诈骗</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好，我是秦始皇，我并没有死，我得到了长生不老药，但是药效有副作用，现在才醒。我刚花了一年在互联网上了解现在的时代，现在我要利用我地宫第四行第七列的无敌兵马俑军队卷土重来，但是我需要启动资金，vivo50作为启动资金，待我横扫天下，封你为大将军，赏你黄金万两！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">050f000a7e407151537802540b747176075178027552756d0256726262627c</span><br></pre></td></tr></table></figure>
<p>最痛苦的题的另一道。</p>
<p>首先观察到，密文为62个十六进制数，因此应该对应flag串中的31个字符。那么题目应该就是对flag串的每个字符作了了某种加密，而关于加密方式的提示应该就在题目描述里。</p>
<p>而题目描述可能有用的信息有以下几个：</p>
<ul>
<li>一年</li>
<li>地宫第四行第七列</li>
<li>vivo50</li>
</ul>
<p>其中，稍微有点思路的就是第二个信息，由这个信息能想到曲路密码或者列移位密码，但是尝试了均不对。那么当成47用，可能能想到rot47，但是仍然不对。继续尝试cyberchef的rot47爆破，还是出不了一点看似有效的结果。</p>
<p>和50结合一下，能想到什么加密呢？可能能想到a=47,b=50的仿射密码，然后模数就用可见字符的范围128，但是也不对，交换一下顺序，或者求一求逆元对应解密，还是不对。</p>
<p>非常的绝望。</p>
<p>要说思路的话，真的就是碰。什么能想到的东西都尝试一遍后，可以在这种尝试方式下发现一点东西：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;050f000a7e407151537802540b747176075178027552756d0256726262627c&quot;</span></span><br><span class="line">tt = [i <span class="keyword">for</span> i <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;¡rhursdy_vv_o&#125;</span><br></pre></td></tr></table></figure>
<p>有一点雏形了，至少看见flag头，说明方向没问题。而长度显然不到预期的31个字符，说明还有不可见字符，先把不可见字符打印成*，然后全部打印出来看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>) &lt; <span class="number">127</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;*r**y_*hursd*y_v*v*_*o***&#125;</span><br></pre></td></tr></table></figure>
<p>其实能看出flag大概说的是什么了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crazy_thursday_vivo_50</span><br></pre></td></tr></table></figure>
<p>那么我们完全可以猜测一下*代表的形近字符(比如，大小写转换，a用4，i用1这种形近字符的相互表示)，比如，猜测第一个字符为C：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="string">b&quot;flag&#123;Cr**y_*hursd*y_v*v*_*o***&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(m[i] - (tt[i]^<span class="number">50</span>),end = <span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打印出来的结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">47,47,47,47,47,-47,47,-57,-55,47,47,-60,47,47,47,47,47,-57,47,47,47,-54,47,-53,47,-58,47,-38,-38,-38,47,</span><br></pre></td></tr></table></figure>
<p>那么很明显了，打印出来的不可见字符之所以不可见，是因为他们应该是-47，而不是+47，依照这个逻辑手动调整一下形近字符，直到所有差值都是正负47，那么就是正确flag了。</p>
<p>完整调试过程的脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;050f000a7e407151537802540b747176075178027552756d0256726262627c&quot;</span></span><br><span class="line">tt = [i <span class="keyword">for</span> i <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>) &lt; <span class="number">127</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">47</span> + (tt[i]^<span class="number">50</span>)),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将上一步的密文，用形近字符进行调试，直至全部为+-47</span></span><br><span class="line">m = <span class="string">b&quot;flag&#123;Cr42y_7hursd4y_v1v0_5o!!!&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt)):</span><br><span class="line">    <span class="built_in">print</span>(m[i] - (tt[i]^<span class="number">50</span>),end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Cr42y_7hursd4y_v1v0_5o!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{Cr42y_7hursd4y_v1v0_5o!!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-what-is-m"><a href="#WEEK1-what-is-m" class="headerlink" title="[WEEK1]what is m"></a>[WEEK1]what is m</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这串神秘的数字怎么恢复成flag呢</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m =&quot;</span>,m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 7130439814055607156612810766069657529580176956197921317055778195831975924487086273340238725540060289765827225260320612710571684611641625602310966864004750195182916452942079032595376449532285</span></span><br></pre></td></tr></table></figure>
<p>直接long_to_bytes</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="number">7130439814055607156612810766069657529580176956197921317055778195831975924487086273340238725540060289765827225260320612710571684611641625602310966864004750195182916452942079032595376449532285</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;7HERE_AR3_53v3rAl_AL73RNAT1v3S_T0_THe_Ion6_t0_BY7E5_fUnc7ioN_B9A1dd0bb741&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK1-really-ez-rsa"><a href="#WEEK1-really-ez-rsa" class="headerlink" title="[WEEK1]really_ez_rsa"></a>[WEEK1]really_ez_rsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(m)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 217873395548207236847876059475581824463</span></span><br><span class="line"><span class="comment"># q = 185617189161086060278518214521453878483</span></span><br><span class="line"><span class="comment"># c = 6170206647205994850964798055359827998224330552323068751708721001188295410644</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br></pre></td></tr></table></figure>
<p>就是个RSA算法的实现，给了p、q的话直接解密就好(其实不给也行，p、q很小可以分解)</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">217873395548207236847876059475581824463</span></span><br><span class="line">q = <span class="number">185617189161086060278518214521453878483</span></span><br><span class="line">c = <span class="number">6170206647205994850964798055359827998224330552323068751708721001188295410644</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Y0ung_meiyou_xiaojj&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="WEEK2-XOR"><a href="#WEEK2-XOR" class="headerlink" title="[WEEK2]XOR"></a>[WEEK2]XOR</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">20810298530643139779725379335557687960281905096107101411585220918672653323875234344540342801651123667553812866458790076971583539529404583369246005781146655852295475940942005806084842620601383912513102861245275690036363402134681262533947475193408594967684453091957401932685922178406769578067946779033282889429596341714417295489842047781388337010440309434639274398589029236213499110100040841426995862849012466514170374143655264739023758914247116354182164550612494432327931655944868705959874670536031052370968354394583880324756639698871918124498442308334232127034553164826483441746719644515097123067550594588348951855987</span></span><br><span class="line">c = <span class="number">15294238831055894095745317706739204020319929545635634316996804750424242996533741450795483290384329104330090410419090776738963732127756947425265305276394058773237118310164375814515488333015347737716139073947021972607133348357843542310589577847859875065651579863803460777883480006078771792286205582765870786584904810922437581419555823588531402681156158991972023042592179567351862630979979989132957073962160946903567157184627177910380657091234027709595863061642453096671316307805667922247180282486325569430449985678954185611299166777141304330040782500340791721548519463552822293017606441987565074653579432972931432057376</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p⊕q = <span class="number">66138689143868607947630785415331461127626263390302506173955100963855136134289233949354345883327245336547595357625259526618623795152771487180400409991587378085305813144661971099363267511657121911410275002816755637490837422852032755234403225128695875574749525003296342076268760708900752562579555935703659615570</span></span><br></pre></td></tr></table></figure>
<p>给定p与q的异或求n的分解，在我另一篇剪枝文章中有讲(第二题的第一部分)：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/342113ee.html#more">Crypto趣题-剪枝 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">20810298530643139779725379335557687960281905096107101411585220918672653323875234344540342801651123667553812866458790076971583539529404583369246005781146655852295475940942005806084842620601383912513102861245275690036363402134681262533947475193408594967684453091957401932685922178406769578067946779033282889429596341714417295489842047781388337010440309434639274398589029236213499110100040841426995862849012466514170374143655264739023758914247116354182164550612494432327931655944868705959874670536031052370968354394583880324756639698871918124498442308334232127034553164826483441746719644515097123067550594588348951855987</span></span><br><span class="line">c = <span class="number">15294238831055894095745317706739204020319929545635634316996804750424242996533741450795483290384329104330090410419090776738963732127756947425265305276394058773237118310164375814515488333015347737716139073947021972607133348357843542310589577847859875065651579863803460777883480006078771792286205582765870786584904810922437581419555823588531402681156158991972023042592179567351862630979979989132957073962160946903567157184627177910380657091234027709595863061642453096671316307805667922247180282486325569430449985678954185611299166777141304330040782500340791721548519463552822293017606441987565074653579432972931432057376</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = <span class="number">66138689143868607947630785415331461127626263390302506173955100963855136134289233949354345883327245336547595357625259526618623795152771487180400409991587378085305813144661971099363267511657121911410275002816755637490837422852032755234403225128695875574749525003296342076268760708900752562579555935703659615570</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1,剪枝</span></span><br><span class="line">gift = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(gift)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c,d,pp*qq))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(gift[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;7428fbd7-639b-11ee-b51b-64d69af3cb76&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-easymath"><a href="#WEEK2-easymath" class="headerlink" title="[WEEK2]easymath"></a>[WEEK2]easymath</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">seed = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">prng</span>:</span><br><span class="line">    n = p</span><br><span class="line">    a,b = [randint(<span class="number">2</span>, p - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed</span>):</span><br><span class="line">        self.state = seed</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = (self.state * self.a + self.b) % self.n</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    gen = prng(seed)</span><br><span class="line">    s = [seed]</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    s.append(gen.<span class="built_in">next</span>())</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    json.dump(s,f)</span><br><span class="line">    f.close()</span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(gen.<span class="built_in">next</span>())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[288530505749272642500730917886204398531, 63547143998110685331032679758907988154, 15151206512028268617888756820805603406, 268092204209244869520724955865278855216, 261067075335188593563542448889694952077, 138067838531633886698552659065694918861, 201319433320428898153580935653793106657]</span><br></pre></td></tr></table></figure>
<p>题目基于一个LCG，给定连续七组LCG生成的随机数，要求求出下一个生成的伪随机数。这里简单推导一下吧，因为我好像还没有写过这个如何求解：</p>
<p>已知：</p>
<script type="math/tex; mode=display">
s_i = a*s_{i-1} + b\quad(mod\;n)</script><p>那么我们取几组进行两两作差，会发现：</p>
<script type="math/tex; mode=display">
s_{i+2}-s_{i+1} = a*(s_{i+1}-s_{i})\quad(mod\;n)</script><p>可以发现，如果把连续两项的差当作数列的项，那么这其实是一个模n下的等比数列，公比是a。我们就可以依据这一点进行模数n的恢复。</p>
<p>因为：</p>
<script type="math/tex; mode=display">
s_3-s_2 = a*(s_2-s_1)\quad(mod\;n)</script><script type="math/tex; mode=display">
s_4-s_3 = a^2*(s_2-s_1)\quad(mod\;n)</script><script type="math/tex; mode=display">
s_5-s_4 = a^3*(s_2-s_1)\quad(mod\;n)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
(s_5-s_4)*(s_3-s_2) = a^4*(s_2-s_1)^2 \quad (mod\;n)</script><script type="math/tex; mode=display">
(s_4-s_3)^2 = a^4*(s_2-s_1)^2 \quad (mod\;n)</script><p>所以有：</p>
<script type="math/tex; mode=display">
(s_5-s_4)*(s_3-s_2) - (s_4-s_3)^2  = kn</script><p>同理：</p>
<script type="math/tex; mode=display">
(s_4-s_3)*(s_2-s_1) - (s_3-s_2)^2  = kn</script><p>因此求解2者gcd，并去除一些小因子即可得到n，得到n后a、b恢复很容易，就不展开讲了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line">c1,c2,c3,c4,c5,c6,c7 = [<span class="number">288530505749272642500730917886204398531</span>, <span class="number">63547143998110685331032679758907988154</span>, <span class="number">15151206512028268617888756820805603406</span>, <span class="number">268092204209244869520724955865278855216</span>, <span class="number">261067075335188593563542448889694952077</span>, <span class="number">138067838531633886698552659065694918861</span>, <span class="number">201319433320428898153580935653793106657</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求m</span></span><br><span class="line">t1 = c2-c1</span><br><span class="line">t2 = c3-c2</span><br><span class="line">t3 = c4-c3</span><br><span class="line">t4 = c5-c4</span><br><span class="line">T1 = t4*t2 - t3*t3</span><br><span class="line">T2 = t3*t1 - t2*t2</span><br><span class="line">m = gcd(T1,T2)</span><br><span class="line"></span><br><span class="line">m = <span class="number">312769358113056565136009929613710078319</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求a,b</span></span><br><span class="line">a = inverse((c2-c1),m)*(c3-c2) % m</span><br><span class="line">b = (-a*c2 + c3) % m</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="built_in">str</span>((a*c7+b)%m) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;302184756857257140159769321021979097116&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-ez-rsa"><a href="#WEEK2-ez-rsa" class="headerlink" title="[WEEK2]ez_rsa"></a>[WEEK2]ez_rsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from flag import flag</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read().strip()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag[:<span class="number">19</span>],<span class="string">&quot;big&quot;</span>)</span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(flag[<span class="number">19</span>:],<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">primes = [getPrime(<span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">n = prod(primes)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"></span><br><span class="line">p = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">e1 = <span class="number">13</span></span><br><span class="line">e2 = <span class="number">15</span></span><br><span class="line">n1 = p * q</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e1, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m1, e2, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>, e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>, e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 28535916699190273475273097091422420145718978597126134891571109006456944397344856577421369324831702083810238921719657496747722337086131545474384253288151783029981352196506749672783866527948391034258269669654392993063423671431837882584570973320095601407578443348352802850496429240170710269529489900871208384711844617081275862971410246759090936379744946527813691945129059991795202769186014306943707223831130752782380563227353615164053563120572722464543812139164048342504963081408349934180883607554389607335607410546630525512019818062185681153477671373000186961748278118124044645584490544698827467815360888525822167</span></span><br><span class="line"><span class="comment"># n = 114107341297408283801468814470303963122122556489590451040619457052827864984505912502462030175984161431709841571908269123131659496812467145870607611968843929870716066046232009282431653653484798819370087696248364531531706249180822839879862098012984590503284615395588919199545142177727328844260380842155437987767067800740569616584597507776426572206990858918111272636507821551592564540694671795374831548677720629329358177802890287837056940407030212276399942462042866947423728888561392653713356355778914658317507319575084393752755452971007289968044006561357799908892371839922838486713582082980752194204224263283004373</span></span><br><span class="line"><span class="comment"># n1 = 21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line"><span class="comment"># e1 = 13</span></span><br><span class="line"><span class="comment"># c1 = 5640630966585093229374938575158853304507369792931959909038819773057666482368490365383634362421839045569190487785222799103423460816096797210546343809620912249021763787314569982909943181390882015170344954037813745251119237402775124991005154299085147091159741067430623420349690886728161235034687649593258746455165172528681627568611599473627285223154284756417744280966157271904828156564067870877521824545300153084830020169048653830385763172792698591998191641849931039720453035065355411394516308865955772746815765864888631258825704788352584540380169938419618543124830541663995097651872542381</span></span><br><span class="line"><span class="comment"># n2 = 21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line"><span class="comment"># e2 = 15</span></span><br><span class="line"><span class="comment"># c2 = 5481001445755770090420425478456880914921441486935672376394423326451811448703288166341447356603281843336826624725965666634194700496514262129376916108926167953996689011980280761368893884042609095616407660087448963015169181749124738976578495911295096014725354350167650232970262765851074146687931181216305972147994236689422572940877763047930111954798962097847426932730342258169023809341164876019161104439561164839132092594444017039073155506935768658830659965630065643619399324102814118128802834719820426253836317043818687888302054465994498115387703382090351794495827905499417861507007863378916334790750453883661675063377</span></span><br></pre></td></tr></table></figure>
<p>第一部分可以直接factordb分解出小因子，然后多素数RSA求解。第二部分共模攻击。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#yafu</span></span><br><span class="line">c = <span class="number">28535916699190273475273097091422420145718978597126134891571109006456944397344856577421369324831702083810238921719657496747722337086131545474384253288151783029981352196506749672783866527948391034258269669654392993063423671431837882584570973320095601407578443348352802850496429240170710269529489900871208384711844617081275862971410246759090936379744946527813691945129059991795202769186014306943707223831130752782380563227353615164053563120572722464543812139164048342504963081408349934180883607554389607335607410546630525512019818062185681153477671373000186961748278118124044645584490544698827467815360888525822167</span></span><br><span class="line">n = <span class="number">114107341297408283801468814470303963122122556489590451040619457052827864984505912502462030175984161431709841571908269123131659496812467145870607611968843929870716066046232009282431653653484798819370087696248364531531706249180822839879862098012984590503284615395588919199545142177727328844260380842155437987767067800740569616584597507776426572206990858918111272636507821551592564540694671795374831548677720629329358177802890287837056940407030212276399942462042866947423728888561392653713356355778914658317507319575084393752755452971007289968044006561357799908892371839922838486713582082980752194204224263283004373</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primes = [<span class="number">14147604789494386003</span>,<span class="number">16946507762934111301</span>,<span class="number">17075632607344331131</span>,<span class="number">9281508366366115669</span>,<span class="number">10040612110882504553</span>,<span class="number">9356350172425710359</span>,<span class="number">15622487550947237203</span>,<span class="number">10436802938040427139</span>,<span class="number">11777892065426651999</span>,<span class="number">10100522426677320149</span>,<span class="number">17088379813205887661</span>,<span class="number">16880270107514803247</span>,<span class="number">9723861249937499279</span>,<span class="number">10203735303764112277</span>,<span class="number">13498192768855092449</span>,<span class="number">11502613740816749197</span>,<span class="number">9261040693807289549</span>,<span class="number">11964584391817142269</span>,<span class="number">10270880245559150279</span>,<span class="number">16340211116882594287</span>,<span class="number">10126802520926958821</span>,<span class="number">15774106340553595249</span>,<span class="number">10635881647150245973</span>,<span class="number">12712357180113548549</span>,<span class="number">14198042938738648387</span>,<span class="number">15616762946597906161</span>,<span class="number">10986943768724409089</span>,<span class="number">13428970346605599557</span>,<span class="number">16651625235320957803</span>,<span class="number">11718181938374860349</span>,<span class="number">13618885037077024279</span>,<span class="number">10621161426185076191</span>]</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes:</span><br><span class="line">    phi *= (i-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#共模</span></span><br><span class="line">n1 = <span class="number">21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line">e1 = <span class="number">13</span></span><br><span class="line">c1 = <span class="number">5640630966585093229374938575158853304507369792931959909038819773057666482368490365383634362421839045569190487785222799103423460816096797210546343809620912249021763787314569982909943181390882015170344954037813745251119237402775124991005154299085147091159741067430623420349690886728161235034687649593258746455165172528681627568611599473627285223154284756417744280966157271904828156564067870877521824545300153084830020169048653830385763172792698591998191641849931039720453035065355411394516308865955772746815765864888631258825704788352584540380169938419618543124830541663995097651872542381</span></span><br><span class="line">n2 = <span class="number">21235204662158833223664424963408105101885570855652885953922511758363954474947609854216589644512813634294435585894296340005122907229365513346971631594453999584706013889403572150499529308966742992668850443386284277210686717652643585324255759216699733045642544284406720854291604837774882256435503827543483289606177965628162259184958789025311291796067574924595051311298594432767265114154138693108465671184854794167878031822162731921299518989845784744659944947091213703810190708463199067553747177712259911724424547999547534441790125049383068377243727588278432796727885216967953646999183906479537750330738956233695342750567</span></span><br><span class="line">e2 = <span class="number">15</span></span><br><span class="line">c2 = <span class="number">5481001445755770090420425478456880914921441486935672376394423326451811448703288166341447356603281843336826624725965666634194700496514262129376916108926167953996689011980280761368893884042609095616407660087448963015169181749124738976578495911295096014725354350167650232970262765851074146687931181216305972147994236689422572940877763047930111954798962097847426932730342258169023809341164876019161104439561164839132092594444017039073155506935768658830659965630065643619399324102814118128802834719820426253836317043818687888302054465994498115387703382090351794495827905499417861507007863378916334790750453883661675063377</span></span><br><span class="line">d,x,y = gcdext(e1,e2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c1,x,n1)*<span class="built_in">pow</span>(c2,y,n1) % n1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;05929ec9778ed739d94ee1a77b742714&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-e？"><a href="#WEEK2-e？" class="headerlink" title="[WEEK2]e？"></a>[WEEK2]e？</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个e好像不对，你能找到正确的e吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= <span class="number">70724362259337647663584082414795381346569735601816096923682814277857463878289</span></span><br><span class="line">q= <span class="number">114427188167532721707398034034072867253267857672869034942206947096293901917007</span></span><br><span class="line">e= <span class="number">1314</span></span><br><span class="line">c= <span class="number">4308122681135507736058122041934864039713319497673888928736468819190185301630702240416683093700232966794026900978699666246019059398861283337865339404916304</span></span><br></pre></td></tr></table></figure>
<p>经过测试可以发现，e与phi有公因子2，因此无法直接求逆元，所以需要做如下处理：</p>
<script type="math/tex; mode=display">
(m^2)^{\frac{e}{2}} \equiv c \quad(mod\;n)</script><p>由于e/2与phi互素，因此可以直接求逆元进行RSA解密，求出来的明文是m^2，考虑到明文较短因此可以直接开根。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p= <span class="number">70724362259337647663584082414795381346569735601816096923682814277857463878289</span></span><br><span class="line">q= <span class="number">114427188167532721707398034034072867253267857672869034942206947096293901917007</span></span><br><span class="line">e= <span class="number">1314</span></span><br><span class="line">c= <span class="number">4308122681135507736058122041934864039713319497673888928736468819190185301630702240416683093700232966794026900978699666246019059398861283337865339404916304</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">2</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(<span class="built_in">pow</span>(c,d,n),<span class="number">2</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;This_e_is_real_or_not&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-factorizing-n"><a href="#WEEK2-factorizing-n" class="headerlink" title="[WEEK2]factorizing_n"></a>[WEEK2]factorizing_n</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分解n试试？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">226515252384227990547287743140613580056836242860947832749754689048997071950972581790210817523352001702907675581567498443649554801433663166425134375454937126656357069687274036935331269594383360450823787099121079436459236734336130768046337169817940540921822023269188752420603975467384377614321048859304185067329741055517464271746238143742661897809442359331215501438861121047081117632626097939097519866099140569819965948998542652908170134545593659233229897003698175558888336706474178958535138595687148003367152624421106553412886263257022809480187410133186189435436294593588009551451899398811758511878324326255293307347560753524372663257044426744744426759970254203341706284024734042826158828749144322843934985927079504722440497388146240627249465363931951790326885478025237643</span></span><br><span class="line">c = <span class="number">52409805591744226507807531465616894934028463651864630447934395956954575834603756391651746535033902964658694070544877880970130028487381287088425209448038533705903737694267359561133766799228825599943891152463160326583722749586721691729062524310148743637505134465210906856660867852927837112666513674858029892207902196213784902541173835447263733760225682942461048573387925463479672527491229113710629340960375692432470493054415657845868577650170648157402682163577152288432313996310562452677399267755695644659367792066311336521698894993982901657735586844358679888210537898629281625526455444811591386493005341435516094660429968084363084301878446471676122069724608083578102382181382107225473535696274374370868301830807644939881080301668756603163431000745972823980427048672732291</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure>
<p>yafu分解一下就能得到n的分解，直接解密即可(主要注意phi的求法)。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">226515252384227990547287743140613580056836242860947832749754689048997071950972581790210817523352001702907675581567498443649554801433663166425134375454937126656357069687274036935331269594383360450823787099121079436459236734336130768046337169817940540921822023269188752420603975467384377614321048859304185067329741055517464271746238143742661897809442359331215501438861121047081117632626097939097519866099140569819965948998542652908170134545593659233229897003698175558888336706474178958535138595687148003367152624421106553412886263257022809480187410133186189435436294593588009551451899398811758511878324326255293307347560753524372663257044426744744426759970254203341706284024734042826158828749144322843934985927079504722440497388146240627249465363931951790326885478025237643</span></span><br><span class="line">c = <span class="number">52409805591744226507807531465616894934028463651864630447934395956954575834603756391651746535033902964658694070544877880970130028487381287088425209448038533705903737694267359561133766799228825599943891152463160326583722749586721691729062524310148743637505134465210906856660867852927837112666513674858029892207902196213784902541173835447263733760225682942461048573387925463479672527491229113710629340960375692432470493054415657845868577650170648157402682163577152288432313996310562452677399267755695644659367792066311336521698894993982901657735586844358679888210537898629281625526455444811591386493005341435516094660429968084363084301878446471676122069724608083578102382181382107225473535696274374370868301830807644939881080301668756603163431000745972823980427048672732291</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">11776588228599764849559519654482976956833367474471407292255776713760090338489966385328569279135095351660161277221351884258247731394014018172166064062551483</span></span><br><span class="line">phi = p**<span class="number">4</span>*(p-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;1f95f530f85b940db810fc917607ee22&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK2-哈希猫"><a href="#WEEK2-哈希猫" class="headerlink" title="[WEEK2]哈希猫"></a>[WEEK2]哈希猫</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我翻开 task.py 一查,这题目没有 flag 歪歪斜斜的每页上都写着 ‘哈希算法’ 几个字.我横竖睡不着,仔细看了半夜,才从字缝里看出字来,满本都写着 ‘flag’ !</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">43</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">0</span>:<span class="number">2</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">2</span>:<span class="number">4</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">4</span>:<span class="number">7</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">7</span>:<span class="number">9</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">9</span>:<span class="number">12</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">12</span>:<span class="number">15</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">15</span>:<span class="number">17</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">17</span>:<span class="number">19</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">19</span>:<span class="number">22</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha224(flag[<span class="number">22</span>:<span class="number">24</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha1(flag[<span class="number">24</span>:<span class="number">27</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha384(flag[<span class="number">27</span>:<span class="number">29</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">29</span>:<span class="number">31</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">31</span>:<span class="number">34</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">34</span>:<span class="number">37</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha224(flag[<span class="number">37</span>:<span class="number">39</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.sha512(flag[<span class="number">39</span>:<span class="number">41</span>].encode()).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(flag[<span class="number">41</span>:<span class="number">43</span>].encode()).hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># e4efb4b4173a7e1e48d041cf16a79dea8d8a8885bb53cf028cd6f2b04b7546dbac7eb625dcb0737e4c6d438e00b46c16e489a689561c90491c34ab551bcb6329</span></span><br><span class="line"><span class="comment"># 88f76ff534f98621c41ab3319c62b95d34d602c6aa1ca20c926e2b9d196b934bf1b4c605893af0f9bbca61f496059500</span></span><br><span class="line"><span class="comment"># 588eb0942e37e1be94fcdf2b0d8260be88dda77b</span></span><br><span class="line"><span class="comment"># 3d5cb76279ef4b54c762a970fddee3a368aac8aaf8128898d15619017ba536819d88d3e80f3cf19649017c0f29eeeeb6</span></span><br><span class="line"><span class="comment"># 753949498cf8ca385fcf6cbd4797331d731b4aed</span></span><br><span class="line"><span class="comment"># 543d9f2bfd7f91ca63ab9d2d1b6c6fa48c45a7b0</span></span><br><span class="line"><span class="comment"># e736042cf8eaf7bf5b36f34af1ed40626beb74d923edbc8fdf6557189eea661d2c0e6fba0e88815e7d33f489aa75f8164fad1339fa915fcad378be4db03a3a8e</span></span><br><span class="line"><span class="comment"># 83e281865c566b69002e9753b95eab6df6ac067aa5fe6ea23b75dc679930aa554cd640c78cd1948e010a67e92943f911</span></span><br><span class="line"><span class="comment"># 9bbecb5acecd2544a3ce6fec4dfe5028</span></span><br><span class="line"><span class="comment"># 5598556fc00e3641a3a9fa69182e7f6a8107c9148f248b92a51f1a77</span></span><br><span class="line"><span class="comment"># e48f4614ffffb205e7ec2c80b4a9b9daa8a18994</span></span><br><span class="line"><span class="comment"># 8c4020c5d668c1fe7ccd43e4ba87b6fb89e289dd7c8aefa9a5ca504c83b017f9386494f35d543b5c8cc7065dad2ee70c</span></span><br><span class="line"><span class="comment"># bedbb9deb2d89f624398980d912909a1ccfd01126f6f6328ac10c667e6f522278e565d0d455b2d4883ec36e4506822b2a08110e2e677c2733110984ba666ae8f</span></span><br><span class="line"><span class="comment"># 7db183c15847634a301761dc8b88e035</span></span><br><span class="line"><span class="comment"># c4be70ae961735e9b11c19ed9dccc743</span></span><br><span class="line"><span class="comment"># b7fb4ba19da64864938455118696a126af53a51968215b41bed8686b</span></span><br><span class="line"><span class="comment"># ecc1d2c145955b841c7755e435dace6472ebaa684d8a03ed56274fabaf90ecbc4b392af5fb9d1555ecc5d3f020ba083445983b6c78e13384a8676fb0f8eeaaaa</span></span><br><span class="line"><span class="comment"># 9ad3285ba2ed40f7b805800f927766fc</span></span><br></pre></td></tr></table></figure>
<p>每一部分被hash的明文都较短，因此直接爆破。exp偷懒了，直接全爆破了一遍，因为也不慢。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">table = string.printable</span><br><span class="line">hashes = [<span class="string">&quot;e4efb4b4173a7e1e48d041cf16a79dea8d8a8885bb53cf028cd6f2b04b7546dbac7eb625dcb0737e4c6d438e00b46c16e489a689561c90491c34ab551bcb6329&quot;</span>,<span class="string">&quot;88f76ff534f98621c41ab3319c62b95d34d602c6aa1ca20c926e2b9d196b934bf1b4c605893af0f9bbca61f496059500&quot;</span>,<span class="string">&quot;588eb0942e37e1be94fcdf2b0d8260be88dda77b&quot;</span>,<span class="string">&quot;3d5cb76279ef4b54c762a970fddee3a368aac8aaf8128898d15619017ba536819d88d3e80f3cf19649017c0f29eeeeb6&quot;</span>,<span class="string">&quot;753949498cf8ca385fcf6cbd4797331d731b4aed&quot;</span>,<span class="string">&quot;543d9f2bfd7f91ca63ab9d2d1b6c6fa48c45a7b0&quot;</span>,<span class="string">&quot;e736042cf8eaf7bf5b36f34af1ed40626beb74d923edbc8fdf6557189eea661d2c0e6fba0e88815e7d33f489aa75f8164fad1339fa915fcad378be4db03a3a8e&quot;</span>,<span class="string">&quot;83e281865c566b69002e9753b95eab6df6ac067aa5fe6ea23b75dc679930aa554cd640c78cd1948e010a67e92943f911&quot;</span>,<span class="string">&quot;9bbecb5acecd2544a3ce6fec4dfe5028&quot;</span>,<span class="string">&quot;5598556fc00e3641a3a9fa69182e7f6a8107c9148f248b92a51f1a77&quot;</span>,<span class="string">&quot;e48f4614ffffb205e7ec2c80b4a9b9daa8a18994&quot;</span>,<span class="string">&quot;8c4020c5d668c1fe7ccd43e4ba87b6fb89e289dd7c8aefa9a5ca504c83b017f9386494f35d543b5c8cc7065dad2ee70c&quot;</span>,<span class="string">&quot;bedbb9deb2d89f624398980d912909a1ccfd01126f6f6328ac10c667e6f522278e565d0d455b2d4883ec36e4506822b2a08110e2e677c2733110984ba666ae8f&quot;</span>,<span class="string">&quot;7db183c15847634a301761dc8b88e035&quot;</span>,<span class="string">&quot;c4be70ae961735e9b11c19ed9dccc743&quot;</span>,<span class="string">&quot;b7fb4ba19da64864938455118696a126af53a51968215b41bed8686b&quot;</span>,<span class="string">&quot;ecc1d2c145955b841c7755e435dace6472ebaa684d8a03ed56274fabaf90ecbc4b392af5fb9d1555ecc5d3f020ba083445983b6c78e13384a8676fb0f8eeaaaa&quot;</span>,<span class="string">&quot;9ad3285ba2ed40f7b805800f927766fc&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_hash</span>(<span class="params">msg,i</span>):</span><br><span class="line">    <span class="keyword">if</span>(sha512(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha384(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha1(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(sha224(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(md5(msg.encode()).hexdigest() == hashes[i]):</span><br><span class="line">        <span class="built_in">print</span>(msg,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hashes)):</span><br><span class="line">    has_found = <span class="number">0</span></span><br><span class="line">    <span class="comment">#一个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">if</span>(find_hash(j,i)):</span><br><span class="line">            has_found = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#两个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">if</span>(find_hash(j+k,i)):</span><br><span class="line">                has_found = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#三个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">if</span>(find_hash(j+k+m,i)):</span><br><span class="line">                    has_found = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#四个字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> table:</span><br><span class="line">                    <span class="keyword">if</span>(find_hash(j+k+m+n,i)):</span><br><span class="line">                        has_found = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(has_found == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;You&#x27;VE_cOme_to_unD3R5t4nd_HA5h_a196zTz83fOg&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="WEEK3-Classical-Master"><a href="#WEEK3-Classical-Master" class="headerlink" title="[WEEK3]Classical Master"></a>[WEEK3]Classical Master</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag格式：flag&#123;xxx&#125;</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> s</span><br><span class="line">s = s.lower()</span><br><span class="line">keyM = [?]</span><br><span class="line">l = <span class="built_in">len</span>(keyM)</span><br><span class="line"><span class="keyword">assert</span>(math.gcd(l,<span class="number">26</span>)==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(s[i])*l-<span class="number">97</span>+(keyM[i % l]))%<span class="number">26</span>+<span class="number">97</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#uvgbdzbihyfxvqipvvwxqnpwybaomhnibglpncsdohyespkglzbbfpgwxjsludjcyesphzlcsznuflejzezmnqpktbjbbajocrqlfzogrpuzwesgqbvhvzpongpdbewtihwvuwrgrzbmudnuaxgzgcknydxhhlqguabnjhczkrfjmxbtavbeennkojetoqtpqlwwupkorramvwhhngyytwzybtriaaxgaodzhzvypiszcmbwchuwrjjfdzqpgvbigxsdzfbbgfyzypiblpflirexudlhfvgpebazjwbabglrorulkzpquvgbdzttgittuxgaodkphelvcpepubfuirzaarfdgzevjxmiwhqtgvnbhqspxlagpluwrrrhshshpptrrpaxozjkdkrbvolwwevbojerxvaghmyvlchzmizeflyytvpqbhwnsxwtvojzhenjozircttqqbcgxgabytqvhlyjcjfoopdrsyhlaokbpweecrbfpyqwjtcxjgzcskojorejtpnokoptlfyzypibsrnkpgjrudkojhchqtgnybpsbcxmzaodoxppkevbpqlzorkrfgzhcxsnedkoaarypoptnanxeaodbpwesbrcjxvagebuazlqpbkojbuwrgpsjozefxwzogfvwnzcrogcyhhipwejfylvottgirfhgtaoqhbfccpelqnxzxrelcpcxfkhujtbwjxynyatvvjyrggppzhjfleknapsohrfwxjsludwnibglrghzcaajfxgzfbhykspijyenndcbkdtuxpozqxohtdapmziujgzhnrkczerpunyhuvazqhqjqjmthmorzmihwctnjcbpsbpehccxyjfvhcubyzdsjsdknhpwargcpvabwvwxjsludazxvcxjojflazjquvbfqzobzeespibpqvjlnvcyrijqlzzrzppicrwujzeqrfjgrkdfqbetkglzruohadypgexuttfybvxmiiuvwlbmkppjyzhixbuklllghnbnderaaarfkjwpljhmcxqkbfdqkhnaanorhruuwizpzmtnedgeybiyvwhhtwxemrtjwwthvvpcrimopodhxmcgudjrhpgyjsrmdwqqvhvqirclsyivjhmcyhzjuyvgvcarfububklnhlqgbbhtqrzxgrqkjcthojpcehtjuyedzrcrphihhdkoaajczzqpcdzhaxgvghhgrcryruwvqbcturoxqmihipmjefxsdkhwqdydfrqttqqngzdbqgjkqjkuhbtjrxzqaittalvhmihriuvckzqvbcnvwveozqxohrzunmtwhqtcqdjyrcxlqbpsvuwrzqzibvbqhvcbqgmohjttwlogudqtjdynjrehfvzwvaxmzmzjwyidgyjrxgstcengphtrvbtoralojyrwlzpebghxoiglwqbesxpoxquahrtlebtmnttxppkepckhhhrjespngrpmbfsbwvqlwhmohjttkglmqqvqqespngrpmbfsbwnzsrfnjcrqawxjhzcaqqnjirbvljlyinjwricnqtoralkrlaodoqqvzkxjqhsxhebyyytriububvgtrcxphizjalyytnudjqevjnzogpcohrkxhybwhbkbtokpglmzzwnwdgtrbmwojgivghmcxyjhghbwnrscyvktsclxmrhhqtfhnvgqtjxvagnbvzrovhnnkppykrflcdwldfepetgxvkojnuwrgaodrhbrsyxelcybljtjxeffcjrgjkhpxgaodipekdtzkxsnbpenglqtpfdcyjidpmxrclkbwvtoetzwpiphtfgisjhslhznuwfoxxcbwfvtkglmfmtcnewxepehlkhwesxmbmtwbphedkaarsjohhetkgcyhijgdvraruihqthezlhpzwhqopsvajpnzgcnavbkebtmxkhcpkbhptqtlwwhmlxfrabutwihdkaglqkbiavyhrovhmbpnclnaaxujvdquxbrcyhqfndijpxejcbkudzuhxoghihbwtvpmrdhlofhbuwryzgxbnuclcqtpfjwfynvhmlpodzxbesyytaznbcjzlnpbetmhpnxfhetyhqzyjzdxqjjfshrsclpmiczyqfbebxpcrwjwwjdazrocbqkojivvetriububvgtrlpljlyritiqtanojfqnrkzozlmtneesxakenibwhpptrrpsxaqpktbhlqgwbbelrcfbkgdjcynvgebvqvfpierzxgenthcihccjovzuahhvgelgrpyqqqvjpjoxxuhfhvjnczeqkbgrljyybaxvagivtebtanzohregpprzudfneethmtgzykojlrcgrxsmihhvjtezqgbroreuwrfhzcaqjdpwbtjfnhujergetwhyksrnkjetaolwqprthmrllhbfhgrchazqvzfdzppprxqkbusctkzrapmbnufdkgjyzhiqzbtzxonpminddgehlphnbcznkogtczybfdzppprjcmihhdvphzewbnhsgthqnehvzpiltbpirfhozcvailcxcdrpvgthqnehvzrrqjhmbkzctqvercrbvoktffbtoplmgvmhzctyryrumihvftbktjcmobscuwrzmgpqzuglcrovhwbqzvlkaaxfdropcturezzcbwrqayyzphtinqdqppnvldzfjkkhrrjcmihynwargrchbnuespjgypwtqhrrvgazavkfrilyytfhpknruknlxvhbzarksxklaflohscljmsxlrbwybrcazcpvabwvuwlraodmzwtuozjjxvagpolbhajlksujzlercypcansclcplpzttgigrcbpxnsipcnunzogadfntvuwrlefcjmjdjxvajgstxrtjozyrqjltbfcjqrrfyhxbdvnqbwhmhrvctijcppbjujdkongxxylhensxwtpbqoheklcribtoohjldoqcxqkbtjdynxezlhvrdutyriypwtqhdgeaarylzqyvlepzcrpazuvsxwtzgqbpyhvxehrwjvqrmtyyjyzhiqqilxatmfmhztmyhpzmrpmbspypbfzlmtnettcrglgdqavdcgrcjqdsphtdvmkehgvwbzlletrwchmjglxetmmvoneflkaazavkpekuwrjxubknuespptatqjcstdnybkzmkojilaxgrzotrdtuirbpglghsbsxklagdkrjolxpszmdknfbreybkzmzrvoteybkzmzrdtuirirfmonvvaxmimhtmbwirfpkehujujkwvepxnszhjkdfjsqsjorfbreybkzmzpekepvzbhmihbijozyrpyqoplbhqsjphfntmkhpaaovzwbgwhvnqqobpsescxnnomihhvjtezqgbtqznkoktgnybspilxvaplqhgizrkabjcbjywngtjkqhtizncbhqsguvghroteybkzmmupfvbqlchlwwwvcozxrzmrzscrkrjyzhixbukielmdnblibjpecxfxfljtjaxgjqvzpebuwrgxsyjqdilnqbhfmipsbgodbypwtqndgnlmgbdjcpespeazavkfpngveiruohusclnrjezmkhelrcgranubuubyzaarzqfoptlkabpvvlbheahpxjyctcjfxnrscxvkosclajgpqjmrvqlfybkzmzxqnpwjrzfohgibbnjjjgcohrklxvaplqhgigrcaajumnwrhjhmcyzbsujtpcjmrwnjcevyirexudtywbpprianmihevmypxencasbijyjjjgcohrkuwrjxuszzetdorovhtihentcjrrqkbcbldoqgrpskojlrcgrjcbtgjqppzeahqtoralgzgaprbcpgvbblgwlnrjdkozrazttgiilxgcyhthuyttlzlmkxzqcvwvetjudkzwvtygbdfdwwrqazxraznsnwetkazmqktfpzpxplxcvrziuypziaodrnwkjxqzlwjwqqvgpscgpptxbukcrkrpmkobtccxxrwxohrqahhlqghhcsngjrlmgvphtdgkrgcnqkobiubgbdfmihenbhqsabqwqpespmtsqbfupukxmiehubpseshpkenhbwdilaxgzcjkojiuwjgatsjthnbhqsvnykzeplhmcyzblpeqlcloazctoralojyrwttqqvttyrvujagubyyyleqpqpvttkgddudjwbqhwzrkhhhrjctijczcsrorebhqskhlflpfcojryhsrzscuwjrypwtqqvypjoqzdzqqvshgircbblwvuvcbqgnjchdptxdigvzotvgypbpzqbyjduyythnqqfyddodcyhprziujvxokhhhrjdcxecxsnnpnedurdjcsubsfrcrlbyjoqrquyytdxvagrujvptryvwqpfxvaaruntcyesxaddfmbubbfnpzluhbxqnpwmtwhqzgjvcnhajlkfujduppddwqbptttkgzcqdwrrjlnbtzlmtczdxnjixcjklpfccrarcsjfsclfxggfjmqqvjppxencafriltxopbnbwchvbbfpqdozppjzjogzttgiolljoanlrpxvlxvabnqwzerbhaazmvkpinubjazmdwhovydmzhcwbspilzdyjdjoxbukhmxehlzhthlkaalfvjftldoqgjfdltyvjhetannbhsesphzegsrziururgvnnbhovybctzuvhcnvzkrjzqbvcwnjpzogzttgiolwzkizdoqqdghryruwbgbvqpglayjzfbokpazkhvwqqnjfxgqwjmfsidarbmwbhuwbbpwtmqxjgihdfjsqsvwwthjpqeehlfqbqhyxbqgbtqdduhxopxktlqzrkcgxcmlhrtdfzrvnnlpeklejoaodzlwbkopcxudjlsdgepzxcmihhvttalxcbjcyilxvcjnyzxbukirxxrdbphhuvitesjorubyxmfzlmrzsccczxazhbajzrzrrrpbnqqpjxmthpyqdpbawzmjqvzapigaxghodwpedpyktvnnbfjdjbaaenxxonbgnabmqqbyjedyxojqwblpflnzkqhlzbwvuvitesjorrqahclazbjyivtnlgrqjshwgrcblazblpetgxanehmhyjiwvedjqjmqjqbwrojydospivhazcqdwzsoltxdrflipcnuxmijadfntvdyprqpibpekjhmxrzmtfrrrvgazavkqqnjhpddxvagsbaxdlkhztcrqlfqlchlwwbftdrbpncbrebtyycxrpzhiguwzcmnmizerbhqsehmjuyfxkrjqzobffirfaajxvagibjpmzapsjtuirzaarfdohrkdknrcnqkoreaxdxzcyhqcvypagjhibwebytzojfxufsnujatzcjkojiwvelaznvfsqryjjjgcwnsoypzhaovzorodyxegpvatwvtejonsqhrsclnrrvujaghdgejoauxkosclarjbnnbcstjgroahlfoydxvmcyzbwhzctijczudubsdjzzsqyqtljergzfcnqkojctgilmhbzpekjjvxrfbkorebhqskhntcjdjhetzwlwwwvypziaodrnwkjhmcyhbfupuknazcncanzqlurghzcazrukvhcyhwohonubxerphifniroqoxumihhnvgqlvzmnnununhzewbknndfnrdrqjkujduyytplqhgitvpprzddazfcuodcynxzpekjvcpepubfrilgetpfdqqpgdoqzmhgjuznuwhlmhlwwscllebihbpzedgeinqylohsbjnrianmihcnyeprxzmtfznuwaarfdxurmlnxehzbqntgyvbcyhlxhhfftyazfwbhegdoatehsjcyernptgqjkojldkgzmgpkojmfcrcebmigbvjejrazcahyngyythnqqfsbpvbtjxvagyidkfbpzyzqwppyrizcszybukkxczwqhyrqayytphdqnutftvtpfvrziujfzsqntknydxzdzqwbpzectnktvnnbphkfnalhzcaxruzyzsqpnhcfflkzogqkbtznkofoxxnbcpewvecxwlnzrftkrjbpyrzsctkrjqzobojilhpfxbqmgrrxvlbehmihwvtobbpqdo</span></span><br></pre></td></tr></table></figure>
<p>这一题考察对重合指数概念的理解，具体思路在我另一篇博客中有写过：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/165cec8c.html#more">Crypto趣题-古典密码 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;uvgbdzbihyfxvqipvvwxqnpwybaomhnibglpncsdohyespkglzbbfpgwxjsludjcyesphzlcsznuflejzezmnqpktbjbbajocrqlfzogrpuzwesgqbvhvzpongpdbewtihwvuwrgrzbmudnuaxgzgcknydxhhlqguabnjhczkrfjmxbtavbeennkojetoqtpqlwwupkorramvwhhngyytwzybtriaaxgaodzhzvypiszcmbwchuwrjjfdzqpgvbigxsdzfbbgfyzypiblpflirexudlhfvgpebazjwbabglrorulkzpquvgbdzttgittuxgaodkphelvcpepubfuirzaarfdgzevjxmiwhqtgvnbhqspxlagpluwrrrhshshpptrrpaxozjkdkrbvolwwevbojerxvaghmyvlchzmizeflyytvpqbhwnsxwtvojzhenjozircttqqbcgxgabytqvhlyjcjfoopdrsyhlaokbpweecrbfpyqwjtcxjgzcskojorejtpnokoptlfyzypibsrnkpgjrudkojhchqtgnybpsbcxmzaodoxppkevbpqlzorkrfgzhcxsnedkoaarypoptnanxeaodbpwesbrcjxvagebuazlqpbkojbuwrgpsjozefxwzogfvwnzcrogcyhhipwejfylvottgirfhgtaoqhbfccpelqnxzxrelcpcxfkhujtbwjxynyatvvjyrggppzhjfleknapsohrfwxjsludwnibglrghzcaajfxgzfbhykspijyenndcbkdtuxpozqxohtdapmziujgzhnrkczerpunyhuvazqhqjqjmthmorzmihwctnjcbpsbpehccxyjfvhcubyzdsjsdknhpwargcpvabwvwxjsludazxvcxjojflazjquvbfqzobzeespibpqvjlnvcyrijqlzzrzppicrwujzeqrfjgrkdfqbetkglzruohadypgexuttfybvxmiiuvwlbmkppjyzhixbuklllghnbnderaaarfkjwpljhmcxqkbfdqkhnaanorhruuwizpzmtnedgeybiyvwhhtwxemrtjwwthvvpcrimopodhxmcgudjrhpgyjsrmdwqqvhvqirclsyivjhmcyhzjuyvgvcarfububklnhlqgbbhtqrzxgrqkjcthojpcehtjuyedzrcrphihhdkoaajczzqpcdzhaxgvghhgrcryruwvqbcturoxqmihipmjefxsdkhwqdydfrqttqqngzdbqgjkqjkuhbtjrxzqaittalvhmihriuvckzqvbcnvwveozqxohrzunmtwhqtcqdjyrcxlqbpsvuwrzqzibvbqhvcbqgmohjttwlogudqtjdynjrehfvzwvaxmzmzjwyidgyjrxgstcengphtrvbtoralojyrwlzpebghxoiglwqbesxpoxquahrtlebtmnttxppkepckhhhrjespngrpmbfsbwvqlwhmohjttkglmqqvqqespngrpmbfsbwnzsrfnjcrqawxjhzcaqqnjirbvljlyinjwricnqtoralkrlaodoqqvzkxjqhsxhebyyytriububvgtrcxphizjalyytnudjqevjnzogpcohrkxhybwhbkbtokpglmzzwnwdgtrbmwojgivghmcxyjhghbwnrscyvktsclxmrhhqtfhnvgqtjxvagnbvzrovhnnkppykrflcdwldfepetgxvkojnuwrgaodrhbrsyxelcybljtjxeffcjrgjkhpxgaodipekdtzkxsnbpenglqtpfdcyjidpmxrclkbwvtoetzwpiphtfgisjhslhznuwfoxxcbwfvtkglmfmtcnewxepehlkhwesxmbmtwbphedkaarsjohhetkgcyhijgdvraruihqthezlhpzwhqopsvajpnzgcnavbkebtmxkhcpkbhptqtlwwhmlxfrabutwihdkaglqkbiavyhrovhmbpnclnaaxujvdquxbrcyhqfndijpxejcbkudzuhxoghihbwtvpmrdhlofhbuwryzgxbnuclcqtpfjwfynvhmlpodzxbesyytaznbcjzlnpbetmhpnxfhetyhqzyjzdxqjjfshrsclpmiczyqfbebxpcrwjwwjdazrocbqkojivvetriububvgtrlpljlyritiqtanojfqnrkzozlmtneesxakenibwhpptrrpsxaqpktbhlqgwbbelrcfbkgdjcynvgebvqvfpierzxgenthcihccjovzuahhvgelgrpyqqqvjpjoxxuhfhvjnczeqkbgrljyybaxvagivtebtanzohregpprzudfneethmtgzykojlrcgrxsmihhvjtezqgbroreuwrfhzcaqjdpwbtjfnhujergetwhyksrnkjetaolwqprthmrllhbfhgrchazqvzfdzppprxqkbusctkzrapmbnufdkgjyzhiqzbtzxonpminddgehlphnbcznkogtczybfdzppprjcmihhdvphzewbnhsgthqnehvzpiltbpirfhozcvailcxcdrpvgthqnehvzrrqjhmbkzctqvercrbvoktffbtoplmgvmhzctyryrumihvftbktjcmobscuwrzmgpqzuglcrovhwbqzvlkaaxfdropcturezzcbwrqayyzphtinqdqppnvldzfjkkhrrjcmihynwargrchbnuespjgypwtqhrrvgazavkfrilyytfhpknruknlxvhbzarksxklaflohscljmsxlrbwybrcazcpvabwvuwlraodmzwtuozjjxvagpolbhajlksujzlercypcansclcplpzttgigrcbpxnsipcnunzogadfntvuwrlefcjmjdjxvajgstxrtjozyrqjltbfcjqrrfyhxbdvnqbwhmhrvctijcppbjujdkongxxylhensxwtpbqoheklcribtoohjldoqcxqkbtjdynxezlhvrdutyriypwtqhdgeaarylzqyvlepzcrpazuvsxwtzgqbpyhvxehrwjvqrmtyyjyzhiqqilxatmfmhztmyhpzmrpmbspypbfzlmtnettcrglgdqavdcgrcjqdsphtdvmkehgvwbzlletrwchmjglxetmmvoneflkaazavkpekuwrjxubknuespptatqjcstdnybkzmkojilaxgrzotrdtuirbpglghsbsxklagdkrjolxpszmdknfbreybkzmzrvoteybkzmzrdtuirirfmonvvaxmimhtmbwirfpkehujujkwvepxnszhjkdfjsqsjorfbreybkzmzpekepvzbhmihbijozyrpyqoplbhqsjphfntmkhpaaovzwbgwhvnqqobpsescxnnomihhvjtezqgbtqznkoktgnybspilxvaplqhgizrkabjcbjywngtjkqhtizncbhqsguvghroteybkzmmupfvbqlchlwwwvcozxrzmrzscrkrjyzhixbukielmdnblibjpecxfxfljtjaxgjqvzpebuwrgxsyjqdilnqbhfmipsbgodbypwtqndgnlmgbdjcpespeazavkfpngveiruohusclnrjezmkhelrcgranubuubyzaarzqfoptlkabpvvlbheahpxjyctcjfxnrscxvkosclajgpqjmrvqlfybkzmzxqnpwjrzfohgibbnjjjgcohrklxvaplqhgigrcaajumnwrhjhmcyzbsujtpcjmrwnjcevyirexudtywbpprianmihevmypxencasbijyjjjgcohrkuwrjxuszzetdorovhtihentcjrrqkbcbldoqgrpskojlrcgrjcbtgjqppzeahqtoralgzgaprbcpgvbblgwlnrjdkozrazttgiilxgcyhthuyttlzlmkxzqcvwvetjudkzwvtygbdfdwwrqazxraznsnwetkazmqktfpzpxplxcvrziuypziaodrnwkjxqzlwjwqqvgpscgpptxbukcrkrpmkobtccxxrwxohrqahhlqghhcsngjrlmgvphtdgkrgcnqkobiubgbdfmihenbhqsabqwqpespmtsqbfupukxmiehubpseshpkenhbwdilaxgzcjkojiuwjgatsjthnbhqsvnykzeplhmcyzblpeqlcloazctoralojyrwttqqvttyrvujagubyyyleqpqpvttkgddudjwbqhwzrkhhhrjctijczcsrorebhqskhlflpfcojryhsrzscuwjrypwtqqvypjoqzdzqqvshgircbblwvuvcbqgnjchdptxdigvzotvgypbpzqbyjduyythnqqfyddodcyhprziujvxokhhhrjdcxecxsnnpnedurdjcsubsfrcrlbyjoqrquyytdxvagrujvptryvwqpfxvaaruntcyesxaddfmbubbfnpzluhbxqnpwmtwhqzgjvcnhajlkfujduppddwqbptttkgzcqdwrrjlnbtzlmtczdxnjixcjklpfccrarcsjfsclfxggfjmqqvjppxencafriltxopbnbwchvbbfpqdozppjzjogzttgiolljoanlrpxvlxvabnqwzerbhaazmvkpinubjazmdwhovydmzhcwbspilzdyjdjoxbukhmxehlzhthlkaalfvjftldoqgjfdltyvjhetannbhsesphzegsrziururgvnnbhovybctzuvhcnvzkrjzqbvcwnjpzogzttgiolwzkizdoqqdghryruwbgbvqpglayjzfbokpazkhvwqqnjfxgqwjmfsidarbmwbhuwbbpwtmqxjgihdfjsqsvwwthjpqeehlfqbqhyxbqgbtqdduhxopxktlqzrkcgxcmlhrtdfzrvnnlpeklejoaodzlwbkopcxudjlsdgepzxcmihhvttalxcbjcyilxvcjnyzxbukirxxrdbphhuvitesjorubyxmfzlmrzsccczxazhbajzrzrrrpbnqqpjxmthpyqdpbawzmjqvzapigaxghodwpedpyktvnnbfjdjbaaenxxonbgnabmqqbyjedyxojqwblpflnzkqhlzbwvuvitesjorrqahclazbjyivtnlgrqjshwgrcblazblpetgxanehmhyjiwvedjqjmqjqbwrojydospivhazcqdwzsoltxdrflipcnuxmijadfntvdyprqpibpekjhmxrzmtfrrrvgazavkqqnjhpddxvagsbaxdlkhztcrqlfqlchlwwbftdrbpncbrebtyycxrpzhiguwzcmnmizerbhqsehmjuyfxkrjqzobffirfaajxvagibjpmzapsjtuirzaarfdohrkdknrcnqkoreaxdxzcyhqcvypagjhibwebytzojfxufsnujatzcjkojiwvelaznvfsqryjjjgcwnsoypzhaovzorodyxegpvatwvtejonsqhrsclnrrvujaghdgejoauxkosclarjbnnbcstjgroahlfoydxvmcyzbwhzctijczudubsdjzzsqyqtljergzfcnqkojctgilmhbzpekjjvxrfbkorebhqskhntcjdjhetzwlwwwvypziaodrnwkjhmcyhbfupuknazcncanzqlurghzcazrukvhcyhwohonubxerphifniroqoxumihhnvgqlvzmnnununhzewbknndfnrdrqjkujduyytplqhgitvpprzddazfcuodcynxzpekjvcpepubfrilgetpfdqqpgdoqzmhgjuznuwhlmhlwwscllebihbpzedgeinqylohsbjnrianmihcnyeprxzmtfznuwaarfdxurmlnxehzbqntgyvbcyhlxhhfftyazfwbhegdoatehsjcyernptgqjkojldkgzmgpkojmfcrcebmigbvjejrazcahyngyythnqqfsbpvbtjxvagyidkfbpzyzqwppyrizcszybukkxczwqhyrqayytphdqnutftvtpfvrziujfzsqntknydxzdzqwbpzectnktvnnbphkfnalhzcaxruzyzsqpnhcfflkzogqkbtznkofoxxnbcpewvecxwlnzrftkrjbpyrzsctkrjqzobojilhpfxbqmgrrxvlbehmihwvtobbpqdo&quot;</span></span><br><span class="line">table = ascii_lowercase</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算与英语字频吻合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In_m</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * dic[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 依据重合指数找出l = 11</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的key</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            temp = cut(t,<span class="number">11</span>)</span><br><span class="line">            temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                temp1[i] += temp[k][i]</span><br><span class="line">            m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">            index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">            <span class="comment">#print(index)</span></span><br><span class="line">            <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                <span class="built_in">print</span>(b, end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 得到m</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    key = [<span class="number">19</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">1</span>,<span class="number">25</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">3</span>]</span><br><span class="line">    b = <span class="number">11</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-key[i%b])*inverse(<span class="number">11</span>,<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;youaretherealmaster&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-e-3"><a href="#WEEK3-e-3" class="headerlink" title="[WEEK3]e=3"></a>[WEEK3]e=3</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e=3最简单了</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">M = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">k = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">M, k</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime = <span class="built_in">sum</span>([random.getrandbits(<span class="number">16</span>) * M**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(prime) <span class="keyword">and</span> (prime-<span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line">        </span><br><span class="line">p, q, r = [gen_prime(M, k) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">N = p * q * r</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N = 3298593732762513945346583663585189774036688951059270517149719979434109398447628726951796006700754759352430339647168415338320547665794785951232342902233013221132246450312038122695046634624323814318286314664160113738299465643128504110932989263063331290006313</span></span><br><span class="line"><span class="string">c = 869489491924953293290699796392271834401780578884556874640489836779925847562085802848542382525324081900560761299059365684697233025590164192409062717942292142906458498707677300694595072310705415037345581289469698221468377159605973403471463296806900975548438</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>观察到N由三个素数组成，且每个素数均满足如下形式：</p>
<script type="math/tex; mode=display">
p = a_0 + a_1*M + a_2*M^2 + a_3*M^3 + a_4*M^4 + a_5*M^5</script><p>其中，ai是随机生成的16比特数，M是2^54。可以发现，这其实就是一个M进制数，其几个数码分别为a_i。</p>
<p>什么意思呢？举个例子，一个十进制数12345，可以写成下面的形式：</p>
<script type="math/tex; mode=display">
12345 = 5 + 4*10 + 3*10^2 + 2*10^3 + 1*10^4</script><p>因此其几个数码为1、2、3、4、5。而这个数显然也可以写为多项式形式如下：</p>
<script type="math/tex; mode=display">
f(x) = 5 + 4x + 3x^2 + 2x^3 + x^4</script><p>当x取值为10时，代入多项式的值就能求得12345。</p>
<p>那么把这个应用到M进制数 上来，就有：</p>
<script type="math/tex; mode=display">
f_p(x) = a_0 + a_1x + a_2x^2 + a_3x^3 + a_4x^4 + a_5x^5</script><script type="math/tex; mode=display">
f_q(x) = b_0 + b_1x + b_2x^2 + b_3x^3 + b_4x^4 + b_5x^5</script><script type="math/tex; mode=display">
f_r(x) = c_0 + c_1x + c_2x^2 + c_3x^3 + c_4x^4 + c_5x^5</script><p>当x取为M时，上面三个多项式就分别取得p、q、r。因此n可以看作是三个多项式相乘，将n也转化为M进制数下的多项式形式进行分解，就能得到三个多项式，再将M分别代进多项式中就能得到p、q、r。</p>
<p>得到p、q、r后，由于3与p-1、q-1、r-1均不互素，因此还需要有限域开根后CRT组合。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">M = <span class="number">2</span>**<span class="number">54</span></span><br><span class="line">k = <span class="number">6</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">3298593732762513945346583663585189774036688951059270517149719979434109398447628726951796006700754759352430339647168415338320547665794785951232342902233013221132246450312038122695046634624323814318286314664160113738299465643128504110932989263063331290006313</span></span><br><span class="line">c = <span class="number">869489491924953293290699796392271834401780578884556874640489836779925847562085802848542382525324081900560761299059365684697233025590164192409062717942292142906458498707677300694595072310705415037345581289469698221468377159605973403471463296806900975548438</span></span><br><span class="line"></span><br><span class="line">n = N</span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">listM = []</span><br><span class="line"><span class="keyword">while</span>(N != <span class="number">0</span>):</span><br><span class="line">    listM.append(N &amp; (<span class="number">2</span>**<span class="number">54</span>-<span class="number">1</span>))</span><br><span class="line">    N = N&gt;&gt;<span class="number">54</span></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    f += (x^i)*(listM[i])</span><br><span class="line"><span class="comment">#print(f.is_irreducible())</span></span><br><span class="line">temp = f.factor()</span><br><span class="line">plist = <span class="built_in">list</span>(temp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">qlist = <span class="built_in">list</span>(temp[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">rlist = <span class="built_in">list</span>(temp[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">p,q,r = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    p += plist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line">    q += qlist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line">    r += rlist[i]*(<span class="number">2</span>**(<span class="number">54</span>*i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resp = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resq = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(r)[]</span><br><span class="line">f = x^<span class="number">3</span> - c</span><br><span class="line">resr = f.roots()</span><br><span class="line"></span><br><span class="line">modlist = [p,q,r]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> resr:</span><br><span class="line">            c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),<span class="built_in">int</span>(k[<span class="number">0</span>])]</span><br><span class="line">            m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">            temp = long_to_bytes(m)</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;e1b7d2c2-e265-11eb-b693-98fa9b5bc5fe&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-撤退！"><a href="#WEEK3-撤退！" class="headerlink" title="[WEEK3]撤退！"></a>[WEEK3]撤退！</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = *******</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">hb = <span class="built_in">len</span>(flag)//<span class="number">2</span></span><br><span class="line">hb1 = bytes_to_long(flag[:hb])</span><br><span class="line">hb2 = bytes_to_long(flag[hb:])</span><br><span class="line">D = <span class="number">117</span></span><br><span class="line">x = *******</span><br><span class="line">y = *******</span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">enc1 = <span class="built_in">pow</span>(<span class="number">334</span> * n ** <span class="number">2</span> + <span class="number">1</span>, hb1, n ** <span class="number">3</span>)</span><br><span class="line">enc2 = <span class="built_in">pow</span>(y * n + <span class="number">1</span>, hb2, n ** <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc1)</span><br><span class="line"><span class="built_in">print</span>(enc2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">22970461944771505344360312103272646796516672838005008112295760406393062653512719537671401409823031480497512491850701737384621917068068328814717390355072928714618936469722031401433712342846780800586803218279291870162605299119904016959036663767093191710796830156169925350938267584422752300171293262391805105435418210827517225439398971437884496416502510866914857269951072184669675339439115587325754431761172634305242650221404868035624879538862880516438147301289746375407945908866907822940285764276956194031840381838253923392794376568293056359058519233175242523219646628321609305890926063856400793680641992567798104042179</span></span><br><span class="line"><span class="string">26380574883568223071748995929433720836641856899148821439556557592284999544802260386919172895274884666117488851000353221957579311943624258651646692068406462392980585841604755021251430357273933800209194484692955106014890051223465745443628784077844452303995642424661442978294757109040081050794398646640530714904683097650259060507908334791761124660725589404056356987726993518057050112725483482660202442987346646160168856264312557595890710521723067518303906942469282527855551751244126251698491010628369012024332666619702895796133780038584346428759785302542637171018926824843416176876077558936427399803328577151066597396550597352625005028261156114571696860700477410270949916316951150072218466374341394892405947793726872954497972795793421222424616005278493704125169150432275472846871295341469911428057621028515874978272004775903906188556908968810828510069826724631700523623584802605889173266453916347583720706846630531082266742377818663000322817114065116737931523412220137972079139507877669106470150742546914051556747087768279286696519700220233815812834114117581332234344024169109786527295900675653245014343393093832478814567179131966404207553408747774003319241150221488231674711614902743345516888975702483348011349617017294004761259419165663633915672647187482242462163420462987034240805524991</span></span><br><span class="line"><span class="string">21190674872507845600786632640969893237129139877891071648594239906632201421611954626926407751780936578853046780585253060958265549804784845192757301417173404074965693840282568701968464564320290763073618132775799910356101999797720378313304899173154753858674284071499775857913937184713024788245068426198878834805943703426673512761178072458895973672088230653246356764681418231485563287856188079274727706554037799748595877069143254516390328019381867648697880975670688337068196993846986940286056873616919629721264139576692806770826129279380704466982862393203486037890448173834315360975464927583664991534571518159777852793416869350127023692816051992183670690315184731534611966603509867722931839839084915943647295195314171688904055674915382434841320612108023531722571519492067471405656160804893645713608592561788743509876384862097871840094582513721456962354498561006793609200187065931433827465455037397503619844768415369973322759940610358415184510344945559838007474725413347675347453443583610217539704055467297318282309867987435252614428856515259899385689971172417660178761139941056839133998928898528744331662995956041897599276732929020537698559927654297185422925737241274711904687894411308774527520523946951208805307060323875839353707549772052299847176824964552693112658495961070555882583739017417359463576705453026824255338859618053086622031941</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>首先解佩尔方程得到x、y。然后由于：</p>
<script type="math/tex; mode=display">
enc1 \equiv (334n^2+1)^{m1} \quad(mod\;n^3)</script><script type="math/tex; mode=display">
enc2 \equiv (yn+1)^{m2} \quad(mod\;n^3)</script><p>分别用二项式定理展开，并将二式在模n^2下求解，会得到以下两个式子：</p>
<script type="math/tex; mode=display">
enc1 \equiv 1 + 334n^2*m1 \quad(mod\;n^3)</script><script type="math/tex; mode=display">
enc2 \equiv 1 + yn*m2 \quad(mod\;n^2)</script><p>分别对应做除法即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">100</span></span>):</span><br><span class="line">    cf = continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">D = <span class="number">117</span></span><br><span class="line">x,y = solve_pell(D)</span><br><span class="line"></span><br><span class="line">n = <span class="number">22970461944771505344360312103272646796516672838005008112295760406393062653512719537671401409823031480497512491850701737384621917068068328814717390355072928714618936469722031401433712342846780800586803218279291870162605299119904016959036663767093191710796830156169925350938267584422752300171293262391805105435418210827517225439398971437884496416502510866914857269951072184669675339439115587325754431761172634305242650221404868035624879538862880516438147301289746375407945908866907822940285764276956194031840381838253923392794376568293056359058519233175242523219646628321609305890926063856400793680641992567798104042179</span></span><br><span class="line">enc1 = <span class="number">26380574883568223071748995929433720836641856899148821439556557592284999544802260386919172895274884666117488851000353221957579311943624258651646692068406462392980585841604755021251430357273933800209194484692955106014890051223465745443628784077844452303995642424661442978294757109040081050794398646640530714904683097650259060507908334791761124660725589404056356987726993518057050112725483482660202442987346646160168856264312557595890710521723067518303906942469282527855551751244126251698491010628369012024332666619702895796133780038584346428759785302542637171018926824843416176876077558936427399803328577151066597396550597352625005028261156114571696860700477410270949916316951150072218466374341394892405947793726872954497972795793421222424616005278493704125169150432275472846871295341469911428057621028515874978272004775903906188556908968810828510069826724631700523623584802605889173266453916347583720706846630531082266742377818663000322817114065116737931523412220137972079139507877669106470150742546914051556747087768279286696519700220233815812834114117581332234344024169109786527295900675653245014343393093832478814567179131966404207553408747774003319241150221488231674711614902743345516888975702483348011349617017294004761259419165663633915672647187482242462163420462987034240805524991</span></span><br><span class="line">enc2 = <span class="number">21190674872507845600786632640969893237129139877891071648594239906632201421611954626926407751780936578853046780585253060958265549804784845192757301417173404074965693840282568701968464564320290763073618132775799910356101999797720378313304899173154753858674284071499775857913937184713024788245068426198878834805943703426673512761178072458895973672088230653246356764681418231485563287856188079274727706554037799748595877069143254516390328019381867648697880975670688337068196993846986940286056873616919629721264139576692806770826129279380704466982862393203486037890448173834315360975464927583664991534571518159777852793416869350127023692816051992183670690315184731534611966603509867722931839839084915943647295195314171688904055674915382434841320612108023531722571519492067471405656160804893645713608592561788743509876384862097871840094582513721456962354498561006793609200187065931433827465455037397503619844768415369973322759940610358415184510344945559838007474725413347675347453443583610217539704055467297318282309867987435252614428856515259899385689971172417660178761139941056839133998928898528744331662995956041897599276732929020537698559927654297185422925737241274711904687894411308774527520523946951208805307060323875839353707549772052299847176824964552693112658495961070555882583739017417359463576705453026824255338859618053086622031941</span></span><br><span class="line"></span><br><span class="line">m1 = (enc1 - <span class="number">1</span>) // (<span class="number">334</span>*n^<span class="number">2</span>)</span><br><span class="line">m2 = (enc2% (n^<span class="number">2</span>) - <span class="number">1</span>) // (y*n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;6c6eb27a-061b-baf4-4cae26-5a609588ce&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-好好好！"><a href="#WEEK3-好好好！" class="headerlink" title="[WEEK3]好好好！"></a>[WEEK3]好好好！</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">***EGK*MAPZ**3TISLXYHW*B4*R*6CQV</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">dp=<span class="number">89183181604123417010894108474901628410408206538085478807758137668201829058797702838603939730356798163745078443656032825128645105954284119126609502005130005399692420386460970318283171848176434285488698019425286328269756591931253074416895028845240978211030365697435579850343911269163064228581083838914477473793</span></span><br><span class="line">n=<span class="number">17133884272385326910236146208723169235592379139078245324256146697759098524213354087333170410075813764497353656874360657828668202585141557095326829141561993608634568037533128091918704136052835609732443342167341276983343070200953604216445186924411131823487594273213380078485528148801722039459601896275130691200206027353715109606722659553700867073796386669768748305283547862565020499794358571741903375812063001390288166187510171105241363677243530996160649133253643422391688399573703498726489248479978887237752214015456924632092625018668632234215462091314384917176427670194819828555385014264912614752917792278216214856001</span></span><br><span class="line">c=<span class="number">7297673446200396117470312266735704951424121735299327785232249350567349180167473433806232931862684106388722088953786183522191592452252650217579986150373463901393038386627370305688040315665037164819432754099421229466379901436696822022518438390977543864543590936753547325597766614648063328562516667604171990354928485383191174966274941678597887943784661684719053108281896697098991347034225406718530599672101743303723470910913422462764406680309933367328977341637394665138995676573466380198978810546689819954949832833954061771415463198737542769848298258925680570823701939997224167603657418270886620562332895947413332492672</span></span><br></pre></td></tr></table></figure>
<p>首先由dp泄漏得到一串换表后的base32值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7U25DUJJ7USYATEN5SREOFFG5NY57FPS77U5DFPY54JEG3NYKWSYA3YD5CXYTTNW53QS====</span><br></pre></td></tr></table></figure>
<p>然后让chatgpt写一个生成所有可能的码表的脚本，并检验换表base32解密后是否有flag头就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b32decode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">dp=<span class="number">89183181604123417010894108474901628410408206538085478807758137668201829058797702838603939730356798163745078443656032825128645105954284119126609502005130005399692420386460970318283171848176434285488698019425286328269756591931253074416895028845240978211030365697435579850343911269163064228581083838914477473793</span></span><br><span class="line">n=<span class="number">17133884272385326910236146208723169235592379139078245324256146697759098524213354087333170410075813764497353656874360657828668202585141557095326829141561993608634568037533128091918704136052835609732443342167341276983343070200953604216445186924411131823487594273213380078485528148801722039459601896275130691200206027353715109606722659553700867073796386669768748305283547862565020499794358571741903375812063001390288166187510171105241363677243530996160649133253643422391688399573703498726489248479978887237752214015456924632092625018668632234215462091314384917176427670194819828555385014264912614752917792278216214856001</span></span><br><span class="line">c=<span class="number">7297673446200396117470312266735704951424121735299327785232249350567349180167473433806232931862684106388722088953786183522191592452252650217579986150373463901393038386627370305688040315665037164819432754099421229466379901436696822022518438390977543864543590936753547325597766614648063328562516667604171990354928485383191174966274941678597887943784661684719053108281896697098991347034225406718530599672101743303723470910913422462764406680309933367328977341637394665138995676573466380198978810546689819954949832833954061771415463198737542769848298258925680570823701939997224167603657418270886620562332895947413332492672</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,e):</span><br><span class="line">    <span class="keyword">if</span>((e*dp-<span class="number">1</span>) % k == <span class="number">0</span> <span class="keyword">and</span> GCD((e*dp-<span class="number">1</span>) // k + <span class="number">1</span> , n) != <span class="number">1</span>):</span><br><span class="line">        p = (e*dp-<span class="number">1</span>) // k + <span class="number">1</span></span><br><span class="line">        q = n // p</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="comment">#print(long_to_bytes(pow(c,d,n)))</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;7U25DUJJ7USYATEN5SREOFFG5NY57FPS77U5DFPY54JEG3NYKWSYA3YD5CXYTTNW53QS====&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;***EGK*MAPZ**3TISLXYHW*B4*R*6CQV&quot;</span></span><br><span class="line">t4ble = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&quot;</span></span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t4ble:</span><br><span class="line">    <span class="keyword">if</span>(i <span class="keyword">not</span> <span class="keyword">in</span> table):</span><br><span class="line">        temp.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定字符列表</span></span><br><span class="line">characters = temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line">target_string = table</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储结果的列表</span></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成给定字符的全排列</span></span><br><span class="line">permutations = <span class="built_in">list</span>(itertools.permutations(characters))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历全排列并将其填入目标字符串</span></span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    result = <span class="built_in">list</span>(target_string)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> perm:</span><br><span class="line">        result[result.index(<span class="string">&#x27;*&#x27;</span>)] = char</span><br><span class="line">    results.append(<span class="string">&#x27;&#x27;</span>.join(result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印或处理结果</span></span><br><span class="line"><span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results, <span class="number">1</span>):</span><br><span class="line">    temp = b32decode(c.translate(<span class="built_in">str</span>.maketrans(result,t4ble)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp) <span class="keyword">and</span> <span class="string">&quot;\\&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp)):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;fa48a440-d0ff-0c2a-366243-a46b7e7853&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-easyrsa"><a href="#WEEK3-easyrsa" class="headerlink" title="[WEEK3]easyrsa"></a>[WEEK3]easyrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line"></span><br><span class="line">leak1 = (p2+q2) &gt;&gt; <span class="number">400</span></span><br><span class="line">leak2 = (p1 &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">350</span>) - <span class="number">1</span>)) &gt;&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">pow</span>(leak2,e,n2)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag),e,n1)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">f&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;leak1 = <span class="subst">&#123;leak1&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.write(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>output.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n1 = 105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911</span><br><span class="line">n2 = 20369481027961668058257949652346266097405331865071244844827896944882851755421021125005038786750268341013032202394581223828526073179263634639721089663050687773353438686984875196973012077948955566738301337866191557952973517042420660699281973702694965572488938789954679350791243570953680441483360036599350550534192027759384675611155970913348616382186229565994100357427843446265863186624731991521034305958565644266001622849342042747046352413268149901263629515623929619659379883036239511300563910486156582808698915297257307692017642458823600500445082987244477251123335410633989767118317681371314078169733374888688620813839</span><br><span class="line">leak1 = 110733171993470709195465104383246525062178362778220972191726705114514369848757940664883819735824778128179586221599072975207093223575285541338555960658178287486722693023393688158120847028382</span><br><span class="line">enc = 3724360314735337348015983350518926695244720487101059718828225257324872465291143851090607580822961202894850524395217010317254775500983396154162166500198523991652838543842978138662752717532358799622372813160573374563924704242911344052149200174619645796187521459916955545794017698320367273671936314947729523150627463505338870024421481261166504454532278895870561732979282672259730923724762173494886613682487373643406390205027508946750313076817576295795818790961232101069994823561840743308871216879655652136743807002025483269687509388947008928281179566366429525183899914275273098400627187051739816901887290337980735995613</span><br><span class="line">c = 38127787578353827234498259231834082660893046004292279030517959465543348558091033172704284501791369355347078715874056471582324178524957666710131669794646539355849074198396968523041568909435662208846480656877184197877122598569708545477705274221697660270808685794034776172296500330563270867517390911486555286886</span><br></pre></td></tr></table></figure>
<p>这个题目前段时间有师傅问过我，结果仔细一看连数据都没改(……)，还是讲一讲思路吧。</p>
<p>题目的主要问题在于由leak1解出leak2。显然，如果我们有完整的p2+q2，我们就能够直接联立n2的方程得到精确的p2、q2的值。但是问题在于leak1的低四百位被隐藏了，因此我们没有办法直接解出精确的p2、q2。</p>
<p>而事实上，我们并不需要精确的p2、q2，我们只需要知道他们的高位，就可以通过p高位泄漏求出他们的精确值。因此我们可以通过下面方式解出p2、q2的近似值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part1 get leak2</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*((leak1&lt;&lt;<span class="number">400</span>)-x) - n2 </span><br><span class="line">p2high = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>可以看到，在以前一般我们建立的是模n的多项式环，因此要么解不出来，要么解出来的是准确值。</p>
<p>而现在我们建立的是一个精度为1000位的实数环，解出来的值就满足：</p>
<script type="math/tex; mode=display">
p2*q2 \approx n2</script><p>而解出的p2、q2与实际p2、q2的误差，与leak1与(p2+q2)的实际值之间的误差相当，因此解出来的值高位是准确的，最多还会有一个十进制数的进位产生的差异，也就是约为3个二进制位。因此我们可以用p高位泄漏解出p2、q2。解出p2、q2后就有leak2，然后就是一个普通的p低位泄露问题。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911</span></span><br><span class="line">n2 = <span class="number">20369481027961668058257949652346266097405331865071244844827896944882851755421021125005038786750268341013032202394581223828526073179263634639721089663050687773353438686984875196973012077948955566738301337866191557952973517042420660699281973702694965572488938789954679350791243570953680441483360036599350550534192027759384675611155970913348616382186229565994100357427843446265863186624731991521034305958565644266001622849342042747046352413268149901263629515623929619659379883036239511300563910486156582808698915297257307692017642458823600500445082987244477251123335410633989767118317681371314078169733374888688620813839</span></span><br><span class="line">leak1 = <span class="number">110733171993470709195465104383246525062178362778220972191726705114514369848757940664883819735824778128179586221599072975207093223575285541338555960658178287486722693023393688158120847028382</span></span><br><span class="line">enc = <span class="number">3724360314735337348015983350518926695244720487101059718828225257324872465291143851090607580822961202894850524395217010317254775500983396154162166500198523991652838543842978138662752717532358799622372813160573374563924704242911344052149200174619645796187521459916955545794017698320367273671936314947729523150627463505338870024421481261166504454532278895870561732979282672259730923724762173494886613682487373643406390205027508946750313076817576295795818790961232101069994823561840743308871216879655652136743807002025483269687509388947008928281179566366429525183899914275273098400627187051739816901887290337980735995613</span></span><br><span class="line">c = <span class="number">38127787578353827234498259231834082660893046004292279030517959465543348558091033172704284501791369355347078715874056471582324178524957666710131669794646539355849074198396968523041568909435662208846480656877184197877122598569708545477705274221697660270808685794034776172296500330563270867517390911486555286886</span></span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#part1 get leak2</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*((leak1&lt;&lt;<span class="number">400</span>)-x) - n2 </span><br><span class="line">p2high = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">f = p2high + x</span><br><span class="line">res = f.small_roots(X=<span class="number">2</span>^<span class="number">403</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = <span class="built_in">int</span>(p2high + res)</span><br><span class="line">q2 = n2 // p2</span><br><span class="line">d2 = inverse(e,(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">leak2 = <span class="built_in">pow</span>(enc, d2, n2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get m</span></span><br><span class="line">xbits = <span class="number">512</span> - <span class="number">350</span></span><br><span class="line">leak2 = leak2 &lt;&lt; <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    p1low = <span class="built_in">int</span>(leak2 + i)</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n1))</span><br><span class="line">    f = x*<span class="number">2</span>^<span class="number">350</span> + p1low</span><br><span class="line">    f = f.monic()</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        res = f.small_roots(X=<span class="number">2</span>^xbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">        p1 = <span class="built_in">int</span>(res * <span class="number">2</span>^<span class="number">350</span> + p1low)</span><br><span class="line">        q1 = n1 // p1</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">d1 = inverse(e,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d1,n1))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;9995eae8acaac286c7b72e50e5258dc3</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="WEEK3-ECC"><a href="#WEEK3-ECC" class="headerlink" title="[WEEK3]ECC"></a>[WEEK3]ECC</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ECC是“Error Checking and Correcting”的简写 ---- 《百度百科》</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long ,getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag , p, A, B</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, multiplier, increment, modulus</span>):</span><br><span class="line">        self.state = seed</span><br><span class="line">        self.multiplier = multiplier</span><br><span class="line">        self.increment = increment</span><br><span class="line">        self.modulus = modulus</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = (self.state * self.multiplier + self.increment) % self.modulus</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">LcG = LCG(p, A, B, getPrime(<span class="number">300</span>))</span><br><span class="line">hint = []</span><br><span class="line">rounds = randint(<span class="number">9</span>,<span class="number">999</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">    hint.append(LcG.<span class="built_in">round</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, LcG.modulus)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint =&#x27;</span>, hint[rounds-<span class="number">3</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rounds =&#x27;</span>,rounds)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E.random_point() </span><br><span class="line">Q = m*P</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;P:&#x27;</span>,P)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Q:&#x27;</span>,Q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N = 1756436166407836493798726314365345209041467063368466691280475314657490639743277323145836159 </span></span><br><span class="line"><span class="comment"># hint = [1570694739893062645954897001702004554030820147773705206144961894236480600502144377530243430, 1115071559941911318308753566664426840423418447339890011281946738239984044436490114276986358, 1724417937645231946682439402005218433918418922370889412352845326882349141006072218192190414]</span></span><br><span class="line"><span class="comment"># rounds = 201</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># P:(37977159917993725569055235995991171988930922261017470137494292644600863220268 : 18702328678557323528043531437349309255558505679181203523362701784535278781654 : 1)</span></span><br><span class="line"><span class="comment"># Q:(50869218310545924409688834318827602878615827095578074934136681999097237356553 : 56112306156084592253561365078969255013878959268941761289693638560533128799289 : 1)</span></span><br></pre></td></tr></table></figure>
<p>分为三步解决题目：</p>
<ul>
<li>由hint恢复LCG的参数A、B</li>
<li>恢复LCG的种子p</li>
<li>发现由p、A、B参数生成的椭圆曲线的阶恰为p，用smart_attack解DLP</li>
</ul>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">1756436166407836493798726314365345209041467063368466691280475314657490639743277323145836159</span> </span><br><span class="line">hint = [<span class="number">1570694739893062645954897001702004554030820147773705206144961894236480600502144377530243430</span>, <span class="number">1115071559941911318308753566664426840423418447339890011281946738239984044436490114276986358</span>, <span class="number">1724417937645231946682439402005218433918418922370889412352845326882349141006072218192190414</span>]</span><br><span class="line">rounds = <span class="number">201</span></span><br><span class="line"></span><br><span class="line">P = (<span class="number">37977159917993725569055235995991171988930922261017470137494292644600863220268</span>,<span class="number">18702328678557323528043531437349309255558505679181203523362701784535278781654</span>,<span class="number">1</span>)</span><br><span class="line">Q = (<span class="number">50869218310545924409688834318827602878615827095578074934136681999097237356553</span>,<span class="number">56112306156084592253561365078969255013878959268941761289693638560533128799289</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">m = N</span><br><span class="line">c1 ,c2,c3 = hint</span><br><span class="line"></span><br><span class="line">A = inverse(c2-c1,m)*(c3-c2) %m</span><br><span class="line">B = (-A*c1 + c2) % m</span><br><span class="line">seed = c1</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">201</span>-<span class="number">3</span>+<span class="number">1</span>):</span><br><span class="line">    seed = (seed-B) * inverse(A,m) % m</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(seed)</span><br><span class="line"><span class="comment">#print(p)</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line"></span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">m = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;TH4ts_EA5y3St_ecc_O1I15g&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-浙江省赛决赛-wp-crypto</title>
    <url>/post/6cedf6de.html</url>
    <content><![CDATA[<p>有师傅问了几个题，就做了做。</p>
<span id="more"></span>
<h3 id="R-r"><a href="#R-r" class="headerlink" title="R_r"></a>R_r</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag1,flag2</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n= p*q</span><br><span class="line">hint1 = p^<span class="number">2</span>*q</span><br><span class="line">hint2 = p*q^<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    g1 = random.randint(<span class="number">1</span>, n*n)</span><br><span class="line">    <span class="keyword">if</span> gcd((g1-<span class="number">1</span>)//n, n) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">g2=n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r1 = random.randint(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(gcd(r1,n) == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">r2=random.randint(<span class="number">1</span>,n)</span><br><span class="line"></span><br><span class="line">c1 = (<span class="built_in">pow</span>(g1, m1, n*n) * <span class="built_in">pow</span>(r1, n, n*n))% (n*n)</span><br><span class="line">c2 = (<span class="built_in">pow</span>(g2 ,m2, n*n) * <span class="built_in">pow</span>(r2, n, n*n))% (n*n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093&quot;</span></span><br><span class="line"><span class="string">&quot;22910385210568304958107161962017571071703393748261640924342214385124480716797688566364653958202687496536914575643833029904856616616361552065618233346044007555777302010059956180989299881167620123404157184856914845192870935052388587836639109148835943673531131160427033530692003589837535181715398419950146539295&quot;</span></span><br><span class="line"><span class="string">&quot;1575524821989347564982343787894614774971961408914047143111430998332905514952763763178813184329394269351923009990561408822591722869938177600916108444223304303415189694914099273457779531528733347451404048342144363056595763890310306908442288806184110971228621297398433865511027539993213883705000977616240346813&quot;</span></span><br><span class="line"><span class="string">&quot;17972230632127848019159546735961788940716048105141697301143941156703842346042203282817931551107307709193702947228391512160043387022559315244264272847054598619204201233617960636207483484678274743413667794843966312743641773413722257484289905138257413051485362435527999048370294082815591234891288108779292951281&quot;</span></span><br><span class="line"><span class="string">&quot;6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825733199&quot;</span></span><br><span class="line"><span class="string">&quot;6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825732455&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目数据给的有点迷，做完过后依次解释一下从上到下每个参数是什么：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line">c1 = <span class="number">22910385210568304958107161962017571071703393748261640924342214385124480716797688566364653958202687496536914575643833029904856616616361552065618233346044007555777302010059956180989299881167620123404157184856914845192870935052388587836639109148835943673531131160427033530692003589837535181715398419950146539295</span></span><br><span class="line">c2 = <span class="number">1575524821989347564982343787894614774971961408914047143111430998332905514952763763178813184329394269351923009990561408822591722869938177600916108444223304303415189694914099273457779531528733347451404048342144363056595763890310306908442288806184110971228621297398433865511027539993213883705000977616240346813</span></span><br><span class="line">g1 = <span class="number">17972230632127848019159546735961788940716048105141697301143941156703842346042203282817931551107307709193702947228391512160043387022559315244264272847054598619204201233617960636207483484678274743413667794843966312743641773413722257484289905138257413051485362435527999048370294082815591234891288108779292951281</span></span><br><span class="line">hint1 = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825733199</span></span><br><span class="line">hint2 = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825732455</span></span><br></pre></td></tr></table></figure>
<p>然后回到题目，他将flag分为两部分分别加密，不过加密形式都是：</p>
<script type="math/tex; mode=display">
c = g^mr^n \quad (mod\;n^2)</script><p>这是Paillier同态加密的特征，可以参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/557034854">应用密码学 | Paillier同态加密算法简介 - 知乎 (zhihu.com)</a></p>
<p>那么只要我们有n的分解，就有这个加密的私钥，进而解密。然后这里其实出题人弄的数据有点问题，hint1、hint2并不是按题目代码中给的方式进行计算的，而均是先计算异或再计算乘，也就是：</p>
<script type="math/tex; mode=display">
hint1 = (p \oplus 2)*q</script><script type="math/tex; mode=display">
hint2 = p * (q \oplus 2)</script><p>所以其实将hint与n求gcd就能得到n的分解，然后代入Paillier解密就可以了。而如果是按题目代码的顺序运算得到hint1、hint2的话，预期应该是用hint1进行深搜。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line">c1 = <span class="number">22910385210568304958107161962017571071703393748261640924342214385124480716797688566364653958202687496536914575643833029904856616616361552065618233346044007555777302010059956180989299881167620123404157184856914845192870935052388587836639109148835943673531131160427033530692003589837535181715398419950146539295</span></span><br><span class="line">c2 = <span class="number">1575524821989347564982343787894614774971961408914047143111430998332905514952763763178813184329394269351923009990561408822591722869938177600916108444223304303415189694914099273457779531528733347451404048342144363056595763890310306908442288806184110971228621297398433865511027539993213883705000977616240346813</span></span><br><span class="line">g1 = <span class="number">17972230632127848019159546735961788940716048105141697301143941156703842346042203282817931551107307709193702947228391512160043387022559315244264272847054598619204201233617960636207483484678274743413667794843966312743641773413722257484289905138257413051485362435527999048370294082815591234891288108779292951281</span></span><br><span class="line">hint1 = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825733199</span></span><br><span class="line">hint2 = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988781523237008972618187818067224685481215653712129336192028926158248667825732455</span></span><br><span class="line">g2 = n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">p = GCD(n,hint2)</span><br><span class="line">q = n// p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">lamda = lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L</span>(<span class="params">x</span>):</span><br><span class="line">	<span class="keyword">return</span> (x-<span class="number">1</span>)//n</span><br><span class="line"></span><br><span class="line">miu = inverse(L(<span class="built_in">pow</span>(g1,lamda,n**<span class="number">2</span>)),n)</span><br><span class="line">b = gmpy2.powmod(c1,lamda,n*n)</span><br><span class="line">m1 = (L(b)*miu) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m1))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line">r2 = <span class="built_in">pow</span>(c2,inverse(n,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),n)</span><br><span class="line">r2n = <span class="built_in">pow</span>(r2,n,n**<span class="number">2</span>)</span><br><span class="line">m2 = (((c2*inverse(r2n,n**<span class="number">2</span>) % n**<span class="number">2</span>) - <span class="number">1</span>) // n )% n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m2))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;a59055ff-0a22-641d-2bf2-7b0b69c2244b&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="0-1-Game"><a href="#0-1-Game" class="headerlink" title="0_1_Game"></a>0_1_Game</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * (q**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">hint1 = <span class="built_in">pow</span>((p+q), s, n)</span><br><span class="line">hint2 = <span class="built_in">pow</span>((p-q), s, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    z = getRandomRange(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(z, (p-<span class="number">1</span>)//<span class="number">2</span>, p) == p-<span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(z, (q-<span class="number">1</span>)//<span class="number">2</span>, q) == q-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secert_0_1_encrypt</span>(<span class="params">m, n, z</span>):</span><br><span class="line">    secret = getRandomRange(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(secret, <span class="number">2</span>, n) * <span class="built_in">pow</span>(z, m, n) % n</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">plaintext = <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(m))[<span class="number">2</span>:])</span><br><span class="line">ciphertext = [<span class="number">0</span>] * <span class="built_in">len</span>(<span class="built_in">str</span>(plaintext))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(plaintext))):</span><br><span class="line">    ciphertext[i] = secert_0_1_encrypt(plaintext % <span class="number">10</span>, n, z)</span><br><span class="line">    plaintext = plaintext // <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint1&quot;</span>, hint1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint2&quot;</span>, hint2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z=&quot;</span>, z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ciphertext&quot;</span>, ciphertext)</span><br></pre></td></tr></table></figure>
<p>首先给了两个hint：</p>
<script type="math/tex; mode=display">
hint1 = (p+q)^e \quad(mod\;n)</script><script type="math/tex; mode=display">
hint2 = (p-q)^e \quad(mod\;n)</script><p>那么二项式展开就有：</p>
<script type="math/tex; mode=display">
hint1 = p^e+q^e \quad(mod\;n)</script><script type="math/tex; mode=display">
hint2 = p^e-q^e \quad(mod\;n)</script><p>相加后与n求gcd即可得到n的分解。</p>
<p>然后进入下一部分，首先他按如下方式生成了z：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    z = getRandomRange(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(z, (p-<span class="number">1</span>)//<span class="number">2</span>, p) == p-<span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(z, (q-<span class="number">1</span>)//<span class="number">2</span>, q) == q-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>这里其实就是用欧拉判别式保证：</p>
<script type="math/tex; mode=display">
z^{\frac{p-1}{2}} \equiv -1 \quad(mod\;p)</script><script type="math/tex; mode=display">
z^{\frac{q-1}{2}} \equiv -1 \quad(mod\;q)</script><p>也就是说，z既不是模p下的二次剩余，也不是模q下的二次剩余。</p>
<p>然后，他将flag转换成二进制串，并把<strong>这个二进制串视为一个十进制数</strong>，然后对每一位逐位加密。也就是说这个十进制串的每一位都是0或1，逐位加密的方式如下，每一十进制位记作mi：</p>
<script type="math/tex; mode=display">
cipher_i = secret_i^2z^{m_i} \quad(mod\;n)</script><p>然后由于我们有了n的分解，我们将这个式子转化到模p下(模q下也一样)：</p>
<script type="math/tex; mode=display">
cipher_i = secret_i^2z^{m_i} \quad(mod\;p)</script><p>那么，当mi等于0和等于1时，cipheri分别是：</p>
<script type="math/tex; mode=display">
cipher_i = secret_i^2 \quad(mod\;p)</script><script type="math/tex; mode=display">
cipher_i = secret_i^2z \quad(mod\;p)</script><p>而由于z不是模p下的二次剩余，所以当mi分别为0和1时，cipheri分别是\不是二次剩余。因此我们可以用欧拉判别式来判断cipheri是不是二次剩余，以此来还原每一位mi：</p>
<script type="math/tex; mode=display">
cipher_i^{\frac{p-1}{2}} \equiv 1 \quad(mod\;p)</script><p>或：</p>
<script type="math/tex; mode=display">
cipher_i^{\frac{p-1}{2}} \equiv -1 \quad(mod\;p)</script><p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cipher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = GCD(hint1 + hint2,n)</span><br><span class="line">q = iroot(n // p , <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(i,(p-<span class="number">1</span>)//<span class="number">2</span>,p) == <span class="number">1</span>):</span><br><span class="line">        flag += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag[::-<span class="number">1</span>],<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;5e1eddfb-dda2-11ed-8d28-ac675d4bad&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="odd-factor"><a href="#odd-factor" class="headerlink" title="odd_factor"></a>odd_factor</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> size(m)&lt;<span class="number">360</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    r = getPrime(<span class="number">512</span>)</span><br><span class="line">    s = getPrime(<span class="number">512</span>)</span><br><span class="line">    t = getPrime(<span class="number">512</span>)</span><br><span class="line">    real_p = p * q * r * s * t</span><br><span class="line">    real_q = p + q + r + s + t</span><br><span class="line">    <span class="keyword">if</span> isPrime(real_q) == <span class="literal">True</span>:</span><br><span class="line">        n = real_p * real_q</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;real_p=&#x27;</span>,real_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;real_q=&#x27;</span>,real_q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">real_p= 55062197317446999463174096263876498316593115551165463378239159905809676640454208209918217385995561457672251651152473557992138742135601815169185076218362135899344751677854110957095631491941800392408438811446405332089775007801060526398896827361974179433880944797942088556569121442758603066960469154848058525555919633585074687002653178371734389317920858433073228324119903275748010661381766238387457768079481851583182446632335485869275973875534654769410510717692168386489418039967948185844825093846853624216235947670855966394462382073931422900372413115651622846475697848013017412006570314438593706146398436291246626158990758006393615755523796444561949003170112244508437710660501492796759763772367048031312446027160494843576151592257914618405347047042441934740949960412334441</span></span><br><span class="line"><span class="string">real_q= 45155472176560032394858410670734933043941707240560969397865820853107208563396632699891831616425752109128199454680206954866754585433276759685964959793491769</span></span><br><span class="line"><span class="string">c= 29523353286662420447288429739820034783180593797609319451802397100630230980492429018460170953928563500202582346942199142197785013588760361998950680313834852877108490792872966526015601050884302042018430083206594510237759312983601611859463798190030017950871533501858080631812335748118077560727632343411246129300608114305005550505334558174100631528820258311294104339625598892394650057151595693208992748213949675232397315855876112627150056755058037371576593415880216272977089381300018893299243081150404742921857440064511032025713772327330252031889227225225823090259315491541462395033093742723528280894218885823268632726414223235862198062147879817814619506196476372010238569022037192794906574876350397747710442236263832960264742898816690984736558117232240584876068441918457179310704845718452829124188403042383896118962087518608022867798693371250897927956711708162621772577123078819978462483151316840145260542738057960771219011604</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>有点幽默的题目，注意到题目中保证了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size(m)&lt;<span class="number">360</span></span><br></pre></td></tr></table></figure>
<p>那么其实直接在模realq下解明文就行。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">real_p= <span class="number">55062197317446999463174096263876498316593115551165463378239159905809676640454208209918217385995561457672251651152473557992138742135601815169185076218362135899344751677854110957095631491941800392408438811446405332089775007801060526398896827361974179433880944797942088556569121442758603066960469154848058525555919633585074687002653178371734389317920858433073228324119903275748010661381766238387457768079481851583182446632335485869275973875534654769410510717692168386489418039967948185844825093846853624216235947670855966394462382073931422900372413115651622846475697848013017412006570314438593706146398436291246626158990758006393615755523796444561949003170112244508437710660501492796759763772367048031312446027160494843576151592257914618405347047042441934740949960412334441</span></span><br><span class="line">real_q= <span class="number">45155472176560032394858410670734933043941707240560969397865820853107208563396632699891831616425752109128199454680206954866754585433276759685964959793491769</span></span><br><span class="line">c= <span class="number">29523353286662420447288429739820034783180593797609319451802397100630230980492429018460170953928563500202582346942199142197785013588760361998950680313834852877108490792872966526015601050884302042018430083206594510237759312983601611859463798190030017950871533501858080631812335748118077560727632343411246129300608114305005550505334558174100631528820258311294104339625598892394650057151595693208992748213949675232397315855876112627150056755058037371576593415880216272977089381300018893299243081150404742921857440064511032025713772327330252031889227225225823090259315491541462395033093742723528280894218885823268632726414223235862198062147879817814619506196476372010238569022037192794906574876350397747710442236263832960264742898816690984736558117232240584876068441918457179310704845718452829124188403042383896118962087518608022867798693371250897927956711708162621772577123078819978462483151316840145260542738057960771219011604</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = inverse(e,real_q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,real_q)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;b4920de4-9b76-9222-1bc4-ae05a6714ce6&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-网信柏鹭杯-wp-crypto</title>
    <url>/post/812dabe5.html</url>
    <content><![CDATA[<p>因为队伍三个人全部忘记报名了，所以并没有参加这场比赛，但赛后有师傅问密码题，就做了一下。包含全三道题目的wp，但是第三道并不能百分百确定得到的flag正确，如有错误欢迎师傅提出！</p>
<span id="more"></span>
<h3 id="fractrsa"><a href="#fractrsa" class="headerlink" title="fractrsa"></a>fractrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  secret <span class="keyword">import</span> flag1 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">3</span></span><br><span class="line">num2 = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span>(num1&lt;num2):</span><br><span class="line">    num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">pt = bytes_to_long(flag) + num2</span><br><span class="line"></span><br><span class="line">ring = RealField(<span class="number">1100</span>)</span><br><span class="line">num3 = ring(num1) / ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3 = &quot;</span>, num3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">511</span>, num1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">511</span>, num2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, num1, num1*num2)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = &quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak = &quot;</span>, leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3 = 1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"><span class="string">ct = 31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"><span class="string">N = 61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line"><span class="string">leak = 23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目名明示了用连分数解题，正好前几天也有师傅问起过安洵杯的一道题目，其实就是用sage内置函数，将该高精度小数进行连分数展开，加上比特数及素数的限制就能找到精确的num1、num2。</p>
<p>找到num1、num2后，有两种办法解决下一个问题，问题形式是：</p>
<script type="math/tex; mode=display">
(p-q)^{num1}\equiv leak \quad(mod\;num1*num2)</script><p>第一种方法，其实就是当作普通RSA解密就可以，因为num1、num2其实就是p、q，只是这里的e变成num1而已，本质解密一样。</p>
<p>第二种方法推导如下，由同余性质先转到模num1下：</p>
<script type="math/tex; mode=display">
(p-q)^{num1}\equiv leak \quad(mod\;num1)</script><p>然后费马小定理：</p>
<script type="math/tex; mode=display">
p-q\equiv leak \quad(mod\;num1)</script><p>又因为 p-q 显然小于num1，那么直接将leak模num1就能得到p-q(当然如果p&lt;q，那么得到的其实是p-q+num1，需要对应做一点小处理)。</p>
<p>然后解方程就能得到n的分解，进而解密密文，注意最后解密还要减掉一个num2。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">num3 = <span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line">ct = <span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line">N = <span class="number">61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line">leak = <span class="number">23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(num3)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"> </span><br><span class="line">alist = c.convergents()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">512</span>:</span><br><span class="line">        num1 = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">        num2 = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p_q = leak % num1</span><br><span class="line">pplusq = iroot(p_q**<span class="number">2</span>+<span class="number">4</span>*N,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p = (p_q + pplusq) // <span class="number">2</span></span><br><span class="line">q = N // p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct,d,N) - num2)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-WeMu5tKe2pOn_70in5And#N3Ver@G1veUp!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Vigenere2S"><a href="#Vigenere2S" class="headerlink" title="Vigenere2S"></a>Vigenere2S</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key,flag2 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mainProc</span>(<span class="params">p, k1, k2</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">res = mainProc(flag,key,key[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq</span></span><br></pre></td></tr></table></figure>
<p>题目名暗示是一种变种维吉尼亚，不过其实仔细看会发现变了个寂寞。</p>
<p>首先要发现，t表是能确定的，重要的在于这个加密过程怎么去理解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br></pre></td></tr></table></figure>
<p>不要被这个三重表吓到了，其实三层作用一模一样，都是将码表右移该字符在码表中对应位置的位数！再来多少层都是一样的。</p>
<p>什么意思呢？比如说，当前明文字符为”f”，在s中下标为7，假设k1[i1]当前为”a”，k2[i2]当前为”b”，下标分别是0、1，那其实加密过程做的事情，就是找s中，下标为(7+0+1)的字符作为密文字符。当然，这是循环右移的，因此要模上s的长度65。</p>
<p>其实很好理解，因为三层循环的每一层都是在当前移动位置上，再相对移动该字符在s中的绝对下标，注意是在s中的绝对下标！</p>
<p>也就是说，加密过程完全等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c += long_to_bytes(s[(s.find(a) + s.find(k1[i1]) + s.find(k2[i2])) % <span class="number">65</span>])</span><br></pre></td></tr></table></figure>
<p>看出来了吗？把后面的两个密钥之和当作一个完整的密钥，那么这其实就是一个在s码表上的维吉尼亚加密。</p>
<p>而我们现在已经有了flag头”flag{ISEC-}”，共十个字符，和密文相减就能得到十个密钥和，接下来的一点也很重要：我们只需要密钥和，而不需要两个密钥分别的值。</p>
<p>而密钥和是首尾相加的，那么假设密钥长度为10，会发生什么？</p>
<p>很显然，密钥和的前五个会和后五个呈对称形式。这是因为第一个密钥和由密钥的第1、10个字符相加得到，第二个密钥和由第2、9个字符相加得到，而你能想到，到第六个密钥和，他就会和第五个产生重复，而这种重复是我们能看出来的。</p>
<p>而实际上相减，得到的前十个密钥和序列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16, 30, 17, 16, 17, 50, 52, 6, 7, 45]</span><br></pre></td></tr></table></figure>
<p>并没有产生对称，这说明什么呢？这说明密钥长度至少为19及以上(为什么能是19也很好想通)，那假设密钥长度为19，我们就能得到完整的密钥和序列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16, 30, 17, 16, 17, 50, 52, 6, 7, 45, 7, 6, 52, 50, 17, 16, 17, 30, 16]</span><br></pre></td></tr></table></figure>
<p>然后拿去解密(解密就是相应的减去对应密钥和)，发现并不正确，那就重新试密钥长度为20，就能得到正确flag。</p>
<p>当然如果还不行，就得继续往下爆破，但由于密钥和的对称性，密钥长度即使到30左右，也是可以接受的爆破范围(因为只需要爆破几个未知的对称的密钥和，而非密钥本身)，也是可以实现的。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"></span><br><span class="line"><span class="comment">#length = 65</span></span><br><span class="line">s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">temp = <span class="string">b&quot;&quot;</span></span><br><span class="line">t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&quot;6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq&quot;</span></span><br><span class="line">tt1 = [s.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">m = <span class="string">b&quot;flag&#123;ISEC-&quot;</span></span><br><span class="line">tt2 = [s.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line"></span><br><span class="line">k = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tt2)):</span><br><span class="line">    k.append((tt1[i] - tt2[i]) % <span class="number">65</span>)</span><br><span class="line">k = k + k[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(s[(s.find(c[i]) - k[i%<span class="built_in">len</span>(k)]) % <span class="number">65</span>]),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-Afr1en7_1nN33d_1S_Afr9end_ind88d0o0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Encode_Base64,plain,flag3 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;flag&#123;ISEC-&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R1=<span class="built_in">int</span>(flag[<span class="number">10</span>:<span class="number">16</span>],<span class="number">16</span>)</span><br><span class="line">R2=<span class="built_in">int</span>(flag[<span class="number">16</span>:<span class="number">25</span>],<span class="number">16</span>)</span><br><span class="line">R3=<span class="built_in">int</span>(flag[<span class="number">25</span>:<span class="number">31</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">chr</span>(tmp)</span><br><span class="line"></span><br><span class="line">encode1 = Encode_Base64(plain)</span><br><span class="line">encode2 = Encode_Base64(tmp1kb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;result.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;plain:  &quot;</span> + plain + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;EnText: &quot;</span> + encode1 + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;CipherText:\n&quot;</span> + encode2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">plain:  I Try <span class="keyword">not</span> to become a man of success but rather <span class="keyword">try</span> to become a man of value.</span><br><span class="line">EnText: rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=</span><br><span class="line"></span><br><span class="line">CipherText:</span><br><span class="line">AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==</span><br></pre></td></tr></table></figure>
<p>梳理一下题目加密流程：</p>
<ul>
<li>从secret中导入flag串、plain以及一个自定义的base64加密</li>
<li>将题目中的flag串去除首尾，并拆分为三节，作为三个不同LFSR的流密钥种子</li>
<li>将三个LFSR结合，生成一段长度为800比特位的密文(如何结合的一会儿会展开说一下)。然后将这段密文用自定义的base64加密，并给出密文</li>
<li>同时，给出了一段已知明文的自定义base64加密结果</li>
</ul>
<p>那么该怎么还原flag串呢？首先知道，flag串被拆分成三段，作为三个LFSR的种子，那么要想通过LFSR恢复这些种子，就要先知道LFSR的密文，也就是先解决自定义的base64，把Ciphertext段还原回原比特串。</p>
<p>那么接下来开始题目分析：</p>
<h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>题目给了一段明文plain，如果正常进行base64加密，结果如下面第一行，第二行是题目自定义的base64加密结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=</span><br><span class="line">rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=</span><br></pre></td></tr></table></figure>
<p>可以看出，实际上是进行了一次单表代换，那么我们可以打印出正常base64表与自定义base64表的对应关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</span><br><span class="line">*gh***BCHI***K***qr*t*RoST*VYZ**cdejkFDXE****p*v*Wxz12N*67***9**=</span><br></pre></td></tr></table></figure>
<p>星号代表该字符无法通过已知的明密文对进行对应，这样的话，我们一共找出了38组对应关系。然而，给出的Ciphertext有59种不同字符，因此我们已知的明密文对关系完全不够我们还原Ciphertext，并且爆破的复杂度也是不可接受的。那么该怎么处理呢？</p>
<p>base64的分析就先到这里，一会儿会接着说。</p>
<h4 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h4><p>题目中，由三个不同的掩码mask，定义了三个不同的LFSR，具体来说，三个LFSR可以写作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LFSR</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>而密文的比特串流是怎么产生的呢？每一个密文比特位ci，都需要三个LFSR分别生成一位比特位，分别记作x1,x2,x3，然后ci就由如下方式产生：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ci = (x1*x2)^((x2^<span class="number">1</span>)*x3)</span><br></pre></td></tr></table></figure>
<p>也就是说，三个LFSR在同时进行递推，生成自己的新的比特位，但是密文是由三个LFSR的各自的新的比特位，用上述方式生成的。</p>
<p>那么如果已知密文流，如何还原三个种子呢？z3可以直接搞定，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>可以自己生成几组数据验证一下，比如我这里选定 R1 = 373763; R2 = 62865560; R3 = 1502599，满足题目要求，然后用题目给的加密函数进行加密(不进行base64换表)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R2 = <span class="number">62865560</span>; R1 = <span class="number">373763</span>; R3 = <span class="number">1502599</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">str</span>(<span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp1kb)</span><br></pre></td></tr></table></figure>
<p>然后试试刚才写的解密函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#用他给的LFSR，将R1、R2、R3加密得到的二进制串</span></span><br><span class="line">cipher = <span class="string">&quotquot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>():</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">z3_sol()</span><br></pre></td></tr></table></figure>
<p>你会发现确实可以正确解密，那么LFSR的这一部分我们就解决了。也就是说，只要我们能得到密文流，我们就能用z3还原出明文。</p>
<p>那么又回到了刚才的问题，也就是如何解决换表的base64。</p>
<h4 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h4><p>实际上，仔细看刚才的LFSR解密函数，你可以发现，它实际上只使用了密文的两百个比特位就能完全正确的解密。而不管base64换不换表，其一个字符都对应6比特位，也就是说，给定的Ciphertext远远超过了我们需要的数量，所以我们其实并不需要完全还原Ciphertext，只需要前一部分就好了。</p>
<p>但其实经过我的测试，都不需要200比特位，实际上只要有78个密文比特位，就能很精确地还原出三个种子。也就是说，我们只需要还原Ciphertext其中的13个base64字符就能反推出种子，这就又很大程度减少了工作量。我们把Ciphertext前面一小段中已知的换表给代换回去，未知的用星号表示，可以发现他长这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*R*c***ZW***k0**m*S***C****g***t**oB</span><br></pre></td></tr></table></figure>
<p>如何处理呢？其实我们直接把未知的跳过，只添加确定部分作为约束就好了，就像下面这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>(<span class="params">cipher</span>):</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">6</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">18</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">42</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">72</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">96</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">108</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">132</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">162</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">186</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">204</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)    </span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br></pre></td></tr></table></figure>
<p>这样就能求解出唯一一组符合要求的解，也就是种子。有了种子后，十六进制恢复就行，当然要注意填充的0。</p>
<p>但是解出的flag并不是一个有意义的字符串，只是个十六进制串，怎么验证其正确性呢？其实简单，把求出的三个种子用题目给定的加密方式加密一遍，然后再将已知部分换表即可，验证函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xfffffff</span></span><br><span class="line">    i = (R&amp;mask)&amp;<span class="number">0xfffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_round</span>(<span class="params">R1,R1_mask,R2,R2_mask,R3,R3_mask</span>):</span><br><span class="line">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span><br><span class="line">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span><br><span class="line">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span><br><span class="line">    <span class="keyword">return</span> (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^<span class="number">1</span>)*x3))</span><br><span class="line"></span><br><span class="line">R2 = <span class="number">49589048</span>;R1 = <span class="number">381342</span>; R3 = <span class="number">1862135</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R1)[<span class="number">2</span>:])==<span class="number">19</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R2)[<span class="number">2</span>:])==<span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(R3)[<span class="number">2</span>:])==<span class="number">21</span></span><br><span class="line">R1_mask = <span class="number">0x4100c</span></span><br><span class="line">R2_mask = <span class="number">0x2000023</span></span><br><span class="line">R3_mask = <span class="number">0x100002</span></span><br><span class="line"></span><br><span class="line">tmp1kb = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    tmp1kb += <span class="built_in">str</span>(<span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp1kb)</span><br><span class="line">en_64 = <span class="string">&quot;rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=&quot;</span></span><br><span class="line">pl_64 = <span class="string">&quot;SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=&quot;</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pl_64)):</span><br><span class="line">    dic[pl_64[i]] = en_64[i]</span><br><span class="line">t4ble = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp1kb) // <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(dic[t4ble[<span class="built_in">int</span>(tmp1kb[<span class="number">6</span>*i:<span class="number">6</span>*i+<span class="number">6</span>],<span class="number">2</span>)]],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">tt = <span class="string">&quot;AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==&quot;</span></span><br><span class="line"><span class="built_in">print</span>(tt)</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*q*Y***TR***k1**D*r***h****c***p**Eg**jN***SdoN2*7S*p***Y*C*CED*EX*C**g*Cog*X****jEg*CtIHvD*eBh*qk*Z**Wj*VC***C*9o*I*gd**rS*******x**</span><br><span class="line">AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==</span><br></pre></td></tr></table></figure>
<p>可以看到，对应位置的换表是完全对的上的，包括我们没有用到的后半部分，因此flag应该是正确了。</p>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#用他给的LFSR，将R1、R2、R3加密得到的二进制串</span></span><br><span class="line"><span class="comment">#cipher = &quotquot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr1</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr2</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> (R &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">25</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr3</span>(<span class="params">R</span>):</span><br><span class="line">    <span class="keyword">return</span> ((R &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) ^ ((R &gt;&gt; <span class="number">20</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_sol</span>(<span class="params">cipher</span>):</span><br><span class="line">    R1 = BitVec(<span class="string">&#x27;R1&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R2 = BitVec(<span class="string">&#x27;R2&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    R3 = BitVec(<span class="string">&#x27;R3&#x27;</span>,<span class="number">28</span>)</span><br><span class="line">    sol = Solver()</span><br><span class="line">    sol.add(R1 &gt;&gt; <span class="number">18</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R2 &gt;&gt; <span class="number">25</span> == <span class="number">1</span>)</span><br><span class="line">    sol.add(R3 &gt;&gt; <span class="number">20</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">6</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">18</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">42</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">72</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">96</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">108</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">132</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">162</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">186</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        sol.add((lfsr1(R1)*lfsr2(R2))^((lfsr2(R2)^<span class="number">1</span>)*lfsr3(R3)) == cipher[i+<span class="number">204</span>])</span><br><span class="line">        R1 = R1 &lt;&lt; <span class="number">1</span> ^ lfsr1(R1)</span><br><span class="line">        R2 = R2 &lt;&lt; <span class="number">1</span> ^ lfsr2(R2)</span><br><span class="line">        R3 = R3 &lt;&lt; <span class="number">1</span> ^ lfsr3(R3)    </span><br><span class="line">    <span class="keyword">if</span>(sol.check() == sat):</span><br><span class="line">        <span class="built_in">print</span>(sol.model())</span><br><span class="line"></span><br><span class="line">cc = <span class="string">&quot;*R*c***ZW***k0**m*S***C****g***t**oB&quot;</span> </span><br><span class="line">t4ble = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">cipher = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> cc:</span><br><span class="line">    <span class="keyword">if</span>(k <span class="keyword">in</span> t4ble):</span><br><span class="line">        cipher += <span class="built_in">bin</span>(t4ble.index(k))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cipher += <span class="string">&quot;000000&quot;</span></span><br><span class="line">z3_sol(cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment">#R2 = 49589048, R1 = 381342, R3 = 1862135</span></span><br><span class="line">R2 = <span class="number">49589048</span>;R1 = <span class="number">381342</span>; R3 = <span class="number">1862135</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;ISEC-&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0&quot;</span> + <span class="built_in">hex</span>(R1)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;00&quot;</span> + <span class="built_in">hex</span>(R2)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(R3)[<span class="number">2</span>:],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下为验证部分</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def lfsr(R,mask):</span></span><br><span class="line"><span class="string">    output = (R &lt;&lt; 1) &amp; 0xfffffff</span></span><br><span class="line"><span class="string">    i = (R&amp;mask)&amp;0xfffffff</span></span><br><span class="line"><span class="string">    lastbit = 0</span></span><br><span class="line"><span class="string">    while i!=0:</span></span><br><span class="line"><span class="string">        lastbit ^= (i&amp;1)</span></span><br><span class="line"><span class="string">        i = i&gt;&gt;1</span></span><br><span class="line"><span class="string">    output ^= lastbit</span></span><br><span class="line"><span class="string">    return (output,lastbit)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask):</span></span><br><span class="line"><span class="string">    (R1_NEW,x1) = lfsr(R1,R1_mask)</span></span><br><span class="line"><span class="string">    (R2_NEW,x2) = lfsr(R2,R2_mask)</span></span><br><span class="line"><span class="string">    (R3_NEW,x3) = lfsr(R3,R3_mask)</span></span><br><span class="line"><span class="string">    return (R1_NEW,R2_NEW,R3_NEW,(x1*x2)^((x2^1)*x3))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">R2 = 49589048;R1 = 381342; R3 = 1862135</span></span><br><span class="line"><span class="string">assert len(bin(R1)[2:])==19</span></span><br><span class="line"><span class="string">assert len(bin(R2)[2:])==26</span></span><br><span class="line"><span class="string">assert len(bin(R3)[2:])==21</span></span><br><span class="line"><span class="string">R1_mask = 0x4100c</span></span><br><span class="line"><span class="string">R2_mask = 0x2000023</span></span><br><span class="line"><span class="string">R3_mask = 0x100002</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tmp1kb = &quot;&quot;</span></span><br><span class="line"><span class="string">for j in range(100):</span></span><br><span class="line"><span class="string">    tmp=0</span></span><br><span class="line"><span class="string">    for k in range(8):</span></span><br><span class="line"><span class="string">        (R1,R2,R3,out)=single_round(R1,R1_mask,R2,R2_mask,R3,R3_mask)</span></span><br><span class="line"><span class="string">        tmp = (tmp &lt;&lt; 1) ^ out</span></span><br><span class="line"><span class="string">    tmp1kb += str(bin(tmp)[2:].zfill(8))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(tmp1kb)</span></span><br><span class="line"><span class="string">en_64 = &quot;rrgtYXkcVD91HCqvHBIFSN9pTrgdHB2dVegvTegzZRKjToKzHBI2ZhgxSoqEToHcZCI7HCqvHBIFSN9pTrgdHB2dVegvTegNSRW2Tr6=&quot;</span></span><br><span class="line"><span class="string">pl_64 = &quot;SSBUcnkgbm90IHRvIGJlY29tZSBhIG1hbiBvZiBzdWNjZXNzIGJ1dCByYXRoZXIgdHJ5IHRvIGJlY29tZSBhIG1hbiBvZiB2YWx1ZS4=&quot;</span></span><br><span class="line"><span class="string">dic = &#123;&#125;</span></span><br><span class="line"><span class="string">for i in range(len(pl_64)):</span></span><br><span class="line"><span class="string">    dic[pl_64[i]] = en_64[i]</span></span><br><span class="line"><span class="string">t4ble = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="string">for i in range(len(tmp1kb) // 6):</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        print(dic[t4ble[int(tmp1kb[6*i:6*i+6],2)]],end = &quot;&quot;)</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">        print(&quot;*&quot;,end = &quot;&quot;)</span></span><br><span class="line"><span class="string">print()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tt = &quot;AqMY/UnTRJnJk1iwDQrJ/ahALlOcA8Qp5AEgmJjNyffSdoN2i7SLpOiAYlC+CEDfEXJCfng5CogfXQ5sJjEg0CtIHvDaeBh/qkaZlGWjJVC50MCJ9o5I3gdlUrS8yinnfaxbwP==&quot;</span></span><br><span class="line"><span class="string">print(tt)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ISEC-05d19e002f4ab381c69f7&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果各位师傅发现解法中的错误，可以随时联系我，同时各位师傅有其他任何问题也欢迎与我交流！</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-羊城杯-wp-crypto</title>
    <url>/post/47440.html</url>
    <content><![CDATA[<p>随手记录一下~</p>
<span id="more"></span>
<h2 id="Danger-RSA"><a href="#Danger-RSA" class="headerlink" title="Danger_RSA"></a>Danger_RSA</h2><p>题目描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看似简单的rsa</span><br></pre></td></tr></table></figure>
<p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">a, nbit</span>):</span><br><span class="line">    <span class="keyword">assert</span> a &gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        X = getRandomInteger(nbit // a)</span><br><span class="line">        s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br><span class="line">        p = X ** a + s</span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> (p, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, s = get_key(a, <span class="number">1024</span>)</span><br><span class="line">q, t = get_key(a, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">e = s * t</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N =&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># N = 20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line"><span class="comment"># e = 11079917583</span></span><br><span class="line"><span class="comment"># c = 13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目初看没有什么下手点，但其实get_key函数的这两行暴露了很多信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = getRandomInteger(nbit // a)</span><br><span class="line">s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>也就是说，a可能的范围其实很小，粗略的范围都仅有[2,1024],这个时候再看生成的e，可以发现，e相对来说太小了，甚至可以得到他的全部素因子分解，即：</p>
<script type="math/tex; mode=display">
e = 3*7*7*19*691*5741</script><p>因此我们完全可以用下面这个方式来进一步确定a的取值范围:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>可以发现，a其实仅能取4；与此同时可以明白，对于刚才的e的因子分解，仅有两种可能的组合让两次生成的s均落在a规定的范围里：</p>
<script type="math/tex; mode=display">
s=5741*19\;,\;t=691*3*7*7</script><script type="math/tex; mode=display">
s=5741*3*7\;,\;t=691*7*19</script><p>此时再看n的生成过程：</p>
<script type="math/tex; mode=display">
n = (X1^4 + s)*(X2^4 + t)</script><p>s和t相较于X1、X2来说非常小，因此对n开4次方根就可以得到X1*X2，此时，就可以以以下方式分解n：</p>
<script type="math/tex; mode=display">
n = (X1*X2)^4 + t*X1^4 + s*X2^4  + s*t</script><p>将所有量移动到同一侧：</p>
<script type="math/tex; mode=display">
(X1*X2)^4 + t*X1^4 + s*X2^4  + s*t - n = 0</script><p>左右同时乘$\; X1^4$，得:</p>
<script type="math/tex; mode=display">
((X1*X2)^4  + s*t - n)* X1^4 + t*(X1^4)^2 + s*X2^4*X1^4= 0</script><p>此时，令$\;x = X1^4$，就得到下面的一元二次方程：</p>
<script type="math/tex; mode=display">
t*x^2 + ((X1*X2)^4  + s*t - n)* x + s*(X2*X1)^4= 0</script><p>将可能的两组s、t，逐个代入解上述方程，就可以得到n的分解。</p>
<p>得到n的分解后，想要直接求解RSA解密却发现$\;gcd(e,phi_n)\;!=\;1$，发现是因为$\;3|(p-1)$且$\;7|(q-1)$，此时由于题目中并未说明对flag做过额外填充处理，而p、q两个因子均有接近1024比特，正常来说远大于明文比特位，因此可以转化到模p下求解，这是因为：</p>
<script type="math/tex; mode=display">
m^{e} = (m^3)^{7*7*19*691*5741} \equiv c\quad(mod\;p)</script><p>而</p>
<script type="math/tex; mode=display">
\quad gcd(7*7*19*691*5741,(p-1)) = 1</script><p>所以可以将$m^3$当作一个整体，进行RSA解密后在模p下开三次方根即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">N = <span class="number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line">e = <span class="number">11079917583</span></span><br><span class="line">c = <span class="number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line">elist = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">691</span>,<span class="number">5741</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">4</span>) &lt;= e <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>)*<span class="built_in">pow</span>(<span class="number">2</span>, i ** <span class="number">2</span> - i + <span class="number">5</span>) &gt;= e):</span><br><span class="line">        a = i</span><br><span class="line"></span><br><span class="line">s1 = <span class="number">120561</span> </span><br><span class="line">s2 = <span class="number">91903</span></span><br><span class="line"></span><br><span class="line">ab = iroot(N,<span class="number">4</span>)[<span class="number">0</span>] ** <span class="number">4</span></span><br><span class="line">b = -(N-ab-s1*s2)</span><br><span class="line">a = s2</span><br><span class="line">c1 = s1*ab</span><br><span class="line">x = <span class="built_in">int</span>((-b + iroot(b**<span class="number">2</span>-<span class="number">4</span>*a*c1,<span class="number">2</span>)[<span class="number">0</span>]) // (<span class="number">2</span>*a))</span><br><span class="line">p = x + s1</span><br><span class="line">q = N//p</span><br><span class="line"></span><br><span class="line">d = inverse(e//<span class="number">3</span>,p-<span class="number">1</span>)</span><br><span class="line">m3 = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,p))</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - m3</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    temp = long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{C0nsTruct!n9_Techn1qUe2_f0r_RSA_Pr1me_EnC2ypt10N}</font>

<p><br></p>
<p>当然，这题还有一些值得思考的地方，如若明文的比特位超过了p，又该怎么办？</p>
<p>首先可以先将与p-1、q-1均不互素的素因子用普通RSA解密剔去，得到</p>
<script type="math/tex; mode=display">
\quad c\equiv m^{3*7*7}\quad (mod\;n)</script><p>然后就可以使用AMM算法，但是这时使用AMM算法又有一点特殊，这是因为虽然$7|q-1$，但是49却不整除于q-1，因此无法一次性在模q下开49次方根，而需要先开七次方根，再对7个开出的根再各开7次方根，最后再与模p下开出的3次方根作中国剩余定理求解：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = inverse(q, p)</span><br><span class="line">    t2 = inverse(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1*t1*q+mq1*t2*p) % (p*q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> a <span class="keyword">or</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">3</span>, p)</span><br><span class="line">mq = AMM_rth(cq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">3</span>, p)</span><br><span class="line">rt2 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">3</span>)</span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模q下所有根</span></span><br><span class="line">mqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mqs.append(mq)</span><br><span class="line">amq = mqs</span><br><span class="line">dq = inverse(<span class="number">3</span>, (q-<span class="number">1</span>))</span><br><span class="line">mmqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> amq:</span><br><span class="line">    mmq = AMM_rth(mq, <span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    rt3 = ALL_ROOT2(<span class="number">7</span>, q)</span><br><span class="line"></span><br><span class="line">    mamq = ALL_Solution(mmq, q, rt3, mq, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> mamq:</span><br><span class="line">        mmqs.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(t,dq,q)))</span><br><span class="line">amq = mmqs</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到模p下所有根</span></span><br><span class="line">dp = inverse(<span class="number">49</span>, (p-<span class="number">1</span>))</span><br><span class="line">mps = []</span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> amp:</span><br><span class="line">    mps.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(mp, dp, p)))</span><br><span class="line">amp = mps</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br></pre></td></tr></table></figure>
<p>而简便一点，直接解有限域下的方程也是可行的：</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,inverse</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="comment">#使用如：M = crt(n,c)[0]</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">3232774922192317186963877855543094060264001327534643963164572334193887491269409927593188017108306298404437170754762182875998691872041391981365074638343520234882604136837212457817534624895485767634112947143897465253262932526424371614372553023510973107043735041993637367122527503031768408492566328264574062328255875477737300307769891808134846813311720049466136337129654155946431766445576339564816809841942907193731423184669912783673012406488607834333191988772032942474663985054409518153017182678863504596312351140412943307416458908324209967299195302214349899874812717459558411734343869783905720910923365168671056618</span></span><br><span class="line">p = <span class="number">5213351003420231819415242686664610206224730148063270274863722096379841592931572096469136339538500817713355302889731144789372844731378975059329731297860686270736540109105854515590165681366189003405833252270606896051264517339339578167231093908235856718285980689179840159807651185918046198419707669304960745217</span></span><br><span class="line">q = <span class="number">3891889986375336330559716098591764128742918441309724777337583126578227827768865619689858547513951476952436981068109005313431255086775128227872912287517417948310766208005723508039484956447166240210962374423348694952997002274647622939970550008327647559433222317977926773242269276334110863262269534189811138319</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line">dp = inverse(<span class="number">49</span>,p-<span class="number">1</span>)</span><br><span class="line">cp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">3</span> - cp</span><br><span class="line">resp = f.roots()</span><br><span class="line"></span><br><span class="line">dq = inverse(<span class="number">3</span>,q-<span class="number">1</span>)</span><br><span class="line">cq = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^<span class="number">49</span> - cq</span><br><span class="line">resq = f.roots()</span><br><span class="line"></span><br><span class="line">modlist = [p,q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> resq:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])]</span><br><span class="line">        m = crt(modlist,c)[<span class="number">0</span>]</span><br><span class="line">        temp = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>多种方法求解，也是为了能更灵活的思考问题，掌握更多求解方式，让自己一种方法卡住时，可以有路可走。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Easy-3L"><a href="#Easy-3L" class="headerlink" title="Easy_3L"></a>Easy_3L</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    p = getPrime(<span class="number">1400</span>)</span><br><span class="line">    f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(f, q) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (invert(f, p) * q) % p</span><br><span class="line">    <span class="keyword">return</span> p, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">250</span>)</span><br><span class="line">    b = getRandomNBitInteger(<span class="number">240</span>)</span><br><span class="line">    n = getPrime(<span class="number">512</span>)</span><br><span class="line">    seed = m</span><br><span class="line">    s = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    s[<span class="number">0</span>] = seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, p, h</span>):</span><br><span class="line">    s = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    c = (s * h + msg) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = encrypt1(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S1 =&quot;</span>, s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S2 =&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S4 =&quot;</span>, s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S5 =&quot;</span>, s[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">p, h = get_key()</span><br><span class="line">c = encrypt2(s[<span class="number">3</span>], p, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h =&quot;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line"><span class="comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line"><span class="comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line"><span class="comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"><span class="comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line"><span class="comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line"><span class="comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目的3L显然指的是LLL算法，加密过程分为两层：</p>
<ul>
<li>LCG加密种子flag</li>
<li>NTRU加密LCG的S3</li>
</ul>
<p>那么解题思路也很清晰，先解决NTRU解出S3，进而恢复LCG的种子即可。</p>
<p>本题你会发现要规约出的向量(f,g)数量级好像差的有点多，很难规约出1024比特的f，但是不重要，f是否为原始值对于解密影响并不大，只需要检查S3的数量级正常即可。(正常来说，为使规约后的向量比特相近，应在第二列乘上2^512，使 f 与 (2^512)*g具有相同数量级，但本题中这是解不出来的，因此可以采用爆破手段，会发现有很多短向量f、g均可以用于解密，这也符合NTRU的密钥特性)</p>
<p>解出S3后是个简单的LCG问题，不再赘述。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line">h = <span class="number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line">c = <span class="number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">S3</span>):</span><br><span class="line">    S1 = <span class="number">28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line">    S2 = <span class="number">1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line">    S4 = <span class="number">9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line">    S5 = <span class="number">9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"></span><br><span class="line">    x = [S1, S2, S3, S4, S5]</span><br><span class="line">    t = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        t.append(x[i] - x[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line">        m = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]*t[i], m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> sieve_base:</span><br><span class="line">        <span class="keyword">while</span> m % p == <span class="number">0</span>: m //= p</span><br><span class="line">    <span class="keyword">assert</span> isPrime(m)</span><br><span class="line"></span><br><span class="line">    a = (S3 - S2) * inverse(S2 - S1, m)</span><br><span class="line">    b = (S2 - a*S1) % m</span><br><span class="line"></span><br><span class="line">    S1 = (S1-b)*inverse(a, m) % m</span><br><span class="line">    flag = long_to_bytes(S1)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    L = Matrix(ZZ, [[<span class="number">1</span>, (<span class="number">2</span>**e)*h],</span><br><span class="line">                    [<span class="number">0</span>, (<span class="number">2</span>**e)*p]])</span><br><span class="line">    f, g = L.LLL()[<span class="number">0</span>]</span><br><span class="line">    g = g  // (<span class="number">2</span>**e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        S3 = (f*c) % p % g * inverse(f, g) % g</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(S3)) == <span class="number">514</span>):</span><br><span class="line">            dec(S3)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{NTRU_L0G_a6e_S1mpLe}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="SigninCrypto"><a href="#SigninCrypto" class="headerlink" title="SigninCrypto"></a>SigninCrypto</h2><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">随机数真随机吗？如随！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">from</span> iv <span class="keyword">import</span> iv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(<span class="number">2</span>) * <span class="number">8</span></span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line"><span class="built_in">print</span>(xor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br><span class="line">K3 = flag[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">KEY = K1 + K2 + K3</span><br><span class="line"></span><br><span class="line">IV=iv</span><br><span class="line"></span><br><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mode = DES3.MODE_CBC</span><br><span class="line">des3 = DES3.new(KEY, mode, IV)</span><br><span class="line"></span><br><span class="line">pad_len = <span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span></span><br><span class="line">padding = <span class="built_in">bytes</span>([pad_len]) * pad_len</span><br><span class="line">flag += padding</span><br><span class="line"></span><br><span class="line">cipher = des3.encrypt(flag)</span><br><span class="line"></span><br><span class="line">ciphertext=cipher.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 334648638865560142973669981316964458403</span></span><br><span class="line"><span class="comment"># 0xspan></span><br><span class="line"><span class="comment"># 22078953819177294945130027344</span></span><br><span class="line"><span class="comment"># a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span></span><br></pre></td></tr></table></figure>
<p>可以发现，题目最终用3DES对flag进行了加密，因此目标就是还原3DES的key与iv即可。</p>
<p>其中，两个量分别分为了以下几部分：</p>
<ul>
<li>KEY = K1 + K2 + K3 ,每个部分大小8字节</li>
<li>IV=iv，每个部分大小4字节</li>
</ul>
<p>按照如下方式逐步还原每个部分：</p>
<p><strong>K1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(2) * 8</span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line">print(xor)</span><br></pre></td></tr></table></figure>
<p>hint1为16字节量，而K1为8字节量，因此xor的高位即为hint1的高位，又因为hint1由重复字节构成，hint1高位与低位相等。得到完整hint1后与xor异或即得K1</p>
<p><strong>K2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br></pre></td></tr></table></figure>
<p>考察的是MT19937伪随机数生成，利用randcrack模块，提交624个32bit数，即可对之后的随机数进行精准预测。而注意到生成List1、List2之间重新调整了一次随机数种子，因此List1、List2是使用同一随机数种子生成的。</p>
<p>而注意到，List1仅有$624<em>16$bit，List2却有$324</em>64 = 624*32$bit，因此List2生成的位数是足够的，而最终task.txt文本中却只给了List2的部分字节，不需要深究原理也能明白：List1生成的字节恰好就是List2生成的随机数中缺失的字节。因此只需要每种补充方式均尝试一下即可得到K2。</p>
<p><strong>K3</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K3 = flag[:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>很显然，因为flag一般以DASCTF{开头，因此只需要爆破一个可见字符即可得到正确K3。</p>
<p><strong>IV1及IV2</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br></pre></td></tr></table></figure>
<p>首先明确IV一共8个字节，因此hint2的高位即为IV1，此时题目的几个哈希值貌似给了一个暗示：爆破求解IV2.可是需要爆破的量有4个字节，虽然不能说很大，却也需要很长时间。此时就需要注意到，digest=digest1+digest2这一行，并不是数值的相加，而是字符串的连接，而当你将digest解码后，你会发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">digest1 = digest2</span><br></pre></td></tr></table></figure>
<p>没错，太幽默了，所以IV2与IV1相同(基本无需考虑哈希碰撞)</p>
<p>此时所有量都得到了还原，解密3DES即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">int</span>(<span class="string">&quot;a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1&quot;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取iv</span></span><br><span class="line">hint2 = <span class="number">22078953819177294945130027344</span></span><br><span class="line">IV1 = long_to_bytes(hint2 &gt;&gt; <span class="number">64</span>)</span><br><span class="line">IV2 = IV1</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取K2</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        list1.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        list2.append(<span class="built_in">int</span>(f.readline(),<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    t1 = (list2[i] &amp; <span class="number">0xffff</span>)</span><br><span class="line">    t2 = ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i]&lt;&lt;<span class="number">16</span>) | (list2[i] &amp; <span class="number">0xffff</span>))</span><br><span class="line">    rc.submit( (list1[<span class="number">2</span>*i+<span class="number">1</span>]&lt;&lt;<span class="number">16</span>) | ((list2[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>))</span><br><span class="line">K2 = long_to_bytes(rc.predict_getrandbits(<span class="number">64</span>),<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破k3</span></span><br><span class="line">xor = <span class="number">334648638865560142973669981316964458403</span></span><br><span class="line">K1 = (xor ^ (xor&gt;&gt;<span class="number">64</span>)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">K1 = long_to_bytes(K1)</span><br><span class="line"></span><br><span class="line">temp = bytes_to_long(<span class="string">b&quot;DASCTF&#123;&quot;</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    K3 = long_to_bytes(temp + j)</span><br><span class="line">    KEY = K1 + K2 + K3</span><br><span class="line">    IV = IV1 + IV2</span><br><span class="line"></span><br><span class="line">    mode = DES3.MODE_CBC</span><br><span class="line">    des3 = DES3.new(KEY, mode, IV)</span><br><span class="line">    flag = <span class="built_in">str</span>(des3.decrypt(long_to_bytes(cipher)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;DASCTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{8e5ee461-f4e1-4af2-8632-c9d62f4dc073}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="esyRSA"><a href="#esyRSA" class="headerlink" title="esyRSA"></a>esyRSA</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好像这个RSA有点怪啊！私钥给你了！我的e呢？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> md5 <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p, q</span><br><span class="line"></span><br><span class="line">e = ?????</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">ans = gcd(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> n, e, d</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="built_in">str</span>(p + q)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">nspan></span><br><span class="line"><span class="string">d = 14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>无力吐槽。。。这题附件锅了，n是两个重复的大整数拼起来的，因此要先取一半当作正确的n。之后的做法就多了，d过大可以考虑wiener或构造格，但是题目给了e为五位数的暗示，因此也只需要爆破一下e，当作已知e、d分解n即可。</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="string">&quotquot;</span></span><br><span class="line">n = <span class="number">80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</span></span><br><span class="line">d = <span class="number">14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">100000</span>):</span><br><span class="line">    t = e*d - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">        c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t, n)</span><br><span class="line">        c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t, n)</span><br><span class="line">        <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">            p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">            q = n // p</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %hashlib.md5(<span class="built_in">str</span>(p + q).encode()).hexdigest())</span><br><span class="line">            exit()   </span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{4ae33bea90f030bfddb7ac4d9222ef8f}</font>

<p>(<del>为什么主办方没有发现附件需要更新</del>？/(ㄒoㄒ)/~~)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="MCeorpkpleer"><a href="#MCeorpkpleer" class="headerlink" title="MCeorpkpleer"></a>MCeorpkpleer</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这数据都不全要怎么计算呢</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params"><span class="built_in">list</span>, m, w</span>):</span><br><span class="line">    pubkey_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin)):</span><br><span class="line">        pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br><span class="line">    <span class="keyword">return</span> pubkey_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_cry</span>(<span class="params">e, pubkey</span>):</span><br><span class="line">    pubkey_list = pubkey</span><br><span class="line">    encode = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        encode += pubkey_list[i] * <span class="built_in">int</span>(e[i]) % m</span><br><span class="line">    <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">e_bin = (<span class="built_in">bin</span>(e))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = pubkey(<span class="built_in">list</span>, m, w)</span><br><span class="line">en_e = e_cry(e_bin, pubkey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;pubkey = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>((p &gt;&gt; <span class="number">435</span>) &lt;&lt; <span class="number">435</span>, n, c, pubkey, en_e))</span><br></pre></td></tr></table></figure>
<p>观察题目，e_cry用于背包加密的就是e的二进制串本身，因此直接格基规约出e，再用coppersmith解已知p高位问题即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#step1 已知p高位，恢复p、q</span></span><br><span class="line">p4 = <span class="number">139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line">n = <span class="number">22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits= <span class="number">435</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2 格基规约恢复e</span></span><br><span class="line">b = [<span class="number">18143710780782459577</span>, <span class="number">54431132342347378731</span>, <span class="number">163293397027042136193</span>, <span class="number">489880191081126408579</span>, <span class="number">1469640573243379225737</span>, <span class="number">4408921719730137677211</span>, <span class="number">13226765159190413031633</span>, <span class="number">39680295477571239094899</span>, <span class="number">119040886432713717284697</span>, <span class="number">357122659298141151854091</span>, <span class="number">1071367977894423455562273</span>, <span class="number">3214103933683270366686819</span>, <span class="number">9642311801049811100060457</span>, <span class="number">28926935403149433300181371</span>, <span class="number">86780806209448299900544113</span>, <span class="number">260342418628344899701632339</span>, <span class="number">781027255885034699104897017</span>, <span class="number">2343081767655104097314691051</span>, <span class="number">7029245302965312291944073153</span>, <span class="number">21087735908895936875832219459</span>, <span class="number">63263207726687810627496658377</span>, <span class="number">189789623180063431882489975131</span>, <span class="number">569368869540190295647469925393</span>, <span class="number">1708106608620570886942409776179</span>, <span class="number">601827224419797931380408071500</span>, <span class="number">1805481673259393794141224214500</span>, <span class="number">893952418336266652976851386463</span>, <span class="number">2681857255008799958930554159389</span>, <span class="number">3523079163584485147344841221130</span>, <span class="number">1524252287869625983140881149316</span>, <span class="number">50264262166963219975822190911</span>, <span class="number">150792786500889659927466572733</span>, <span class="number">452378359502668979782399718199</span>, <span class="number">1357135078508006939347199154597</span>, <span class="number">4071405235524020818041597463791</span>, <span class="number">3169230503688232995231149877299</span>, <span class="number">462706308180869526799807117823</span>, <span class="number">1388118924542608580399421353469</span>, <span class="number">4164356773627825741198264060407</span>, <span class="number">3448085117999647764701149667147</span>, <span class="number">1299270151115113835209806487367</span>, <span class="number">3897810453345341505629419462101</span>, <span class="number">2648446157152195057994615872229</span>, <span class="number">3422845870014670444537026359650</span>, <span class="number">1223552407160181874717436564876</span>, <span class="number">3670657221480545624152309694628</span>, <span class="number">1966986461557807413563286569810</span>, <span class="number">1378466783231507511243038452393</span>, <span class="number">4135400349694522533729115357179</span>, <span class="number">3361215846199738142293703557463</span>, <span class="number">1038662335715384967987468158315</span>, <span class="number">3115987007146154903962404474945</span>, <span class="number">302975818554635252993570910761</span>, <span class="number">908927455663905758980712732283</span>, <span class="number">2726782366991717276942138196849</span>, <span class="number">3657854499533237101379593333510</span>, <span class="number">1928578295715881845245137486456</span>, <span class="number">1263242285705730806288591202331</span>, <span class="number">3789726857117192418865773606993</span>, <span class="number">2324195368467747797703678306905</span>, <span class="number">2450093503961328663664213663678</span>, <span class="number">2827787910442071261545819733997</span>, <span class="number">3960871129884299055190637944954</span>, <span class="number">2837628186769067706678271320788</span>]</span><br><span class="line">c = <span class="number">31087054322877663244023458448558</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = b[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        e = M</span><br><span class="line"></span><br><span class="line"><span class="comment">#step3 RSA</span></span><br><span class="line">c = <span class="number">156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">    e[i] = <span class="built_in">str</span>(e[i])</span><br><span class="line">e = <span class="string">&quot;&quot;</span>.join(e)[:-<span class="number">1</span>]</span><br><span class="line">e = <span class="built_in">int</span>(e,<span class="number">2</span>)</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<font color="red">DASCTF{T81I_tPPS_6r7g_xlPi_OO3M_6vyV_Rkba}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h2><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一切都是有意义的，拿下它吧。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<p>message.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自由和谐和谐富强公正友善爱国公正法治法治文明和谐自由法治自由法治平等公正友善公正公正民主法治自由公正敬业和谐富强公正友善爱国和谐平等平等友善敬业法治敬业和谐富强法治平等平等友善敬业公正公正公正友善敬业法治平等平等诚信自由公正自由平等友善敬业公正友善法治和谐和谐</span><br></pre></td></tr></table></figure>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> enflag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = q * p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = getPrime(<span class="number">17</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line"><span class="comment"># 以上信息生成了私钥文件,但文件被损坏了你能提取有用信息吗</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(enflag, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>pri.pem：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbIL</span><br><span class="line">SuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYE</span><br><span class="line">N4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuW</span><br><span class="line">eZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESv</span><br><span class="line">IgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn</span><br><span class="line">/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbn</span><br><span class="line">jxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5</span><br><span class="line">X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaA</span><br><span class="line">UETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25u</span><br><span class="line">Gz3++w==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>第一层，解开社会主义核心价值观编码得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C0ngr4tulati0n5_y0u_fou^d_m3</span><br></pre></td></tr></table></figure>
<p>第二层，恢复破损RSA私钥文件，base64解码后得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;30820277020100300d06092a864886f70d0101010500048202613082025d02010002818100b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913020301000102818100974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361024100ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9024100cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&#x27;</span><br></pre></td></tr></table></figure>
<p>按照RSA私钥格式还原，可以得到以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n 028181 00b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913</span><br><span class="line">e 0203 010001</span><br><span class="line">d 028181 00974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361</span><br><span class="line">p 0241 00ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9</span><br><span class="line">q 0241 00cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb&quot;</span><br></pre></td></tr></table></figure>
<p>可以看到，私钥中的dp、dq以及inv(q,p)损坏了，但是剩下的值已经足够用于RSA解密，因此正常解密即可得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;0e287wQ\x08R\x17\x00FGXYFZ\x07V\x03kIUCn\x02VDg\x01f\x0cN</span><br></pre></td></tr></table></figure>
<p>发现题目描述XOR还没用上，将第一步社会主义核心价值观解密得到的串用于异或即可。</p>
<p>得到flag：</p>
<font color="red">DASCTF{0e2874af5e422482378640e61d919e9a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体难度确实不大，但是怎么说呢，题目有点坑，自己能力也还存在不足，下次加油吧。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-&quot;科来杯&quot;第十届山东省大学生网络安全技能大赛-wp-crypto</title>
    <url>/post/85e9cf6b.html</url>
    <content><![CDATA[<p>没有参加这个比赛，但是赛后有师傅给我看了看题，发现其中那个pkrsa还挺有意思的，就简单写一写思路(没有赛题的交互环境也懒得自己搭，所以也就没有exp)</p>
<span id="more"></span>
<p>简单题也还是过一下吧。</p>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97</span><br></pre></td></tr></table></figure>
<p>其实从前几个字符来看就能感觉到是变异凯撒。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diff = <span class="number">3</span></span><br><span class="line">c = <span class="string">b&quot;ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i-diff),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    diff += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;CaSer_1s_VerY_E4sY&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from Crypto.Util.number import getPrime,bytes_to_long</span></span><br><span class="line"><span class="comment"># from random import randint</span></span><br><span class="line"><span class="comment"># from gmpy2 import *</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(b&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># p=getPrime(1024)</span></span><br><span class="line"><span class="comment"># q=getPrime(1024)</span></span><br><span class="line"><span class="comment"># n = p*q</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># p_2=((p&gt;&gt;128)&lt;&lt;128)</span></span><br><span class="line"><span class="comment"># Result = []</span></span><br><span class="line"><span class="comment"># Divisor = []</span></span><br><span class="line"><span class="comment"># for i in range(12):</span></span><br><span class="line"><span class="comment">#     Divisor.append(getPrime(128))</span></span><br><span class="line"><span class="comment"># for i in range(12):</span></span><br><span class="line"><span class="comment">#     Result.append(p_2%Divisor[i])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(c,n,Divisor,Result)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178 </span></span><br><span class="line"><span class="string">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line"><span class="string">[205329935991133380974880368934928321273, 274334866497850560640212079966358515253, 264739757264805981824344553014559883169, 314495359937742744429284762852853819407, 197513216256198287285250395397676269263, 194633662721082002304170457215979299327, 320085578355926571635267449373645191637, 310701821184698431287158634968374845899, 198238777199475748910296932106553167589, 292201037703513010563101692415826269513, 332238634715339876614712914152080415649, 334257376383174624240445796871873866383]</span></span><br><span class="line"><span class="string">[108968951841202413783269876008807200083, 29053101048844108651205043858001307413, 243503157837867321277650314313173163504, 160933173053376016589301282259056101279, 53063624128824890885455759542416407733, 34980025050049118752362228613379556692, 132553045879744579114934351230906284133, 160998336275894702559853722723725889989, 87211131829406574118795685545402094661, 36445723649693757315689763759472880579, 11133325919940126818459098315213891415, 1404668567372986395904813351317555162]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">c=<span class="number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">Divisor=[<span class="number">205329935991133380974880368934928321273</span>, <span class="number">274334866497850560640212079966358515253</span>, <span class="number">264739757264805981824344553014559883169</span>, <span class="number">314495359937742744429284762852853819407</span>, <span class="number">197513216256198287285250395397676269263</span>, <span class="number">194633662721082002304170457215979299327</span>, <span class="number">320085578355926571635267449373645191637</span>, <span class="number">310701821184698431287158634968374845899</span>, <span class="number">198238777199475748910296932106553167589</span>, <span class="number">292201037703513010563101692415826269513</span>, <span class="number">332238634715339876614712914152080415649</span>, <span class="number">334257376383174624240445796871873866383</span>]</span><br><span class="line">Result=[<span class="number">108968951841202413783269876008807200083</span>, <span class="number">29053101048844108651205043858001307413</span>, <span class="number">243503157837867321277650314313173163504</span>, <span class="number">160933173053376016589301282259056101279</span>, <span class="number">53063624128824890885455759542416407733</span>, <span class="number">34980025050049118752362228613379556692</span>, <span class="number">132553045879744579114934351230906284133</span>, <span class="number">160998336275894702559853722723725889989</span>, <span class="number">87211131829406574118795685545402094661</span>, <span class="number">36445723649693757315689763759472880579</span>, <span class="number">11133325919940126818459098315213891415</span>, <span class="number">1404668567372986395904813351317555162</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># def basic_CRT(ai,mi):</span></span><br><span class="line"><span class="comment">#     assert reduce(gmpy2.gcd,mi) == 1</span></span><br><span class="line"><span class="comment">#     assert len(ai) == len(mi)</span></span><br><span class="line"><span class="comment">#     N = reduce(lambda x,y:x * y,mi)</span></span><br><span class="line"><span class="comment">#     ans = 0</span></span><br><span class="line"><span class="comment">#     for a,m in zip(ai,mi):</span></span><br><span class="line"><span class="comment">#         t = N // m</span></span><br><span class="line"><span class="comment">#         ans += a * t * gmpy2.invert(t,m)</span></span><br><span class="line"><span class="comment">#     return ans % N,N</span></span><br><span class="line"><span class="comment"># result = basic_CRT(Result,Divisor)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># p_high=157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment"># f = x + p_high</span></span><br><span class="line"><span class="comment"># roots = f.small_roots(X=2^128, beta=0.4)</span></span><br><span class="line"><span class="comment"># if roots:</span></span><br><span class="line"><span class="comment"># 	p = p_high+int(roots[0])</span></span><br><span class="line"><span class="comment"># 	print(&quot;n=&quot;+str(n))</span></span><br><span class="line"><span class="comment"># 	print(&quot;p=&quot;+str(p))</span></span><br><span class="line"><span class="comment"># 	print(&quot;q=&quot;+str(n//p))</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">p=<span class="number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794708282102407491782299777228899079176117</span></span><br><span class="line">q=<span class="number">146598666145389487374076474702380241089893944436923994466470555513748278755568038863819188404588602962888679358728628069490879689376996830110571995521814075973422513105805715524894550773219606972944401957227665252279176873209924236114228003156706532596699592716796867748104565680326123749660658940264843181589</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=invert(e,phi)</span><br><span class="line">m=powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;2233747d3bf06f070048e80300dac75f&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>额，我看到的题目就是这个样子的，exp和flag都写好了。不过实际看思路也很简单，就是先CRT求出p_2，然后高位攻击copper恢复p。</p>
<p><br></p>
<p><br></p>
<h3 id="pkrsa"><a href="#pkrsa" class="headerlink" title="pkrsa"></a>pkrsa</h3><p>题目：</p>
<p>task.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,GCD,inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">BITS</span>):</span><br><span class="line">	e = <span class="number">3</span></span><br><span class="line">	p = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	q = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">while</span> GCD(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)) != <span class="number">1</span>:</span><br><span class="line">		p = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">		q = getPrime(BITS//<span class="number">2</span>)</span><br><span class="line">	n = p*q</span><br><span class="line">	phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">	d = inverse(e,phi)</span><br><span class="line">	<span class="keyword">return</span> e,d,n</span><br><span class="line">	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sr</span>(<span class="params">s</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		ans = raw_input(s)</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">		exit()</span><br><span class="line"></span><br><span class="line">BITS=<span class="number">2048</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;generating......&quot;</span>)</span><br><span class="line">e,d,n = generate_key(BITS)</span><br><span class="line">prikey=RSA.construct((n,e,d),)</span><br><span class="line">key=PKCS1_v1_5.new(prikey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">650</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		choice = sr(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			message = sr(<span class="string">&quot;Your msg: &quot;</span>)</span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(message)))</span><br><span class="line">		<span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">			<span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">38</span></span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(flag)))</span><br><span class="line">			exit()</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> ee:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(ee))</span><br><span class="line">		exit()</span><br></pre></td></tr></table></figure>
<p>除了task.py以外，题目还给出了一个Crypto库的具体实现，其列表如下：</p>
<p><img src="/post/85e9cf6b/image-20231025223218275.png" alt="image-20231025223218275"></p>
<p>第一眼肯定会觉得这没什么用，但是其实另有玄机。不过这个后面再说，先分析一下题目加密流程：</p>
<h4 id="解题关键"><a href="#解题关键" class="headerlink" title="解题关键"></a>解题关键</h4><p>连接上靶机后，题目开始以如下方式生成RSA密钥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BITS=<span class="number">2048</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;generating......&quot;</span>)</span><br><span class="line">e,d,n = generate_key(BITS)</span><br><span class="line">prikey=RSA.construct((n,e,d),)</span><br><span class="line">key=PKCS1_v1_5.new(prikey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>+<span class="built_in">str</span>(n))</span><br></pre></td></tr></table></figure>
<p>其中，generate_key函数其实也没什么特别的地方，就是生成两个1024bit的大素数p、q且保证p-1、q-1与3互质，然后以加密指数e=3生成私钥并返回。然后以n、e、d生成了一个RSA加解密对象，然后下一行就是这道题目的真正重要之处：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=PKCS1_v1_5.new(prikey)</span><br></pre></td></tr></table></figure>
<p>而PKCS1_v1_5其实是对RSA加密解密的一种填充方式，这里其实也就是说他会将待加密的明文消息进行填充处理后，再利用RSA的公钥进行加密。</p>
<p>那么他的填充模式是什么呢？我们查看一下这个PKCS1_v1_5类的源码(从这里开始就已经踩坑了)：</p>
<p><img src="/post/85e9cf6b/image-20231025224232484.png" alt="image-20231025224232484"></p>
<p>然后查看里面的encrypt函数，实现如下：</p>
<p><img src="/post/85e9cf6b/image-20231025224333992.png" alt="image-20231025224333992"></p>
<p>最重要的是step 2a和step 2b的实现，具体来说，他是取了(k-mLen-3)长度的填充字节ps，ps是由self._randfunc函数一字节一字节生成的，并且保证不为0，然后待加密的消息就会被填充成如下格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">em = <span class="string">b&#x27;\x00\x02&#x27;</span> + ps + <span class="string">b&#x27;\x00&#x27;</span> + _copy_bytes(<span class="literal">None</span>, <span class="literal">None</span>, message)</span><br></pre></td></tr></table></figure>
<p>这样填充显而易见的好处是：</p>
<ul>
<li>可以防止低加密指数攻击</li>
<li>可以正确解密，因为解密后截断b”\x00”前的填充字节就好</li>
</ul>
<p>不过其实也是我自己随便想想的，建议还是自己了解一下这样填到底具体有些什么优缺点。</p>
<p>然后填充过后，就是正常的对em进行RSA加密得到密文了。而这个填充其实就是解决这个题目的核心所在，为什么是核心，之后会讲到。</p>
<h4 id="题目任务"><a href="#题目任务" class="headerlink" title="题目任务"></a>题目任务</h4><p>再回看这个题目交给我们的实际任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">650</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		choice = sr(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			message = sr(<span class="string">&quot;Your msg: &quot;</span>)</span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(message)))</span><br><span class="line">		<span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">			<span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">38</span></span><br><span class="line">			<span class="built_in">print</span>(bytes_to_long(key.encrypt(flag)))</span><br><span class="line">			exit()</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> ee:</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">str</span>(ee))</span><br><span class="line">		exit()</span><br></pre></td></tr></table></figure>
<p>我们一共有650次机会可以进行如下交互：</p>
<ul>
<li>输入”1”，可以输入一个msg进行PKCS_v1_5的RSA填充加密，并返回密文</li>
<li>输入”2”，可以得到对flag进行PKCS_v1_5的RSA填充加密得到的密文</li>
</ul>
<p>那么其实思路就有了：通过前面交互得到的RSA的密文去解出每一次的填充，然后对最后一次的填充进行预测，从而copper解出明文。而这个伪随机数的预测其实很容易就能想到MT19937那一类的题型，我们检查一下他是不是用的getrandbits生成的随机填充：</p>
<p>那就一步步跟进函数源码，首先是encrypt函数内部的：</p>
<p><img src="/post/85e9cf6b/image-20231025225526921.png" alt="image-20231025225526921"></p>
<p>跟进这个_randfunc，再跟进到类对象的初始化，可以看到：</p>
<p><img src="/post/85e9cf6b/image-20231025225611481.png" alt="image-20231025225611481"></p>
<p>用的是Random库，跟进这个库看看：</p>
<p><img src="/post/85e9cf6b/image-20231025225646913.png" alt="image-20231025225646913"></p>
<p>尴尬，怎么是用的urandom呢？因为这个生成的可以说是安全种子，而不像getrandbits那样，有足够的组数就可以进行后续随机数预测。</p>
<p>思路卡住了一会儿，突然想到：他不是给了一整个Crypto库的实现吗，也许意思就是在其中其实偷偷改动了一些函数与类的实现？而检查一下我们跟进的库，果然是本地的标准实现,而不是他给的：</p>
<p><img src="/post/85e9cf6b/image-20231025230001507.png" alt="image-20231025230001507"></p>
<p>那就从头开始，用他给的库重新跟进，果然发现不一样的地方：</p>
<p><img src="/post/85e9cf6b/image-20231025230055075.png" alt="image-20231025230055075"></p>
<p>这个ps不再是逐字节生成的了，而是一次性生成完毕，而继续跟进，可以发现这里的_randfunc其实是：</p>
<p><img src="/post/85e9cf6b/image-20231025230158218.png" alt="image-20231025230158218"></p>
<p>果然是getrandbits，多么的鸡贼！</p>
<p>那么思路就很清晰了，我们首先生成一个固定的245字节的明文，这样每次加密，靶机就会用getrandbits(64)生成8字节的填充块ps，也就是说，每一次我们有如下的关系式：</p>
<script type="math/tex; mode=display">
c \equiv (num1 + ps + msg)^3 \quad (mod\;n)</script><p>其中，num1是b”\x00\x02”对应的数字，ps是填充块对应的数字，msg是我们固定的消息。你应该已经可以想到了，每一次的ps都是一个64比特的小根，完全可以用copper解出来，那么312次后，我们就有312*64伪随机数比特，也就是足够的MT19937的state，就可以用randcrack库进行随机数预测了。这个时候我们就可以申请flag的加密结果了，有如下式子：</p>
<script type="math/tex; mode=display">
c_{flag} \equiv (num1 + ps_{flag} + flag)^3 \quad (mod\;n)</script><p>而这个时候ps_flag是我们能够预测的，flag又是一个38字节的小根，那就可以用copper求出flag了。</p>
<p>这题还是挺有意思，要自己去看源码内部的实现，而且结合了copper与MT19937伪随机数预测，所以记录一下。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-香山杯-wp-crypto</title>
    <url>/post/183fe2bb.html</url>
    <content><![CDATA[<p>*代表赛中未解出的题目</p>
<span id="more"></span>
<h3 id="lift"><a href="#lift" class="headerlink" title="lift"></a>lift</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s,l</span>):</span><br><span class="line">    <span class="keyword">return</span> s + os.urandom(l - <span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    g = getPrime(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = g * random.getrandbits(<span class="number">138</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = g * random.getrandbits(<span class="number">138</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    N = p ** <span class="number">5</span> * q</span><br><span class="line">    phi = p ** <span class="number">4</span> * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">    e = inverse(d, phi)</span><br><span class="line">    E = e * g</span><br><span class="line">    hint = gmpy2.gcd(E, phi)</span><br><span class="line">    <span class="keyword">return</span> N, E, hint</span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n,e,hint = gen()</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># hint = 251</span></span><br><span class="line"><span class="comment"># n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line"><span class="comment"># e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line"><span class="comment"># c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br></pre></td></tr></table></figure>
<p>首先要弄清楚gen()函数返回的几个参数究竟是什么：</p>
<script type="math/tex; mode=display">
n = p^5q</script><script type="math/tex; mode=display">
e = e*g</script><script type="math/tex; mode=display">
hint = gcd(e*g,phi)</script><p>其中，p、q参数生成方式如下：</p>
<script type="math/tex; mode=display">
p = g*a1+1</script><script type="math/tex; mode=display">
q = g*a2+1</script><p>即表明phi与g不互素，接下来进入题目分析：</p>
<p>首先有：</p>
<script type="math/tex; mode=display">
phi = p^4(p-1)(q-1) = p^4(g*a1)(g*a2) = g^2p^4a1a2</script><script type="math/tex; mode=display">
e = e*g</script><p>所以hint一定是g的整数倍，而251本身就是素数，因此得到g=251。</p>
<p>而由于题目是多素数n且d为256比特，因此可以考虑采用coppersmith找到d，原理如下(此处的e为gen内部的小写e，而非大写E)，由于：</p>
<script type="math/tex; mode=display">
e*d \equiv 1 \quad (mod\;p^4(p-1)(q-1))</script><p>所以由同余性质：</p>
<script type="math/tex; mode=display">
e*d \equiv 1 \quad (mod\;p^4)</script><p>因此把d看作未知小量，使用coppersmith即可求解模n的参数p^4下的小根。求解出d后，求解gcd(ed-1,n)即可得到p^4，进而还原出p、q。</p>
<p>还原出p、q后，由于密文c是由以下方式得到：</p>
<script type="math/tex; mode=display">
c \equiv m^{eg} \quad (mod\;n)</script><p>而由于g与phi不互素，因此只能先用d求解出：</p>
<script type="math/tex; mode=display">
c1 \equiv c^d \equiv m^g \quad (mod\;n)</script><p>然后继续使用同余性质，将问题转化到模p、q下：</p>
<script type="math/tex; mode=display">
c_p \equiv m^g \quad(mod\;p)</script><script type="math/tex; mode=display">
c_q \equiv m^g \quad(mod\;q)</script><p>使用AMM算法可以得到：</p>
<script type="math/tex; mode=display">
mp \equiv m \quad (mod\;p)</script><script type="math/tex; mode=display">
mq \equiv m \quad (mod\;q)</script><p>但是由于题目将flag填充到了512比特，因此直接做中国剩余定理，只能得出模 p*q 下的解，位数是不够的。</p>
<p>可能这个时候会想，为什么刚才AMM算法不直接转到模p^5下开根，而只能转到模p下开根？事实上是因为AMM算法一般只适用于模数为素数时的有限域开根，因此这里只能得到模p下的解，而无法直接得到模p^5下的解。</p>
<p>那么该怎么办呢？有一种专门用于将模p^k下的解提升至模p^(k+i)下的解的方法，称作Hensel Lifting。而这正好与题目名字相对应。这里有一篇比较好理解的文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/367203571">Hensel’s lemma (1) - 知乎 (zhihu.com)</a></p>
<p>大概了解到，Hensel Lifting一般用于解高次多项式同余方程，而在本题中，我们恰好有一个高次多项式同余方程如下(c1如何得来见前方推导)：</p>
<script type="math/tex; mode=display">
f(x) = x^g - c1 \quad (mod\; n)</script><p>仍然使用同余定理把他转到模p^5下:</p>
<script type="math/tex; mode=display">
f(x) = x^g - c1 \quad (mod\; p^5)</script><p>显然，明文m就是这个高次多项式的根，而模p^5下的根m已经满足了512比特的要求，因此我们只需要使用Hensel Lifting，将刚才AMM求得的模p下的所有可能根提升到模p^5下，并根据flag头进行判别即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">hint = <span class="number">251</span></span><br><span class="line">n = <span class="number">108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line">e = <span class="number">3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line">c = <span class="number">72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#find d</span></span><br><span class="line">g = hint</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (e//g) * x - <span class="number">1</span></span><br><span class="line">d = <span class="built_in">int</span>(f.monic().small_roots(X=<span class="number">2</span>**<span class="number">256</span>,beta=<span class="number">0.66</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#find p,q,c1</span></span><br><span class="line">pr = GCD(e//g*d-<span class="number">1</span>,n)</span><br><span class="line">p = <span class="built_in">int</span>(iroot(pr,<span class="number">4</span>)[<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">int</span>(n // (p**<span class="number">5</span>))</span><br><span class="line">phi = <span class="built_in">int</span>(p ** <span class="number">4</span> * (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#AMM</span></span><br><span class="line">cp = c1 % p</span><br><span class="line">mp = AMM_rth(cp, g, p)</span><br><span class="line">rt1 = ALL_ROOT2(g, p)</span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hensel lifting(sage求有点问题，不知道原因)</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> amp:</span><br><span class="line">    m = <span class="built_in">int</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b):</span><br><span class="line">        _dx = -inverse(g*m**(g-<span class="number">1</span>),p) % p**(i+<span class="number">1</span>)</span><br><span class="line">        mod_temp = (m**g-c1)//(p**i) % p**(i+<span class="number">1</span>)</span><br><span class="line">        t = _dx * mod_temp % p</span><br><span class="line">        m = m + p**i*t % (p**(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> long_to_bytes(m)):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>但是呢，sage在实现这个自己写的Hensel Lifting时一直报错，脑子也不太清醒，暂时没找出原因。所以最后还需要手动把AMM求出的所有可能根粘贴出来，用python实现Hensel Lifting。</p>
<p>因此最终exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">g = <span class="number">251</span></span><br><span class="line">n = <span class="number">108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077</span></span><br><span class="line">e = <span class="number">3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039</span></span><br><span class="line">c = <span class="number">72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Copper解方程得到这些数值</span></span><br><span class="line">p = <span class="number">69367143733862710652791985332025152581988181</span></span><br><span class="line">q = <span class="number">67842402383801764742069883032864699996366777</span></span><br><span class="line">phi = p ** <span class="number">4</span> * (p - <span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e//g, phi)</span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">c1 = <span class="number">65942580064916339360370107869124805065379278407453423807322070174933076533175126747570263707923877730828981200462382452332851764309132627867196012329998008639862606922074733109347253946308226346992240834103573312752632998287455123587460568157234254421846676210189</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#AMM求出的根，满足 amp[i] = m % p，过长就不粘贴了</span></span><br><span class="line">amp = </span><br><span class="line"></span><br><span class="line"><span class="comment"># hensel lifting</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> amp:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b):</span><br><span class="line">        _dx = -inverse(g*m**(g-<span class="number">1</span>),p) % p**(i+<span class="number">1</span>)</span><br><span class="line">        mod_temp = (m**g-c1)//(p**i) % p**(i+<span class="number">1</span>)</span><br><span class="line">        t = _dx * mod_temp % p</span><br><span class="line">        m = m + p**i*t % (p**(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> long_to_bytes(m)):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;4b68c7eece6be865f6da2a4323edd491&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="strange-hash"><a href="#strange-hash" class="headerlink" title="*strange_hash"></a>*strange_hash</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">18446744073709551557</span></span><br><span class="line">M = [[<span class="number">8</span>, <span class="number">56</span>, <span class="number">280</span>], [<span class="number">18446744073709551543</span>, <span class="number">18446744073709551467</span>, <span class="number">18446744073709551123</span>], [<span class="number">7</span>, <span class="number">35</span>, <span class="number">155</span>]]</span><br><span class="line">ConInv = [<span class="number">0x39a3f978106bac2d</span>,<span class="number">0x2940e055f4a33725</span>,<span class="number">0xfda9a7a293fb5bc9</span>]</span><br><span class="line">Con = [[<span class="number">0x9c52c2de7a9373c4</span>,<span class="number">0xf2135cb886d0fa21</span>,<span class="number">0x957df7f3cd4879e9</span>], [<span class="number">0xd54f837d2738d717</span>,<span class="number">0x400ddf1ffaae436d</span>,<span class="number">0xc2abb601d9a26b07</span>], [<span class="number">0x1904359f1deb3495</span>,<span class="number">0xc21aa09ba52b157b</span>,<span class="number">0x3d45525db1b19a0c</span>], [<span class="number">0xed66cf26a65afc73</span>,<span class="number">0x1cee569b29ffa476</span>,<span class="number">0x3da45abf4304849</span>], [<span class="number">0x1c1a642fa0f3d96d</span>,<span class="number">0x59a1c4fbb96aec86</span>,<span class="number">0xa18e9ca93163f63d</span>], [<span class="number">0x9621ec9fbcb402be</span>,<span class="number">0xd69468353c31bee0</span>,<span class="number">0x50655b3f20fee3b8</span>], [<span class="number">0x109cde7a61c2c195</span>,<span class="number">0x5ebbd9e98be60c59</span>,<span class="number">0x334d2d15f6e43190</span>], [<span class="number">0x47af2b0d63901977</span>,<span class="number">0x67ace097bf8c6f34</span>,<span class="number">0xb87da3296b70d64b</span>], [<span class="number">0x52d6344b38f49899</span>,<span class="number">0xad5773add31420e1</span>,<span class="number">0xecd0b7480f8c8095</span>], [<span class="number">0xe2afb6d20f5decda</span>,<span class="number">0xb1767d8be7d1371</span>,<span class="number">0x902fd6806a0ef4db</span>]]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(Con) == <span class="number">10</span></span><br><span class="line">Inv = inverse(<span class="number">3</span>, p-<span class="number">1</span>)</span><br><span class="line">Round = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> [(a + b)%p <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, M</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M[<span class="number">0</span>])):</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            temp += x[j] * M[j][i]</span><br><span class="line">        result.append(temp%p)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rescue_Prime</span>(<span class="params">R, P</span>):</span><br><span class="line">    X = add(P, ConInv)</span><br><span class="line">    Y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    Z = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    U = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(R):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            Y[i] = <span class="built_in">pow</span>(X[i], <span class="number">3</span>, p)</span><br><span class="line">            </span><br><span class="line">        Z = add(Con[<span class="number">2</span>*r%<span class="number">10</span>], multiply(Y, M))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            U[i] = <span class="built_in">pow</span>(Z[i], Inv, p)</span><br><span class="line"></span><br><span class="line">        X = add(Con[(<span class="number">2</span>*r+<span class="number">1</span>)%<span class="number">10</span>], multiply(U, M))</span><br><span class="line">    <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    encrypt_history = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">            random.choice(string.ascii_letters + string.digits)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line">        ])</span><br><span class="line">        digest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send_line(</span><br><span class="line">            <span class="built_in">str</span>.encode((<span class="string">&quot;sha256(XXXX + %s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))))</span><br><span class="line">        self.send_line(<span class="built_in">str</span>.encode(<span class="string">&#x27;Give me XXXX:&#x27;</span>))</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = (x.strip()).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(</span><br><span class="line">                (x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_line</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_line</span>(<span class="params">self</span>):</span><br><span class="line">        body = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ch = self.request.recv(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            body = body + ch</span><br><span class="line">        <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.dosend(<span class="string">b&#x27;You must pass the PoW!&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">            self.send_line(<span class="string">b&#x27;Send your input:&#x27;</span>)</span><br><span class="line">            input_str = self.read_line().decode()</span><br><span class="line">            num_tuple = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, input_str.strip(<span class="string">&#x27;()&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)))  </span><br><span class="line">            <span class="keyword">if</span> num_tuple[-<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;The third number is not zero!&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">            output = Rescue_Prime(Round, num_tuple)</span><br><span class="line">            <span class="keyword">if</span> output[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;congratulate! Here is the flag:&#x27;</span>)</span><br><span class="line">                self.send_line(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send_line(<span class="string">b&#x27;Oops! Find collision failed.&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.send_line(<span class="string">b&#x27;What\&#x27;s wrong???&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span></span><br><span class="line">server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>题目的大致要求如下：</p>
<ul>
<li>通过proof</li>
<li>提供一组输入(x,y,0)，要求该输入通过自定义哈希函数Rescue_Prime后，生成的输出是(x’,y’,0)。也就是说，要求哈希函数的输入输出的最后一位均为0</li>
</ul>
<p>其中，自定义的哈希函数Rescue_Prime生成过程如下(其中三次方意义是三元组的每一个数字进行三次方，是为了方便而这样表示)：</p>
<script type="math/tex; mode=display">
output = ((((Input+Coninv)^3M+Con[0])^{-3}M+Con[1])^3M+Con[2])^{-3}M+Con[3]</script><p>看上去似乎很复杂，不过仔细一看，这怎么会是个哈希函数呢？因为哈希函数具有单向性，而他进行的每一步都是可逆的。比如如果加Con向量，逆操作就是对应减回去；如果是右乘M，逆操作就是对应解一个矩阵方程；如果是乘3次方或者-3次方，逆操作就是对应乘指数逆元。</p>
<p>因此，我们完全可以自定义一个输出，就定为(1,1,0)，然后就可以按如下操作反解出对应的哈希函数的输入，步骤如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minus</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> [(a - b)%p <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)]</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reveal</span>(<span class="params">R,P</span>):</span><br><span class="line">    X = minus(P,Con[<span class="number">3</span>])</span><br><span class="line">    <span class="built_in">print</span>(X)</span><br><span class="line">    X = [<span class="number">1515850589463500072</span>, <span class="number">12720000879441077924</span>, <span class="number">13358055339402620049</span>]</span><br><span class="line">    Y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,<span class="number">3</span>,p)</span><br><span class="line">        Y.append(temp)</span><br><span class="line">    Y = minus(Y,Con[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(Y)</span><br><span class="line">    Y = [<span class="number">3174461340829758314</span>, <span class="number">3934956789177085137</span>, <span class="number">11015113952396946596</span>]</span><br><span class="line">    Z = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Y:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,Inv,p)</span><br><span class="line">        <span class="comment">#print(pow(temp,3,p) == i)</span></span><br><span class="line">        Z.append(temp)</span><br><span class="line">    Z = minus(Z,Con[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(Z)</span><br><span class="line">    Z = [<span class="number">17548701131591609521</span>, <span class="number">14710429855691795808</span>, <span class="number">236055829718743711</span>]</span><br><span class="line">    X = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Z:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,<span class="number">3</span>,p)</span><br><span class="line">        <span class="comment">#print(pow(temp,3,p) == i)</span></span><br><span class="line">        X.append(temp)</span><br><span class="line">    X = minus(X,Con[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(X)</span><br><span class="line">    X = [<span class="number">1356636556594689318</span>, <span class="number">3037182169075815915</span>, <span class="number">14113359553476699425</span>]</span><br><span class="line">    Y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        temp = <span class="built_in">pow</span>(i,Inv,p)</span><br><span class="line">        Y.append(temp)</span><br><span class="line">    Y = minus(Y,ConInv)</span><br><span class="line">    <span class="built_in">print</span>(Y)</span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span></span><br><span class="line">In = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">reveal(<span class="number">2</span>,In)</span><br></pre></td></tr></table></figure>
<p>其中，每个矩阵是由sage解矩阵方程解的，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">18446744073709551557</span></span><br><span class="line">M = [[<span class="number">8</span>, <span class="number">56</span>, <span class="number">280</span>], [-<span class="number">14</span>, -<span class="number">90</span>, -<span class="number">434</span>], [<span class="number">7</span>, <span class="number">35</span>, <span class="number">155</span>]]</span><br><span class="line">Inv = inverse(<span class="number">3</span>, p-<span class="number">1</span>)</span><br><span class="line">Round = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前需解的右向量</span></span><br><span class="line">c = [<span class="number">11785826738904333038</span>, <span class="number">1444931144810824421</span>, <span class="number">13360052317957358486</span>]</span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">3</span>,<span class="number">3</span>,M)</span><br><span class="line">a1 = m.solve_left(c)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure>
<p>所以我们可以得到如下关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input = [<span class="number">5329202944861711021</span>, <span class="number">10075872277090249537</span>, <span class="number">6598944197421011167</span>]</span><br><span class="line">Rescue_Prime(R,Input) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>但是题目要求需要传入一个末尾为0的输入才行，这怎么办呢？比赛中也就停在这里了，不知道如何解决这个问题。</p>
<p>然后赛后有师傅告诉了我思路，问题出在这里(估计不是预期解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.send_line(<span class="string">b&#x27;Send your input:&#x27;</span>)</span><br><span class="line">input_str = self.read_line().decode()</span><br><span class="line">num_tuple = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, input_str.strip(<span class="string">&#x27;()&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)))  </span><br><span class="line"><span class="keyword">if</span> num_tuple[-<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">    self.send_line(<span class="string">b&#x27;The third number is not zero!&#x27;</span>)</span><br><span class="line">    self.request.close()</span><br><span class="line">output = Rescue_Prime(Round, num_tuple)</span><br><span class="line"><span class="keyword">if</span> output[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">    self.send_line(<span class="string">b&#x27;congratulate! Here is the flag:&#x27;</span>)</span><br><span class="line">    self.send_line(flag)</span><br></pre></td></tr></table></figure>
<p>这是题目的交互部分，非常仔细的看的话，可以看出，他没有限制输入长度，而只对输入输出的-1项进行是否为0的检查，也就是说，我们可以把刚才反解(1,1,0)得到的输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5329202944861711021, 10075872277090249537, 6598944197421011167]</span><br></pre></td></tr></table></figure>
<p>写成这种形式传给服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5329202944861711021, 10075872277090249537, 6598944197421011167,0)</span><br></pre></td></tr></table></figure>
<p>这样就能满足最后一项为0的检查，算出来的输出自然也是(1,1,0)，就能得到flag了。</p>
<p>exp(比赛结束没环境了，可能会出错)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX + &quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.231.185&quot;</span>,<span class="number">38630</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot; input:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;(5329202944861711021, 10075872277090249537, 6598944197421011167,0)&quot;</span>.encode())</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line">temp = r.recvline()</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>………………</p>
<p>确实有一点无语，不过确实也怪自己不够细心。这个赛题提供的宝贵经验就是：<strong>一定要先检查交互部分本身有没有漏洞，有可能就能直接跳过一个很复杂的问题！</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-鹏城杯-wp-crypto</title>
    <url>/post/e872e217.html</url>
    <content><![CDATA[<p>包含全四道赛题的题解</p>
<span id="more"></span>
<h3 id="LeakyRSA"><a href="#LeakyRSA" class="headerlink" title="LeakyRSA"></a>LeakyRSA</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个RSA好像泄露了什么？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbits=<span class="number">512</span></span><br><span class="line">p=getPrime(nbits)</span><br><span class="line">q=getPrime(nbits)</span><br><span class="line"></span><br><span class="line">leakBits = <span class="number">262</span></span><br><span class="line">leak = (p ^ q)  &gt;&gt; (nbits - leakBits)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=%d&quot;</span> %n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=%d&quot;</span> %c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak=%d&quot;</span> %leak)</span><br><span class="line"><span class="comment"># n=73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923      </span></span><br><span class="line"><span class="comment"># c=71808322808599218331233291542779486534747913572475630198802984648982830332628443972652322590637382696027943799004331488098592525306523343649935216419522329722152742610560398216737030893090641493326477786720839849938277402743820773957184083430369443325368720115515840174745825798187125454448297155036065857691      </span></span><br><span class="line"><span class="comment"># leak=2223117424030234543005449667053988296724455736030907136592525175314696509716321</span></span><br></pre></td></tr></table></figure>
<p>题目给了一个泄漏了高262位的leak，满足：</p>
<script type="math/tex; mode=display">
leak = p \oplus q</script><p>那么运用深搜，可以找到多组满足条件的p、q高位，不明白深搜思路的师傅可以看我之前写的这篇，第二题第一小问：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/342113ee.html">Crypto趣题-剪枝 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>那么接下来的自然想法，就是对找到的这些可能的p、q高位依次进行copper恢复低位。但是有一点小问题：</p>
<ul>
<li>未知的低位有250比特，对于copper来说比较紧</li>
</ul>
<p>所以我们要想办法提高可解根的上界，而我们知道，copper的可解根上界如下：</p>
<script type="math/tex; mode=display">
n^{\frac{\beta^2}{d}-\epsilon}</script><p>其中，d是构造的待求解多项式的度，这里也就是1；beta是指多项式建立在有限域Z(p)上，p是n的因子且满足b&gt;n^beta；epsilon就是small_roots的一个参数。</p>
<p>那么可以运用下面三个思路更好的利用copper：</p>
<ul>
<li>每一组比较p、q高位的大小，取较大的那一个值来恢复低位，这样可以将beta取为0.5，提高能求解的理论上界</li>
<li>epsilon取0.01，这样会变慢，但同样可以提高能求解的理论上界</li>
<li>由于p为素数，将待求的p最低位赋为1，可以缩小根的上界(同理，可以爆破几位进一步缩小上界，但这里不需要了)</li>
</ul>
<p>然后就可以恢复p，进而求解明文。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">nbits=<span class="number">512</span></span><br><span class="line">leakBits = <span class="number">262</span></span><br><span class="line">leakbits = nbits - leakBits</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923</span>      </span><br><span class="line">c=<span class="number">71808322808599218331233291542779486534747913572475630198802984648982830332628443972652322590637382696027943799004331488098592525306523343649935216419522329722152742610560398216737030893090641493326477786720839849938277402743820773957184083430369443325368720115515840174745825798187125454448297155036065857691</span>      </span><br><span class="line">leak=<span class="number">2223117424030234543005449667053988296724455736030907136592525175314696509716321</span></span><br><span class="line"></span><br><span class="line">leak = leak &lt;&lt; leakbits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(leak)[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">512</span> - leakbits):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = pp + x*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        f = f.monic()</span><br><span class="line">        res = f.small_roots(X=<span class="number">2</span>^leakbits-<span class="number">1</span>, beta=<span class="number">0.5</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line">        <span class="keyword">if</span>(res):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plow = <span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">                p = pp + plow * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                q = n // p</span><br><span class="line">                d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;6eb67115-38b1-4e75-b3fc-de3a9697e565&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="SecretShare"><a href="#SecretShare" class="headerlink" title="SecretShare"></a>SecretShare</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice把flag分享了给你，快把他恢复吧。flag格式：flag&#123;可见字符串&#125;</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, secret</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">21</span></span><br><span class="line">t = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">A = [secret]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">    A.append(random.getrandbits(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">X = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    X.append(random.getrandbits(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1026</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    tmp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res = (res + tmp * A[i]) % p </span><br><span class="line">        tmp = tmp * x % p</span><br><span class="line">    <span class="keyword">return</span> res % p</span><br><span class="line"></span><br><span class="line">R = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    R.append(f(X[i]))</span><br><span class="line"></span><br><span class="line">P = secret</span><br><span class="line">Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line">phi=(P - <span class="number">1</span>) * (Q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,N)))</span><br><span class="line"></span><br><span class="line">fi = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t-<span class="number">1</span>):</span><br><span class="line">    fi.write(<span class="built_in">str</span>(X[i])+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(R[i])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak = %d&quot;</span>%R[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = %d&quot;</span>%p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = %d&quot;</span>%N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak = 158171468736013100218170873274656605219228738469715092751861925345310881653082508445746109167302799236685145510095499361526242392251594397820661050281094210672424887670015189702781308615421102937559185479455827148241690888934661637911906309379701856488858180027365752169466863585611322838180758159364570481257</span></span><br><span class="line"><span class="comment"># p = 667548632459029899397299221540978856425474915828934339291333387574324630349258515018972045406265448494845331262999241448002076917383740651362641947814545076390796789402373579283727117618532504865966299599663825771187433223531022829811594806917984414530614469374596457149431218829297339079019894262229453357029   </span></span><br><span class="line"><span class="comment"># c = 9658009093151541277762773618550582280013680172161026781649630205505443184765264518709081169475689440555639354980432557616120809346519461077355134139495745998317849357705381020225760061125236265304057301286196004542729553944161451832173970613915423841610378207266606500956362098150141825329354727367056070349148059780287916811442861961254066733726576151134458892613951223277692935141880749737598416235307087782001086096114978527447987308876878393763055893556123029990282534497668077854186604106027698257663251502775547705641708624619340185646943640576690633662704397191379303254341343433077302686466850600522990402912</span></span><br><span class="line"><span class="comment"># N = 11790604055677230214731474049594783873473779547159534481643303694816346271798870343160061559787963631020684982858033776446193418629055210874285696446209220404060653230407249409973790191858423402504530660556839353260629987853933304089439885784684686555554108157760445567974629355878575105480273451284714281430590737346099023372211403461861104391534461524711472734572409128196536805998116015230502045333769525693468193385557827209520108839913096017750428926467123493650506193757937746017474062985480713594474378324234033232933140389879312722642144536418253323908290256009510135710208223393009237664704631175216240376891</span></span><br></pre></td></tr></table></figure>
<p>这个题目将最终RSA的一个私钥P当作secret，藏在A数组的第一个，然后分别按如下方式生成各个数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = [secret]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">    A.append(random.getrandbits(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">X = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    X.append(random.getrandbits(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure>
<p>并以A、X数组为基础，计算R数组，R数组的每个值如下：</p>
<script type="math/tex; mode=display">
R_i = \sum_{j=0}^{20}{A_jX_i^j}  \quad(mod\;p)</script><p>直观一点举个例子就是：</p>
<script type="math/tex; mode=display">
R_0 = A_0 + A_1X_0^1 + A_2X_0^2 + ... A_{20}X_0^{20} \quad(mod\;p)</script><p>然后，题目给了模数p和完整的R数组，以及缺了最后一个的X数组。可以想到，目的是用这些值还原出A数组，从而用上面的等式解出A0，然后得到最终RSA的分解进而求解明文。</p>
<p>很显眼的一点是，他随机数采用了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.getrandbits(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure>
<p>然后又知道X数组的20个值，20个1024大于32*624，因此有足够的state来逆向twist，就可以得到全部A，然后随便挑一个Ri的计算等式就能解出A0，就有n的分解了。</p>
<p>对MT19937逆向过程不太明白的可以看这两篇文章，前段时间尝试完成西湖论剑的Oracle时才研究过，所以还有印象：</p>
<p><a href="https://www.anquanke.com/post/id/205861#h3-9">浅析MT19937伪随机数生成算法-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p><a href="https://cryptography-wiki.github.io/stream/prng/MT19937/?h=mt#_7">MT19937 - Cryptography-Wiki</a></p>
<p>我的exp也基本是用的这里面的脚本。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#twist</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right_mask</span>(<span class="params">res, shift, mask=<span class="number">0xffffffff</span>, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_mask</span>(<span class="params">res, shift, mask=<span class="number">0xffffffff</span>, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">y</span>):</span><br><span class="line">    y = inverse_right_mask(y,<span class="number">18</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    y = inverse_right_mask(y,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_twist</span>(<span class="params">state</span>):</span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">i</span>):</span><br><span class="line">        y = state[i + <span class="number">624</span>] ^ state[i + <span class="number">397</span>]</span><br><span class="line">        <span class="keyword">if</span> y &amp; high == high: <span class="comment"># 异或了常数</span></span><br><span class="line">            y ^= mask</span><br><span class="line">            y &lt;&lt;= <span class="number">1</span></span><br><span class="line">            y |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 没有异或常数</span></span><br><span class="line">            y &lt;&lt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(state)-<span class="number">625</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 得到s_i的最高位</span></span><br><span class="line">        state[i] = recover(i) &amp; high</span><br><span class="line">        <span class="comment"># 对s_&#123;i-1&#125;做同样操作得到2-32位</span></span><br><span class="line">        state[i] |= recover(i-<span class="number">1</span>) &amp; low</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#recover state</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_state</span>(<span class="params">out</span>):</span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">        i = inverse_right(i,<span class="number">18</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">15</span>,<span class="number">0xefc60000</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">7</span>,<span class="number">0x9d2c5680</span>)</span><br><span class="line">        i = inverse_right(i,<span class="number">11</span>)</span><br><span class="line">        state.append(i)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">X = []</span><br><span class="line">R = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;E:\题\鹏城杯 2023\secretshare\output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        temp = f.readline().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        X.append(<span class="built_in">int</span>(temp[<span class="number">0</span>]))</span><br><span class="line">        R.append(<span class="built_in">int</span>(temp[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">state = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    temp = X[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        state.append(temp&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">        temp &gt;&gt;= <span class="number">32</span></span><br><span class="line"></span><br><span class="line">state = inv_twist([<span class="number">0</span>]*<span class="number">640</span> + recover_state(state[:<span class="number">624</span>]))</span><br><span class="line">state = state[:<span class="number">624</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">A = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    A.append(prng.getrandbits(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">tX = [] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    tX.append(prng.getrandbits(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(tX[:20] == X)</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">158171468736013100218170873274656605219228738469715092751861925345310881653082508445746109167302799236685145510095499361526242392251594397820661050281094210672424887670015189702781308615421102937559185479455827148241690888934661637911906309379701856488858180027365752169466863585611322838180758159364570481257</span></span><br><span class="line">p = <span class="number">667548632459029899397299221540978856425474915828934339291333387574324630349258515018972045406265448494845331262999241448002076917383740651362641947814545076390796789402373579283727117618532504865966299599663825771187433223531022829811594806917984414530614469374596457149431218829297339079019894262229453357029</span>   </span><br><span class="line">c = <span class="number">9658009093151541277762773618550582280013680172161026781649630205505443184765264518709081169475689440555639354980432557616120809346519461077355134139495745998317849357705381020225760061125236265304057301286196004542729553944161451832173970613915423841610378207266606500956362098150141825329354727367056070349148059780287916811442861961254066733726576151134458892613951223277692935141880749737598416235307087782001086096114978527447987308876878393763055893556123029990282534497668077854186604106027698257663251502775547705641708624619340185646943640576690633662704397191379303254341343433077302686466850600522990402912</span></span><br><span class="line">N = <span class="number">11790604055677230214731474049594783873473779547159534481643303694816346271798870343160061559787963631020684982858033776446193418629055210874285696446209220404060653230407249409973790191858423402504530660556839353260629987853933304089439885784684686555554108157760445567974629355878575105480273451284714281430590737346099023372211403461861104391534461524711472734572409128196536805998116015230502045333769525693468193385557827209520108839913096017750428926467123493650506193757937746017474062985480713594474378324234033232933140389879312722642144536418253323908290256009510135710208223393009237664704631175216240376891</span></span><br><span class="line"></span><br><span class="line">R.append(leak)</span><br><span class="line"></span><br><span class="line">secret = R[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    secret = (secret - <span class="built_in">pow</span>(tX[<span class="number">0</span>],i)*A[i-<span class="number">1</span>]) %p</span><br><span class="line"></span><br><span class="line">P = secret</span><br><span class="line">Q = N//P</span><br><span class="line">d = inverse(<span class="number">65537</span>,(P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,N)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;2f43430b-3c31-03ee-0a92-5b24826c015c&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Neltharion-and-Arthas"><a href="#Neltharion-and-Arthas" class="headerlink" title="Neltharion and Arthas"></a>Neltharion and Arthas</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Neltharion and Arthas</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">key1 = os.urandom(<span class="number">32</span>)</span><br><span class="line">key2 = <span class="string">b&#x27;tn*-ix6L*tCa*&#125;i*&#x27;</span></span><br><span class="line">key_len = <span class="built_in">len</span>(key2)</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;flag&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> (flag[<span class="number">13</span>] == <span class="number">45</span> <span class="keyword">and</span> flag[<span class="number">18</span>] == <span class="number">45</span> <span class="keyword">and</span> flag[<span class="number">23</span>] == <span class="number">45</span> <span class="keyword">and</span> flag[<span class="number">28</span>] == <span class="number">45</span>)</span><br><span class="line">flag1 = <span class="string">b&quot;2023: &quot;</span>+flag[:<span class="number">13</span>]+flag[<span class="number">14</span>:<span class="number">18</span>]+flag[<span class="number">19</span>:<span class="number">23</span>]</span><br><span class="line">flag2 = </span><br><span class="line"></span><br><span class="line">h = binascii.unhexlify(hashlib.sha256(key2).hexdigest())[:<span class="number">11</span>]</span><br><span class="line">gift1 = <span class="string">b&#x27;***********************************************************************************************&#x27;</span></span><br><span class="line">gift2 = <span class="string">b&#x27;I tell you this, for when my days have come to an end , you, shall be King.&#x27;</span>+h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">message, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CTR, counter=Counter.new(<span class="number">128</span>))</span><br><span class="line">    ciphertext = cipher.encrypt(message)</span><br><span class="line">    <span class="keyword">return</span> ciphertext.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">message, key, iv</span>):</span><br><span class="line">    padding = <span class="built_in">bytes</span>((key_len - <span class="built_in">len</span>(message) % key_len) * <span class="string">&#x27;&amp;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message += padding</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    ciphertext = cipher.encrypt(message)</span><br><span class="line">    <span class="keyword">return</span> ciphertext.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc_gift1 = &quot;</span>+encrypt1(gift1, key1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc_flag = &quot;</span>+encrypt1(flag1, key1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc_gift2 = &quot;</span>+encrypt2(gift2, key2, flag2))</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc_gift1 = bad7dbcff968d7cdbf51da011fe94e176fc8e7528e4dd85d2d5fc20ba69cefb7bfd03152a2874705bd2d857ea75b3216a830215db74772d9b9e9c218271d562694d3642d2917972fdb8c7363d8125730a50824cd8dc7e34cd4fa54be427cca</span><br><span class="line">enc_flag = c1c78891e30cd4c0aa5ed65c17e8550429c4e640881f9f1d6a56df</span><br><span class="line">enc_gift2 = ********c********b**************<span class="number">4</span>***<span class="number">5</span>********<span class="number">3</span>****6a*****a**<span class="number">2</span>********c*<span class="number">8</span>******<span class="number">7</span>***********<span class="number">3</span>***<span class="number">5</span>***<span class="number">2</span>********e*<span class="number">5</span>*************a******<span class="number">5</span>**c***<span class="number">74</span>***********fee046b4d2918096cfa3b76d6622914395c7e28eef</span><br></pre></td></tr></table></figure>
<p>我个人觉得这个题复杂度设置的有点高了，导致debug有点不是很方便，中途发现写错了，幸好及时修改，差点就没出。</p>
<p>回到题目，他将题目分为了两部分，对应flag的两半：</p>
<ul>
<li>第一部分，将flag1用AES_CTR加密，并对gift1同样进行AES_CTR加密，并给出两个密文。同时，隐去gift1，并且密钥key是未知的随机字节</li>
<li>第二部分，将flag2当作AES_CBC模式的iv，对gift2加上一段哈希并padding的明文进行加密，并给出部分密文</li>
</ul>
<p>接下来分两个部分分别阐述：</p>
<h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>首先能注意到，对flag1和gift1的加密共用了一个counter以及密钥，因此由CTR的加密方式我们知道：</p>
<script type="math/tex; mode=display">
flag1 = encflag1 \oplus encgift1 \oplus gift1</script><p>对CTR加密不太清楚的可以看我写的另一篇文章的第三题：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/a5bd8c0d.html">Crypto趣题-分组密码 | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>那么也就是说，如果我们能有gift1，就可以还原出flag1.但是问题就是：gift1被隐去了。</p>
<p>但是我们有flag的前六个字节”2023: “，同样运用异或就可以得到gift1的前六个字节，是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;I am D&quot;</span></span><br></pre></td></tr></table></figure>
<p>接下来略脑洞(不过其实也还好，提示很明显)，由题目标题Neltharion and Arthas可以搜到这是两个魔兽世界的人物，而gift2是第二个人物的台词。那么结合这个前缀，合理推测gift1也是一句台词，果然就搜到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">I am Deathwing, the destroyer, the end of <span class="built_in">all</span> things. Inevitable. Indomitable. I. am. the Cataclysm...!</span><br></pre></td></tr></table></figure>
<p>对其中一些大小写以及空格略作修改后，上面这一行gift1就可以解密出正确flag1了。</p>
<h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>有一个地方我看了很久才反应过来，就是这个key2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key2 = <span class="string">b&#x27;tn*-ix6L*tCa*&#125;i*&#x27;</span></span><br></pre></td></tr></table></figure>
<p>由于它本身也有一些不是字母数字的字符，这导致我开始没有意识到这个*符号是对key2的涂抹，还以为他本来就是key2的字符。</p>
<p>弄清楚这一点就好办了，爆破四个可见字符，并以enc_gift2的最后一个完整密文分组为基础，依次解每个密文分组，就能得到正确的iv也就是flag2。</p>
<p>只是4个可见字符确实要的时间也比较久，再晚一点发现程序写错了的话，比赛时间内还真出不了了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 CTR</span></span><br><span class="line">gift1 = <span class="string">b&quot;I am Deathwing, the destroyer, the end of all things. Inevitable. Indomitable. I. am. the Cataclysm...!&quot;</span></span><br><span class="line">enc_gift1 = <span class="string">&quot;bad7dbcff968d7cdbf51da011fe94e176fc8e7528e4dd85d2d5fc20ba69cefb7bfd03152a2874705bd2d857ea75b3216a830215db74772d9b9e9c218271d562694d3642d2917972fdb8c7363d8125730a50824cd8dc7e34cd4fa54be427cca&quot;</span></span><br><span class="line">enc_flag =  <span class="string">&quot;c1c78891e30cd4c0aa5ed65c17e8550429c4e640881f9f1d6a56df&quot;</span></span><br><span class="line">enc_gift1 = long_to_bytes(<span class="built_in">int</span>(enc_gift1,<span class="number">16</span>))</span><br><span class="line">enc_flag = long_to_bytes(<span class="built_in">int</span>(enc_flag,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xor(xor(enc_gift1,enc_flag),gift1)[:<span class="number">27</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 CBC</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt2</span>(<span class="params">c, kkey, m</span>):</span><br><span class="line">    temp = long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>))</span><br><span class="line">    cipher = AES.new(kkey, AES.MODE_ECB)</span><br><span class="line">    ciphertext = cipher.decrypt(temp)</span><br><span class="line">    <span class="keyword">return</span> xor(ciphertext,m).<span class="built_in">hex</span>().zfill(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">key2 = <span class="string">b&#x27;tn*-ix6L*tCa*&#125;i*&#x27;</span></span><br><span class="line">key_len = <span class="number">16</span></span><br><span class="line">gift2 = <span class="string">b&#x27;I tell you this, for when my days have come to an end , you, shall be King.&#x27;</span></span><br><span class="line">padding = <span class="number">10</span>*<span class="string">b&quot;&amp;&quot;</span></span><br><span class="line"></span><br><span class="line">enc_gift2 = <span class="string">&quot;********c********b**************4***5********3****6a*****a**2********c*8******7***********3***5***2********e*5*************a******5**c***74***********fee046b4d2918096cfa3b76d6622914395c7e28eef&quot;</span></span><br><span class="line">suffix = enc_gift2[-<span class="number">32</span>:]</span><br><span class="line">table = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#21</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table[<span class="number">21</span>:]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tqdm(table):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> oo <span class="keyword">in</span> table:</span><br><span class="line">                kkey = <span class="string">b&#x27;tn&#x27;</span>+ i.encode() + <span class="string">b&quot;-ix6L&quot;</span> + j.encode() + <span class="string">b&quot;tCa&quot;</span> + k.encode() + <span class="string">b&quot;&#125;i&quot;</span> + oo.encode()</span><br><span class="line">                h = binascii.unhexlify(hashlib.sha256(kkey).hexdigest())[:<span class="number">11</span>]</span><br><span class="line">                C = [suffix]</span><br><span class="line"></span><br><span class="line">                temp11 = gift2 + h + padding</span><br><span class="line">                M = [temp11[<span class="number">16</span>*tt:<span class="number">16</span>*tt+<span class="number">16</span>] <span class="keyword">for</span> tt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">                temp = decrypt2(C[<span class="number">0</span>], kkey, M[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(temp.endswith(<span class="string">&quot;fee046b4d2&quot;</span>)):</span><br><span class="line">                    <span class="keyword">for</span> tt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                        C.append(decrypt2(C[tt], kkey, M[<span class="number">5</span>-tt]))</span><br><span class="line">                    flag2 = long_to_bytes(<span class="built_in">int</span>(C[-<span class="number">1</span>],<span class="number">16</span>))</span><br><span class="line">                    <span class="keyword">for</span> nn <span class="keyword">in</span> C[::-<span class="number">1</span>]:</span><br><span class="line">                        <span class="built_in">print</span>(nn,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(flag2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2023: flag&#123;4ff732dd-2b74-45fd-a3ea-e82b4c491e0e&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="colorful-matrix"><a href="#colorful-matrix" class="headerlink" title="colorful_matrix"></a>colorful_matrix</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">colorful_matrix</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;xxxxxx&#125;&#x27;</span></span><br><span class="line">key1 = hashlib.md5(os.urandom(<span class="number">16</span>)).hexdigest().encode()</span><br><span class="line">key2 = hashlib.md5(os.urandom(<span class="number">16</span>)).hexdigest().encode()</span><br><span class="line">num1 = <span class="number">5</span></span><br><span class="line">p = <span class="built_in">int</span>(gmpy2.next_prime(bytes_to_long(key1 + os.urandom(<span class="number">64</span>))))</span><br><span class="line">ms = [random.getrandbits(<span class="number">256</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num1)]</span><br><span class="line">qs = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num1)]</span><br><span class="line">ns = [p * qs[_] + ms[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num1)]</span><br><span class="line"></span><br><span class="line">num2 = <span class="number">37</span></span><br><span class="line">x = bytes_to_long(key2 + os.urandom(<span class="number">32</span>))</span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num2):</span><br><span class="line">    a = random.getrandbits(<span class="number">512</span>)</span><br><span class="line">    b = a * x % p</span><br><span class="line">    gift = (<span class="number">2</span> ** <span class="number">128</span> - <span class="number">1</span>) * <span class="number">2</span> ** <span class="number">400</span></span><br><span class="line">    A.append(a)</span><br><span class="line">    B.append((b &amp; gift) &gt;&gt; <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">iv = long_to_bytes(random.getrandbits(<span class="number">128</span>))</span><br><span class="line">key = xor(key1,key2)</span><br><span class="line">aes = AES.new(key1,AES.MODE_CBC,iv)</span><br><span class="line">enc = aes.encrypt(pad(flag,<span class="number">48</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ns = <span class="subst">&#123;ns&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;A = <span class="subst">&#123;A&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;B = <span class="subst">&#123;B&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># ns = [38630062416586710341458654419912504176237737247477839749085033080367529539859992076587411537805430366799412095876782912512744262957062106155418341531142309858429218208463637096843365217114990765965110566415965985105403996944993619708417839598461935470469097206342256014086162845948208599334925650727933097059538199199685364793545286980392966271769914201657672004082101110775504946586957241075964270454872257405872181588544468173017149763827540561921126826597515171761064800381983526515300315517818122598179574900255685121991744205071544970, 41522753602903133841910260331594875922287719226997542592715810409935551768308104573333760854332533376702631593490915962706512143045107096658851885513727202513616813054397657610854303071682604806070009002234312854968365250748142324994926715544722158698813288131533399544263105858513134170084625526223987620550110255872688155827773099232631041345207194483609514502522566888883736218471849075697433311580004701384847571029783514418685068903758509270527252444771313048094566344002411364378658592832008194309873599342916391769027015343562030852, 41542983120532762175372001624404625565366126179958909731196555044290633581761361918706298428954501507557598076910710787422049443564800530253137695341299743714514361560156305534490483794181933110893966453220306980682146624294992100948497284459992930850081254114996830645068636306625330524465991656430799359422407117440063911943625477783216502523414967017151717597372146324488526509879620785458016456593044828784565522423332830549325397893426472247197776412026158371655860380929692662547882654137064941217130915364306358205055760044763651406, 42853015443318352230776688785915441259875645365236808434164117288657978345098324019250085686482568413223085548506789311679316323466083886556772338612177680666217592255234589446979456714341877135596118517098603502394776049958587301113539552072352462301070489369653155854389890761241450743607560719433910573462283304103064437843063566946231984094581307498714742271881862348689297267558023093643893310002803310596286441071314219020032740336515363830250477649030557311461077069407775907176409762823453607196260454965048316567154365877848652918, 31152961872836435078296602982779340735140569916125711058616435902653202922218293684857125091648631460215120167354825278469413413558325850576700866199515219603448136082693185200558425103833947831228064760642508443585470729998592994719564254894176473779555436230174300038353978808432410463449170865897259181312953584408177790825688497584119467820716449210429423337019604137134889051973100340798405991782200038835066294194815913887924272593864934325496116821854183293510325217934617021428710898873475027666892706022106386340733691632884942848]</span></span><br><span class="line"><span class="comment"># A = [12789809461864875489953273982997537541385904671489556544122095227619591140533414669794423644619127980362623481580128258914287474542792728686579090501397390, 10463950513938701625808784986819665844287315724639315128677227520960105897990256530542006653611594269012930935073966767351788182657861624733138283749460454, 5253244650607533810967862436125419800679723144526973463211784033045021824966560017919956773745212139142517766154626849426827164032731516615725539069585525, 5644589184984504085855423002268477365020278981591337230721358313393863912025011466727192648804002734561676112555123877764178690726130713927642577324443238, 4231732567865883627242742552738439372803539125622706171540910152922080004603138662537022248675968288205781990968838888633816697065257733344028576518431020, 2483388920404524165854675814798022834892112957478917588986471421083048888193527751575039626887367465858751417977246719312923814782809309525841102293919541, 3252353812256192711411255830105475125944842449239880454539397067913664088094160819193268643401968970009466652179043139341471403913410402646923633696154454, 11575010486066232687430367040977113580882826853104996856464797182632266635060724100357205810604915010810884387573114266349621457564659060272935537811111850, 116107444921917032985259963199427176510900273385517435613848456370557161312731449337837406563733552524777525870560544042690403987311424820755256727586807, 5859050133610438843641532306693688255014116940390205022708310454673159702673207152462501010791971695002865650407033762568636006764435795015869726867643634, 5954075553161305677556950650395792531753502207483036473422070018485916621872566706504374038792527687442272405589975343003802956899043321092006127828986114, 4571747544457157571652286537158051402285727327066029382085461714597609990601683125994983291866807816649968826930652068427193317966970789937746419206862747, 7166507561570980603812241332170524724051295937096000768984168029904561160020043035660087151672164814332446644696618077835020463308343415953131944864257266, 4852042788460566411381271873349329096978244586097817622748766708426751073559942708861852208085367014057217116211249133109246735634468823924185525972777655, 11962941918999276757181090570698839032103646409734781047194175833198626142790676141060052011581957980660140931408560130449153056874213033784715711461403345, 10324508881746579337486319574059121005227580732153432145860775835052420139026016902518605634385512021513380467928195663920843022679549517463264144660593354, 13276257094435850052122403884510025189232513948002582716865201271569293297601525601586036713056700716929820641888489806178376555435219630186396004003438962, 6525051273399089095687950615197786094425890004112675057642687348101531212837185750558500720306108976630502328600886080197626115513445112562084719104488315, 12922888505610354933000354792496863801007995464403098763485264334670452387681468617068312646367483171083114539083453125614861357751571161533921864394641576, 9489726784141062031514945333087338495823600723655465328127755755022980083351477888038160719541864899912899592065620071698977397662002448273876711116012763, 10630316198843195148937849513165933809121991192035364160395429088101265852052098101114542104327663563661384303617672183366879116750889320604308038959012109, 12675564142993964272844760955973914547747654087592111324261755301551267959231076883765863344473167582531968290671984039948163579495803204811731286282708940, 11847724105274460405216443356582445218232627275228120716891711887600046501095390733716854871561352002320819466803698088448952127166615410820121973485089326, 5131676593756685549522564504727003861447389891839469018437277330988047271086971907217360711863971849879439418231726349935396008040776952541710218842744018, 8049060452950901277510497437779182190254362319091882684392717180429468875432078713802857488901441344429723298843967365750616860588029426099852763482179470, 2365060249260571713545479629411006471094806409182638354076861269679377537605360223984548798658469783472746989448405310909017645138161178501458084966625559, 7467521246204465304438401242342633361751371318557249418344587207503257890765643838557008735305668588521988487342275527781708126255070883848829062790678347, 5841608816993144092409175658260479687582056537041472535819914412630519543198558564258699185557903902095773598614097026740427138629173672250387442834578787, 3935779917509948624841228665498558015416911059417306651751360048412619176423173794541812556512582747588138532941031730797102738268660078594473168666677171, 1459083415233950534805962555425717865938763752937036513111696179351002303817986848490146888626704327653287774806488952733813718461674376764427084478395399, 6426876689549337938550615491086475536072547585103523407263007393570982327518298678278232288342601754164640081474537962710401178482959474762541185760732929, 5241364650650467046722868257809607948071188801137204831449976666385482519613365369974704486723941517654753205012497273820309153659423928739972270634209996, 6387483223002092292686097811446217867743566298067033295601210265979889577756648605354064672061975949925472022416479935990178719227937307079186916383092053, 170562164015232424518655058158727202269056868720093972639058422975773575660534168774299548952867348396798580779605954510297102765330549642318362861226163, 10004133230245713370426176448219282796530473722412487408402635996842671302539458739305597027107498342509248085998067976408732789438099488867425813748783724, 12325342879747412722323355648741345730921040452129462974449188258885453690169624888480720109964630270938743431623479816739889661554987977051169401841580388, 641543989928732942291347866597230552820621633110802944556141221591498546555080480758772801043509130524233886009444044150447511986129019395067102094826363]</span></span><br><span class="line"><span class="comment"># B = [108715652691370707411987210267535348806, 131676833696101475747102644851662113271, 122436706338521558335484593966234623745, 255864866572301552398412638474857375629, 81098761191414480003681301866161112100, 322322463176364397336266169283851913620, 198167679309202772183020662350938553923, 326360662842236388778385468938922853242, 241812832858991643670485138860832357660, 69768236619183466076110136290750715548, 32383134960394164339076842474280712870, 147747232748027508904245311745435517130, 25327826075608705748116808975774398964, 65295332681674581261444632606267440749, 236756211690281667988216748814564193312, 106435149910135092172124474857722935730, 270727089812520941022075406571244846193, 206881193220261276126028739930244917728, 131961838897694897398340205404861333362, 219211823942216355573832791993673934321, 150960424777134558142309786444952807101, 51112048255939343109218372373173385772, 182065623911902509203036774197184164110, 168420344895532090057957641972492853410, 301808673225362418769168353084541667053, 132272458662433671393247350648662880688, 495672626901999558635736361346563007, 182444159345379042372018248514964944782, 144584137563407779776361378564517880036, 338518705859818740467225748906995999694, 205885429741815676881969528495365151019, 233897982464483450790005953366237992668, 279307677123402840425362992920185630901, 133493426228159673166382443820069696429, 316624110847744871475435405969944304329, 187931604382397525131117897387179435812, 220019728924915067987393012581921164417]</span></span><br><span class="line"><span class="comment"># enc = b&#x27;cTmkMb\xfc\x05|\x1d\xc7\x13\xbaSe\xe0\xbd\xc0\xd9\xa3\x8cwo\x82yN[B&amp;\x80\xd7KPwQ`\x9c\xbf&lt;y\x8e\x8a\x97e\xa074\xb2&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个题目弄的心情有点烦躁，因为求解key1很容易，难度主要在求解key2。但是出题人失误了，最后AES用的仍然是key1，而不是key1和key2异或得到的key，这样难度就一点都没有了。</p>
<p>不过我还是会把两个部分都讲一下。</p>
<p>首先，第一部分很显然是个AGCD问题，不清楚的指路la佬博客：</p>
<p><a href="https://lazzzaro.github.io/2020/11/07/crypto-格密码/">格密码 | Lazzaro (lazzzaro.github.io)</a></p>
<p>那么就可以求解出ms数组和p以及key1。</p>
<p>其实这道题问题到这里就已经结束了，由于A数组已经给定，并且A和ms生成的方式都是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getrandbits()</span><br></pre></td></tr></table></figure>
<p>那么又可以利用MT19937，只是这一次我们是向后预测iv。预测完iv后直接解AES就得到flag。</p>
<p>然后接下来就说一下我做出来了发现没用的第二部分，第二部分难度我觉得相对来说大很多。</p>
<p>第二部分里，我们有多组如下式子：</p>
<script type="math/tex; mode=display">
b_i = a_ix \quad(mod\;p)</script><p>但是bi只泄漏了中间一些位，高位和低位是没有的，因此我们需要构造HNP，构造思路如下：</p>
<p>首先，x是一个512比特的数，肯定不能出现在我们要规约的短向量中，因此要消元，消元方式就是两两作差，在这里我们选择将所有项与第0项作差，如下：</p>
<p>由于：</p>
<script type="math/tex; mode=display">
b_0 = a_0x \quad(mod\;p)</script><script type="math/tex; mode=display">
b_i = a_ix \quad(mod\;p)</script><p>所以有：</p>
<script type="math/tex; mode=display">
b_0a_i = a_ia_0x \quad(mod\;p)</script><script type="math/tex; mode=display">
b_ia_0 = a_ia_0x \quad(mod\;p)</script><p>作差即可得到：</p>
<script type="math/tex; mode=display">
b_ia_0 = b_0a_i \quad(mod\;p)</script><p>然后把a0乘过去：</p>
<script type="math/tex; mode=display">
b_i = a_0^{-1}a_ib_0 \quad(mod\;p)</script><p>由于已知bi的中间128位，所以我们可以把bi和b0拆为三部分：</p>
<script type="math/tex; mode=display">
2^{528}b_{hi} + 2^{400}b_{leaki} + b_{li}  = a_0^{-1}a_i(2^{528}b_{h0} + 2^{400}b_{leak0} + b_{l0}) \quad(mod\;p)</script><p>两边均出现了已知的bleak项，提取到一边去：</p>
<script type="math/tex; mode=display">
2^{528}b_{hi} + b_{li}  = a_0^{-1}a_i(2^{528}b_{h0} + 2^{400}b_{leak0} + b_{l0}) - 2^{400}b_{leaki}\quad(mod\;p)</script><p>把常数项凑起来：</p>
<script type="math/tex; mode=display">
2^{528}b_{hi} + b_{li}  = a_0^{-1}a_i(2^{528}b_{h0} + b_{l0}) - 2^{400}b_{leaki} + a_0^{-1}a_i2^{400}b_{leak0}\quad(mod\;p)</script><p>然后，令：</p>
<script type="math/tex; mode=display">
A_i = a_0^{-1}a_i</script><script type="math/tex; mode=display">
B_i =  - 2^{400}b_{leaki} + a_0^{-1}a_i2^{400}b_{leak0}</script><p>就有形式：</p>
<script type="math/tex; mode=display">
2^{528}b_{hi} + b_{li}  = A_i(2^{528}b_{h0} + b_{l0})+B_i \quad(mod\;p)</script><p>然后把模p去掉化成等式：</p>
<script type="math/tex; mode=display">
2^{528}b_{hi} + b_{li}  = A_i(2^{528}b_{h0} + b_{l0})+B_i +t_ip</script><p>就是个HNP问题了，只不过是二元的。而这个形式正好前段时间有师傅问过我，是这篇的SSSMMM一题：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/9b40da15.html">Crypto趣题-Lattice | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>构造形式完全一样，不明白的师傅可以去看看。</p>
<p>然后这题目里，LLL后的第一行就是目标向量，因此我们就可以求解出所有完整的b，从中随便选一组等式也就有key2。但是求完了key2惊奇地发现，<strong>居然没用</strong>！最后也没上这题的revenge，心痛。</p>
<p>exp(完整的两部分，包含两个key的求解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 AGCD</span></span><br><span class="line">kbits = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">Q = [<span class="number">38630062416586710341458654419912504176237737247477839749085033080367529539859992076587411537805430366799412095876782912512744262957062106155418341531142309858429218208463637096843365217114990765965110566415965985105403996944993619708417839598461935470469097206342256014086162845948208599334925650727933097059538199199685364793545286980392966271769914201657672004082101110775504946586957241075964270454872257405872181588544468173017149763827540561921126826597515171761064800381983526515300315517818122598179574900255685121991744205071544970</span>, <span class="number">41522753602903133841910260331594875922287719226997542592715810409935551768308104573333760854332533376702631593490915962706512143045107096658851885513727202513616813054397657610854303071682604806070009002234312854968365250748142324994926715544722158698813288131533399544263105858513134170084625526223987620550110255872688155827773099232631041345207194483609514502522566888883736218471849075697433311580004701384847571029783514418685068903758509270527252444771313048094566344002411364378658592832008194309873599342916391769027015343562030852</span>, <span class="number">41542983120532762175372001624404625565366126179958909731196555044290633581761361918706298428954501507557598076910710787422049443564800530253137695341299743714514361560156305534490483794181933110893966453220306980682146624294992100948497284459992930850081254114996830645068636306625330524465991656430799359422407117440063911943625477783216502523414967017151717597372146324488526509879620785458016456593044828784565522423332830549325397893426472247197776412026158371655860380929692662547882654137064941217130915364306358205055760044763651406</span>, <span class="number">42853015443318352230776688785915441259875645365236808434164117288657978345098324019250085686482568413223085548506789311679316323466083886556772338612177680666217592255234589446979456714341877135596118517098603502394776049958587301113539552072352462301070489369653155854389890761241450743607560719433910573462283304103064437843063566946231984094581307498714742271881862348689297267558023093643893310002803310596286441071314219020032740336515363830250477649030557311461077069407775907176409762823453607196260454965048316567154365877848652918</span>, <span class="number">31152961872836435078296602982779340735140569916125711058616435902653202922218293684857125091648631460215120167354825278469413413558325850576700866199515219603448136082693185200558425103833947831228064760642508443585470729998592994719564254894176473779555436230174300038353978808432410463449170865897259181312953584408177790825688497584119467820716449210429423337019604137134889051973100340798405991782200038835066294194815913887924272593864934325496116821854183293510325217934617021428710898873475027666892706022106386340733691632884942848</span>]</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">L[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">2</span>^(kbits)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    L[<span class="number">0</span>,i] = Q[i]</span><br><span class="line">    L[i,i] = -Q[<span class="number">0</span>]</span><br><span class="line">res = L.LLL()[<span class="number">0</span>]</span><br><span class="line">q0 = <span class="built_in">int</span>(<span class="built_in">abs</span>(res[<span class="number">0</span>]) // L[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">p = <span class="built_in">int</span>(<span class="built_in">abs</span>(Q[<span class="number">0</span>]) // q0)</span><br><span class="line"></span><br><span class="line">key1 = long_to_bytes(p)[:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#recover ms</span></span><br><span class="line">q1 = <span class="built_in">int</span>((q0*Q[<span class="number">1</span>]+res[<span class="number">1</span>]) // Q[<span class="number">0</span>])</span><br><span class="line">q2 = <span class="built_in">int</span>((q0*Q[<span class="number">2</span>]+res[<span class="number">2</span>]) // Q[<span class="number">0</span>])</span><br><span class="line">q3 = <span class="built_in">int</span>((q0*Q[<span class="number">3</span>]+res[<span class="number">3</span>]) // Q[<span class="number">0</span>])</span><br><span class="line">q4 = <span class="built_in">int</span>((q0*Q[<span class="number">4</span>]+res[<span class="number">4</span>]) // Q[<span class="number">0</span>])</span><br><span class="line">m0 = Q[<span class="number">0</span>] - p*q0</span><br><span class="line">m1 = Q[<span class="number">1</span>] - p*q1</span><br><span class="line">m2 = Q[<span class="number">2</span>] - p*q2</span><br><span class="line">m3 = Q[<span class="number">3</span>] - p*q3</span><br><span class="line">m4 = Q[<span class="number">4</span>] - p*q4</span><br><span class="line">ms = [m0,m1,m2,m3,m4]</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 HNP</span></span><br><span class="line">length = <span class="number">36</span></span><br><span class="line">a = [<span class="number">12789809461864875489953273982997537541385904671489556544122095227619591140533414669794423644619127980362623481580128258914287474542792728686579090501397390</span>, <span class="number">10463950513938701625808784986819665844287315724639315128677227520960105897990256530542006653611594269012930935073966767351788182657861624733138283749460454</span>, <span class="number">5253244650607533810967862436125419800679723144526973463211784033045021824966560017919956773745212139142517766154626849426827164032731516615725539069585525</span>, <span class="number">5644589184984504085855423002268477365020278981591337230721358313393863912025011466727192648804002734561676112555123877764178690726130713927642577324443238</span>, <span class="number">4231732567865883627242742552738439372803539125622706171540910152922080004603138662537022248675968288205781990968838888633816697065257733344028576518431020</span>, <span class="number">2483388920404524165854675814798022834892112957478917588986471421083048888193527751575039626887367465858751417977246719312923814782809309525841102293919541</span>, <span class="number">3252353812256192711411255830105475125944842449239880454539397067913664088094160819193268643401968970009466652179043139341471403913410402646923633696154454</span>, <span class="number">11575010486066232687430367040977113580882826853104996856464797182632266635060724100357205810604915010810884387573114266349621457564659060272935537811111850</span>, <span class="number">116107444921917032985259963199427176510900273385517435613848456370557161312731449337837406563733552524777525870560544042690403987311424820755256727586807</span>, <span class="number">5859050133610438843641532306693688255014116940390205022708310454673159702673207152462501010791971695002865650407033762568636006764435795015869726867643634</span>, <span class="number">5954075553161305677556950650395792531753502207483036473422070018485916621872566706504374038792527687442272405589975343003802956899043321092006127828986114</span>, <span class="number">4571747544457157571652286537158051402285727327066029382085461714597609990601683125994983291866807816649968826930652068427193317966970789937746419206862747</span>, <span class="number">7166507561570980603812241332170524724051295937096000768984168029904561160020043035660087151672164814332446644696618077835020463308343415953131944864257266</span>, <span class="number">4852042788460566411381271873349329096978244586097817622748766708426751073559942708861852208085367014057217116211249133109246735634468823924185525972777655</span>, <span class="number">11962941918999276757181090570698839032103646409734781047194175833198626142790676141060052011581957980660140931408560130449153056874213033784715711461403345</span>, <span class="number">10324508881746579337486319574059121005227580732153432145860775835052420139026016902518605634385512021513380467928195663920843022679549517463264144660593354</span>, <span class="number">13276257094435850052122403884510025189232513948002582716865201271569293297601525601586036713056700716929820641888489806178376555435219630186396004003438962</span>, <span class="number">6525051273399089095687950615197786094425890004112675057642687348101531212837185750558500720306108976630502328600886080197626115513445112562084719104488315</span>, <span class="number">12922888505610354933000354792496863801007995464403098763485264334670452387681468617068312646367483171083114539083453125614861357751571161533921864394641576</span>, <span class="number">9489726784141062031514945333087338495823600723655465328127755755022980083351477888038160719541864899912899592065620071698977397662002448273876711116012763</span>, <span class="number">10630316198843195148937849513165933809121991192035364160395429088101265852052098101114542104327663563661384303617672183366879116750889320604308038959012109</span>, <span class="number">12675564142993964272844760955973914547747654087592111324261755301551267959231076883765863344473167582531968290671984039948163579495803204811731286282708940</span>, <span class="number">11847724105274460405216443356582445218232627275228120716891711887600046501095390733716854871561352002320819466803698088448952127166615410820121973485089326</span>, <span class="number">5131676593756685549522564504727003861447389891839469018437277330988047271086971907217360711863971849879439418231726349935396008040776952541710218842744018</span>, <span class="number">8049060452950901277510497437779182190254362319091882684392717180429468875432078713802857488901441344429723298843967365750616860588029426099852763482179470</span>, <span class="number">2365060249260571713545479629411006471094806409182638354076861269679377537605360223984548798658469783472746989448405310909017645138161178501458084966625559</span>, <span class="number">7467521246204465304438401242342633361751371318557249418344587207503257890765643838557008735305668588521988487342275527781708126255070883848829062790678347</span>, <span class="number">5841608816993144092409175658260479687582056537041472535819914412630519543198558564258699185557903902095773598614097026740427138629173672250387442834578787</span>, <span class="number">3935779917509948624841228665498558015416911059417306651751360048412619176423173794541812556512582747588138532941031730797102738268660078594473168666677171</span>, <span class="number">1459083415233950534805962555425717865938763752937036513111696179351002303817986848490146888626704327653287774806488952733813718461674376764427084478395399</span>, <span class="number">6426876689549337938550615491086475536072547585103523407263007393570982327518298678278232288342601754164640081474537962710401178482959474762541185760732929</span>, <span class="number">5241364650650467046722868257809607948071188801137204831449976666385482519613365369974704486723941517654753205012497273820309153659423928739972270634209996</span>, <span class="number">6387483223002092292686097811446217867743566298067033295601210265979889577756648605354064672061975949925472022416479935990178719227937307079186916383092053</span>, <span class="number">170562164015232424518655058158727202269056868720093972639058422975773575660534168774299548952867348396798580779605954510297102765330549642318362861226163</span>, <span class="number">10004133230245713370426176448219282796530473722412487408402635996842671302539458739305597027107498342509248085998067976408732789438099488867425813748783724</span>, <span class="number">12325342879747412722323355648741345730921040452129462974449188258885453690169624888480720109964630270938743431623479816739889661554987977051169401841580388</span>, <span class="number">641543989928732942291347866597230552820621633110802944556141221591498546555080480758772801043509130524233886009444044150447511986129019395067102094826363</span>]</span><br><span class="line">b = [<span class="number">108715652691370707411987210267535348806</span>, <span class="number">131676833696101475747102644851662113271</span>, <span class="number">122436706338521558335484593966234623745</span>, <span class="number">255864866572301552398412638474857375629</span>, <span class="number">81098761191414480003681301866161112100</span>, <span class="number">322322463176364397336266169283851913620</span>, <span class="number">198167679309202772183020662350938553923</span>, <span class="number">326360662842236388778385468938922853242</span>, <span class="number">241812832858991643670485138860832357660</span>, <span class="number">69768236619183466076110136290750715548</span>, <span class="number">32383134960394164339076842474280712870</span>, <span class="number">147747232748027508904245311745435517130</span>, <span class="number">25327826075608705748116808975774398964</span>, <span class="number">65295332681674581261444632606267440749</span>, <span class="number">236756211690281667988216748814564193312</span>, <span class="number">106435149910135092172124474857722935730</span>, <span class="number">270727089812520941022075406571244846193</span>, <span class="number">206881193220261276126028739930244917728</span>, <span class="number">131961838897694897398340205404861333362</span>, <span class="number">219211823942216355573832791993673934321</span>, <span class="number">150960424777134558142309786444952807101</span>, <span class="number">51112048255939343109218372373173385772</span>, <span class="number">182065623911902509203036774197184164110</span>, <span class="number">168420344895532090057957641972492853410</span>, <span class="number">301808673225362418769168353084541667053</span>, <span class="number">132272458662433671393247350648662880688</span>, <span class="number">495672626901999558635736361346563007</span>, <span class="number">182444159345379042372018248514964944782</span>, <span class="number">144584137563407779776361378564517880036</span>, <span class="number">338518705859818740467225748906995999694</span>, <span class="number">205885429741815676881969528495365151019</span>, <span class="number">233897982464483450790005953366237992668</span>, <span class="number">279307677123402840425362992920185630901</span>, <span class="number">133493426228159673166382443820069696429</span>, <span class="number">316624110847744871475435405969944304329</span>, <span class="number">187931604382397525131117897387179435812</span>, <span class="number">220019728924915067987393012581921164417</span>]</span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = inverse(a[<span class="number">0</span>],p)*a[i] % p</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = inverse(a[<span class="number">0</span>],p)*a[i] % p</span><br><span class="line">    temp = temp * b[<span class="number">0</span>]*(<span class="number">2</span>^<span class="number">400</span>) - b[i]*(<span class="number">2</span>^<span class="number">400</span>)</span><br><span class="line">    temp = temp % p</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line">O = matrix(ZZ,(length-<span class="number">1</span>),(length-<span class="number">1</span>)+<span class="number">3</span>)</span><br><span class="line">E = diagonal_matrix([<span class="number">2</span>^<span class="number">160</span>]*((length-<span class="number">1</span>)+<span class="number">3</span>))</span><br><span class="line">T1 = diagonal_matrix([p]*((length-<span class="number">1</span>)))</span><br><span class="line">T2 = matrix(ZZ,(length-<span class="number">1</span>)+<span class="number">3</span>,length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    T2[i,i] = <span class="number">2</span>^<span class="number">528</span></span><br><span class="line">    T2[-<span class="number">1</span>,i] = -B[i]</span><br><span class="line">    T2[-<span class="number">2</span>,i] = -A[i]</span><br><span class="line">    T2[-<span class="number">3</span>,i] = -A[i] * <span class="number">2</span>^<span class="number">528</span></span><br><span class="line"></span><br><span class="line">L = block_matrix(ZZ,[[T1,O],[T2,E]])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">400</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">2</span>^<span class="number">160</span></span><br><span class="line"></span><br><span class="line">temp = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bh0 = <span class="built_in">abs</span>(temp[-<span class="number">3</span>] // (<span class="number">2</span>^<span class="number">160</span>))</span><br><span class="line">bl0 = <span class="built_in">abs</span>(temp[-<span class="number">2</span>])</span><br><span class="line">b0 = bh0*<span class="number">2</span>^<span class="number">528</span> + b[<span class="number">0</span>]*<span class="number">2</span>^<span class="number">400</span> + bl0</span><br><span class="line">x = inverse(a[<span class="number">0</span>],p) * b0 % p</span><br><span class="line">key2 = long_to_bytes(<span class="built_in">int</span>(x))[:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 decrypt</span></span><br><span class="line">enc = <span class="string">b&#x27;cTmkMb\xfc\x05|\x1d\xc7\x13\xbaSe\xe0\xbd\xc0\xd9\xa3\x8cwo\x82yN[B&amp;\x80\xd7KPwQ`\x9c\xbf&lt;y\x8e\x8a\x97e\xa074\xb2&#x27;</span></span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;\xe9\x19\xbcU?\xd5\x1a&gt;\xaa\x9c\xb2\xe6@\xbd\xbd9&#x27;</span></span><br><span class="line">aes = AES.new(key1,AES.MODE_CBC,iv)</span><br><span class="line"></span><br><span class="line">flag = aes.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;86baa4ed-5ec7-11ee-ae14-ac1203ab14da&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-Oracle</title>
    <url>/post/601c0957.html</url>
    <content><![CDATA[<p>这篇文章主要记录一下有趣的交互题</p>
<span id="more"></span>
<h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><p>题目来源：NCTF 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&quot;sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">        x = self.recv(prompt=<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        n = p*q</span><br><span class="line">        e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">        signal.alarm(<span class="number">120</span>)</span><br><span class="line">        self.send(<span class="string">b&#x27;Try to factor n within 120 seconds&#x27;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;n = &#123;&#125;\ne = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n, e).encode())</span><br><span class="line">        self.send(<span class="string">b&#x27;And solve the proof-of-work below to begin the challenge.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        signal.alarm(<span class="number">12</span>)</span><br><span class="line">        secret = os.urandom(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.send(<span class="string">&quot;c&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">pow</span>(bytes_to_long(secret[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]), e, n)).encode())</span><br><span class="line"></span><br><span class="line">        self.send(<span class="string">b&quot;Give me the secret:&quot;</span>)</span><br><span class="line">        s = self.recv()</span><br><span class="line">        <span class="keyword">if</span> secret.<span class="built_in">hex</span>().encode() == s:</span><br><span class="line">            self.send(<span class="string">b&quot;Congratulations! Your flag is: &quot;</span>+flag.encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&quot;Wrong secret&quot;</span>)</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10002</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>代码比较长，但是大多数是交互相关的代码，所以不用管，先把交互剥离掉来分析这个题。</p>
<h4 id="脱离交互，单独分析"><a href="#脱离交互，单独分析" class="headerlink" title="脱离交互，单独分析"></a>脱离交互，单独分析</h4><p>那么就不管靶机的其他交互流程，我们只看要解决的核心任务代码，在这里我把与靶机交互的部分简化成普通input、print等形式，然后展示出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">secret = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">pow</span>(bytes_to_long(secret[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]), e, n)).encode())</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;Give me the secret:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> secret.<span class="built_in">hex</span>().encode() == s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;Congratulations! Your flag is: &quot;</span>+flag.encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;Wrong secret&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>代码的意思就是：</p>
<ul>
<li>生成一组RSA的密钥p，q，n，e，并给出公钥(n，e)</li>
<li>随机生成 16 个字节，并切为4块，每组4个字节，作为待加密的明文</li>
<li>对每一组明文分别进行RSA加密，并给出密文</li>
<li>要求从4组密文还原出完整明文</li>
</ul>
<p>首先很快就能明白，这里的n是没有办法分解的，因为没有任何关于p、q、d的泄漏信息。那么怎么还原出明文呢，就要注意到以下两点：</p>
<ul>
<li>明文分成了4组，每组4个字节，也就是32bit，是个很小的明文</li>
<li>这题是个交互题</li>
</ul>
<p>这两点分别有什么作用就是接下来要详细说明的地方。</p>
<p>首先要明白，这里的明文如果不分组，直接进行加密，那么其本质上就是一个纯粹的RSA加密，就当前的密码技术来说，我们如果没有私钥的话，自然没有任何机会还原出明文。</p>
<p>而分组最直观的效果，就是每一组被加密的明文变小了，那么也就说明<strong>可能有机会爆破！</strong>打个比方，如果你已知明文就是一个字节，那么他可能的范围也就在(0,256)之间，要还原明文，你只需要将(0,256)之间的所有数逐个进行加密。如果加密后的密文与给定的密文相等，那么对应的明文即为所求。</p>
<p>但是这个题目中明文即使分了组，每一组的明文仍然是个32bit的随机数，直接爆破还是不太现实的，因此需要采取一定方法。</p>
<p>那么我们需要注意到，这个32bit的随机数有很大概率是个合数，这是因为，在n个正整数中，质数出现的概率大约为：</p>
<script type="math/tex; mode=display">
\frac{1}{\ln n}</script><p>因此，对于n取2^32，其概率经计算大约是 0.045084220027780106，概率相当小。所以明文m大概率能写成两个整数的乘积形式：</p>
<script type="math/tex; mode=display">
m = i*j</script><p>而由于m是(0,2^32)之间的数，所以我们可以概率性的界定 i、j 两数的范围。</p>
<p>什么叫概率性的界定范围呢？比如说，i、j 都在(0,2^16)这个范围里，概率有多大？其实这个问题等价于m的因子全部小于2^16的概率，因此可以用如下的程序简单验证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span>    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1000</span>)):        </span><br><span class="line">    m = bytes_to_long(os.urandom(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">while</span>(m % j == <span class="number">0</span>):</span><br><span class="line">            m //= j</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>经计算概率大概在0.32左右，这说明什么，这说明m有0.32的概率写为两个(0,2^16)之间的数的乘积，这对我们的爆破有什么帮助呢？首先，加密过程就可以改写成：</p>
<script type="math/tex; mode=display">
m^e\equiv (i*j)^e \equiv i^e*j^e \equiv c\quad(mod\;n)</script><p>那么就有：</p>
<script type="math/tex; mode=display">
c^{-1}*j^e\equiv i^{-e}\quad (mod\;n)</script><p>此时你会发现，如果m能够写为(0,2^16)内的 i，j 两数的乘积的形式，那么类似于中间相遇攻击，我们就可以用如下方式爆破：</p>
<ul>
<li>把所有(0,2^16)中的 $ i^{-e}\quad (mod\;n)$ 提前存储在一个字典内</li>
<li>接下来，只需要爆破(0,2^16)中的 j，验证 $ c^{-1}*j^e\quad (mod\;n)$ 在刚才的字典中，则对应的 i，j 乘积即为需求的明文</li>
</ul>
<p>容易明白，这种攻击方式成功的概率，就等同于m能写为这样的 i，j 乘积的概率，也就是0.32左右。那么连续4次均成功，概率大约为:</p>
<script type="math/tex; mode=display">
(0.32)^4 = 0.01048576</script><p>因此，不考虑题目其他限制的话，每一次攻击大约有1%的概率成功，而可以用以下程序计算出，交互66次，就有大于50%的概率至少成功一次：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fre = <span class="number">0.01048576</span></span><br><span class="line">success = <span class="number">1</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    success *= (<span class="number">1</span>-fre)</span><br><span class="line">    <span class="keyword">if</span>(success &lt; <span class="number">0.5</span>):</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="回到交互"><a href="#回到交互" class="headerlink" title="回到交互"></a>回到交互</h4><p>但是实际上，这题对交互时间是有一定限制的：</p>
<ul>
<li>从连接上靶机开始，计时120s，超时会退出</li>
<li>从完成proof_of_work开始，计时12s，超时会退出</li>
</ul>
<p>而注意到我们连接上靶机后，靶机端就会发送给我们公钥(n，e)，而获得了(n，e)之后，我们就可以开始建立字典。一直到proof_of_work完成后，我们才需要进行字典的查询来搜索出4组明文。</p>
<p>也就是说，我们有更充足的时间建立字典，而查询字典的时间更有限。因此，我们要适当增大 i 的范围，但是对应的，搜索j的范围不能变小，仍然要考虑搜索2^16内的所有数。所以我们测试以下几种新的乘积划分：</p>
<script type="math/tex; mode=display">
i \in (0,2^{17}),j \in (0,2^{15})</script><script type="math/tex; mode=display">
i \in (0,2^{18}),j \in (0,2^{14})</script><script type="math/tex; mode=display">
i \in (0,2^{19}),j \in (0,2^{13})</script><script type="math/tex; mode=display">
i \in (0,2^{20}),j \in (0,2^{12})</script><script type="math/tex; mode=display">
i \in (0,2^{21}),j \in (0,2^{11})</script><p>经计算，几种划分对应的攻击成功概率依次是：0.36、0.45、0.52、0.55、0.62，理论上来说当然是越后面的划分越好，但是同时，建立字典的耗时也需要考虑进去。你可以用以下程序简单测试出，字典大小最大也就只能取到2^20，否则就会直接超出120s的限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">20</span>))&#125;</span><br></pre></td></tr></table></figure>
<p>因此，思路就是：接收到公钥(n，e)后，建立一个大小为2^20的字典，然后再进行proof_of_work，进行完毕后开始查表。如此与靶机交互多次后，就有大概率得到flag。理论上来说八次就有大于50%的概率得到flag了，不过运气不好确实可能需要很久很久。</p>
<p>但同时你也可以注意到，m并不一定就是32bit的数，他的前几个bit完全可能是0，因此相信自己运气的话，可以适当缩小划分范围来节省耗时，比如划分为：</p>
<script type="math/tex; mode=display">
i \in (0,2^{19}),j \in (0,2^{12})</script><script type="math/tex; mode=display">
i \in (0,2^{18}),j \in (0,2^{12})</script><p>等等缩小后的范围，都是有可能成功的。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">	r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28803</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#part1</span></span><br><span class="line">	r.recvline()</span><br><span class="line">	n = <span class="built_in">int</span>(r.recvline().strip()[<span class="number">3</span>:])</span><br><span class="line">	e = <span class="number">65537</span></span><br><span class="line">	S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">19</span>))&#125;</span><br><span class="line">	proof_of_work()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#part2</span></span><br><span class="line">	secret = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">		c = <span class="built_in">int</span>(r.recvline().split(<span class="string">b&#x27;=&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">		inv_c = inverse(c,n)</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">			s = inv_c*(<span class="built_in">pow</span>(j,e,n))%n</span><br><span class="line">			<span class="keyword">if</span>(s <span class="keyword">in</span> S):</span><br><span class="line">				<span class="built_in">print</span>(i)</span><br><span class="line">				secret += <span class="built_in">hex</span>(S[s]*j)[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	r.sendline(secret.encode())</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	<span class="built_in">print</span>(temp)</span><br><span class="line">	r.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#flag暂时还没有，靶机有一点小问题</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Lost-Modulus"><a href="#Lost-Modulus" class="headerlink" title="Lost Modulus"></a>Lost Modulus</h3><p>题目来源：SEETF 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    FLAG = f.read()</span><br><span class="line"></span><br><span class="line">n = bytes_to_long(FLAG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#make sure i have a big modulus</span></span><br><span class="line"><span class="keyword">while</span> n.bit_length() &lt; <span class="number">2048</span>:</span><br><span class="line">    n *= n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m1, m2</span>):</span><br><span class="line">    e = getPrime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">assert</span> m1.bit_length() &gt;= <span class="number">1600</span> <span class="keyword">and</span> long_to_bytes(m1).startswith(<span class="string">b&quot;SEE&#123;&quot;</span>), <span class="string">&#x27;first message must be at least 1600 bits and begin with &quot;SEE&#123;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">500</span> &lt;= m2.bit_length() &lt;= <span class="number">600</span>, <span class="string">&#x27;second message must be within 500 to 600 bits&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m1, e, n), <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Message 1 (as integer) : &quot;</span>).strip())</span><br><span class="line">        m2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Message 2 (as integer) : &quot;</span>).strip())</span><br><span class="line">        c1, c2 = encrypt(m1, m2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\nCiphers: \n<span class="subst">&#123;[c1,c2]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程：</p>
<ul>
<li>将flag转为大整数n，反复乘方直至n大于2048bit</li>
<li>允许我们输入两个整数m1、m2，要求满足：</li>
<li><ul>
<li>m1转为字节串后要求以”SEE{“开头，并且大于1600bit</li>
<li>m2大小要在500-600bit之间</li>
</ul>
</li>
<li>随机生成一个256bit的素数e，并使用公钥(n,e)对m1、m2分别进行RSA加密，并给出密文</li>
</ul>
<p>题目要求我们恢复模数n，而有关模数的恢复一般都会用到gcd。因此本题的关键就在于如何利用被限制了的明文m1、m2，构造出模数n的倍数。</p>
<p>首先观察到，m1的二进制长度可以为m2的三倍以上，也就是说，我们可以利用立方关系进行构造。而如何构造出m1恰为一个数的3次方，并且开头还是”SEE{“呢？很容易，只需要先构造出一个符合条件的m1，然后开立方根，取整作为m2，再取m2的立方作为新的m1即可。这是因为，开立方根、取整后再立方回来，对m1的影响均在低位，不会影响到其高位的”SEE{“</p>
<p>所以此时我们就有明文关系如下：</p>
<script type="math/tex; mode=display">
m_1^e \equiv (m_2^3)^e \equiv c_1\quad (mod\;n)</script><script type="math/tex; mode=display">
m_2^e \equiv  c_2\quad (mod\;n)</script><p>所以有：</p>
<script type="math/tex; mode=display">
c_2^3-c_1 = kn</script><p>因此多连接几次靶机，取多组kn后求解gcd，就能去除小因子得到n，再爆破具体是m的几次方即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    m1 = bytes_to_long(<span class="string">b&quot;SEE&#123;&quot;</span> + os.urandom(<span class="number">200</span>))</span><br><span class="line">    m2 = iroot(m1,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">    m1 = m2**<span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> (m1,m2)</span><br><span class="line"></span><br><span class="line">kn = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28625</span>)</span><br><span class="line">    m1,m2 = gen()</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Message 1 (as integer) : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(m1).encode())</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Message 2 (as integer) : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(m2).encode())</span><br><span class="line">    temp = r.recvuntil(<span class="string">b&quot;Ciphers:&quot;</span>)</span><br><span class="line">    c = <span class="built_in">eval</span>(r.recvuntil(<span class="string">&quot;]&quot;</span>).decode())</span><br><span class="line">    c1 = c[<span class="number">0</span>]</span><br><span class="line">    c2 = c[<span class="number">1</span>]</span><br><span class="line">    kn.append(c2**<span class="number">3</span>-c1)</span><br><span class="line">    r.close()</span><br><span class="line">n = kn[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> kn[<span class="number">1</span>:]:</span><br><span class="line">    n = GCD(n,i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span>(iroot(n,i)[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(iroot(n,i)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;1affebef-9c23-45f1-b88e-406f9611c614&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="welcomesigner2"><a href="#welcomesigner2" class="headerlink" title="welcomesigner2"></a>welcomesigner2</h3><p>题目来源：WMCTF 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;***********************************&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="string">b&quot;\x00&quot;</span>*((<span class="number">16</span>-<span class="built_in">len</span>(message)%<span class="number">16</span>)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">m,d,N,j,N_</span>):</span><br><span class="line">    A = <span class="number">1</span></span><br><span class="line">    B = m</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    N = N</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> d[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            A = A * B % N</span><br><span class="line">        <span class="comment">#  a fault occurs j steps before the end of the exponentiation</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= n-<span class="number">1</span>-j:</span><br><span class="line">            N = N_</span><br><span class="line">        B = B**<span class="number">2</span> % N</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,key</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br><span class="line">    enc = AES.new(key,mode=AES.MODE_ECB)</span><br><span class="line">    c   = enc.encrypt(pad(message))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">border = <span class="string">&quot;|&quot;</span></span><br><span class="line"><span class="built_in">print</span>(border*<span class="number">75</span>)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;Hi all, I have another algorithm that can quickly calculate powers. &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;But still there&#x27;s something wrong with it. Your task is to get      &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border, <span class="string">&quot;its private key,and decrypt the cipher to cat the flag ^-^          &quot;</span>, border)</span><br><span class="line"><span class="built_in">print</span>(border*<span class="number">75</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment"># generate</span></span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">17</span></span><br><span class="line">    <span class="keyword">if</span> GCD(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">        d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        n_ = n </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n_ = n</span><br><span class="line">msg = bytes_to_long(<span class="string">b&quot;Welcome_come_to_WMCTF&quot;</span>)</span><br><span class="line">sig = <span class="built_in">pow</span>(msg,d,n)</span><br><span class="line"><span class="keyword">assert</span> sig == myfastexp(msg,d,n,<span class="number">0</span>,n_)</span><br><span class="line">CHANGE = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ans = <span class="built_in">input</span>(<span class="string">&quot;| Options: \n|\t[G]et data \n|\t[S]ignatrue \n|\t[F]ault injection \n|\t[Q]uit\n&quot;</span>).lower().strip()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ans == <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> CHANGE:</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">&quot;You have one chance to change one byte of N. &quot;</span>)</span><br><span class="line">                temp,index = <span class="built_in">input</span>(<span class="string">&quot;bytes, and index:&quot;</span>).strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">                <span class="keyword">assert</span> <span class="number">0</span>&lt;= <span class="built_in">int</span>(temp) &lt;=<span class="number">255</span></span><br><span class="line">                <span class="keyword">assert</span> <span class="number">0</span>&lt;= <span class="built_in">int</span>(index) &lt;= <span class="number">1023</span> </span><br><span class="line">                n_ = n ^ (<span class="built_in">int</span>(temp)&lt;&lt;<span class="built_in">int</span>(index))</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">f&quot;[+] update: n_ -&gt; \&quot;<span class="subst">&#123;n_&#125;</span>\&quot;&quot;</span>)</span><br><span class="line">                CHANGE = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(border,<span class="string">&quot;Greedy...&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;flag_ciphertext = <span class="subst">&#123;encrypt(flag,d).<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            index = <span class="built_in">input</span>(<span class="string">&quot;Where your want to interfere:&quot;</span>).strip()</span><br><span class="line">            sig_ = myfastexp(msg,d,n,<span class="built_in">int</span>(index),n_)</span><br><span class="line">            <span class="built_in">print</span>(border,<span class="string">f&quot;signature of \&quot;Welcome_come_to_WMCTF\&quot; is <span class="subst">&#123;sig_&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            quit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(border,<span class="string">&quot;Err...&quot;</span>)</span><br><span class="line">        quit()</span><br></pre></td></tr></table></figure>
<p>我觉得很有意思的一个错误注入题目，在这里记录一下思路。</p>
<p>首先梳理题目任务，在连接上靶机后，题目随机生成长度为512比特的素数p、q，并以p、q、e=17生成RSA加解密的剩余参数n、d。同时生成一个n_，在开始时其值与n相等。</p>
<p>然后，题目以一个已知的msg计算了其正确解密值pow(msg,d,n)作为sig，然后进入交互环节。</p>
<p>靶机提供的操作有:</p>
<ul>
<li>输入”f”，可以更改模数n的任意8比特为自定义值，并且该操作在全程仅能进行一次</li>
<li>输入”g”，可以获得正确的初始模数n，并获得AES加密后的flag值，其中AES的密钥为私钥d</li>
<li>输入”s”，可以指定位置进行一次错误注入，错误注入具体是怎样的稍后讲</li>
<li>输入”q”，退出交互</li>
</ul>
<p>所以我们要完成的任务是：改变n的某8个比特，使其更容易被我们利用；并使用题目提供的错误注入操作还原私钥d，之后AES解密密文。</p>
<p>那么主要问题就有两个：</p>
<ul>
<li>如何改变n？</li>
<li>如何利用错误注入还原d？</li>
</ul>
<p>接下来就开始题目分析。首先会介绍一点前置知识。</p>
<h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><p>题目提供的错误注入就是基于快速幂的，因此要完成题目先要知道快速幂的基本原理。</p>
<p>首先，如果按正常思路进行模幂运算，那么如果要计算pow(c,d,n)，就需要先令m = c，然后进行d次下列运算：</p>
<script type="math/tex; mode=display">
m = m*c \quad (mod\; n)</script><p>而如果d的数量级较大，这种运算的效率是不可接受的，因此需要应用快速幂。</p>
<p>快速幂的基本思想是：先把幂次转为二进制表示，在这里我们举个简单例子，假设d = 23，那么就有其二进制为：</p>
<script type="math/tex; mode=display">
bin(d) = 10111</script><p>而c的d次方模n其实就可以利用二进制转化为如下运算：</p>
<script type="math/tex; mode=display">
m = (1*c) * (1*c^2) * (1*c^{2^2}) * (0*c^{2^3}) * (1*c^{2^4}) \quad(mod\;n)</script><p>其中，每一项的系数是d的二进制逆过来后对应位置的值，乘数是c的对应次平方。这样做为什么减少了次数呢？这是因为c的对应次平方，只需要在前一个c的对应次平方的基础上再做一次平方就好。因此，用快速幂可以把模幂运算的复杂度减少到logn的数量级。其代码形式用直观一点的方式实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">c,d,n</span>):</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    m = [c]</span><br><span class="line">    temp = c</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)-<span class="number">1</span>):</span><br><span class="line">        temp = temp ** <span class="number">2</span> % n</span><br><span class="line">        m.append(temp)</span><br><span class="line">    final = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            final = final * m[i] % n</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>
<p>这个函数中m数组存放c的各次平方的数值，然后与b的二进制逆序对应相乘，最终返回pow(c,d,n)的计算值，与我们刚才说的过程完全相同。而更一般的，会写成如下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">normal_fastexp</span>(<span class="params">c,d,n</span>):</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    final = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            final = final * c % n</span><br><span class="line">        c = c**<span class="number">2</span> % n</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>
<p>只是精简了代码，实际进行的操作依然是完全相同的。</p>
<h4 id="错误注入"><a href="#错误注入" class="headerlink" title="错误注入"></a>错误注入</h4><p>了解了快速幂后，再来看题目提供的错误注入代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfastexp</span>(<span class="params">m,d,N,j,N_</span>):</span><br><span class="line">    A = <span class="number">1</span></span><br><span class="line">    B = m</span><br><span class="line">    d = <span class="built_in">bin</span>(d)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    N = N</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> d[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            A = A * B % N</span><br><span class="line">        <span class="comment">#  a fault occurs j steps before the end of the exponentiation</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= n-<span class="number">1</span>-j:</span><br><span class="line">            N = N_</span><br><span class="line">        B = B**<span class="number">2</span> % N</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure>
<p>可以发现，我们可以提供一个错误注入位置，在快速幂运算到错误注入位置之前，其模数是正确的n；而快速幂运算到错误注入位置的时候，模数会改变为我们改变了一个字节的n_，并且在之后都按照这个被改变的模数进行快速幂。</p>
<p>我们假设d为1023比特，其二进制序列为1xxx…xxxx，我们当前提供的注入位置是0，我们画一下题目的错误注入如何得到结果：</p>
<p><img src="/post/601c0957/image-20231019160100082.png" alt="image-20231019160100082"></p>
<p>注意到到错误注入位置时，题目的快速幂仍然是先计算乘，再改变模数，也就是说，注入位置为0时，最后的结果其实是正确结果。而图中的红色部分就是由于错误注入、模数改变导致的m的对应次方幂计算错误，在这里，红色部分等于：</p>
<script type="math/tex; mode=display">
(m^{2^{1021}})^2 \quad (mod\;n')</script><p>n’就是n_，因为我的hexo转义有问题，公式块里一直打不出下划线，所以用n’代替。</p>
<p>那么当注入位置是1时，得到的结果如下：</p>
<p><img src="/post/601c0957/image-20231019160120731.png" alt="image-20231019160120731"></p>
<p>此时可以发现，在计算最后一次快速幂的结果时，我们错误的使用了n_而非n下的m对应次方，因此结果产生了错误。而这个错误结果可以写成如下形式：</p>
<script type="math/tex; mode=display">
sig' = fault * right</script><p>right指快速幂在注入位置及之前的正确结果，fault指在注入位置之后的错误结果，他们是可以以乘积形式体现在最终结果里的。我们以此为依据把d的二进制串分为高位dhigh和低位dlow，则right等于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(m,<span class="built_in">int</span>(dlow,<span class="number">2</span>),n)</span><br></pre></td></tr></table></figure>
<p>fault等于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(Bad,<span class="built_in">int</span>(dhigh,<span class="number">2</span>),n_)</span><br></pre></td></tr></table></figure>
<p>其中，Bad就是由于错误注入产生的错误m的对应次方幂，也就是倒数第二个红色块的模n’下的平方。而这个值是可以计算出来的，因为我们拥有d的高位1、n’以及m；而我们又拥有靶机返回的sig’，因此我们可以用之前的等式计算出right在模n下的值。</p>
<p>用处在哪里呢？我们继续往后推进一位：</p>
<p><img src="/post/601c0957/image-20231019160254754.png" alt="image-20231019160254754"></p>
<p>那么假设d的第二高位为0，那么就有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(dhigh,<span class="number">2</span>) = <span class="number">2</span>*<span class="built_in">int</span>(dhigh,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">int</span>(dlow,<span class="number">2</span>) = <span class="built_in">int</span>(dlow,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>那么由于dlow不变，所以这一次我们计算出的right应该与前一次相等，而如果不等，就说明d的第二高位为1.</p>
<p>以此类推，我们就能还原出d的所有二进制位。</p>
<p>需要注意的是，d不一定是1023位，因此可能需要多次连接靶机，直到随机到某次d是1023位时才能正确解密。而之所以选择1023，是因为测试下来d是1023比特概率最大，能达到40%左右，因此成功率最大。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">message,key</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(md5(<span class="built_in">str</span>(key).encode()).hexdigest())</span><br><span class="line">    enc = AES.new(key,mode=AES.MODE_ECB)</span><br><span class="line">    c   = enc.decrypt(message)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28015</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part1 get c,n</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;g&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;n =&quot;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;flag_ciphertext =&quot;</span>)</span><br><span class="line">    c = long_to_bytes(<span class="built_in">int</span>(r.recvline().strip().decode(),<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2 get n_</span></span><br><span class="line">    change_byte = <span class="number">0</span></span><br><span class="line">    ind = <span class="number">0</span></span><br><span class="line">    find = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(find):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">            n_ = n ^ (temp&lt;&lt;index)</span><br><span class="line">            <span class="keyword">if</span> isPrime(n_):</span><br><span class="line">                change_byte = temp</span><br><span class="line">                ind = index</span><br><span class="line">                find = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    sendnum = <span class="built_in">str</span>(change_byte) + <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(ind)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;f&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;and index:&quot;</span>)</span><br><span class="line">    r.sendline(sendnum.encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;n_ -&gt; &quot;</span>)</span><br><span class="line">    n_ = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part3 get d</span></span><br><span class="line">    len_d = <span class="number">1023</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getm</span>(<span class="params">m,n,n_</span>):</span><br><span class="line">        final = []</span><br><span class="line">        c = m</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_d):</span><br><span class="line">            final.append(c)</span><br><span class="line">            c = c**<span class="number">2</span> % n</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line">    msg = bytes_to_long(<span class="string">b&quot;Welcome_come_to_WMCTF&quot;</span>)</span><br><span class="line">    m = getm(msg,n,n_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">d,siglist,n_,m</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1</span>,len_d-<span class="number">1</span>):</span><br><span class="line">            current = siglist[i]</span><br><span class="line">            inv_Bad = inverse(<span class="built_in">pow</span>(m[len_d-<span class="number">1</span>-i]**<span class="number">2</span>%n_,<span class="built_in">int</span>(d,<span class="number">2</span>),n_),n_)</span><br><span class="line">            cur = current * inv_Bad % n_</span><br><span class="line">            </span><br><span class="line">            nextsig = siglist[i+<span class="number">1</span>]</span><br><span class="line">            next_inv_Bad = inverse(<span class="built_in">pow</span>(m[len_d-<span class="number">2</span>-i]**<span class="number">2</span>%n_,<span class="number">2</span>*<span class="built_in">int</span>(d,<span class="number">2</span>),n_),n_)</span><br><span class="line">            inv_next = nextsig * next_inv_Bad % n_</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(inv_next == cur):</span><br><span class="line">                d += <span class="string">&quot;0&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d += <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">    siglist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(len_d):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">b&quot;s&quot;</span>)</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;interfere:&quot;</span>)</span><br><span class="line">        index = i</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot; is &quot;</span>)</span><br><span class="line">        sig_ = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">        siglist.append(sig_)</span><br><span class="line"></span><br><span class="line">    init_d = <span class="string">&quot;1&quot;</span></span><br><span class="line">    d = getd(init_d,siglist,n_,m) + <span class="string">&quot;1&quot;</span></span><br><span class="line">    d = <span class="built_in">int</span>(d,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#part4 getflag</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;NSSCTF&quot;</span> <span class="keyword">in</span> decrypt(c,d)):</span><br><span class="line">        <span class="built_in">print</span>(decrypt(c,d))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;f89d3e5c-138b-4d6d-8da9-cbe1a9dad5cd&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中，选择一个素数n_是为了保证计算出逆元。</p>
<p>而另一道WMCTF的welcomesigner1，其实也是异曲同工，变化非常小，可以尝试练习。</p>
<p><br></p>
<p><br></p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>题目来源：EIS 2019</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b2n</span>(<span class="params">b</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        res *= <span class="number">2</span></span><br><span class="line">        res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n, length</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    tmp = <span class="string">&#x27;0&#x27;</span>*(length-<span class="built_in">len</span>(tmp)) + tmp</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2n</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(binascii.hexlify(s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = n2b(s2n(msg), <span class="built_in">len</span>(msg)*<span class="number">8</span>)</span><br><span class="line">    msg += b1</span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)-<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> msg[shift]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                msg[shift+i] ^= b2[i]</span><br><span class="line">    res = msg[-<span class="number">64</span>:]</span><br><span class="line">    <span class="keyword">return</span> b2n(res)</span><br><span class="line"></span><br><span class="line">b1 = n2b(<span class="number">0xdeadbeeffeedcafe</span>, <span class="number">64</span>)</span><br><span class="line">b2  = n2b(<span class="number">0x10000000247f43cb7</span>, <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    signal.alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/ctf/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome to the Signature Challenge!&quot;</span>)</span><br><span class="line">        raw = os.urandom(<span class="number">256</span>)</span><br><span class="line">        pos = random.randint(<span class="number">0</span>, <span class="number">248</span>)</span><br><span class="line">        raw_hex = <span class="built_in">bytearray</span>(binascii.hexlify(raw))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            raw_hex[(pos+i)*<span class="number">2</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">            raw_hex[(pos+i)*<span class="number">2</span>+<span class="number">1</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">        raw_hex = <span class="built_in">bytes</span>(raw_hex)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is the message: <span class="subst">&#123;raw_hex.decode(<span class="string">&#x27;ascii&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        ans = <span class="built_in">input</span>(<span class="string">&quot;Please fill the blank: &quot;</span>)</span><br><span class="line">        ans = <span class="built_in">bytes</span>.fromhex(ans)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ans) == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        raw = <span class="built_in">bytearray</span>(raw)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            raw[pos+i] = ans[i]</span><br><span class="line">        raw = <span class="built_in">bytes</span>(raw)</span><br><span class="line">        <span class="keyword">if</span> sign(raw) == <span class="number">0x1337733173311337</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Great! Here is your flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Wrong! Bye~&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>题目的前几个函数无非就是字节流与数字、数字与二进制、二进制与列表的转化，稍微看看传递参数以及返回值就好。接下来主要分析题目任务：</p>
<ul>
<li>连接上靶机后，开始限时60s</li>
<li>靶机随机生成256字节raw，并将其转为16进制字符串，然后随机生成一个0-248的位置pos</li>
<li>将16进制串中以pos开头的连续十六个字符以”_”代替，相当于抹掉了十六个十六进制字符</li>
<li>靶机发送抹掉后的十六进制串给我们，我们可以在抹掉的位置填充上16个十六进制字符</li>
<li>靶机会将经我们填充后的十六进制串转化为字节，并进行sign操作，如果sign操作得到的结果为0x1337733173311337，则得到flag</li>
</ul>
<p>那么主要要关注的就是这个sign函数到底对msg进行了什么操作：</p>
<ul>
<li>将传入的字节流msg转化为二进制列表，并在后面连接上b1的二进制列表</li>
<li>对上述二进制列表的msg对应部分进行遍历。如果当前位置为1，则将以该位置开头的65位二进制与b2进行异或</li>
<li>遍历完成后，b1对应位置的二进制串转为数字，作为sign的返回值</li>
</ul>
<p>而可以发现，这个sign的过程完全是可以逆推回去的。比如，连接上b1后的二进制列表的最后一位，最多只异或了一次，倒数第二位最多只异或了两次，依此类推。而最后一次异或是否进行，可以由b1的最后一个二进制位是否与目标0x1337733173311337的最后一个二进制位相等来判断。如果不相等说明进行了异或，就把最后六十五个二进制位与b2对应异或回去；相等则不用管。</p>
<p>那么我们就完成了对最后一位二进制的处理，然后将处理过后得到的倒数第二个二进制位看作需要处理的最后一个二进制位，问题就转化为了刚才的问题，依次类推就可以得到填充部分的值。</p>
<p>然而，解出来的填充部分仍然会受到填充部分之前字节异或的影响，因此还需要处理一下。但是有一个比较简单的办法：由于pos是0-248的随机数，因此我们可以反复连接靶机，随机到pos为0时就不需要再进行额外处理了。并且由生日攻击的思想可以知道，连接248次就有大于50的概率随机到至少一次pos为0，也并不费什么时间。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b2n</span>(<span class="params">b</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        res *= <span class="number">2</span></span><br><span class="line">        res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n2b</span>(<span class="params">n, length</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    tmp = <span class="string">&#x27;0&#x27;</span>*(length-<span class="built_in">len</span>(tmp)) + tmp</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2n</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(binascii.hexlify(s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = n2b(s2n(msg), <span class="built_in">len</span>(msg)*<span class="number">8</span>)</span><br><span class="line">    msg += b1</span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg)-<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> msg[shift]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                msg[shift+i] ^= b2[i]</span><br><span class="line">    res = msg[-<span class="number">64</span>:]</span><br><span class="line">    <span class="keyword">return</span> b2n(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">msg</span>):</span><br><span class="line">    final = <span class="string">&quot;0000000000000000&quot;</span> + msg[<span class="number">16</span>:] + <span class="string">&quot;deadbeeffeedcafe&quot;</span></span><br><span class="line">    aim = <span class="string">&quot;1337733173311337&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(final)*<span class="number">4</span></span><br><span class="line">    temp = n2b(<span class="built_in">int</span>(final,<span class="number">16</span>),length)</span><br><span class="line">    aim = n2b(<span class="built_in">int</span>(aim,<span class="number">16</span>),length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(length-<span class="number">1</span>,<span class="number">64</span>-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(temp[i] != aim[i]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>):</span><br><span class="line">                aim[i-j] ^= b2[-j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aim)):</span><br><span class="line">        aim[i] = <span class="built_in">str</span>(aim[i])</span><br><span class="line"></span><br><span class="line">    tt = <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(aim),<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> tt[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">b1 = n2b(<span class="number">0xdeadbeeffeedcafe</span>, <span class="number">64</span>)</span><br><span class="line">b2 = n2b(<span class="number">0x10000000247f43cb7</span>, <span class="number">65</span>)</span><br><span class="line">b3 = n2b(<span class="number">0x1337733173311337</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28634</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;message: &quot;</span>)</span><br><span class="line">    msg = r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">if</span>(msg[<span class="number">0</span>] != <span class="string">&quot;_&quot;</span>):</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;blank: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    r.sendline(calc(msg))</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;9e8b2a1a-ad77-4ef3-a161-2f8693c7a0ac&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="give-you-hand"><a href="#give-you-hand" class="headerlink" title="give you hand!"></a>give you hand!</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">g = random.randint(<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">round</span> = <span class="number">10</span></span><br><span class="line">E = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;give you hand!&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e = random.randint(<span class="number">3</span>, <span class="number">2</span>**<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(e, phi) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    <span class="built_in">print</span>(e, <span class="built_in">pow</span>(g,d,n))</span><br><span class="line">    E *= e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;give me fight!&#x27;</span>)</span><br><span class="line">C = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">pow</span>(C, E, n) == g:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Pa!!!!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>较早之前别的师傅问我的一个题目，觉得还是有记录一下的价值。</p>
<p>连接上靶机后，靶机生成随机大素数p、q，并计算其乘积n。之后取一个2到n-1的随机数g。</p>
<p>然后题目正式开始，进行一个共计十轮的操作，每一轮给出的操作以及数据分别是：</p>
<ul>
<li>生成一个随机加密指数e，保证e和phi互素后，生成对应的解密指数d</li>
<li>给出每一轮的e，以及g^d模n的值</li>
</ul>
<p>十轮数据发放完毕后，题目要求我们输入一个C，如果C满足以下条件就能得到flag：</p>
<script type="math/tex; mode=display">
C^{e_1e_2...e_{10}} \equiv g \quad(mod\;n)</script><p>首先可以发现g是可以求的，我们只需要任取一轮ei和g^di，计算下式就可以得到g：</p>
<script type="math/tex; mode=display">
(g^{d_i})^{e_i} \equiv g \quad(mod\;n)</script><p>有了g过后，如果我们能有每一轮的d，那么我们我们就可以取如下的式子作为C，这个C显然满足题目要求。：</p>
<script type="math/tex; mode=display">
C = g^{d_1d_2...d_{10}}</script><p>但是每一轮的d真的能够求解吗？整理一下我们的已知条件，其实我们只有十轮如下值：</p>
<script type="math/tex; mode=display">
e_i,g^{d_i}</script><p>可以看出，虽然指数位置有不同，但是要用这两个条件求出d的话，其实这和已知密文和公钥，求RSA私钥没什么区别，都依赖于n的分解。而由于是靶机题，可以反复交互，因此我冒出的第一个想法是：有没有机会反复与靶机交互，刷出一个p-1光滑的p使得n易分解？但是显然这里的p、q作为1024比特的素数，对于这种方法来说太不现实了。所以要另作考虑。</p>
<p>然后我的思路就是，其实并不需要知道每个d，我们只需要知道 $ g^{d_1d_2…d_{10}} $ 的值。那么也就是说，我们现在要考虑的是：已知g^d1、g^d2，能否求出g^d1d2。毕竟只要能这样求出一组，那么就能这样反复构造出g^d1d2…d10。</p>
<p>乍一看，这个问题好像就是个CDH问题，不太明白这个问题的可以参考：</p>
<p><a href="https://blog.csdn.net/song_qing_8/article/details/127022594">密码学常见困难问题DLP,CDH,DDH,GDH,BDH,CBDH,DBDH,GBDH，更新中_密码学ddh_song_qing_8的博客-CSDN博客</a></p>
<p>而CDH是计算困难的，目前没有有效的办法解决这个问题。然而，这一题相比于CDH问题而言，多了一些额外的条件，也就是每一轮的加密指数ei的值。这能否帮助我们解决这个问题？</p>
<p>其实共模攻击就可以，这里就以已知g^d1、g^d2，求出g^d1d2为例。我们有以下两组式子：</p>
<script type="math/tex; mode=display">
(g^{d_1})^{e_1} \equiv g \quad(mod\;n)</script><script type="math/tex; mode=display">
(g^{d_2})^{e_2} \equiv g \quad(mod\;n)</script><p>时刻记住我们的目的是求出g^d1d2，而我们要利用共模攻击，就要把g^d1d2当作m，所以把上面两式按如下方式变形一下：</p>
<script type="math/tex; mode=display">
(g^{d_1d_2})^{e_1} \equiv g^{d_2} \quad (mod\;n)</script><script type="math/tex; mode=display">
(g^{d_1d_2})^{e_2} \equiv g^{d_1} \quad (mod\;n)</script><p>这样就跟共模攻击完全对应上了。把g^d1d2看作待求的m，c1=g^d1,c2=g^d2，以及两个加密指数e1、e2均是给定了的，因此就可以共模求出g^d1d2。</p>
<p>求出g^d1d2后，剩下的同理进行迭代即可。比如继续求g^d1d2d3的步骤如下：</p>
<script type="math/tex; mode=display">
(g^{d_1d_2d_3})^{e_1e_2} \equiv g^{d_3} \quad(mod\;n)</script><script type="math/tex; mode=display">
(g^{d_1d_2d_3})^{e_3} \equiv g^{d_1d_2} \quad(mod\;n)</script><p>同理进行共模即可。如此反复就能求出g^d1d2…d10的值，也就是我们需要传给靶机的C了。</p>
<p>而这里需要注意一些小细节。我们刚才的分析是基于10轮ei全部互素，才能共模攻击成功的。如果交互发现不成功，多和靶机连接几次，刷出一组满足要求的ei就行。</p>
<p>而有没有一种对于任意ei都能求出来的办法？我思考了一下这个问题，如果仍然是基于共模攻击的思路的话，倘若存在ei、ej不互素的情况，那么对这一次共模攻击，有：</p>
<script type="math/tex; mode=display">
se_i + te_j = k</script><p>其中k是ei、ej的最大公约数。那么我们求出来的应该是：</p>
<script type="math/tex; mode=display">
g^{kd_1d_2...d_{10}} = (g^{d_1d_2...d_{10}})^k</script><p>那么要得到C，就需要求这个值模n下的k次剩余。而这就又依赖于n的分解，所以我认为ei存在不互素的情况下这题是无法求解的，所以才设计为靶机题以方便多次交互刷数据。</p>
<p>这题就没有exp了，因为我只有问我的师傅给我的附件，而没有靶机交互环境。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-Lattice</title>
    <url>/post/9b40da15.html</url>
    <content><![CDATA[<p>该文章主要记录一些格相关的趣题</p>
<span id="more"></span>
<h3 id="转化AGCD"><a href="#转化AGCD" class="headerlink" title="转化AGCD"></a>转化AGCD</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">delta = <span class="number">.93</span></span><br><span class="line">kbits = <span class="built_in">int</span>(nbits*delta) &gt;&gt; <span class="number">1</span></span><br><span class="line">bound = <span class="number">2</span>**kbits</span><br><span class="line"></span><br><span class="line">m = <span class="number">53</span></span><br><span class="line">p = getPrime(nbits)</span><br><span class="line">x = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">a = [randint(<span class="number">2</span>, bound) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">b = [inverse(a[i] * x + randint(<span class="number">2</span>, bound), p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a = &#125;</span>\n<span class="subst">&#123;b = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * getPrime(nbits)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n<span class="subst">&#123;n = &#125;</span>\n<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = [226623173423524660762660587272926713775967113908071780918074044654746571, 99264763681859867816401881797921542580399607408617989905539839585323915, 177386736426181055874933306917112626356703658087900095566603898769091471, 5081587307910189127020749833744000992860852972311811125838243285877024, 411574110749659943703486080205654180795533263258790540505729307655142415, 1932137082695732276757073197845160804183868657578020568122170798605640, 103124563846054461729937757543103647655652920105466714505493351091607258, 65504504807895104765113845019342631211794998326986693051403166347389343, 151981136459515488882551190881724794060443302721456924436833810784219984, 3718222682937746804225225548712093487815785751144078132168082568580360, 113510621144631490440930342566441462111997352193075435129065142534001691, 120974784665251812036673794948678799274628176126865320042025545119228958, 193781634902416477262894357163294897773986019836290716577623654684669134, 24723078645443091017196603549741156206848230267873373213787667300835247, 113165730428784680251415263617027036564335843097634063978942541861726366, 407969345567975756778713582637075079783087682011802438819519567067241979, 151997755976755754648644424339697978791639952976423703068460739754839735, 253811682402531882908516509348937060650658679039884817907013090700281326, 404019046883201096048575369492824679211148242588135515488831100750933, 216725815105749574244056185735609680710954976727370948136589694286539150, 131605791470353972911656132280131756304373156215254629027113994962767833, 180190835657942894146705472335255090682179032409197893415067330574923084, 280086867488286721744184104208965143004904898002959657537412170401510680, 141039650035922882497777354937772530276454847300329950111476878397654053, 319858542602843767926919031049756704694256249776295683733693049522108872, 135633729043152514436339515687850041275739968837263316059461122379487161, 5038078437655552457504448170918674775639811066221990939957937239270167, 31918623105281221407484700216805581554894830335850729735403857505547002, 424092292941284354705774693468403308534554297314522980647422106907791591, 300635399575681097924575337707842439619576566621368558814406755486658723, 323686536134235835297820679361020300261642147835330856978902402517820801, 392620731408972775834827063986182511057173023783228673505487358356342114, 108681888409433100038410892044516773350200560613740266422720530715166828, 182338238967593331173372924666322484559869636981878410128856193538847678, 242630103099393630296862580986126439159331512930513337684897019399319621, 439737851682655515589311041364295341910822514202794661846391952824593066, 84115222835816390632388766236883091861894245716624041418721833768917547, 83926810016448863267608537461154878096011055852547156452557576634691363, 354588657997053098464002945990025178880458974438409486331146607111950617, 170413334241108032297843362994773587930354677207616527135896108692092457, 283185550452196010949673962093382632839937948488235076418296451706429923, 390000015988537819093964185756696910433784324036454283227484980367608884, 121370082693927496814267201484843687844578996855559797026014779421645731, 357164702199289826402900456464935203585119719343409406742172822868770420, 124276883926433089715798954125363260298740714164810098876501303684201565, 122912426324401068572433533096099229494021528981601203447594706478943744, 287527827124819650763642012585104162743364640051014410357971387706781531, 135819408760576908301747047938951002691288880199213610653148681326046091, 239644892459756283997004399339163555215985564639569406081575642996080481, 241513055132921096791997556818670497379598444881679976542299970876463098, 144152466563589166040797814966860917437020789050031353309848917297959088, 120162009732086541189519736083838746833770360960800721525565383293404918, 121547756201941339094205049920057111793191461762212554355070565584802804]</span></span><br><span class="line"><span class="string">b = [6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485, 4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876, 7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649, 9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639, 10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603, 5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840, 2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037, 5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258, 3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450, 507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042, 1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168, 2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047, 9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615, 6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102, 4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475, 8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429, 2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887, 3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716, 6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671, 9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615, 5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402, 8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067, 2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721, 4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091, 1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313, 4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221, 10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278, 3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998, 867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086, 2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973, 11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795, 8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531, 618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247, 9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630, 10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980, 5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888, 11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068, 9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464, 783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707, 9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737, 2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151, 11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518, 9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772, 9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309, 8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153, 2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868, 8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996, 9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956, 10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418, 5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476, 5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200, 10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977, 8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538]</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">n = 97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line"><span class="string">c = 44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>观察题目，题目给了如下形式的53组等式：</p>
<script type="math/tex; mode=display">
b_i = (a_i*x + r_i)^{-1} \quad(mod\;p)</script><p>其中，各个值的已知信息如下：</p>
<ul>
<li>x 为 (2，p - 1) 之间的随机数，并且在53组等式中保持不变</li>
<li>a、r 为 (2，2**238) 之间的随机数</li>
<li>给出 a 、b</li>
</ul>
<p>首先，有两点信息暗示要用格：</p>
<p>1、a、r 限制了数据范围，可以看作是小量，暗示用LLL</p>
<p>2、多组线性等式，暗示用矩阵</p>
<p><br></p>
<p>所以关键就是转化到一个可以运用格的问题形式，推导如下：</p>
<p>首先要想明白下面的式子：(推导比较容易，就不讲了)</p>
<script type="math/tex; mode=display">
inverse(b,n) = inverse(b,p)\quad(mod\;p)</script><p>然后就可以将问题按下面的方式逐步转化：</p>
<p>1、<strong>将b逆元转化到模n</strong></p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,p) \quad(mod\;p)</script><p>​        代入上面的式子，变成：</p>
<script type="math/tex; mode=display">
(a_0*x + r_0) = inverse(b_0,n) \quad(mod\;p)</script><p>​        同理：</p>
<script type="math/tex; mode=display">
(a_1*x + r_1) = inverse(b_1,n) \quad(mod\;p)</script><p>2、<strong>联立消元</strong></p>
<script type="math/tex; mode=display">
a_1*(a_0*x + r_0) = a_1*inverse(b_0,n) \quad(mod\;p)</script><script type="math/tex; mode=display">
a_0*(a_1*x + r_1) = a_0*inverse(b_1,n) \quad(mod\;p)</script><p>​        相减得到：</p>
<script type="math/tex; mode=display">
a_1*r_0 + a_0*r_1 = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)\quad(mod\;p)</script><p>​        有没有发现，小量已经全部移到了等式同一边</p>
<p>3、<strong>转化为AGCD问题</strong></p>
<p>将模等式利用同余定理展开：</p>
<script type="math/tex; mode=display">
a_1*inverse(b_0,n) - a_0*inverse(b_1,n) = k*p + a_1*r_0 + a_0*r_1</script><p>​        此时，问题已经变成了AGCD问题，这是因为：</p>
<p>​        AGCD问题通常形式：</p>
<script type="math/tex; mode=display">
X = q*p + r</script><p>​        在本题中，各个量如下：</p>
<script type="math/tex; mode=display">
X = a_1*inverse(b_0,n) - a_0*inverse(b_1,n)</script><script type="math/tex; mode=display">
q = k,\quad
p = p,\quad
r = a_1*r_0 + a_0*r_1</script><p>至此问题推导就结束了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P_bits = <span class="number">512</span></span><br><span class="line">Q_bits = <span class="number">238</span>+<span class="number">1024</span>-<span class="number">512</span></span><br><span class="line">R_bits = <span class="number">238</span>+<span class="number">238</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">226623173423524660762660587272926713775967113908071780918074044654746571</span>, <span class="number">99264763681859867816401881797921542580399607408617989905539839585323915</span>, <span class="number">177386736426181055874933306917112626356703658087900095566603898769091471</span>, <span class="number">5081587307910189127020749833744000992860852972311811125838243285877024</span>, <span class="number">411574110749659943703486080205654180795533263258790540505729307655142415</span>, <span class="number">1932137082695732276757073197845160804183868657578020568122170798605640</span>, <span class="number">103124563846054461729937757543103647655652920105466714505493351091607258</span>, <span class="number">65504504807895104765113845019342631211794998326986693051403166347389343</span>, <span class="number">151981136459515488882551190881724794060443302721456924436833810784219984</span>, <span class="number">3718222682937746804225225548712093487815785751144078132168082568580360</span>, <span class="number">113510621144631490440930342566441462111997352193075435129065142534001691</span>, <span class="number">120974784665251812036673794948678799274628176126865320042025545119228958</span>, <span class="number">193781634902416477262894357163294897773986019836290716577623654684669134</span>, <span class="number">24723078645443091017196603549741156206848230267873373213787667300835247</span>, <span class="number">113165730428784680251415263617027036564335843097634063978942541861726366</span>, <span class="number">407969345567975756778713582637075079783087682011802438819519567067241979</span>, <span class="number">151997755976755754648644424339697978791639952976423703068460739754839735</span>, <span class="number">253811682402531882908516509348937060650658679039884817907013090700281326</span>, <span class="number">404019046883201096048575369492824679211148242588135515488831100750933</span>, <span class="number">216725815105749574244056185735609680710954976727370948136589694286539150</span>, <span class="number">131605791470353972911656132280131756304373156215254629027113994962767833</span>, <span class="number">180190835657942894146705472335255090682179032409197893415067330574923084</span>, <span class="number">280086867488286721744184104208965143004904898002959657537412170401510680</span>, <span class="number">141039650035922882497777354937772530276454847300329950111476878397654053</span>, <span class="number">319858542602843767926919031049756704694256249776295683733693049522108872</span>, <span class="number">135633729043152514436339515687850041275739968837263316059461122379487161</span>, <span class="number">5038078437655552457504448170918674775639811066221990939957937239270167</span>, <span class="number">31918623105281221407484700216805581554894830335850729735403857505547002</span>, <span class="number">424092292941284354705774693468403308534554297314522980647422106907791591</span>, <span class="number">300635399575681097924575337707842439619576566621368558814406755486658723</span>, <span class="number">323686536134235835297820679361020300261642147835330856978902402517820801</span>, <span class="number">392620731408972775834827063986182511057173023783228673505487358356342114</span>, <span class="number">108681888409433100038410892044516773350200560613740266422720530715166828</span>, <span class="number">182338238967593331173372924666322484559869636981878410128856193538847678</span>, <span class="number">242630103099393630296862580986126439159331512930513337684897019399319621</span>, <span class="number">439737851682655515589311041364295341910822514202794661846391952824593066</span>, <span class="number">84115222835816390632388766236883091861894245716624041418721833768917547</span>, <span class="number">83926810016448863267608537461154878096011055852547156452557576634691363</span>, <span class="number">354588657997053098464002945990025178880458974438409486331146607111950617</span>, <span class="number">170413334241108032297843362994773587930354677207616527135896108692092457</span>, <span class="number">283185550452196010949673962093382632839937948488235076418296451706429923</span>, <span class="number">390000015988537819093964185756696910433784324036454283227484980367608884</span>, <span class="number">121370082693927496814267201484843687844578996855559797026014779421645731</span>, <span class="number">357164702199289826402900456464935203585119719343409406742172822868770420</span>, <span class="number">124276883926433089715798954125363260298740714164810098876501303684201565</span>, <span class="number">122912426324401068572433533096099229494021528981601203447594706478943744</span>, <span class="number">287527827124819650763642012585104162743364640051014410357971387706781531</span>, <span class="number">135819408760576908301747047938951002691288880199213610653148681326046091</span>, <span class="number">239644892459756283997004399339163555215985564639569406081575642996080481</span>, <span class="number">241513055132921096791997556818670497379598444881679976542299970876463098</span>, <span class="number">144152466563589166040797814966860917437020789050031353309848917297959088</span>, <span class="number">120162009732086541189519736083838746833770360960800721525565383293404918</span>, <span class="number">121547756201941339094205049920057111793191461762212554355070565584802804</span>]</span><br><span class="line">b = [<span class="number">6914108949558554967947157128371931777410399406424987472871265954007536210016000226325059466226417032321637768264366355381358552354005990800271210820573485</span>, <span class="number">4243350947524503250221141283676871054961767761533372535893799777316644277502608136805589201625364130457811586620275507258712882614289496389903620348266876</span>, <span class="number">7207723049065039433195103268720351560639394404931218738588797743896531445162073256971205066381805731964498662913612257697112297701515506572915529630749649</span>, <span class="number">9478867353430476119494189313998177997736272254097122188128236485373498544996365281925749885278741955783336542038044934310609039388320259421902808190444639</span>, <span class="number">10092751897940937230080778690510245631681516769761757712615337492357689455504789850857408988921202275660819814611602363226676960504340172006698418415173603</span>, <span class="number">5925826079655586275072881965974452367893696237983922405515651101142466142890347074549417916208251973477786424292583294611467079137685936757690986611634840</span>, <span class="number">2705681917429356111941316419951220642197423059675588735077708172236184161647753066851383893342803615318493417826483637576437939588768131347824859258545037</span>, <span class="number">5793481213766970753853702438948943122939283534830229656699291673833482520096412620329053619097899786691202045974184168665694248732396928571682405270896258</span>, <span class="number">3212965229314647637209688663583343281038324880827825190075824389072703574155472958687615046177029380089781167897141334668918512246004114927754397070032450</span>, <span class="number">507858897452123392345795058512546587866098555419275815786154069852495346820264502978622507708545904809967228104858456493411165322256241259977367791849042</span>, <span class="number">1910673108437857460691507244808588742883010826641687685721219894695257479961884688001651060796296482279750896861871054549713247272267814842634417960819168</span>, <span class="number">2886899741243848325873884252302617091514751717162909139186588257257958079130295099942906361136727891394692438504521454612873780003451672796809495226053047</span>, <span class="number">9475112027697464127079619380873273645977046666164164866182205134451664768516062572467782141714310693479352016031210905832129007401065693258638549100340615</span>, <span class="number">6500556077535313473248384729914564751019267303740919343852356539545383313100771434642240039386190890442297569489225045989569513367190888305128046797790102</span>, <span class="number">4352575880916080525863863641402979108455803235156616467981920947190189719209876636528864672410548581564537392488508689158499605332674737341258230577454475</span>, <span class="number">8855806560115120193748486720541724804359134126331550182497194629659837334220708039976726151383523965042432921330088347099157101222325916589506823343303429</span>, <span class="number">2774687136241363374520941544838376461935832170671324174983217598018541119488143069001573950404074015672792681188308412236177101695870429933915439814455887</span>, <span class="number">3592625154014227818614640279472091377202566130067513443394635609406915223429475106920133466069573358784994632708606215548054720669924050172507230811524716</span>, <span class="number">6955167231829680836198358545532458408492109230130585460528670650387346748536700767474985024643177587060440925065292948599577822789464670224006606550191671</span>, <span class="number">9194240450171813716718107852597217121362901491312541712415368806074976814988492806542250961496723482200369134039024809109124268301878344007510329535899615</span>, <span class="number">5950577443108124534632225089717156798651285826327691188035165834526053749015025923590404663092184546183617748745220821771671541995250149683517797527521402</span>, <span class="number">8147536282406177354958293970877926560729452459282692121940762677425779306283487924160782780299072205173184092679363257393333408904258459452274140791704067</span>, <span class="number">2559838851622656651952688025212080768394118716136473174419624432065878751831257138924556995347285973152404103332115858073203707432778426111325160735797721</span>, <span class="number">4949359541993387232537947394033362386729434824378846379892748514319807403496542405321037377319385099259508143211518009425440208974571177165892037150309091</span>, <span class="number">1811673815510905036234500180939767229691774807773077679609856974935852997557959138952513786288094951891092390620085630282790435640054840555430191851155313</span>, <span class="number">4777885082419038381870076531532991228660498200204585112220314790970263737966241042846160101892845251352987027168075888559622541458466624868511496707956221</span>, <span class="number">10238413710887745087366241938666680877364662925315040665408262063559110391570620624035047723405526398382375337996702653261521046541231508963525281969167278</span>, <span class="number">3473340971529025694371400010471019993671985537666177271712164477185774211271764180735799413043127038518985595844132844447764288680922052782557764949946998</span>, <span class="number">867350328105510555601266520733196439839458877892746826352327206388533426010006967907349245075237097927904721917883721235095421696529792601733014134854086</span>, <span class="number">2222551217354471458254572360148123193413834831993026644829243162796014361851880328878269533732240093458365703558737637137958860294765246560791514120259973</span>, <span class="number">11135205396103944017696365595462393888434601100415179875833418713405171505514194213145570969708606144837327906949671055964664374675657263466390592843391795</span>, <span class="number">8522093767526974938129274822063573020978729589640216089964237075835492415426711219243729120235033613444547687888110911207624759350428715822663409802746531</span>, <span class="number">618066223420558653541360712487038985426207412776033652080372792996567809564864490136174039188920973110051946250308952735815050129654446357610891600358247</span>, <span class="number">9409683398358516350960966400164689353665188916574105692687503875332913200043983566205433723664581043184720605266180639045542588369320481456882129188045630</span>, <span class="number">10444912184036485133367095187175276878779180732948191228469107836744786278456394810069942330852023901190983084405589604802372025661121698806608507168815980</span>, <span class="number">5576808818750933483753823503921696491223987341840901931564632327098735945058071342467846031030536056935288275893098409520502499556978787294107531192342888</span>, <span class="number">11386170831130547392066338523237385342399839863674855226178213470159061980868639851406716227763244070078162813390834461297132500087558187715637626334931068</span>, <span class="number">9266567474732845229716988973436914937598698459994255583719094874193822181675544832905800318876640152861212158602258489908050910803591150200525814954449464</span>, <span class="number">783592057196685768383414375510915255040313296240508052297125547577301394194342174502254618660494179262947294784116190346971775913769035176336764690986707</span>, <span class="number">9105502180406569116340185218615179260760299848734930041602247299415927012355894700609320722623370139135122342263713846033304524885782445949914570572453737</span>, <span class="number">2297513067567074587355421795953863750627166311403426281361312466297059134183355298180726594771668216966732975569375780641995446201527865824229865021970151</span>, <span class="number">11188600115372846854366137972585164923834717935898376598627276542371780275188751807941476083838808640337088079259756154889298297211898790479562768420072518</span>, <span class="number">9656534484640562909118084019762167873291009773232637365213178341424207965285682074941363264934464618450896824843786922345950140473512635227211478685645772</span>, <span class="number">9343461413426168572561103655466265435717795505657355206522619014228487030194629865342342831380623629471381377128476731390629039248389925891691539701146309</span>, <span class="number">8681682631345831952913045584970984843073645909076987924890403622460027832467542651987623584349089629585531159664847835287269602153108548311564650707486153</span>, <span class="number">2656022193773767486949157049738671449721427276944394094199310567891807831351152318018854466905531462256724938253289337125816757790150607033652302227218868</span>, <span class="number">8508384570273623974802293014504152838556567399448174508834295467479347400327605230626491770497722014885725768213847610504091563629074470937893415637338996</span>, <span class="number">9716708016762837073052660164394053927821481998442639097920157163041635386583167412600530638659299593644342722890385260143682043966383262553995449944733956</span>, <span class="number">10231440381205182517403356785692369093270060843919065205063057623835967990844569366866607452179015606536153761832574542432676397053147658371344410148994418</span>, <span class="number">5146017765041682548648007957706007143803297597587388958721578537741505373387718545092695689770641249769257901519197825087801304735466239843061128683798476</span>, <span class="number">5222787643951107881679620487297380490422971146509273142662864657570322385794688143091615970726544447887548792995773377472568754141261595697499826832283200</span>, <span class="number">10464709627510729920064247596403868144579001206027850090117534773353171042729174225448975480540265139445689560336303762183734720331072177316589830221880977</span>, <span class="number">8615548684371129329547908465444932886632829509038689025840147771114904826804441395348568994340729561487767929565347408386252378372026787346043297419998538</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">97853623351997296064353255135588846396569970130207954701198599507389250544514082114957455795330569730103385876268186267851194017938003005329258612122178955978821786063623918361705120943030241043571056282806763102278839262572943852578441568495106906583558313075633340995336324665255745279078992160547871869557</span></span><br><span class="line">c = <span class="number">44431449479567561261917922338101462065458737366369232901780150553091038211618354850829522817943842817713545313017593484450672219262670055539455602698182643653128488160901383204333856589371756831501857423631322915113418699087489759910739942878900174507138454184974875778861767989603951090385047953725189919178</span></span><br><span class="line"></span><br><span class="line">N = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">    N.append(a[i+<span class="number">1</span>]*inverse(b[i],n) - a[i]*inverse(b[i+<span class="number">1</span>],n))</span><br><span class="line">X = <span class="number">2</span>**R_bits</span><br><span class="line">m = <span class="built_in">len</span>(N)</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, names=[<span class="built_in">str</span>(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line"></span><br><span class="line">h = <span class="number">3</span></span><br><span class="line">u = <span class="number">1</span></span><br><span class="line">variables = PR.gens()</span><br><span class="line"></span><br><span class="line">gg = []</span><br><span class="line">monomials = [variables[<span class="number">0</span>]**<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    gg.append(N[i] - variables[i])</span><br><span class="line">    monomials.append(variables[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(monomials), <span class="built_in">len</span>(gg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;monomials:&#x27;</span>, monomials)</span><br><span class="line"></span><br><span class="line">B = Matrix(ZZ, <span class="built_in">len</span>(gg), <span class="built_in">len</span>(monomials))</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] * m)</span><br><span class="line"></span><br><span class="line">B = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">new_pol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gg)):</span><br><span class="line">    tmp_pol = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(monomials)):</span><br><span class="line">        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)</span><br><span class="line">    new_pol.append(tmp_pol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(new_pol) &gt; <span class="number">0</span>:</span><br><span class="line">    Ideal = ideal(new_pol[:m-<span class="number">1</span>])</span><br><span class="line">    GB = Ideal.groebner_basis()</span><br><span class="line">    function_variables = var([<span class="built_in">str</span>(<span class="string">&#x27;y%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + m)])</span><br><span class="line">    res = solve([pol(function_variables) <span class="keyword">for</span> pol <span class="keyword">in</span> GB], function_variables)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got %d basis&#x27;</span> % <span class="built_in">len</span>(GB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;solved result:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    PRRR.&lt; x, y&gt; = PolynomialRing(QQ)</span><br><span class="line">    q = <span class="built_in">abs</span>(PRRR(res[<span class="number">0</span>][<span class="number">0</span>](x, y)).coefficients()[<span class="number">0</span>].denominator())</span><br><span class="line">    p = N[-<span class="number">1</span>] // q</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">abs</span>(<span class="built_in">int</span>(p))</span><br><span class="line">q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;755f85c2723bb39381c7379a604160d8&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with nothing.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, pbits: <span class="built_in">int</span>, level: <span class="built_in">int</span>=<span class="number">0</span></span>):</span><br><span class="line">    p = getPrime(pbits)</span><br><span class="line">    M = random_matrix(GF(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line">args = &#123;</span><br><span class="line">    <span class="string">&quot;chall1&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x00</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall2&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x01</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;chall3&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;m&quot;</span>: os.urandom(LEN),</span><br><span class="line">        <span class="string">&quot;pbits&quot;</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="string">&quot;level&quot;</span>: <span class="number">0x10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">dict</span>()</span><br><span class="line">enc = pad(secret.flag, LEN)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    out[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>] = challenge(**args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>])</span><br><span class="line">    enc = xor(enc, hashlib.sha512(args[<span class="string">f&quot;chall<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>][<span class="string">&quot;m&quot;</span>]).digest())</span><br><span class="line">out[<span class="string">&quot;enc&quot;</span>] = enc.<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;out = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理一下解密流程：</p>
<ul>
<li>先将flag串填充至32的整数倍</li>
<li>生成三组challenge需要的参数：m，pbits，level</li>
<li>将每一组的m用sha512加密后，依次与flag异或</li>
<li>给出每组challenge的对应输出与最终密文值</li>
</ul>
<p>其中，challenge的各个参数值在加密过程中的作用依次是：</p>
<ul>
<li>生成一个pbits的素数p，并以该p生成一个有限域Gf(p)</li>
<li>将m的32个随机字节转换成Gf(p)下的长度为32的向量</li>
<li>生成一个大小为32*(32-level)的矩阵M，M中元素均为Gf(p)中的随机数</li>
<li>计算c=m*M，并给出p、M和c</li>
</ul>
<p>因此，我们要做的就是由c、M反解出m，并计算其sha512值后与密文依次异或，就能得到明文，但是三次求解的方法由M的大小而产生不同。</p>
<h4 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h4><p>第一轮，M的大小为32*32，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 32} = c_{1\times 32}\quad(mod\;p)</script><p>可以看作是m的32个变量对应了32组方程，因此满秩，可以直接求解线性方程组(数据有点大，想要复现的师傅可以联系我)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h4><p>第二轮，M的大小为32*31，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 31} = c_{1\times 31}\quad(mod\;p)</script><p>也就是说，m的32个变量只有31组方程了，因此可以求出无穷多组解。不过由于只差一组方程，因此也只需要选取一个自由变量，并从c中对应减去其值后，解一个31变量的满秩方程。而判断解正确的依据就是解出来的m向量中所有值均在0-256之间。</p>
<p>说起来可能不那么明白，还是上个例子，这里以下面这个线性方程组简单说明一下：</p>
<script type="math/tex; mode=display">
m_{1\times 4}*M_{4\times 3} = c_{1\times 3}</script><p>写出来：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3,x_4)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} \\
   m_{41} & m_{42} & m_{43}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,c_3)</script><p>变成方程组形式就是：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3} + m_{41}x_{4} = c_1 \\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3} + m_{42}x_{4} = c_2 \\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3} + m_{43}x_{4} = c_3 
    \end{cases}</script><p>现在我们假设已经知道了x4的值(对应于题目中，就是在0-256中爆破)，那么把方程组中含x4的项都移到右边，就变成：</p>
<script type="math/tex; mode=display">
\begin{cases}
        m_{11}x_{1} + m_{21}x_{2} + m_{31}x_{3}  = c_1 - m_{41}x_{4}\\
        m_{12}x_{1} + m_{22}x_{2} + m_{32}x_{3}  = c_2 - m_{42}x_{4}\\ 
        m_{13}x_{1} + m_{23}x_{2} + m_{33}x_{3}  = c_3 - m_{43}x_{4}
    \end{cases}</script><p>接下来解的就是这个满秩方程：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,x_3)*\left(
 \begin{matrix}
   m_{11} & m_{12} & m_{13}\\
   m_{21} & m_{22} & m_{23} \\
   m_{31} & m_{32} & m_{33} 
  \end{matrix}
  \right)
  =(c_1 - m_{41}x_{4},c_2 - m_{42}x_{4},c_3 - m_{43}x_{4})</script><p>很容易想到，当解出的向量 $ (x_1,x_2,x_3)$ 均在0-256之间时，就正确求解了。放在本题中也不过是对这个例子的扩大而已，取x32进行爆破，方法是完全一样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h4><p>第三轮，M的大小为32*16，因此有：</p>
<script type="math/tex; mode=display">
m_{1\times 32}*M_{32\times 16} = c_{1\times 16}\quad(mod\;p)</script><p>可以想到，如果继续用第二轮中的方法，那么需要爆破256的16次方种可能，数量级达到了2^128，是显然不可能的，所以需要另谋他法。而其实你应该早就想到了，m在每个challenge中，都是一个由32个0-256的值组成的向量。0-256意味着，<strong>在模p下这些值都很小</strong>，因此很自然地就会联想到格。</p>
<p>所以challenge3其实是一个格基规约问题，但是想构造出这样的格还是有点难度的。首先还是列出构造格需要的多个等式：</p>
<script type="math/tex; mode=display">
s = (x_1,x_2,...,x_{31},x_{32})*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}\\
   m_{2,1} & m_{2,2} &... &m_{2,16} \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16} \\
   m_{32,1} & m_{32,2} &... &m_{32,16}  \\
  \end{matrix}
  \right)
  =(c_1,c_2,...,c_{15},x_{16})\quad(mod\;p)</script><p>从这个矩阵乘法中，可以提取出其中的十六个等式：(i = 1,2,…,16)</p>
<script type="math/tex; mode=display">
m_{1,i}*x_1+m_{2,i}*x_2...+m_{31,i}*x_{31}+m_{32,i}*x_{32}+ k_i*p=c_i</script><p>以这些等式为基础，我们构造出下面的格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>
<p>写清楚点就是：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)</script><p>这是一个64*48的矩阵，而我们用这个矩阵规约的依据等式是：</p>
<script type="math/tex; mode=display">
(x_1,x_2,...,x_{32},k_1,k_2,...,k_{16},-1,-1,...,-1)*\left(
 \begin{matrix}
   m_{1,1} & m_{1,2} &... &m_{1,16}   &1&0&...&0&0\\
   m_{2,1} & m_{2,2} &... &m_{2,16}   &0&1&...&0&0 \\
   & &...\\
   m_{31,1} & m_{31,2} &... &m_{31,16}&0&0&...&1&0\\
   m_{32,1} & m_{32,2} &... &m_{32,16}&0&0&...&0&1  \\
   p&0&...&0&0&0&...&0&0\\
   0&p&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&p&0&0&...&0&0\\
   c_1&0&...&0&0&0&...&0&0\\
   0&c_2&...&0&0&0&...&0&0\\
   &&...\\
   0&0&...&c_{16}&0&0&...&0&0\\
  \end{matrix}
  \right)
  =
  (0,0,...,0,x_1,x_2,...,x_{32})</script><p>可以看出，规约出的向量 $(0,0,…,0,x_1,x_2,…,x_{32})$ 是非常短的，因此LLL就能得到这个解(不过实际操作会发现满足要求的向量在第二行)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>得到三个flag之后，进行sha512后依次与密文异或就好。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">p = </span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">32</span>,M)</span><br><span class="line">flag1 = m.solve_left(c)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>(flag1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line">p = <span class="number">661</span></span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">c = vector(GF(p),c)</span><br><span class="line">m = matrix(GF(p),<span class="number">32</span>,<span class="number">31</span>,M)</span><br><span class="line">MM = m.delete_rows([<span class="number">31</span>])</span><br><span class="line">M_ = m[-<span class="number">1</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">	cc = c - i * M_</span><br><span class="line">	ans = MM.solve_left(cc)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span>(ans[i] &lt;= <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>)):</span><br><span class="line">		k = i</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">flag2 = <span class="built_in">bytes</span>(<span class="built_in">list</span>(ans)+[k])</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">p = </span><br><span class="line">M = []</span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">MM = matrix(ZZ,<span class="number">32</span>,<span class="number">16</span>,M)</span><br><span class="line">E = diagonal_matrix([<span class="number">1</span>]*<span class="number">32</span>)</span><br><span class="line">P = diagonal_matrix([p]*<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ,c)</span><br><span class="line">L = block_matrix(ZZ,[[MM,E],[P,<span class="number">0</span>],[C,<span class="number">0</span>]])</span><br><span class="line">ML = L.LLL()</span><br><span class="line">ans = <span class="built_in">list</span>(ML[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">      ans[i] = -ans[i]</span><br><span class="line">flag3 = <span class="built_in">bytes</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment">#final</span></span><br><span class="line">c = <span class="number">0x72c0e8ef53c726969a91368ca600a081f38f5cfaa1d0669d9049f278fb2f0fb4f36dced86bf9b7e9ef59af082cc5a5b2458cae490ab23c0c8c5b9361499ae2e2</span></span><br><span class="line">enc = long_to_bytes(c)</span><br><span class="line">flag = [flag1,flag2,flag3]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    enc = xor(enc, hashlib.sha512(flag[i]).digest())</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;db1ebd0c-1cac-55d5-763e-b05f3d9af423&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="SSSMMM"><a href="#SSSMMM" class="headerlink" title="SSSMMM"></a>SSSMMM</h3><p>题目来源：2023福建省工控赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = pad(flag, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">ecc_table = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span></span><br><span class="line">         <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TSM2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sk, ecc_table</span>):</span><br><span class="line">        self.ecc_table = ecc_table</span><br><span class="line">        self.n = <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        self.para_len = <span class="built_in">len</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">        self.ecc_a3 = (<span class="built_in">int</span>(ecc_table[<span class="string">&#x27;a&#x27;</span>], base=<span class="number">16</span>) +</span><br><span class="line">                       <span class="number">3</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.pk = self._kg(self.sk, ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, data, K</span>):</span><br><span class="line">        e = data</span><br><span class="line">        d = self.sk</span><br><span class="line">        k = K</span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(k, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        R = ((e + x) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> R == <span class="number">0</span> <span class="keyword">or</span> R + k == <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        d_1 = <span class="built_in">pow</span>(</span><br><span class="line">            d+<span class="number">1</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        S = (d_1*(k + R) - R) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> S == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (R, S)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, Sign, data</span>):</span><br><span class="line">        r = <span class="built_in">int</span>(Sign[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(Sign[self.para_len:<span class="number">2</span> * self.para_len], <span class="number">16</span>)</span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.n</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(s, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        P2 = self._kg(t, self.pk)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> P1 == P2:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._add_point(P1, P2)</span><br><span class="line">            P1 = self._convert_jacb_to_nor(P1)</span><br><span class="line"> </span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> r == ((e + x) % self.n)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_kg</span>(<span class="params">self, k, Point</span>):</span><br><span class="line">        <span class="keyword">if</span> (k % self.n) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span></span><br><span class="line">        Point = <span class="string">&#x27;%s%s&#x27;</span> % (Point, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        mask_str = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len - <span class="number">1</span>):</span><br><span class="line">            mask_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        mask = <span class="built_in">int</span>(mask_str, <span class="number">16</span>)</span><br><span class="line">        Temp = Point</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len * <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                Temp = self._double_point(Temp)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; mask) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    Temp = self._add_point(Temp, Point)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    Temp = Point</span><br><span class="line">            k = k &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self._convert_jacb_to_nor(Temp)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_double_point</span>(<span class="params">self, Point</span>):</span><br><span class="line">        l = <span class="built_in">len</span>(Point)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        <span class="keyword">if</span> l &lt; self.para_len * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y1 = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l == len_2:</span><br><span class="line">                z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z1 = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T6 = (z1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y1 * y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (x1 - T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (y1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * <span class="number">8</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (x1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * <span class="number">3</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (T6 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (self.ecc_a3 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            z3 = (T3 + T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            x3 = (T3 - T5) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (T5 % <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">                T4 = (T5 + ((T5 + <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)) &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(</span><br><span class="line">                    self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T4 = (T5 + (T5 &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (T1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (x3, y3, z3)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_point</span>(<span class="params">self, P1, P2</span>):</span><br><span class="line">        <span class="keyword">if</span> P1 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P2, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> P2 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        l1 = <span class="built_in">len</span>(P1)</span><br><span class="line">        l2 = <span class="built_in">len</span>(P2)</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt; len_2) <span class="keyword">or</span> (l2 &lt; len_2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X1 = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            Y1 = <span class="built_in">int</span>(P1[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l1 == len_2:</span><br><span class="line">                Z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Z1 = <span class="built_in">int</span>(P1[len_2:], <span class="number">16</span>)</span><br><span class="line">            x2 = <span class="built_in">int</span>(P2[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y2 = <span class="built_in">int</span>(P2[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (Z1 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y2 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x2 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T3 - X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 + X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 - Y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Z3 = (Z1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (X1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            X3 = (T5 - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (Y1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T4 - X3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (X3, Y3, Z3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>):</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        x = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">        z = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line">        z_inv = <span class="built_in">pow</span>(</span><br><span class="line">            z, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        z_invSquar = (z_inv * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_invQube = (z_invSquar * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        x_new = (x * z_invSquar) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        y_new = (y * z_invQube) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_new = (z * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> z_new == <span class="number">1</span>:</span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> form % (x_new, y_new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">start, bits, k</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">bin</span>(k)[<span class="number">2</span>:][-start-bits:-start],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sk = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">sm2 = TSM2(sk, ecc_table)</span><br><span class="line">start = <span class="number">130</span></span><br><span class="line">bits = <span class="number">7</span></span><br><span class="line">num = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">sigs = []</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    msg = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    k = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    leaks=leak(start, bits, k)</span><br><span class="line">    L.append(leaks)</span><br><span class="line">    sigs.append(sm2.sign(msg, k))</span><br><span class="line"></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(sigs)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;1de6f33a8366acbdd0b87ec7beb59e429936b43bae9b8ee2538d2b97d6640c70143fa04e7f1880d22b0e9cbce938edd880d69fc4ed9a6315abd905880a8d38f7&#x27;, &#x27;9d5f8a16fe8d951cbab0a6dca86427286ca389aca6497f20ca3421fa0aa27f4ddf2db6c58229182eaccca41bfebf56961ff1f683ba94b81137c41f61c98c1368&#x27;, &#x27;4d20e1aa4e4f6a4948158fabbdadec3c4d6049b6439981efcb70900d954d0a8f18bce67831d426c12726c321e6eb69e8708739fc74bfde6ad601433bcd896ca7&#x27;, &#x27;e5358c986a12ec11bcd495e8822c5a71b2545dc11ce09521edaa47c11b739b12bbe76ca89bd08beb969355dec56dfcdd6cff121bb61eaea148d25e9a6e428145&#x27;, &#x27;fb06d41eafbcc77d464fe41ca356641cbb92289d28b0ff37caad95619c34557969acf9f615214f3ecf6c15943fc63470da0785687ae535045145d5e161a69210&#x27;, &#x27;2e97f02e82642c033af0fc9686788c1acd8841b65228fab3e66f5328e790d702edadb13e99ed1d411482cd913ec6730803e6fcff29206d9e1fc1b68e1f631e25&#x27;, &#x27;4f1ffd080380e945b24596135e5772058ee8adc26272ed3147f0701063b4b9f435e5ac679ef2cd950332ea5139d64ffee7f1211ea64c5beffa162bb942683fac&#x27;, &#x27;0882c54ba0409f28ab3907831eedab320bf3645fd70888266393704f81998ed57778912ededb54c58efd6fc9f22188566824ae312d4585f87d37339fd87827e6&#x27;, &#x27;9dafe7cee839389cbd5a72ac17befad3228b47192ed3a94a319eef67704c094adfeca2f14a1cea54540e7d69c6033c53fdbe60969cc910b31b1fce8c9d6a9d5b&#x27;, &#x27;627357126622ad1b76354b4f6974120f670baf035e24599e36c9f14527f225e6acb0e00482c3ab7442858070181eb3a7fc4acd8de5e5411aa482b094c6e1a1fa&#x27;, &#x27;a9c7c29b800677ac44427204bc2137f0641465a411a521d3567911ab364c426c7a340ad1dcddb2330667bc78925bbec8bfd47cbf8031496e468f5ff3f9cc8a71&#x27;, &#x27;23429d961d3bcf2e4873379afba581b351441c2d33c37c1fb5e84cdc22045a99bac91b3d8e3c90de3d56d443e439246872ab8fbd4ff42fbbd37509f79ccedd6e&#x27;, &#x27;2847983b8f9492fe88c988d04b8086b94d8f827684e10cf2d4db1f5c65c1a7354c6e15df548df379ea5a56b57de9e36faf36c8d05270dc4bf69577ecbb5c1300&#x27;, &#x27;c684e4714cd002abea6fa5bd23014a152cf358ab848179fdc29f1b79b090b42c550ea43718e3e2c4bea2ece080db41fb9433539cac0b8ac8e419bcdbb6477017&#x27;, &#x27;34e969156c0ff98ccff9dbe2757a365e24e81857937cc3056a1b837d67a5bc0215c99aa15ac8150c6cee089623000104017ac535ef3a7fd10bb46b008e64bf12&#x27;, &#x27;b79275b644dd73661b947fb786054b114fc90bcdf19cdd2a4cc96c426a3581d854619d95c3b9864534f9fe66445336e55c1a79527825706500527392ebac7ba6&#x27;, &#x27;f7302bd4f492be0537536a5327dab593b903346a5e32bf0262f494f11bb3968a736ae1a90abebe7ab600d899b001e8e4704117b862cf7787df29b1b8cda76227&#x27;, &#x27;e7d378b1f273baaaab041d3d81d669a351abe21d5987403fbb7d35f957a82ebcf0ffbbef77a08c1807d6e19d33053a62801f151bb81d0179bdb09fefd45a845d&#x27;, &#x27;8c8dddfe7c2ee295c4aad0f207517cb00a5870c93c38af0e7438510f80b6788f7e863da10ec0650ab661ead1ae799dc63d3f7115c018a1d1961a068cff25ff21&#x27;, &#x27;7382adaeab3aaed04178cf90bcb2750e11498f17dda2e058bbed931e9ff55faaa3fcc5af423ac139fd936fff916c78a5de316e67b5226d804e2590c65ad191c8&#x27;, &#x27;70385b3c8fa2fd47be6963683256ebcbf2eb0a81f76856cb9524d59dcc1f910f98b0c37687857da008c6901fd78a9cf3b8b0ea9d744c8ab3b3d1b70277372572&#x27;, &#x27;13f510e214b5bb7dbb81fadd772835f6fd0f082252ab775ab72c1b62b1573466a39d634f428202dd67bb4cdbb692a2a5dd148a49504d021d4aa5d903fac02cb1&#x27;, &#x27;0910c842616b8b4c7f2ab265172e1d682a89b79f97019473d517b606dd43999e343ad4b08a71b69a1f4ffc8db39f7deb0a3c51c44652b1c63e090d901f43b33d&#x27;, &#x27;7129bd6c31cc1e7f480fa713d9ba5386fdac580593229ca77baf96ea41e87fcd5b4c83693fc4b6b37959fc80391e05b279acad320fbd03e1c332e4cedc86a5b7&#x27;, &#x27;b6b80ce7dfe5a9fe066fce563a486c4a5f07611ab484131faf9381dc794a329390c60b53080d8360903f5759a18a1eca1b265655ef43ca213544c31e99fe0087&#x27;, &#x27;7bfdca43b8d21d48e18dae387ea95c4ba690bff5fe22f3a29637c196a2288fdde98ec73554123dc33c8af567c7b98f9775600a0e34f32eae62655b47a0182171&#x27;, &#x27;b93eb6af65de700306b7a22816a1d461451c694de5ce55464be57cce89e8349f81a6d3fcc52da72c5d14df88bbe5ff683b591788d3edc91006a99ed1171ecce0&#x27;, &#x27;1ab26e7f8a1e8854a73f2904d781f9f551d5b325fea4ec3f7ec45a03fc8d0b087b054f6475c21a473f5b47d6a980539b6a0aaf207bf89b3cc46eaf7fbf63411d&#x27;, &#x27;bea21a265e48c2624ba85137392dde1971325909fdfb97f57397f422cd6a152ef75c99b0634d6863aa4d7b4f07648d10c7ed3eeb210dc86691d0e2b463471ba8&#x27;, &#x27;e49e1b08e4865d8da0a278c049b2826a6b97911adbdaa836fd57f509f96db436327318bbf82c98b8d9f607e99c48db663473e4e941eb6109b174375a157eeb60&#x27;, &#x27;72f00c548fc2539a8914b135b80a37e5137fa267579bcf11b566d4c44ee57defced7d0d3a2ec9923aa2790e80ac61a151b79e7b2dd17accbc7dd66c8e41d7489&#x27;, &#x27;c0d86918879d4ccfa4adf3fbd449c9b26a17b61073221a15d576e9528e0e29fcf3b164020043ac2a5752768ac996fa15e551c36dfd6c1dbf0d24d81d2e5b6724&#x27;, &#x27;ffd6eca8075af0c4fe4f38d4b3950ed76a4cc1474eadbd65b38484138456a98a4f4cc697c2d455d386e432679722f32cc59d1aa5135eb72cb10b5a82380b4e71&#x27;, &#x27;a3407cb209c1a6788ba1ca992a7b6cc04ef1130f92be63b9738dae873f3e407b440788115edd81ef3c2e791e10798c3fd1830ca5b4773523ef246cf13fbd5a5c&#x27;, &#x27;3b1fe148835ebeece99b0df444cb2705e195d5d364fdbaf2fa754797c8f7484461327d471b258f9b0b5dcfb757a08d50b0ac334154fd6d4d0d68c2a846de4163&#x27;, &#x27;cc12da7bed20a53b5af9eebae5a94177f745ed5d48c4690cb462c498019e6a516b52cc9953620c04e12a79b45e99fc8164a79f00268c648801824a690a01b78f&#x27;, &#x27;e4e36894a7323e5fb1dc54366acd4fd3f6d9ec2817bd1c153d3d84ed544893d6f5c8a7fe839acf4880eb8df6c8ced3f2f7d947835a496da7b010bf6c5b04d669&#x27;, &#x27;a365dd19731e2d0ad844856da269d53a895ddcf5195b16f4e858ba4f83d99f2bbc49f7e7f61a431297545a3c9f3b99815a5a9645f83b1ac3acf1ca61481812fd&#x27;, &#x27;0feb0860a5f6f2eaffc35e02a63633335b702e8bb1ef5c24dc82848cf3145149f4cede4352366db459784fa843ba0a20cec648b2674704bfe8facc2eb97a0fc5&#x27;, &#x27;47c15d55e9a7f31ad5566213f8d0bdb6c4082b3dc2506f6d9d55af00fefe41a8c7ebe0255430efc5f6e7f5858fadd8478959afaf23ed57871ff78c676d0a1cd0&#x27;, &#x27;c15d5a156453862bd6d7d3634dbbc711fcbe38e04a71cec69ff936347417fe439343f93a0a0a0d51712ce44fa277861cee82c350341fe00c28448e3fc6956cfa&#x27;, &#x27;42a93a785ff208608b4deeac184a7f882e75c9d45e5c1fec6c4cd08f5efe08c27d5a670676e4c8697ad0813b02fe50f19e7a0bf189716a2796b9804f737d5a98&#x27;, &#x27;33e06326cc15e21e9a7d2f5b45facd397d9ef13315bb792356432fcb63e22ce15f1da0a8db378660ee1b8ce9286f772663f16da0cf6bbce149392d50e24096cc&#x27;, &#x27;1c11c1cbd0b3e468b7671c2ad1030506542935716c27cd0e241bc68144390a615f50af737bc2da9a72872ebae750e962a225d0dff561d879f919d187f95e4878&#x27;, &#x27;d96905497145789b9734797625ede70eafcb8fc5eedbac4278091aba0d7c4b2bfe74e97ef5f966c1a3b408d91a36290a94027677c8b02d62e1a2b6498550c61a&#x27;, &#x27;ab5accec0103e2809ff5a59c8b3ac3d1426441981f8c6413003c4b69494f54d1cc7d6bf352373c2d60f8aa3b0b2236d2ae150b02bea2f5d353e9b3400519be8e&#x27;, &#x27;341cd45d80593cf158aac070433333500633f6bca596ea07b758729f7f1c2c9391a9dfa56bfd6810b2e21b0009fc84e4a309805288ace599b80eabe35feaebc7&#x27;, &#x27;944769dafb279eb7998d136427e894cba7fb2fbc7f13e4137eabfaaec26f0bdc0779c212756e5c0ac849d285a5b6900174d2042759eeb1d3f5b0e49c58176e2c&#x27;, &#x27;2dfaea9976d6d33109c778e28acb0647a01a4abff01df29b35d51b2359cccc75bac8772de117a47c64821566087de13bd8ab16f72e189c7a934b19b56734fee0&#x27;, &#x27;c613ddab5dd81096088f185a1ead16ea0e6d99facd0249535b4327e11bd53fac5fd1b3807fef181a93cc048dbd4387e64c8281ead7bf2a28970739900633b7ad&#x27;]</span></span><br><span class="line"><span class="string">[87, 18, 88, 63, 30, 66, 60, 85, 13, 82, 35, 28, 21, 74, 47, 6, 30, 111, 97, 51, 42, 61, 92, 70, 113, 43, 7, 21, 68, 10, 99, 57, 87, 51, 43, 44, 60, 39, 117, 6, 88, 48, 47, 51, 56, 91, 6, 29, 92, 82]</span></span><br><span class="line"><span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目实现了一个代码很长的椭圆曲线类，不过注意到类中某个函数名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>)</span><br></pre></td></tr></table></figure>
<p>而从其他地方了解过，椭圆曲线有一种基于雅可比坐标的计算，可以增加运算效率。具体可以参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/87490028">椭圆曲线—雅可比坐标 - 知乎 (zhihu.com)</a></p>
<p>那么这些函数应该就是雅可比坐标意义下的点加法和倍乘法的实现，所以可以不用去理解坐标的计算过程，直接把这个ecc_table中的各参数用sage中的标准ECC表示即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc1 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">g1 = ecc1((<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br></pre></td></tr></table></figure>
<p>而可以验证，给出的g点是一个满足阶等于曲线阶的生成元，n也就是曲线的阶，并且是一个素数。把ECC这一层理解清楚之后，就明白其实很长一段代码都是不太需要理解的。</p>
<p>因此我们直接来看题目核心的加密任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">start, bits, k</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">bin</span>(k)[<span class="number">2</span>:][-start-bits:-start],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sk = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">sm2 = TSM2(sk, ecc_table)</span><br><span class="line">start = <span class="number">130</span></span><br><span class="line">bits = <span class="number">7</span></span><br><span class="line">num = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">sigs = []</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    msg = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    k = getrandbits(<span class="number">256</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    leaks=leak(start, bits, k)</span><br><span class="line">    L.append(leaks)</span><br><span class="line">    sigs.append(sm2.sign(msg, k))</span><br><span class="line"></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc = aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(sigs)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure>
<p>可以看到，给出了一个leak函数，它可以泄露一个数k的中间130-136比特，共7比特。然后题目给出了如下加密过程：</p>
<ul>
<li>随机生成一个数sk，并以其作为私钥生成一个TSM2的类对象sm2</li>
<li>进行50次基于ECC的变种签名操作，并给出每一次的临时密钥(nonce)k的leak，以及每一次的签名值(R,S)</li>
<li>用私钥sk作为AES密钥，对flag进行加密，并给出密文</li>
</ul>
<p>那么思路就是从50次签名操作的泄露信息中，还原出私钥sk，并解AES得到flag。因此我们主要关注签名操作：</p>
<ul>
<li>计算kg的横坐标作为x，其中g为给定的生成元，k为该次签名的临时密钥(nonce)</li>
<li>计算</li>
</ul>
<script type="math/tex; mode=display">
R = msg + x \quad (mod\;n)</script><ul>
<li>计算(n是一个素数，所以可以由费马小定理推出下式)</li>
</ul>
<script type="math/tex; mode=display">
d_1 = (sk+1)^{-1} \quad(mod\;n)</script><ul>
<li>计算</li>
</ul>
<script type="math/tex; mode=display">
S = (sk+1)^{-1}(k+R) - R \quad(mod\;n)</script><p>然后将(R,S)作为本次签名值返回，并每次泄漏k的中间7比特。</p>
<p>其实看到比特泄漏就能想到应该是构造HNP求解，那么什么是我们需要的短向量呢？</p>
<p>首先注意到，每一次的临时密钥k可以写成如下形式：</p>
<script type="math/tex; mode=display">
k_i = 2^{137}k_{hi} + 2^{130}k_{leaki} + k_{li}</script><p>也就是把k分成三部分，高位、leak位和低位，其中高位和低位是未知的，其比特数大概为119比特和130比特。而这就是我们构造HNP的关键，<strong>短向量中要有每个临时密钥的高位和低位！</strong>而我们只要能恢复任何一个临时密钥k，我们就可以通过S的签名式，计算出sk的值。</p>
<p>而显然我们需要根据S的这个等式构造格：</p>
<script type="math/tex; mode=display">
S = (sk+1)^{-1}(k+R) - R \quad(mod\;n)</script><p>如何构造呢？我们简单变形一下：</p>
<p>移项，并乘逆元至左端：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(sk+1) = k_i+R_i \quad(mod\;n)</script><p>再移个项，这样做是为了把k置于一端，其他置于另一端：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(sk+1)-R_i = k_i \quad(mod\;n)</script><p>然后我们知道，sk是一个256比特的量，我们是不希望他出现在规约后的结果中的，因此想办法联立两个式子把他消去，这里我们取i=0与i!=0的式子做消除，如下：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(sk+1)-R_0 = k_0 \quad(mod\;n)</script><script type="math/tex; mode=display">
(S_i+R_i)(sk+1)-R_i = k_i \quad(mod\;n)</script><p>上下各自乘上对应系数：</p>
<script type="math/tex; mode=display">
(S_i+R_i)(S_0+R_0)(sk+1)-(S_i+R_i)R_0 = (S_i+R_i)k_0 \quad(mod\;n)</script><script type="math/tex; mode=display">
(S_0+R_0)(S_i+R_i)(sk+1)-(S_0+R_0)R_i = (S_0+R_0)k_i \quad(mod\;n)</script><p>作差：</p>
<script type="math/tex; mode=display">
R_i(S_0+R_0)-(S_i+R_i)R_0 = (S_i+R_i)k_0 - (S_0+R_0)k_i \quad(mod\;n)</script><p>左边是个已知的数字，为了表示方便，我们把这个先写成一个简单形式bi：</p>
<script type="math/tex; mode=display">
b_i = R_i(S_0+R_0)-(S_i+R_i)R_0</script><p>即：</p>
<script type="math/tex; mode=display">
b_i= (S_i+R_i)k_0 - (S_0+R_0)k_i \quad(mod\;n)</script><p>然后为了找到HNP的形式，我们继续移一下项：</p>
<script type="math/tex; mode=display">
(S_0+R_0)k_i = (S_i+R_i)k_0 - b_i \quad(mod\;n)</script><p>此时我们把k展开为三部分形式：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + 2^{130}k_{leaki} + k_{li}) = (S_i+R_i)(2^{137}k_{h0} + 2^{130}k_{leak0} + k_{l0}) - b_i \quad(mod\;n)</script><p>然后由于kleak已知，那么又可以剔出一部分常量：</p>
<script type="math/tex; mode=display">
2^{130}k_{leaki}(S_0+R_0) + (S_0+R_0)(2^{137}k_{hi} + k_{li}) = 2^{130}k_{leak0}(S_i+R_i) + (S_i+R_i)(2^{137}k_{h0} + k_{l0}) - b_i \quad(mod\;n)</script><p>移项：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + k_{li}) =  (S_i+R_i)(2^{137}k_{h0} + k_{l0}) + 2^{130}k_{leak0}(S_i+R_i) - 2^{130}k_{leaki}(S_0+R_0) - b_i \quad(mod\;n)</script><p>然后为了表示方便，更新一下bi：</p>
<script type="math/tex; mode=display">
b_i = 2^{130}k_{leak0}(S_i+R_i) - 2^{130}k_{leaki}(S_0+R_0) - b_i</script><p>那么又有：</p>
<script type="math/tex; mode=display">
(S_0+R_0)(2^{137}k_{hi} + k_{li}) = (S_i+R_i)(2^{137}k_{h0} + k_{l0}) + b_i \quad(mod\;n)</script><p>然后我们把(S0+R0)乘到右边去：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) = (S_i+R_i)(S_0+R_0)^{-1}(2^{137}k_{h0} + k_{l0}) + b_i(S_0+R_0)^{-1} \quad(mod\;n)</script><p>此时，应该可以发现HNP形式了，我们令：</p>
<script type="math/tex; mode=display">
A_i = (S_i+R_i)(S_0+R_0)^{-1}</script><script type="math/tex; mode=display">
B_i = b_i(S_0+R_0)^{-1}</script><p>则有：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) = A_i(2^{137}k_{h0} + k_{l0}) + B_i \quad(mod\;n)</script><p>把模n去掉，写成等式形式：</p>
<script type="math/tex; mode=display">
(2^{137}k_{hi} + k_{li}) + t_in = A_i(2^{137}k_{h0} + k_{l0}) + B_i</script><p>那么我们就可以根据这个等式构造格，请注意我们构造格的目的是想要kh与kl在规约出的向量中，因此构造如下格：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   n  &   & &   &0&&&&&&\\
   &n &  &  &&0&&&&& \\
   &  &...&& &&...&&&&\\
   &  &&n &&&&&&&0  \\

   2^{137}&&&&2^{11}&&&&&&\\
   &2^{137}&&&&2^{11}&&&&&\\
   &&...&&&&...&&&&\\
   &&&2^{137}&&&&2^{11}&&&\\

   -2^{137}A_1&-2^{137}A_2&...&-2^{137}A_{49}&&&&&2^{11}&&\\
   -A_1&-A_2&...&-A_{49}&&&...&&&1&\\
   -B_1&-B_2&...&-B_{49}&&&...&&&&2^{130}\\
  \end{matrix}
  \right)</script><p>这样写可能有点不太清楚，直接上分块矩阵的代码好明白一点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">length = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">O = matrix(ZZ,(length-<span class="number">1</span>),(length-<span class="number">1</span>)+<span class="number">3</span>)</span><br><span class="line">E = diagonal_matrix([<span class="number">2</span>^<span class="number">11</span>]*((length-<span class="number">1</span>)+<span class="number">3</span>))</span><br><span class="line">T1 = diagonal_matrix([n]*((length-<span class="number">1</span>)))</span><br><span class="line">T2 = matrix(ZZ,(length-<span class="number">1</span>)+<span class="number">3</span>,length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    T2[i,i] = <span class="number">2</span>^<span class="number">137</span></span><br><span class="line">    T2[-<span class="number">1</span>,i] = -B[i]</span><br><span class="line">    T2[-<span class="number">2</span>,i] = -A[i]</span><br><span class="line">    T2[-<span class="number">3</span>,i] = -A[i] * <span class="number">2</span>^<span class="number">137</span></span><br><span class="line"></span><br><span class="line">L = block_matrix(ZZ,[[T1,O],[T2,E]])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">130</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">2</span>^<span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>把刚才的格记为L，对该格有如下线性关系：</p>
<script type="math/tex; mode=display">
(t_1,t_2,...,t_{49},k_{h1},k_{h2},...k_{h49},k_{h0},k_{l0},1)L = (k_{l1},k_{l2},...,k_{49},2^{11}k_{h1},2^{11}k_{h2},...2^{11}k_{h49},2^{11}k_{h0},k_{l0},2^{130})</script><p>如此一来规约出的向量数量级相当，均为2^130比特左右，因此对L进行规约有机会找到这个向量，从而恢复k，进而解密出sk。</p>
<p>事实上，采用BKZ算法，该向量会出现在每项均非0的第一行，问题得解</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc1 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">g1 = ecc1((<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">sigs = [<span class="string">&#x27;1de6f33a8366acbdd0b87ec7beb59e429936b43bae9b8ee2538d2b97d6640c70143fa04e7f1880d22b0e9cbce938edd880d69fc4ed9a6315abd905880a8d38f7&#x27;</span>, <span class="string">&#x27;9d5f8a16fe8d951cbab0a6dca86427286ca389aca6497f20ca3421fa0aa27f4ddf2db6c58229182eaccca41bfebf56961ff1f683ba94b81137c41f61c98c1368&#x27;</span>, <span class="string">&#x27;4d20e1aa4e4f6a4948158fabbdadec3c4d6049b6439981efcb70900d954d0a8f18bce67831d426c12726c321e6eb69e8708739fc74bfde6ad601433bcd896ca7&#x27;</span>, <span class="string">&#x27;e5358c986a12ec11bcd495e8822c5a71b2545dc11ce09521edaa47c11b739b12bbe76ca89bd08beb969355dec56dfcdd6cff121bb61eaea148d25e9a6e428145&#x27;</span>, <span class="string">&#x27;fb06d41eafbcc77d464fe41ca356641cbb92289d28b0ff37caad95619c34557969acf9f615214f3ecf6c15943fc63470da0785687ae535045145d5e161a69210&#x27;</span>, <span class="string">&#x27;2e97f02e82642c033af0fc9686788c1acd8841b65228fab3e66f5328e790d702edadb13e99ed1d411482cd913ec6730803e6fcff29206d9e1fc1b68e1f631e25&#x27;</span>, <span class="string">&#x27;4f1ffd080380e945b24596135e5772058ee8adc26272ed3147f0701063b4b9f435e5ac679ef2cd950332ea5139d64ffee7f1211ea64c5beffa162bb942683fac&#x27;</span>, <span class="string">&#x27;0882c54ba0409f28ab3907831eedab320bf3645fd70888266393704f81998ed57778912ededb54c58efd6fc9f22188566824ae312d4585f87d37339fd87827e6&#x27;</span>, <span class="string">&#x27;9dafe7cee839389cbd5a72ac17befad3228b47192ed3a94a319eef67704c094adfeca2f14a1cea54540e7d69c6033c53fdbe60969cc910b31b1fce8c9d6a9d5b&#x27;</span>, <span class="string">&#x27;627357126622ad1b76354b4f6974120f670baf035e24599e36c9f14527f225e6acb0e00482c3ab7442858070181eb3a7fc4acd8de5e5411aa482b094c6e1a1fa&#x27;</span>, <span class="string">&#x27;a9c7c29b800677ac44427204bc2137f0641465a411a521d3567911ab364c426c7a340ad1dcddb2330667bc78925bbec8bfd47cbf8031496e468f5ff3f9cc8a71&#x27;</span>, <span class="string">&#x27;23429d961d3bcf2e4873379afba581b351441c2d33c37c1fb5e84cdc22045a99bac91b3d8e3c90de3d56d443e439246872ab8fbd4ff42fbbd37509f79ccedd6e&#x27;</span>, <span class="string">&#x27;2847983b8f9492fe88c988d04b8086b94d8f827684e10cf2d4db1f5c65c1a7354c6e15df548df379ea5a56b57de9e36faf36c8d05270dc4bf69577ecbb5c1300&#x27;</span>, <span class="string">&#x27;c684e4714cd002abea6fa5bd23014a152cf358ab848179fdc29f1b79b090b42c550ea43718e3e2c4bea2ece080db41fb9433539cac0b8ac8e419bcdbb6477017&#x27;</span>, <span class="string">&#x27;34e969156c0ff98ccff9dbe2757a365e24e81857937cc3056a1b837d67a5bc0215c99aa15ac8150c6cee089623000104017ac535ef3a7fd10bb46b008e64bf12&#x27;</span>, <span class="string">&#x27;b79275b644dd73661b947fb786054b114fc90bcdf19cdd2a4cc96c426a3581d854619d95c3b9864534f9fe66445336e55c1a79527825706500527392ebac7ba6&#x27;</span>, <span class="string">&#x27;f7302bd4f492be0537536a5327dab593b903346a5e32bf0262f494f11bb3968a736ae1a90abebe7ab600d899b001e8e4704117b862cf7787df29b1b8cda76227&#x27;</span>, <span class="string">&#x27;e7d378b1f273baaaab041d3d81d669a351abe21d5987403fbb7d35f957a82ebcf0ffbbef77a08c1807d6e19d33053a62801f151bb81d0179bdb09fefd45a845d&#x27;</span>, <span class="string">&#x27;8c8dddfe7c2ee295c4aad0f207517cb00a5870c93c38af0e7438510f80b6788f7e863da10ec0650ab661ead1ae799dc63d3f7115c018a1d1961a068cff25ff21&#x27;</span>, <span class="string">&#x27;7382adaeab3aaed04178cf90bcb2750e11498f17dda2e058bbed931e9ff55faaa3fcc5af423ac139fd936fff916c78a5de316e67b5226d804e2590c65ad191c8&#x27;</span>, <span class="string">&#x27;70385b3c8fa2fd47be6963683256ebcbf2eb0a81f76856cb9524d59dcc1f910f98b0c37687857da008c6901fd78a9cf3b8b0ea9d744c8ab3b3d1b70277372572&#x27;</span>, <span class="string">&#x27;13f510e214b5bb7dbb81fadd772835f6fd0f082252ab775ab72c1b62b1573466a39d634f428202dd67bb4cdbb692a2a5dd148a49504d021d4aa5d903fac02cb1&#x27;</span>, <span class="string">&#x27;0910c842616b8b4c7f2ab265172e1d682a89b79f97019473d517b606dd43999e343ad4b08a71b69a1f4ffc8db39f7deb0a3c51c44652b1c63e090d901f43b33d&#x27;</span>, <span class="string">&#x27;7129bd6c31cc1e7f480fa713d9ba5386fdac580593229ca77baf96ea41e87fcd5b4c83693fc4b6b37959fc80391e05b279acad320fbd03e1c332e4cedc86a5b7&#x27;</span>, <span class="string">&#x27;b6b80ce7dfe5a9fe066fce563a486c4a5f07611ab484131faf9381dc794a329390c60b53080d8360903f5759a18a1eca1b265655ef43ca213544c31e99fe0087&#x27;</span>, <span class="string">&#x27;7bfdca43b8d21d48e18dae387ea95c4ba690bff5fe22f3a29637c196a2288fdde98ec73554123dc33c8af567c7b98f9775600a0e34f32eae62655b47a0182171&#x27;</span>, <span class="string">&#x27;b93eb6af65de700306b7a22816a1d461451c694de5ce55464be57cce89e8349f81a6d3fcc52da72c5d14df88bbe5ff683b591788d3edc91006a99ed1171ecce0&#x27;</span>, <span class="string">&#x27;1ab26e7f8a1e8854a73f2904d781f9f551d5b325fea4ec3f7ec45a03fc8d0b087b054f6475c21a473f5b47d6a980539b6a0aaf207bf89b3cc46eaf7fbf63411d&#x27;</span>, <span class="string">&#x27;bea21a265e48c2624ba85137392dde1971325909fdfb97f57397f422cd6a152ef75c99b0634d6863aa4d7b4f07648d10c7ed3eeb210dc86691d0e2b463471ba8&#x27;</span>, <span class="string">&#x27;e49e1b08e4865d8da0a278c049b2826a6b97911adbdaa836fd57f509f96db436327318bbf82c98b8d9f607e99c48db663473e4e941eb6109b174375a157eeb60&#x27;</span>, <span class="string">&#x27;72f00c548fc2539a8914b135b80a37e5137fa267579bcf11b566d4c44ee57defced7d0d3a2ec9923aa2790e80ac61a151b79e7b2dd17accbc7dd66c8e41d7489&#x27;</span>, <span class="string">&#x27;c0d86918879d4ccfa4adf3fbd449c9b26a17b61073221a15d576e9528e0e29fcf3b164020043ac2a5752768ac996fa15e551c36dfd6c1dbf0d24d81d2e5b6724&#x27;</span>, <span class="string">&#x27;ffd6eca8075af0c4fe4f38d4b3950ed76a4cc1474eadbd65b38484138456a98a4f4cc697c2d455d386e432679722f32cc59d1aa5135eb72cb10b5a82380b4e71&#x27;</span>, <span class="string">&#x27;a3407cb209c1a6788ba1ca992a7b6cc04ef1130f92be63b9738dae873f3e407b440788115edd81ef3c2e791e10798c3fd1830ca5b4773523ef246cf13fbd5a5c&#x27;</span>, <span class="string">&#x27;3b1fe148835ebeece99b0df444cb2705e195d5d364fdbaf2fa754797c8f7484461327d471b258f9b0b5dcfb757a08d50b0ac334154fd6d4d0d68c2a846de4163&#x27;</span>, <span class="string">&#x27;cc12da7bed20a53b5af9eebae5a94177f745ed5d48c4690cb462c498019e6a516b52cc9953620c04e12a79b45e99fc8164a79f00268c648801824a690a01b78f&#x27;</span>, <span class="string">&#x27;e4e36894a7323e5fb1dc54366acd4fd3f6d9ec2817bd1c153d3d84ed544893d6f5c8a7fe839acf4880eb8df6c8ced3f2f7d947835a496da7b010bf6c5b04d669&#x27;</span>, <span class="string">&#x27;a365dd19731e2d0ad844856da269d53a895ddcf5195b16f4e858ba4f83d99f2bbc49f7e7f61a431297545a3c9f3b99815a5a9645f83b1ac3acf1ca61481812fd&#x27;</span>, <span class="string">&#x27;0feb0860a5f6f2eaffc35e02a63633335b702e8bb1ef5c24dc82848cf3145149f4cede4352366db459784fa843ba0a20cec648b2674704bfe8facc2eb97a0fc5&#x27;</span>, <span class="string">&#x27;47c15d55e9a7f31ad5566213f8d0bdb6c4082b3dc2506f6d9d55af00fefe41a8c7ebe0255430efc5f6e7f5858fadd8478959afaf23ed57871ff78c676d0a1cd0&#x27;</span>, <span class="string">&#x27;c15d5a156453862bd6d7d3634dbbc711fcbe38e04a71cec69ff936347417fe439343f93a0a0a0d51712ce44fa277861cee82c350341fe00c28448e3fc6956cfa&#x27;</span>, <span class="string">&#x27;42a93a785ff208608b4deeac184a7f882e75c9d45e5c1fec6c4cd08f5efe08c27d5a670676e4c8697ad0813b02fe50f19e7a0bf189716a2796b9804f737d5a98&#x27;</span>, <span class="string">&#x27;33e06326cc15e21e9a7d2f5b45facd397d9ef13315bb792356432fcb63e22ce15f1da0a8db378660ee1b8ce9286f772663f16da0cf6bbce149392d50e24096cc&#x27;</span>, <span class="string">&#x27;1c11c1cbd0b3e468b7671c2ad1030506542935716c27cd0e241bc68144390a615f50af737bc2da9a72872ebae750e962a225d0dff561d879f919d187f95e4878&#x27;</span>, <span class="string">&#x27;d96905497145789b9734797625ede70eafcb8fc5eedbac4278091aba0d7c4b2bfe74e97ef5f966c1a3b408d91a36290a94027677c8b02d62e1a2b6498550c61a&#x27;</span>, <span class="string">&#x27;ab5accec0103e2809ff5a59c8b3ac3d1426441981f8c6413003c4b69494f54d1cc7d6bf352373c2d60f8aa3b0b2236d2ae150b02bea2f5d353e9b3400519be8e&#x27;</span>, <span class="string">&#x27;341cd45d80593cf158aac070433333500633f6bca596ea07b758729f7f1c2c9391a9dfa56bfd6810b2e21b0009fc84e4a309805288ace599b80eabe35feaebc7&#x27;</span>, <span class="string">&#x27;944769dafb279eb7998d136427e894cba7fb2fbc7f13e4137eabfaaec26f0bdc0779c212756e5c0ac849d285a5b6900174d2042759eeb1d3f5b0e49c58176e2c&#x27;</span>, <span class="string">&#x27;2dfaea9976d6d33109c778e28acb0647a01a4abff01df29b35d51b2359cccc75bac8772de117a47c64821566087de13bd8ab16f72e189c7a934b19b56734fee0&#x27;</span>, <span class="string">&#x27;c613ddab5dd81096088f185a1ead16ea0e6d99facd0249535b4327e11bd53fac5fd1b3807fef181a93cc048dbd4387e64c8281ead7bf2a28970739900633b7ad&#x27;</span>]</span><br><span class="line">leak = [<span class="number">87</span>, <span class="number">18</span>, <span class="number">88</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">85</span>, <span class="number">13</span>, <span class="number">82</span>, <span class="number">35</span>, <span class="number">28</span>, <span class="number">21</span>, <span class="number">74</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">61</span>, <span class="number">92</span>, <span class="number">70</span>, <span class="number">113</span>, <span class="number">43</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">99</span>, <span class="number">57</span>, <span class="number">87</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">39</span>, <span class="number">117</span>, <span class="number">6</span>, <span class="number">88</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">91</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">92</span>, <span class="number">82</span>]</span><br><span class="line">enc = <span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<span class="number">16</span>)</span><br><span class="line">R = []</span><br><span class="line">S = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sigs:</span><br><span class="line">    R.append(<span class="built_in">int</span>(i[:<span class="number">64</span>],<span class="number">16</span>))</span><br><span class="line">    S.append(<span class="built_in">int</span>(i[<span class="number">64</span>:],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">length = <span class="number">50</span></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = inverse((S[<span class="number">0</span>]+R[<span class="number">0</span>]),n) * (S[i]+R[i])</span><br><span class="line">    temp = temp % n</span><br><span class="line">    A.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">    temp = R[<span class="number">0</span>]*(S[i]+R[i]) - R[i]*(S[<span class="number">0</span>]+R[<span class="number">0</span>]) + <span class="number">2</span>^<span class="number">130</span>*leak[<span class="number">0</span>]*(S[i]+R[i])  - <span class="number">2</span>^<span class="number">130</span>*leak[i]*(S[<span class="number">0</span>]+R[<span class="number">0</span>])</span><br><span class="line">    temp = temp * inverse((S[<span class="number">0</span>]+R[<span class="number">0</span>]),n) % n</span><br><span class="line">    B.append(temp)</span><br><span class="line"></span><br><span class="line">O = matrix(ZZ,(length-<span class="number">1</span>),(length-<span class="number">1</span>)+<span class="number">3</span>)</span><br><span class="line">E = diagonal_matrix([<span class="number">2</span>^<span class="number">11</span>]*((length-<span class="number">1</span>)+<span class="number">3</span>))</span><br><span class="line">T1 = diagonal_matrix([n]*((length-<span class="number">1</span>)))</span><br><span class="line">T2 = matrix(ZZ,(length-<span class="number">1</span>)+<span class="number">3</span>,length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    T2[i,i] = <span class="number">2</span>^<span class="number">137</span></span><br><span class="line">    T2[-<span class="number">1</span>,i] = -B[i]</span><br><span class="line">    T2[-<span class="number">2</span>,i] = -A[i]</span><br><span class="line">    T2[-<span class="number">3</span>,i] = -A[i] * <span class="number">2</span>^<span class="number">137</span></span><br><span class="line"></span><br><span class="line">L = block_matrix(ZZ,[[T1,O],[T2,E]])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">130</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">2</span>^<span class="number">11</span></span><br><span class="line"></span><br><span class="line">temp = L.BKZ()</span><br><span class="line"><span class="comment">#print(temp)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#从上面的格中找到满足要求的一行</span></span><br><span class="line">k0h = <span class="number">127539877108597124515923590046076573696</span> // (<span class="number">2</span>**<span class="number">11</span>)    </span><br><span class="line">k0l = <span class="number">62747361493076885745985101978595693282</span></span><br><span class="line">k0leak = <span class="number">87</span></span><br><span class="line"></span><br><span class="line">k0 = k0h*<span class="number">2</span>**<span class="number">137</span> + k0leak*<span class="number">2</span>**<span class="number">130</span> + k0l</span><br><span class="line">S0 = <span class="number">9158674732422433584753600528499586749789902603207175171281211487385948076279</span></span><br><span class="line">R0 = <span class="number">13525126135691078619994352845806011492310052282990714228513050055938589068400</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sk = ((k0+R0)*inverse(S0+R0,n) - <span class="number">1</span>) % n</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&#x27;s\xda\xed\r\x8e/\xde\xa4\x99\x93\xcdCBB\x1c\xae\xcbB\x9f\xdd\xd4\x96\x9f\xa5O\xbf\x16\xa4\xecL\xe7J\x97\x1a\xdf\xa1\xa1\x92i,\xdd\x8a\xb6\xcfp&#125;ho&#x27;</span></span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">dec = aes.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;cfe090d0-2888-a84d-ac6e-0e6aef017744&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="e2D1p"><a href="#e2D1p" class="headerlink" title="e2D1p"></a>e2D1p</h3><p>这一题我是跟着maple的wp复现的，原wp指路：</p>
<p><a href="https://blog.maple3142.net/2023/10/23/n1ctf-2023-writeups/#e2d1p">N1CTF 2023 Writeups | 廢文集中區 (maple3142.net)</a></p>
<p>主要详细记录一下自己的思考。</p>
<p>题目来源：N1CTF 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">FLAG = os.environ.get(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">b&#x27;n1ctf&#123;XXXXFAKE_FLAGXXXX&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> FLAG[:<span class="number">6</span>] == <span class="string">b&#x27;n1ctf&#123;&#x27;</span> <span class="keyword">and</span> FLAG[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">FLAG = FLAG[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(nbits)</span><br><span class="line">        <span class="keyword">if</span> isPrime(<span class="number">2</span>*q+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="number">0x10001</span>, q, <span class="number">2</span>*q+<span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>*q+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, message, mask</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">0x10001</span>, message^mask, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = keygen(<span class="number">512</span>)</span><br><span class="line">flag = bytes_to_long(FLAG)</span><br><span class="line">messages = [getRandomNBitInteger(flag.bit_length()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>)]</span><br><span class="line">enc = [encrypt(p, message, flag) <span class="keyword">for</span> message <span class="keyword">in</span> messages]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;message = <span class="subst">&#123;messages&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>题目内容比较简短，其加密流程如下：</p>
<ul>
<li>生成一个素数p，满足p=2q+1，且q是一个512比特的大素数</li>
<li>生成200个与flag同比特(159比特)的message，作为之后加密的mask</li>
<li>用这200个message分别进行encrypt加密，并给出这200个message与对应密文，要求还原flag</li>
</ul>
<p>其中，encrypt函数加密如下：</p>
<script type="math/tex; mode=display">
e = 65537</script><script type="math/tex; mode=display">
c_i \equiv e^{m_i \oplus flag} \quad(mod\;p)</script><h4 id="一些预备"><a href="#一些预备" class="headerlink" title="一些预备"></a>一些预备</h4><p>首先肯定要恢复p，而如果指数上没有异或这个未知的flag的话，那么问题变成已知多组如下形式的等式，恢复模数p：</p>
<script type="math/tex; mode=display">
c_i \equiv e^{m_i} \quad(mod\;p)</script><p>这个问题其实就是NSS二周年的一道题，具体分析过程可以看我的这篇：</p>
<p><a href="https://tangcuxiaojikuai.xyz/post/39588.html">NSSCTF-2nd-wp-crypto | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)</a></p>
<p>不过这里我仍然简单写一下构造格的思路，我们期望找到一组a，满足：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{20}{a_im_i} = 0</script><p>这样我们就有：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{20}{c_i^{a_i}} \equiv \prod_{i=1}^{20}{e^{a_im_i}} \equiv e^{\sum_{i=1}^{20}{a_im_i}} \equiv e^0 \equiv 1 \quad(mod\;p)</script><p>如果我们能找到多组满足条件的较小的a，我们就能在较短时间内算出多组整数域上的下式：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{20}{c_i^{a_i}} - 1</script><p>然后求解gcd即可恢复模数。而为了找到这样的多组满足条件的较小的a，我们构造了如下格：</p>
<script type="math/tex; mode=display">
\left(\begin{matrix}
Ke1 & 1 & 0 & 0 ... & 0\\
Ke2 & 0 & 1 & 0 ... & 0\\
Ke3 & 0 & 0 & 1 ... & 0\\
...\\
Ke20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right)</script><p>他满足下面的关系式：</p>
<script type="math/tex; mode=display">
\left(\begin{matrix}
a1 & a2 & a3 ... & a20
\end{matrix}\right)

*
\left(\begin{matrix}
Ke1 & 1 & 0 & 0 ... & 0\\
Ke2 & 0 & 1 & 0 ... & 0\\
Ke3 & 0 & 0 & 1 ... & 0\\
...\\
Ke20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right)

=

\left(\begin{matrix}
0 & a1 & a2 ... & a20
\end{matrix}\right)</script><p>所以我们对格进行规约，取规约出的前几行短向量作为我们需要的a，然后按上述方法计算出多个kp并求解gcd即可恢复p。</p>
<h4 id="恢复p"><a href="#恢复p" class="headerlink" title="恢复p"></a>恢复p</h4><p>回到本题，这个题目在指数上异或了未知的flag：</p>
<script type="math/tex; mode=display">
c_i \equiv e^{m_i \oplus flag} \quad(mod\;p)</script><p>那么我们就没法知道每一组密文对应的幂次具体是多少，所以上面问题中的格也就无从构造。但问题依然是相似的，我们仍然是想找到多组满足条件的a，去求解gcd从而恢复p。那么就要想办法将问题转化成较为简单的形式。</p>
<p>首先要理解一点，指数上的异或究竟指什么？我们不妨拆开这个问题，先只关注异或：</p>
<script type="math/tex; mode=display">
t_i = m_i \oplus flag</script><p>我们把mi拆成159个二进制位，记作mij(j从0到158)，同理flag的159个比特位也记作flagj，那么其实异或就是对flag进行了如下的改变得到ti：</p>
<script type="math/tex; mode=display">
t_i = flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}</script><p>一眼看上去是有点复杂，但其实他表达的意思很简单，我们取mi的任意一个二进制位mij做如下说明：</p>
<ul>
<li>mij有0、1两个取值。取0，说明这一位不发生翻转，也就是对ti没有影响；取1，说明这一位发生了翻转</li>
<li>而发生翻转又有两种情况：0-&gt;1和1-&gt;0，这要视flagj的取值而定，flagj同样有0、1两种取值。因此可以以(-1)^(flagj)来表示翻转情况</li>
<li>2^j表示的是翻转的具体量</li>
</ul>
<p>举个简单的例子：假设flag二进制为101，message为011，那么异或其实也就是：</p>
<ul>
<li>最后一位1-&gt;0</li>
<li>倒数第二位0-&gt;1</li>
<li>最高位不翻转</li>
</ul>
<p>那么这样计算出ti其实就等于：</p>
<script type="math/tex; mode=display">
t_i = flag + 2^1 -2^0</script><p>这就是说，我们可以把异或转化为一种加法形式表示，那么我们再把这种形式放回指数上，又会如何呢？</p>
<script type="math/tex; mode=display">
c_i \equiv e^{m_i \oplus flag} \equiv e^{flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}} \quad(mod\;p)</script><p>也就可以写成：</p>
<script type="math/tex; mode=display">
c_i  \equiv e^{flag }*e^{\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}} \quad(mod\;p)</script><p>而正如刚才讲的预备题目中所说，我们要恢复模数p，就要找到多组满足如下条件的a，然后求解gcd：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{200}{c_i^{a_i}} \equiv 1 \quad(mod\;p)</script><p>代入到本题中的式子，就会有如下形式：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{200}{c_i^{a_i}} \equiv \prod_{i=1}^{200}e^{a_i(flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}})} \quad(mod\;p)</script><p>又因为右边底数部分e是相同的，因此累乘可以变成指数上的累加：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{200}{c_i^{a_i}} \equiv e^{\sum_{i=1}^{200}a_i(flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}})} \quad(mod\;p)</script><p>所以我们其实希望有：</p>
<script type="math/tex; mode=display">
e^{\sum_{i=1}^{200}a_i(flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}})} \equiv 1 \quad(mod\;p)</script><p>那么其实也就是有：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_i(flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}) = 0</script><p>所以现在我们的目标就是靠这个式子，去找到若干组较小的a满足上式，然后就可以求gcd得到p了。而想要达到这个目的其实也很容易，注意到这个等式其实由可以拆成两部分组成：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_iflag + \sum_{i=1}^{200}a_i\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}} = 0</script><p>那么我们不妨使两部分均为0，那么其和也肯定为0，也就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_iflag = 0</script><script type="math/tex; mode=display">
\sum_{i=1}^{200}a_i\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}} = 0</script><p>而如何使两部分分别为0呢？首先，对于第一部分，显而易见只要使得：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_i = 0</script><p>也就是ai的和为0就可以。而对于第二部分，列式观察就会发现，我们也只需要满足下式即可：</p>
<script type="math/tex; mode=display">
\forall j\;,\; \sum_{i=1}^{200}a_im_{ij} = 0</script><p>由这两个关系我们可以构造如下矩阵：</p>
<script type="math/tex; mode=display">
L = \left(\begin{matrix}
m_{0,0} & m_{0,1} & ... & m_{0,158}& 1\\
m_{1,0} & m_{1,1} & ... & m_{1,158}& 1\\
&&...\\
m_{199,0} & m_{199,1} & ... & m_{199,158} & 1\\
\end{matrix}\right)</script><p>这个矩阵具有如下线性关系：</p>
<script type="math/tex; mode=display">
(a_0,a_1,...,a_{200})
\left(\begin{matrix}
m_{0,0} & m_{0,1} & ... & m_{0,158}& 1\\
m_{1,0} & m_{1,1} & ... & m_{1,158}& 1\\
&&...\\
m_{199,0} & m_{199,1} & ... & m_{199,158} & 1\\
\end{matrix}\right)
=
(0,0,...,0)</script><p>其中，L的最后一列是满足刚才写的第一部分，而L的前面的列是满足第二部分。</p>
<p>这样一来，我们能够看出，我们想要的满足条件的a其实就是L的左核空间中的向量，而为了让他更小，我们对左核空间的基向量组进行规约即可。</p>
<p>规约后我们取几组a按照上面所说的办法就能得到p。</p>
<h4 id="求解flag"><a href="#求解flag" class="headerlink" title="求解flag"></a>求解flag</h4><p>有了p之后，我们仍然要继续想办法用已知的如下式子恢复flag：</p>
<script type="math/tex; mode=display">
c_i \equiv e^{m_i \oplus flag} \quad(mod\;p)</script><p>显然如果我们能求解DLP得到指数部分的话，就能再异或mi得到flag。不过由于题目中，p由2q+1的方式生成，所以p-1肯定不光滑，并且也没有别的好的方式直接求解这个离散对数。</p>
<blockquote>
<p>不过之前翻春哥文章看到过一篇，用调cado求解这种p-1只有一个大素因子的离散对数问题：</p>
<p><a href="https://zhuanlan.zhihu.com/p/428567414">[调包侠] 利用cado-nfs计算离散对数的调包记录 暨 第四届“强网”拟态防御国际精英挑战赛 Crypto - speedrun writeup - 知乎 (zhihu.com)</a></p>
<p>不过这个要使用好像挺麻烦，不知道在这里是否可行</p>
</blockquote>
<p>回到正题，既然直接求解这个离散对数问题是难解的，那么就要另寻办法。这个时候再观察我们刚才的式子：</p>
<script type="math/tex; mode=display">
c_i  \equiv e^{flag }*e^{\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}} \quad(mod\;p)</script><p>里面的这一部分是由flag的每一个二进制比特计算得到的：</p>
<script type="math/tex; mode=display">
e^{\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}}}</script><p>那么我们是否可以利用这个式子逐比特恢复flag？首先仍然注意刚才的矩阵：</p>
<script type="math/tex; mode=display">
L = \left(\begin{matrix}
m_{0,0} & m_{0,1} & ... & m_{0,158}& 1\\
m_{1,0} & m_{1,1} & ... & m_{1,158}& 1\\
&&...\\
m_{199,0} & m_{199,1} & ... & m_{199,158} & 1\\
\end{matrix}\right)</script><p>刚才我们求解这个矩阵的左核空间并规约，求gcd并去除小因子得到了p。之所以能这么做，是基于我们拆出了下面这个式子，并令两部分分别为0的缘故：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_iflag + \sum_{i=1}^{200}a_i\sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}} = 0</script><p>这个时候我们找到的ai满足：</p>
<script type="math/tex; mode=display">
(a_0,a_1,...,a_{200})
L
=
(0,0,...,0)</script><p>而如果我们改变右边的解为：</p>
<script type="math/tex; mode=display">
(0,0,...,1)</script><p>这时候如果我们能解矩阵方程得到a，那么向量a应该满足：</p>
<script type="math/tex; mode=display">
(a_0,a_1,...,a_{200})
L
=
(0,0,...,1)</script><p>也就是说，我们分割出的两部分和，此时第二部分仍为0，而第一部分变成了1，也就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{200}a_iflag = 1*flag = flag</script><p>此时我们再求c的累乘，得到的就应该是e的flag次方。但是我们好像仍然没有办法求解离散对数得到flag，并且更绝望的是，这个矩阵方程无解。</p>
<p>然后看maple的思路，发现大致相同，但是他发现如果target向量是如下形式的话都有解：</p>
<script type="math/tex; mode=display">
(1,0,0,0,...,1)</script><script type="math/tex; mode=display">
(1,1,0,0,...,1)</script><script type="math/tex; mode=display">
(1,1,1,0,...,1)</script><p>而这其实就给我们逐比特还原flag带来了机会，比如我们第一次以第一个向量作为目标向量求解矩阵方程，会得到一个向量a，然后我们用这个向量a进行累乘，得到的结果应该是：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{200}{c_i^{a_i}} 
\equiv 
e^{\sum_{i=1}^{200}a_i(flag + \sum_{j=0}^{158}{2^jm_{ij}(-1)^{flag_j}})}
\equiv
e^{flag}e^{2^{k}(-1)^{flag_k}} \quad(mod\;p)</script><p>k在这里是最高比特位，flagk也就是flag的最高比特位，也就是1。然后我们把这次累乘的结果记作y1：</p>
<script type="math/tex; mode=display">
y_1 = e^{flag}e^{2^{k}(-1)^{flag_k}} \quad(mod\;p)</script><p>然后，我们选择第二个向量求解矩阵方程，并且同样用结果进行累乘得到第二组结果y2：</p>
<script type="math/tex; mode=display">
y_2 = \prod_{i=1}^{200}{c_i^{a_i}}  
\equiv 
e^{flag}e^{2^{k}(-1)^{flag_k}}e^{2^{k-1}(-1)^{flag_{k-1}}}\quad(mod\;p)</script><p>可以发现y1、y2具有如下关系：</p>
<script type="math/tex; mode=display">
y_2 = y_1e^{2^{k-1}(-1)^{flag_{k-1}}} \quad(mod\;p)</script><p>然后你会发现，由于flag的每一比特只有两种取值，因此这个部分也只有两种取值：</p>
<script type="math/tex; mode=display">
e^{2^{k-1}(-1)^{flag_{k-1}}}</script><p>我们算出这两种取值，然后分别与y1相乘看哪个等于y2，就得到了flag的这一比特位。往后也同理，由此我们就可以逐比特还原flag的所有比特位了。</p>
<p>这里有一点需要注意，虽然解矩阵方程的矩阵和目标向量都定义在ZZ域上，但是实际解出来并不是整数，所以计算累乘时需要额外处理一下。我这里就直接用了maple的field_exp函数。并且由于最后一步模的计算较多我就用了powmod加快，虽然好像效果并不是非常明显。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"><span class="keyword">from</span> output <span class="keyword">import</span> message,enc</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 recover p</span></span><br><span class="line">L = Matrix(ZZ,<span class="number">200</span>,<span class="number">160</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    temp = <span class="built_in">bin</span>(message[i])[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">159</span>):</span><br><span class="line">        L[i,j] = <span class="built_in">int</span>(temp[j])</span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">L_kernel = L.left_kernel().basis()</span><br><span class="line">res = Matrix(ZZ,L_kernel).LLL()</span><br><span class="line"></span><br><span class="line">kp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    left = <span class="number">1</span></span><br><span class="line">    right = <span class="number">1</span></span><br><span class="line">    a = res[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span>(a[j] &gt; <span class="number">0</span>):</span><br><span class="line">            left *= <span class="built_in">pow</span>(enc[j],a[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right *= <span class="built_in">pow</span>(enc[j],-a[j])</span><br><span class="line">    kp.append(left-right)</span><br><span class="line">p = GCD(kp[<span class="number">0</span>],kp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">while</span>(p % i == <span class="number">0</span>):</span><br><span class="line">        p //= i</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#25070940894294854944213724808057610995878580501834029791436842569011975159898869595617649716256078890953233822913946718277574163417715224718477846001735447</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 Get flag</span></span><br><span class="line">L = Matrix(ZZ,<span class="number">200</span>,<span class="number">160</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    temp = <span class="built_in">bin</span>(message[i])[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">159</span>):</span><br><span class="line">        L[i,j] = <span class="built_in">int</span>(temp[j])</span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">field_exp</span>(<span class="params">el, e</span>):</span><br><span class="line">    a, b = e.numerator(), e.denominator()</span><br><span class="line">    el **= a</span><br><span class="line">    q = el.parent().characteristic() // <span class="number">2</span></span><br><span class="line">    d = inverse(b, q)</span><br><span class="line">    <span class="keyword">return</span> el**d</span><br><span class="line"></span><br><span class="line">y1 = <span class="number">0</span></span><br><span class="line">y2 = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">159</span>):</span><br><span class="line">    target = vector(ZZ,[<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>)] + [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">158</span>-i)] + [<span class="number">1</span>])</span><br><span class="line">    s = L.solve_left(target)</span><br><span class="line">    F = GF(p)</span><br><span class="line">    c = product([field_exp(F(y), z) <span class="keyword">for</span> y, z <span class="keyword">in</span> <span class="built_in">zip</span>(enc, s)])</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>):</span><br><span class="line">        y1 = c</span><br><span class="line">        flag += <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y2 = c</span><br><span class="line">    temp = powmod(<span class="number">65537</span>,<span class="number">2</span>**(<span class="number">158</span>-i),p)</span><br><span class="line">    <span class="keyword">if</span>(temp*y1 % p == y2):</span><br><span class="line">        flag += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="string">&quot;1&quot;</span></span><br><span class="line">    y1 = c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#n1ctf&#123;30o0_ezzz_dLLLp%$#@!&#125;</span></span><br></pre></td></tr></table></figure>
<p>总的来说这题对我来说难度还是很大，路还很长。</p>
<p><br></p>
<p><br></p>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits, choices</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genX</span>(<span class="params">rho, eta, gam, p</span>):</span><br><span class="line">    <span class="keyword">return</span> p * getrandbits(gam-eta) + getrandbits(rho)</span><br><span class="line"></span><br><span class="line">rho = <span class="number">12</span></span><br><span class="line">eta = <span class="number">256</span></span><br><span class="line">gamma = <span class="number">1000</span></span><br><span class="line">x = getPrime(<span class="number">256</span>)</span><br><span class="line">X = genX(rho, eta, gamma, x)</span><br><span class="line">p = getPrime(<span class="built_in">int</span>(X.bit_length() * <span class="number">2.5</span>))</span><br><span class="line">A = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">B = randint(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b64encode(long_to_bytes(p)).decode())</span><br><span class="line">signal.alarm(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    choice = <span class="built_in">input</span>().strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&quot;reset1&quot;</span>:</span><br><span class="line">        y = randint(<span class="number">1</span>, X)</span><br><span class="line">        a = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">        b = (y**<span class="number">2</span> - (X**<span class="number">3</span> + a*X)) % p</span><br><span class="line">        A = a</span><br><span class="line">        B = b</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reset successful.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(b64encode(long_to_bytes(A) + <span class="string">b&quot;||&quot;</span> + long_to_bytes(B)).decode())</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;reset2&quot;</span>:</span><br><span class="line">        X = genX(rho, eta, gamma, x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reset successful.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">&quot;check&quot;</span>:</span><br><span class="line">        user_input = <span class="built_in">int</span>(<span class="built_in">input</span>().strip())</span><br><span class="line">        <span class="keyword">if</span> user_input == x:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>是一个师傅问我的一道靶机题，但是我没有环境，所以就讲讲思路。</p>
<p>题目任务如下：</p>
<ul>
<li>生成一个256bit的素数x，同时生成一个X，满足：</li>
</ul>
<script type="math/tex; mode=display">
X = qx+r</script><ul>
<li>生成一个2500bit数量级的p并发送给我们，然后限时30s，交互开始</li>
</ul>
<p>交互开始后，我们在时间允许范围内有无限次交互机会，每次交互我们可以：</p>
<ul>
<li>输入”reset1”，题目会随机生成yi、ai，并计算出对应bi后，发送(ai，bi)给我们。满足(X,yi)在下面的椭圆曲线上：</li>
</ul>
<script type="math/tex; mode=display">
y_i^{2} = X^3 + a_iX + b_i \quad(mod \; p)</script><ul>
<li>输入”reset2”，题目会更新X的值</li>
<li>输入”check”，我们可以给靶机核对小写x(就是最初生成的256bit的素数)的值，正确则可以得到flag</li>
</ul>
<p>那么首先就要明白reset1、reset2这两个交互功能各有什么作用。首先我们知道有：</p>
<script type="math/tex; mode=display">
X = qx+r</script><p>那么如果能知道多组X的值，这就变成了一个AGCD问题，这也就是reset2的作用。</p>
<p>因此，我们的想法就是：</p>
<ul>
<li>每次reset2，得到一个未知的Xi</li>
<li>想办法用reset1来解出Xi的值</li>
<li>得到多组Xi后，解AGCD得到x去通过核验，拿到flag</li>
</ul>
<p>那么接下来的任务就落在了如何利用reset1上。我们已知每次reset1会提供给我们一组满足如下等式的(ai，bi)：</p>
<script type="math/tex; mode=display">
y_i^{2} = X^3 + a_iX + b_i \quad(mod \; p)</script><p>看上去是引导人往椭圆曲线想，就会自然想到groebner，但是稍微再想一想就知道变量多了，肯定groebner不出来。</p>
<p>而实际上，既然我们可以多次reset1，那么这其实也是一个HNP问题。我们把模等式展开：</p>
<script type="math/tex; mode=display">
y_i^{2} = X^3 + a_iX + b_i + k_ip</script><p>那么我们完全可以同样用HNP构造格的思路，构造下面的格来求解X：</p>
<script type="math/tex; mode=display">
L = 
\left(\begin{matrix}
p &  & ... & & \\
 &p & ... & & \\
  & & ... & & \\
 & & ... &p & \\
1&1&...&1&1\\
a_1 & a_2 & ... &a_n  & &1\\
b_1 & b_2 & ... &b_n  & &&1\\
\end{matrix}
\right)</script><p>这个格具有如下线性关系：</p>
<script type="math/tex; mode=display">
(k_1,k_2,...k_n,X^3,X,1)
\left(\begin{matrix}
p &  & ... & & \\
 &p & ... & & \\
  & & ... & & \\
 & & ... &p & \\
1&1&...&1&1\\
a_1 & a_2 & ... &a_n  & &1\\
b_1 & b_2 & ... &b_n  & &&1\\
\end{matrix}
\right)
=
(y_1^2,y_2^2,...y_n^2,X^3,X,1)</script><p>然后，我们配平一下这个格并进行规约就有机会得到目标向量。经过测试，申请四组(ai，bi)，就可以在第三行得到我们需要的目标向量，并且所用时间也很短，符合要求。</p>
<p>得到一个Xi后我们就reset2更新下一个Xi，并继续按这个方法求解即可。然后有多组Xi就可以AGCD求x了。</p>
<p>由于没有靶机，这里我就放一下我本地验证HNP问题的exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits, choices</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genX</span>(<span class="params">rho, eta, gam, p</span>):</span><br><span class="line">    <span class="keyword">return</span> p * getrandbits(gam-eta) + getrandbits(rho)</span><br><span class="line"></span><br><span class="line">rho = <span class="number">12</span></span><br><span class="line">eta = <span class="number">256</span></span><br><span class="line">gamma = <span class="number">1000</span></span><br><span class="line">x = getPrime(<span class="number">256</span>)</span><br><span class="line">X = genX(rho, eta, gamma, x)</span><br><span class="line">p = getPrime(<span class="built_in">int</span>(X.bit_length() * <span class="number">2.5</span>))</span><br><span class="line"></span><br><span class="line">Alist = []</span><br><span class="line">Blist = []</span><br><span class="line"><span class="built_in">round</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">    y = randint(<span class="number">1</span>, X)</span><br><span class="line">    a = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    b = (y**<span class="number">2</span> - (X**<span class="number">3</span> + a*X)) % p</span><br><span class="line">    Alist.append(a)</span><br><span class="line">    Blist.append(b)</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,<span class="number">3</span>+<span class="built_in">round</span>,<span class="number">3</span>+<span class="built_in">round</span>)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">    L[i,i] = p*K</span><br><span class="line">    L[-<span class="number">3</span>,i] = <span class="number">1</span>*K</span><br><span class="line">    L[-<span class="number">2</span>,i] = Alist[i]*K</span><br><span class="line">    L[-<span class="number">1</span>,i] = Blist[i]*K</span><br><span class="line"></span><br><span class="line">L[-<span class="number">3</span>,-<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">2</span>^<span class="number">2000</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span>^<span class="number">3000</span></span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(L.LLL()[<span class="number">2</span>][-<span class="number">2</span>]) // <span class="number">2</span>^<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-hash</title>
    <url>/post/923bfbdd.html</url>
    <content><![CDATA[<p>该文章主要记录一些哈希函数相关的趣题</p>
<span id="more"></span>
<h3 id="babyhash"><a href="#babyhash" class="headerlink" title="babyhash"></a>babyhash</h3><p>题目来源：ISG 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> ecdsa <span class="keyword">import</span> SigningKey</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">digest</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">bytes</span>(self.data)</span><br><span class="line">        data = pad(data, <span class="number">16</span>)</span><br><span class="line">        text = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        hash_result = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">16</span>):</span><br><span class="line">            key = data[i:i+<span class="number">16</span>]</span><br><span class="line">            text = AES.new(key, AES.MODE_ECB).encrypt(text)</span><br><span class="line">            hash_result += text</span><br><span class="line">        <span class="keyword">return</span> hash_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&quot;&quot;</span>.join(</span><br><span class="line">            [random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">        )</span><br><span class="line">        digest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.dosend(<span class="string">&quot;sha256(XXXX + &#123;&#125;) == &#123;&#125;&quot;</span>.<span class="built_in">format</span>(proof[<span class="number">4</span>:], digest))</span><br><span class="line">        self.dosend(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = (x.strip()).decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dosend</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg.encode(<span class="string">&quot;latin-1&quot;</span>) + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, sk, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> sk.sign(msg, hashfunc=Hash)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, vk, msg, signature</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            vk.verify(signature, msg, hashfunc=Hash)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid signature&quot;</span>&#125;</span><br><span class="line">        msg = json.loads(msg.decode())</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg.get(<span class="string">&quot;admin&quot;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are not admin&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are admin&quot;</span>, <span class="string">&quot;flag&quot;</span>: flag&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">self, sk, vk</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.dosend(<span class="string">&quot;Input your choice:\n[1] Sign in\n [2] Verify\n [3] Exit&quot;</span>)</span><br><span class="line">            choice = self.request.recv(<span class="number">2</span>).strip()</span><br><span class="line">            choice = <span class="built_in">int</span>(choice.decode())</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                self.dosend(<span class="string">&quot;Input your username:&quot;</span>)</span><br><span class="line">                buf = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(buf) &lt; <span class="number">1000</span>:</span><br><span class="line">                    buf += self.request.recv(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> buf[-<span class="number">1</span>:] == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                name = <span class="string">&quot;&quot;</span>.join( <span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> buf <span class="keyword">if</span> <span class="built_in">chr</span>(x).isalnum())</span><br><span class="line">                msg_to_sign = &#123;<span class="string">&quot;admin&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;username&quot;</span>: name&#125;</span><br><span class="line">                msg_to_sign = json.dumps(msg_to_sign).encode()</span><br><span class="line">                sig = self.sign(sk, msg_to_sign).<span class="built_in">hex</span>()</span><br><span class="line">                info = &#123;<span class="string">&quot;sig&quot;</span>: sig&#125;</span><br><span class="line">                self.dosend(<span class="string">&quot;Your signature: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(json.dumps(info)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">2</span>:</span><br><span class="line">                self.dosend(<span class="string">&quot;Input your msg and sigature in JSON form:&quot;</span>)</span><br><span class="line">                buf = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(buf) &lt; <span class="number">1000</span>:</span><br><span class="line">                    buf += self.request.recv(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> buf[-<span class="number">1</span>:] == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                buf = buf.decode()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;buf&#x27;</span>, buf)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    info = json.loads(buf)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    self.dosend(<span class="string">&quot;Invalid JSON&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                msg = info[<span class="string">&#x27;msg&#x27;</span>].encode()</span><br><span class="line">                sig = <span class="built_in">bytes</span>.fromhex(info[<span class="string">&#x27;sig&#x27;</span>])</span><br><span class="line">                send_info = self.verify(vk, msg, sig)</span><br><span class="line">                self.dosend(json.dumps(send_info))</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">3</span>:</span><br><span class="line">                self.request.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">            signal.alarm(<span class="number">60</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.dosend(<span class="string">&quot;You must solve proof of work&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            signal.alarm(<span class="number">60</span>)</span><br><span class="line">            </span><br><span class="line">            sk = SigningKey.generate()</span><br><span class="line">            vk = sk.get_verifying_key()</span><br><span class="line">            self.challenge(sk, vk)</span><br><span class="line">             </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.dosend(<span class="string">&quot;Timeout&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.dosend(<span class="string">&quot;WTF?&quot;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">10500</span></span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>梳理一下题目任务：</p>
<ul>
<li>通过proof</li>
<li>用现有库ecdsa生成一个签名对象sk，同时生成对应的验签对象vk后，进入challenge</li>
<li>在challenge中，输入1，可以输入一个username，对 <code>&#123;&quot;admin&quot;: False, &quot;username&quot;: name&#125;</code>形式的msg进行签名，靶机返回签名值；输入2，可以输入一个JSON形式的数据对象如：<code>&#123;&#39;msg&#39;: &#39;&#123;&quot;admin&quot;: false, &quot;username&quot;: name&#125;&#39;, &#39;sig&#39;: sig&#125;</code>，靶机将对输入的数据对象进行验签。</li>
<li>如果验签通过，且”admin”值不为false，则得到flag。</li>
</ul>
<p>而在本题的签名流程中，哈希函数是自定义的，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">digest</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="built_in">bytes</span>(self.data)</span><br><span class="line">        data = pad(data, <span class="number">16</span>)</span><br><span class="line">        text = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        hash_result = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">16</span>):</span><br><span class="line">            key = data[i:i+<span class="number">16</span>]</span><br><span class="line">            text = AES.new(key, AES.MODE_ECB).encrypt(text)</span><br><span class="line">            hash_result += text</span><br><span class="line">        <span class="keyword">return</span> hash_result</span><br></pre></td></tr></table></figure>
<p>也就是把msg的内容分为长度为16的若干组，并分别当作AES的key并对b”\x00” * 16进行AES加密，得到的结果拼接起来就是哈希值。</p>
<p>也就是说，我们的任务就是构造一个msg，使得其自定义哈希值与<code>&#123;&quot;admin&quot;: false, &quot;username&quot;: name&#125;</code>相同，同时满足”admin”的值不为false。</p>
<p>首先有一点就很奇怪：这个哈希函数长度会随着data的长度变化而变化。也就是说，如果给一个足够长的data，就会产生一个足够大的哈希值，现有的ecdsa库是否会对这种情况进行处理？</p>
<p>结果发现真的会处理，如下图中所示，allow_truncate在sign函数中是默认为true的，而baselen经测验是24，也就是说，如果哈希超长，他只会取前24个作为摘要值：</p>
<p><img src="/post/923bfbdd/image-20231018171953594.png" alt="image-20231018171953594"></p>
<p>这也就是说，题目中自定义的哈希函数不管产生多长的字节流，由于哈希摘要只取24个，因此只有前两个分组的data会对最终被使用到签名里的哈希值产生影响,也就是说我们传入的JSON对象的第三十二个以后的字符都不会影响验签。而观察verify函数，他其实是先把传入的msg当作字节串进行验签，再把其当作JSON对象检验是否”admin”为false：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, vk, msg, signature</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            vk.verify(signature, msg, hashfunc=Hash)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid signature&quot;</span>&#125;</span><br><span class="line">        msg = json.loads(msg.decode())</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg.get(<span class="string">&quot;admin&quot;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are not admin&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;You are admin&quot;</span>, <span class="string">&quot;flag&quot;</span>: flag&#125;</span><br></pre></td></tr></table></figure>
<p>但是JSON对象是可以覆盖前面的”admin”的值的，也就是说，我们将msg的值设置成下面这种形式，再传给靶机：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;admin&quot;</span>: false, <span class="string">&quot;username&quot;</span>: name, <span class="string">&quot;admin&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>
<p>那么对于服务器来说，其验签是用的上面这个<strong>字符串</strong>的自定义哈希的前32位来进行验签，因此当然能验签通过。而在验签通过后，他把这个字符串通过loads转成JSON对象，”admin”的值就被覆盖成为了name，因此就能得到flag！哈哈，有点卑鄙。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX + &quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line">					</span><br><span class="line">r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28234</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;[3] Exit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Input your username:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;Tiffany&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;signature: &quot;</span>)</span><br><span class="line">sig = r.recvline().strip().decode()[<span class="number">9</span>:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;[3] Exit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;JSON form:&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#123;&quot;admin&quot;: false, &quot;username&quot;: &quot;Tiffany&quot;, &quot;admin&quot;: &quot;Tiffany&quot;&#125;&#x27;</span></span><br><span class="line">msg_to_sign = &#123;<span class="string">&quot;msg&quot;</span>: msg, <span class="string">&quot;sig&quot;</span>: sig&#125;</span><br><span class="line"><span class="built_in">print</span>(msg_to_sign)</span><br><span class="line">msg_to_sign = json.dumps(msg_to_sign).encode()</span><br><span class="line"></span><br><span class="line">r.sendline(msg_to_sign)</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;e90c5b52-3eb4-4f69-a8ec-7f6e5fe0617f&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Ezhash"><a href="#Ezhash" class="headerlink" title="Ezhash"></a>Ezhash</h3><p>题目来源：强网拟态 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, random, hashlib, string</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHash</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cipher = AES.new(<span class="string">b&quot;a&quot;</span>*<span class="number">32</span>,AES.MODE_ECB)</span><br><span class="line">        self.state = <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self,m</span>):</span><br><span class="line">        <span class="keyword">return</span> self.cipher.encrypt(m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upadteState</span>(<span class="params">self,m</span>):</span><br><span class="line">        m += <span class="string">b&quot;\x00&quot;</span> * <span class="number">5</span></span><br><span class="line">        state = <span class="built_in">bytes</span>([(a+b+<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(self.state,m)])</span><br><span class="line">        self.state = self.enc(state)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finalUpdateState</span>(<span class="params">self,m</span>):</span><br><span class="line">        padding_len = <span class="number">11</span> - <span class="built_in">len</span>(m) % <span class="number">11</span></span><br><span class="line">        m += <span class="built_in">bytes</span>([<span class="number">0x80</span>] + [padding_len - <span class="number">1</span>] * (padding_len - <span class="number">1</span>))</span><br><span class="line">        self.upadteState(m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">genResult</span>(<span class="params">self</span>):</span><br><span class="line">        result = hashlib.sha256(self.state[:<span class="number">11</span>]).digest() + self.state[<span class="number">11</span>:]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self,msg</span>):</span><br><span class="line">        self.state = <span class="string">b&quot;\x00&quot;</span> * <span class="number">16</span></span><br><span class="line">        length = <span class="built_in">len</span>(msg) // <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            subMsg = msg[<span class="number">11</span>*i:<span class="number">11</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            self.upadteState(subMsg)</span><br><span class="line">        finalMsg = msg[length*<span class="number">11</span>:]</span><br><span class="line">        self.finalUpdateState(finalMsg)</span><br><span class="line">        <span class="keyword">return</span> self.genResult()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    alarm(<span class="number">10</span>)</span><br><span class="line">    TARGET = <span class="string">b&quot;I think the hash function has no weakness!&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        h = MyHash()</span><br><span class="line">        h1 = h.<span class="built_in">hash</span>(TARGET)</span><br><span class="line">        anotherHash = unhexlify(<span class="built_in">input</span>(<span class="string">&quot;Please your hash (hex) : &quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> anotherHash != TARGET:</span><br><span class="line">            h2 = h.<span class="built_in">hash</span>(anotherHash)</span><br><span class="line">            <span class="keyword">if</span> h1 == h2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Success! Here is your flag : <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t input TARGET!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>题目内容为：</p>
<ul>
<li>通过proof</li>
<li>输入一个字节串的十六进制编码，该字节串不能等于TARGET</li>
<li>若该字节串的MyHash()值与TARGET相等，则得到flag</li>
</ul>
<p>也就是说我们要找到一个满足要求的自定义哈希函数的碰撞，那么就要分析一下这个哈希函数。简单来说，该哈希函数首先完成下列准备工作：</p>
<ul>
<li>把输入的字节串按长度为11分为若干组，最后一组不足11的单独列出</li>
<li>设置固定密钥为b”a”*32的AES</li>
<li>设置初始状态state，为b”\x00”*16</li>
</ul>
<p>准备工作完成后，每一轮做如下加密：</p>
<p>对于非最后一组：</p>
<ul>
<li>依次取分组中的每个长度为11的字节串，在后面填5个b”\x00”使得长度为16</li>
<li>将该分组与当前state逐字节相加后再加2(模256加法)</li>
<li>用AES对上述值加密，作为新的state</li>
</ul>
<p>对于最后一组：</p>
<ul>
<li><p>计算待填充长度 padding_len = 11 - len(m)</p>
</li>
<li><p>填充一个b”\x80”，然后填充(padding_len-1)个(padding_len-1)</p>
</li>
<li>然后同之前非最后一组的加密，得到最终state</li>
<li>取最终state的前11个字节做SHA256，并将结果与最终state的后5个字节连接作为最终MyHash函数返回值</li>
</ul>
<p>那么哈希函数就分析完了，接下来就是找出哪里能操作一下，从而产生碰撞。</p>
<h4 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h4><p>首先想的是，最后的填充能不能进行操作。已知TARGET的最后一个分组长度为9字节，那么其填充就为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;weakness!&quot;</span> + <span class="string">b&quot;\x80&quot;</span> + <span class="string">b&quot;\x01&quot;</span></span><br></pre></td></tr></table></figure>
<p>那么就发现长度方面没什么操作的办法，因为一改变长度，最后一字节就不一样了，那么就肯定不能期望AES后还能得到相同结果。</p>
<h4 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h4><p>那么就只能从非最后一组的加密入手，画一下对于TARGET的加密流程图：</p>
<p><img src="/post/923bfbdd/image-20231027092301982.png" alt="image-20231027092301982"></p>
<p>其中，m1、m2、m3、m4是TARGET的分组，h1、h2、h3、h4是每个state，这些都是可以求出的。</p>
<p>而看图容易看出，我们只要让任何一次加密开始前的state与给定的h1、h2、h3或h4相等，那么在之后的加密过程中就会保持完全一致。而h1、h2、h3、h4是AES得到的，没有办法直接操作，那么要使其相等，就只能让AES加密前的t1、t2、t3或t4相等。</p>
<p>所以第一个朴素的想法就是：有没有办法通过改变m1，使得改变后得到的t1’仍然与t1相等？显然这完全不可能，因为要让t1=t1’，就必须有m1=m1’(mod 256)，而要有m1=m1’(mod 256)其实就必须有m1=m1’，所以m1一点都不能动。</p>
<p>然后就想到，既然只要让t1’与t1相等即可，我们完全可以在第一组之前添加分组，而h1之后分组的我们已经完全不需要关心了。比如我们添加m0，使得：</p>
<p><img src="/post/923bfbdd/image-20231027093057026.png" alt="image-20231027093057026"></p>
<p>有没有机会同时改变m0和m1，使得这样得到的t1’与原t1相等呢？那么要确认以下两点：</p>
<ul>
<li>h0是不可控的，因为经过了AES加密</li>
<li>t1是已知的</li>
</ul>
<p>那么要得到h0，我们其实只能采取随机生成m0的方式来得到不同的h0，但是我们可以通过改变m1，来取到不同的t1’，期望其最终与原t1相同。那么其实很明显，只有生成的h0满足下面的性质，我们才能取得符合要求的t1：</p>
<ul>
<li>h0的后五个字节为全0</li>
</ul>
<p>这是因为，原初始state为16字节全0，而m1本身长度只有11，后五个字节也为填充的0。也就是说，前面11个字节我们可以通过得到的h0，去对应改变m1得到，但是后面五个字节是我们控制不了的，我们只能通过随机产生的方式，去爆破出一组AES加密后后五个字节均为0的h0.如果把AES加密得到的串视为随机生成的字节的话，那么随机生成，得到的串满足要求的概率也就是五个字节为0的概率，也就是1/2^40。而以生日攻击的理论，我们要产生2^40个随机串m0，才有大于50的概率获得满足要求的h0，这个范围显然过大了。</p>
<p>同理，如果想要生成t2’、t3’之类，使其与原t2或t3相等，要求也是一样的：生成的前一组h’的最后五个字节需要与计算得到的完全相同，概率都是1/2^40。</p>
<p>这个方法虽然看上去可行，但由于复杂度过大而不可接受的，因此还要想其他办法。</p>
<h4 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h4><p>把问题再具体化一点，我们其实可以在初始的TARGET中加任意个分组(每组长度为11)，只要满足如下要求就可以实现哈希碰撞：</p>
<ul>
<li>进入加的分组前的h与分组加密完成后的h完全相等</li>
</ul>
<p>什么意思呢？比如我们在初始TARGET的加密流程中，往箭头处加入几个新的明文分组：</p>
<p><img src="/post/923bfbdd/image-20231027153810351.png" alt="image-20231027153810351"></p>
<p>可以看到，对于新加入的几个明文分组，其输入的state值是h1，而我们只要保证这几个明文分组的最终输出也是h1，后续的加密state就完全一样了，因此能够得到哈希碰撞。</p>
<p>而如果复现过前几天的CBCTF的CB_cipher一题的话，就容易反应过来这也可以用中间相遇攻击来缩小复杂度。具体来说，刚才我们想要通过新加入两组m，并控制这两组m的值，来得到一个相同的t，从而保证后续哈希相等。而现在我们完全可以在箭头处加入三组m，然后用第一组m和第三组m进行中间相遇攻击，从而计算出中间的满足要求的第二组m，这样一来，本身需要2^40次才有大于50的概率找到一组符合要求的m，现在可以用2*2^20次就可以达到这个概率。</p>
<p>具体来说，我们用如下方式控制三组生成的m(分别叫做m1、m2、m3，请注意与本身TARGET的分组做区别)，则输入这个分组的state为h1，需要输出的state也为h1：</p>
<ul>
<li>随机生成2^20个m1，并加密其得到2^20个不同的temp1，并建立字典</li>
<li>随机生成2^20个m3，并AES解密h1后，减去m3再减去2；对这个值再进行AES解密，得到2^20个不同的temp2</li>
<li>如果第二步得到的某个值temp2与第一步的字典中的某个值temp1的后五个字节满足：temp2 = temp1 + 2，那么我们就可以由这一组值计算出符合要求的m2。这是因为，m2长度为11字节，进行加密时后五个字节需要填充全0，因此只要后五个字节满足temp2 = temp1 + 2就是合法的m2</li>
</ul>
<p>如此一来我们就可以用能够接受的复杂度找出一组哈希碰撞了。需要注意的是，通过proof后只有10s的时间提交哈希碰撞，但是由于TARGET是定死的，所以我们完全可以先找好碰撞，再连接提交。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get_collision</span></span><br><span class="line">TARGET = <span class="string">b&quot;I think the hash function has no weakness!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#state</span></span><br><span class="line">h1,h2,h3,h4 = [<span class="string">b&#x27;\x82R&gt;?XAY&gt;\xf4\x98\xdd\x1f(\x81&#123;\x15&#x27;</span>,<span class="string">b&#x27;o0(;Xf\xea\xe4s\xbf\xab\xd7S\x1b\x02\xca&#x27;</span>,<span class="string">b&#x27;\x8a\xb5z\xf9\xca9u&lt;\x82\x81\xe4&lt;\x11\tJ\xbd&#x27;</span>,<span class="string">b&#x27;\x8f\xe3\xd9\xbf3\xc2\x11b\xa3\x19\xbeA\xec\xad`J&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#MITM</span></span><br><span class="line">msg = <span class="string">b&quot;&quot;</span></span><br><span class="line">cipher = AES.new(<span class="string">b&quot;a&quot;</span>*<span class="number">32</span>,AES.MODE_ECB)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">state,m</span>):</span><br><span class="line">    m = m + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    state = <span class="built_in">bytes</span>([(a+b+<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(state,m)])</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">state,m</span>):</span><br><span class="line">    temp = cipher.decrypt(state)</span><br><span class="line">    state = <span class="built_in">bytes</span>([(a-b-<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(temp,m)])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    m1_ = urandom(<span class="number">11</span>) + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    dic[enc(h1,m1_)[-<span class="number">5</span>:]] = m1_</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    m3_ = urandom(<span class="number">11</span>) + <span class="string">b&quot;\x00&quot;</span>*<span class="number">5</span></span><br><span class="line">    temp = dec(h1,m3_)</span><br><span class="line">    temp = cipher.decrypt(temp)</span><br><span class="line">    temp = <span class="built_in">bytes</span>([(a-<span class="number">2</span>)%<span class="number">256</span> <span class="keyword">for</span> a <span class="keyword">in</span> temp])</span><br><span class="line">    <span class="keyword">if</span>(temp[-<span class="number">5</span>:] <span class="keyword">in</span> dic.keys()):</span><br><span class="line">        m1_ = dic[temp[-<span class="number">5</span>:]]</span><br><span class="line">        h2_ = enc(h1,m1_)</span><br><span class="line">        m2_ = <span class="built_in">bytes</span>([(a-b)%<span class="number">256</span> <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(temp,h2_)])</span><br><span class="line">        msg = m1_[:-<span class="number">5</span>] + m2_[:-<span class="number">5</span>] + m3_[:-<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">msg = TARGET[:<span class="number">11</span>] + msg + TARGET[<span class="number">11</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 get_flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>, <span class="number">28947</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line"><span class="comment">#hash</span></span><br><span class="line">r.recvline(<span class="string">b&quot;(hex) : &quot;</span>)</span><br><span class="line">r.sendline(msg.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;d6ee4b86-b882-43b3-937e-680b97500462&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-RSA(一)</title>
    <url>/post/ea445335.html</url>
    <content><![CDATA[<p>该文章主要记录一些RSA相关的趣题，一篇十道题</p>
<span id="more"></span>
<h3 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h3><p>题目来源：2023江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1, q1 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1*q1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p2, q2 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n2 = p2*q2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;<span class="built_in">pow</span>(n1-m,e,n2)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line"><span class="comment"># n2 = 68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line"><span class="comment"># c1 = 42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line"><span class="comment"># c2 = 62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br></pre></td></tr></table></figure>
<p>题目意图很明确：明文线性相关，所以直接求解多项式gcd是可以做出来的。</p>
<p>不过问题在于，本题e很大，所以如果直接求解gcd，时间会花的较长(约30-40分钟)。因此学习了一波Half-gcd，这是一种能有效减少求解多项式的公因式所需时间的方法。</p>
<p><a href="https://www.cnblogs.com/whx1003/p/16217087.html">多项式 gcd 的正确姿势：Half-GCD 算法 - whx1003 - 博客园 (cnblogs.com)</a></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * b.degree() &lt;= a.degree() <span class="keyword">or</span> a.degree() == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    m = a.degree() // <span class="number">2</span></span><br><span class="line">    a_top, a_bot = a.quo_rem(x^m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x^m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    <span class="keyword">return</span> RET00, RET01, RET10, RET11</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a.degree(), b.degree())</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> GCD(d, r)</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">500000</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">52579135273678950581073020233998071974221658902576724000130040488018033110534210901239397446395736563148970863970460542205225993317478251099451639165369081820130823165642873594136020122857712288395352930384057524510346112486008850200845915783772351449146183974239444691330777565342525218070680067550270554767</span></span><br><span class="line">n2 = <span class="number">68210568831848267339414957973218186686176324296418282565773310695862151827108036984694027795077376921170907068110296451176263520249799154781062517066423984526868547296781709439425857993705489037768605485740968600877866332458671029054092942851472208033494968784822459369206497698469167909174346042658361616469</span></span><br><span class="line">c1 = <span class="number">42941712708129054668823891960764339394032538100909746015733801598044118605733969558717842106784388091495719003761324737091667431446354282990525549196642753967283958283202592037329821712755519455155110675327321252333824912095517427885925854391047828862338332559137577789387455868761466777370476884779752953853</span></span><br><span class="line">c2 = <span class="number">62704043252861638895370674827559804184650708692227789532879941590038911799857232898692335429773480889624046167792573885125945511356456073688435911975161053231589019934427151230924004944847291434167067905803180207183209888082275583120633408232749119300200555327883719466349164062163459300518993952046873724005</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">f = x^e - c1</span><br><span class="line">g = (n1 - x)^e - c2</span><br><span class="line"></span><br><span class="line">res = GCD(f,g)</span><br><span class="line"></span><br><span class="line">m = -res.monic().coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>CnHongKe{Fr4nkl1n_R31ter_4nd_gcD}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="BUAA-AITMCLAB-amp-Level4"><a href="#BUAA-AITMCLAB-amp-Level4" class="headerlink" title="BUAA^AITMCLAB&amp;Level4"></a>BUAA^AITMCLAB&amp;Level4</h3><p>题目来源：BUAA^AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nextprime</span>(<span class="params">n</span>):</span><br><span class="line">    n = (n + <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(n):</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;********************&quot;</span></span><br><span class="line"></span><br><span class="line">m = s2n(flag)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The getPrime() may not function properly, </span></span><br><span class="line"><span class="string">but it does not affect your understanding of the problem.</span></span><br><span class="line"><span class="string">lzh hopes you could attack successfully!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = nextprime(p + randint(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">421</span>))</span><br><span class="line">        n = p * q</span><br><span class="line">        phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">        d = randint(<span class="number">0</span>, n ** <span class="number">0.32</span>)</span><br><span class="line">        e = invmod(d, phi)</span><br><span class="line">        c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = %d&quot;</span> % e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = %d&quot;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = 127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line"><span class="string">n = 132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line"><span class="string">c = 37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># try to find the 「flag」</span></span><br><span class="line"><span class="comment"># and don&#x27;t forget to submit it to the platform</span></span><br></pre></td></tr></table></figure>
<p>题目最有用的信息是：</p>
<ul>
<li>p和q高位相近</li>
<li>d小于n^0.32</li>
</ul>
<p>看到卡了d的界，第一反应就是低解密指数攻击，可以采用wiener attack或者boneh and durfee attack。但是问题在于：</p>
<ul>
<li>wiener attack：要求d小于$ \frac{1}{3}n^{\frac{1}{4}}$</li>
<li>boneh and durfee attack：要求d小于n^0.292</li>
</ul>
<p>而题目只界定了0.32，超过了两种攻击的范围。不过不要紧，首先试一试boneh and durfee attack，因为有不到1/8的概率成功(d在(0,n^0.32)随机生成，因此有1/8概率落在(0,n^0.29)的区间，因此可能会成功)</p>
<p>可惜的是失败了，那么就只能另寻他法。由题目条件可知，p、q高位相同这个额外信息肯定是需要用上的，以此来扩大能攻击的d的上界，但是并不知道怎么用。最后从Xenny师傅那里得到一篇论文：</p>
<p><a href="http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf">http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p80-85.pdf</a></p>
<p>关键部分：</p>
<p><img src="/post/ea445335/image-20231001174839341.png" alt="image-20231001174839341"></p>
<p><img src="/post/ea445335/image-20231001174939785.png" alt="image-20231001174939785"></p>
<p>这篇论文证明了：当p、q高位接近到一定程度时，$\frac{e}{n-2\sqrt{n}+1}$ 是 $\frac{k}{d}$ 的收敛子，并且拓宽了可以进行wiener attack攻击的d的上界。</p>
<p>因此只需要把wiener attack中的 n 改为 $n-2\sqrt{n}+1$ 即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">127036799282947905048902487711584293137462029654908427023257952239618526367628289911517200900560275901894224980635962598874227610508820071266987288647014766036842887978917984803634331617282487399497533040203094883612898714070428079645997317171821336677275458853187399657424389496685642081231802149635762872559</span></span><br><span class="line">n = <span class="number">132088710602356228013302555046538954329350662026107113731378784700414952971644185280357218688811203701759378494801162526951176546636432770036424692378302192072727185223575484138108758895692654294532714346938723454356449079919300753046965831240595578485766587254369907195552714255698916905317581605325719354369</span></span><br><span class="line">c = <span class="number">37469551975972446825344827206550506280313465311789923639857075387733761352303008843234906464758618751401773666419762541561815375332688727694620079867717788238335220300725633402928195673814423768862538733435901134624477748268790427128392777900896313025911483334568923415572174037203375831796896263863229112204</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        self.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n-<span class="number">2</span>*iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;aitmc&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>aitmc{W0Oo!!Y0u_3re_a_m3ster_of_W1ener_H3ck!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="AITMCLAB-quiz2"><a href="#AITMCLAB-quiz2" class="headerlink" title="AITMCLAB quiz2"></a>AITMCLAB quiz2</h3><p>题目来源：AITMCLAB</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Welcome to quiz2!!!</span></span><br><span class="line"><span class="keyword">from</span> AITMCLab.libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line">n = p * q</span><br><span class="line">flag = s2n(<span class="string">&#x27;flag&#123;************&#125;&#x27;</span>)</span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, flag, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span> (c)</span><br><span class="line"><span class="comment"># 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br></pre></td></tr></table></figure>
<p>题目本身应该还需要求一下p、q的，但是直接给好了那就用给好的做吧。</p>
<p>发现加密就一步，如下：</p>
<script type="math/tex; mode=display">
c\equiv (n+1)^{flag}*r^n\quad(mod\;n^2)</script><p>其中，r是一个随机数，且题目未给出。</p>
<p>首先，由于模 $ n^2$ 的缘故，$ (n+1)^{flag}$ 可以用二项式定理展开，然后消掉大部分项：</p>
<script type="math/tex; mode=display">
(n+1)^{flag} \equiv n*flag+1\quad(mod\;n^2)</script><p>因此有：</p>
<script type="math/tex; mode=display">
c\equiv (n*flag+1)*r^n\quad(mod\;n^2)</script><p>r 是未知的随机数，因此要消掉，消掉 r 的方式类似于 RSA 的解密过程，如下：</p>
<p>因为：</p>
<script type="math/tex; mode=display">
\phi(n^2) = \phi(p^2q^2) = \phi(p^2)\phi(q^2) = pq(p-1)(q-1)</script><p>所以 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv ((n*flag+1)*r^n)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>即 ：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)}*r^{n(p-1)(q-1)} \quad(mod\;n^2)</script><p>注意到上式中：</p>
<script type="math/tex; mode=display">
r^{n(p-1)(q-1)}\equiv r^{\phi(n^2)}\equiv 1\quad(mod\;n^2)</script><p>因此就消掉了 r，得到：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)} \equiv (n*flag+1)^{(p-1)(q-1)} \quad(mod\;n^2)</script><p>右侧的式子又可以用二项式定理展开，得到：</p>
<script type="math/tex; mode=display">
(n*flag+1)^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>因此：</p>
<script type="math/tex; mode=display">
c^{(p-1)(q-1)}\equiv (p-1)(q-1)n*flag+1 \quad(mod\;n^2)</script><p>减一，除以n后，再求(p-1)(q-1)对n^2的逆元即可，但是会发现求出的模 n^2 下的并不是最终的 flag，猜测可能题目原本题面还有额外信息界定了 flag 的范围，那么转到模 n 下即可得到最终flag。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c,(p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) - <span class="number">1</span>) // n * inverse((p-<span class="number">1</span>)*(q-<span class="number">1</span>),n**<span class="number">2</span>) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{can_you_find_me??}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="2048bit-e"><a href="#2048bit-e" class="headerlink" title="2048bit e"></a>2048bit e</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, getStrongPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p, q = getStrongPrime(<span class="number">1024</span>), getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RSAgen</span>(<span class="params">e = <span class="literal">None</span></span>):</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> e:</span><br><span class="line">        <span class="keyword">while</span>(d.bit_length() &lt; <span class="number">2047</span>):</span><br><span class="line">            e = getPrime(<span class="number">2047</span>)</span><br><span class="line">            d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> (p*q, p, q, e, d)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key = RSAgen()</span><br><span class="line">k = randint(<span class="number">600</span>, <span class="number">1200</span>)</span><br><span class="line">f = factorial(k)</span><br><span class="line"></span><br><span class="line">leak = (<span class="built_in">pow</span>(key[<span class="number">3</span>], <span class="number">2</span>) + (key[<span class="number">3</span>]*key[<span class="number">4</span>] - <span class="number">1</span>)*f)*getPrime(<span class="number">256</span>) + k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048 bit e is very expensive, i should use standard e for my encryption   </span></span><br><span class="line"></span><br><span class="line">key = RSAgen(<span class="number">65537</span>)</span><br><span class="line">e = key[<span class="number">3</span>]</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#OUTPUT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#n = 26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line"><span class="comment">#c = 14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line"><span class="comment">#leak = 8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br></pre></td></tr></table></figure>
<p>梳理一下加密流程，题目首先用了默认参数 e=None 生成了一组 RSA 密钥，并基于此密钥泄露了一个信息 leak 。泄漏 leak 之后，用 e=65537 生成了另一组公私钥，并且用另一组公私钥加密明文后，给出密文。</p>
<p>注意到两次 RSAgen() 过程中，n、p、q三个量是不变的。因此解题的思路就是：由第一组 e、d 泄漏的信息 leak，获取 n 的分解，从而解密第二组密文。</p>
<p>那么 leak 究竟泄露了什么？先把表达式写出来：</p>
<script type="math/tex; mode=display">
leak = (e_1^2+(e_1d_1-1)(k!))a+k</script><p>其中，</p>
<ul>
<li>a是一个256比特的随机素数，未给出</li>
<li>k是一个(600,1200)之间的整数，未给出</li>
</ul>
<p>整个 leak 式子里就没有一个参数是知道的，那怎么办？首先就会观察到 k 可能的范围比较小，只有 600 种可能，因此突破口应该在于先找到一种合适的爆破思路，求解出 k。为了达到求解 k 的目的，先把 leak 的表达式拆成更容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = ae_1^2+a(e_1d_1-1)(k!)+k</script><p>我们在(600,1200)之间取 i 进行爆破，那么当 i 取(600,k) 之间的数时，下面的等式成立：</p>
<script type="math/tex; mode=display">
ae_1^2 = leak -i \quad (mod\;i!)</script><p>这是因为，由于 i &lt; k，所以有 $ i! \mid k!$ </p>
<p>而当取的 i 大于 k 时， $ i! \nmid k!$ ，因此模 $ i!$ 无法模掉leak中 $a(e_1d_1-1)(k!)$ 这一部分。这也就是说，如果 $ leak -i \quad (mod\;i!) $ 的计算值发生了变化，就说明我们取得了正确的 k。并且在爆破过程中，我们早就拥有了正确的 $ ae_1^2$</p>
<p>求得了 k 之后，就要想办法求出剩下几个参数，而由于拥有 $ ae_1^2$ ，所以容易想到继续从 a 下手。此时，我们再把 leak 的表达式写成另一个容易理解的形式：</p>
<script type="math/tex; mode=display">
leak = (a(e_1d_1-1))(k!)+(ae_1^2+k)</script><p>为什么说他更容易理解？因为这就写成了一个标准的带余除法形式：</p>
<script type="math/tex; mode=display">
a=kb+c\quad,\quad c<b</script><p>而对这个带余除法，显然有：</p>
<script type="math/tex; mode=display">
a \div b = k</script><p>而放在 leak 组成的带余除法中，由于 $k!$ 的数量级显然大于 $ (ae_1^2+k)$ ，因此就有：</p>
<script type="math/tex; mode=display">
leak \div (k!) = a(e_1d_1-1)</script><p>将得到的值与 $ae_1^2$ 求gcd即可得到 a ，接下来就能恢复 $e_1，d_1$，然后就转化成已知 e，d 分解 n 的问题了。分解出 n 后就可以顺利求解密文。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = <span class="number">26155610563918771040451217453770153423175480849248932666067623213096628137347700281227651842637531066158966523562535269946270160966349550464316855975843702602386644310622115374093643617687763127399565005930283899166880048303714803385714487858740617133136915034968428269114907303042424391192431406494414712801428682398922655599872605973327217541188045983390427079210204358352343375551675052592229757120847888780576171954181304712725822439789885440973203535622584052397858824995170393109932313608251208103032787250637381098134254687242226624254464180882206386756799922789661143241398308165644172112918996116051241341767</span></span><br><span class="line">c = <span class="number">14882143057207490168145609595794327950964467559973424621597752378687475531116051048471999976592360385753040756962986881197575420871063219354858309758384966841729075968439470757951580317772601028800980369844502945471937420415705013093369495725032356110007789188647453706470456907380267324946203780527015651994928850341098799680560649210763871810476662426271293840410794844793663532229448343601068354829550752842074478598115636890530640204633346276888013284576380941564885085920559055293159358576137659586044231684426664502650956119257574114940925398612801662412390652208379645262117964212231444035372237602987220161154</span></span><br><span class="line">leak = <span class="number">8882329530176003989563469282320326448513961425520889104820115352134009331360402757127024139665879246460280903840841878434886334764358389863635520069842148223207565079555357126011768633841724238023402746185876779525887392481984149029421348288859961294980594601070755980946189936784537926893399566710815892754474482631518313221065280747677073806153015411511245208373763611976120763693741604815436190527484656588721635559583703292529849150438632820886160326184322723507482566078134710656764953471923255683042573911453728381364857973339477093454501755540396376196910045154990604723000628164844678783206034532184996212426411646863562670787117170937484057232253132378686191307517787281075273286073730517840320844224160937065166742670192503005084799125432651202276745876948826479983116284656814139188066381428020724692363565714860614527931752152240198254329317479816158596931824787225489069026346088037877441040453722896865574447079406031506283100005929709985031578939782011738018467829080816081913925121672327305968766974521281843700741425497908524015911173859409613820295440717780859694704848500536323185048069666385294578000406894438137681553061828379901393410655028227052289995544806138411605538810055799529381568985312754486907514057810886832822416112077637141046599291719695931641341477116694041607732362173173111829958139812135983269100274129925726662395368378059697391687349679786945510641238252220381519030943165126475181808810902040710261462429322977874350519175554159491968977598607860470919877896807912649830555310344788510811708640852621939517683512617800947347015328336403343549764926804605586325355602602157724502283094424228440314761426084409569002423419659272529716195776451657960565924304898320195699180560668631806178645741692749524883469846005409211271022431433039546590781549630715275308124729500303196140494010253387465310270348759187686632848767083559239773341844408450815683523679200221818741654323193797457218877776650125241324891467161777274139708214831833313936201971466603547791591622683172049635972772551806007816208466413199652425970868250229578051299718112290796388965170374760048006586491240415960299655674234758022536120132945656010849673271011148857409644260456852793444292102864629782613888832787049959589501287519423225832100567897316528973935415321329220397090613054817402449251249956025659833660199528249628136823951941068620183704359665779941064385612344970878816496323047753331967618070575102035154652470553061929831610193694052912228006377979477318327954292917783836426814224401489211262556447908499035071972531345812915421543036881828636718727357962701875285833936517812391121587399727281240931927431811181444977909594218984279921315492877394195428208756441893687385105650326859023900280137352737660777503064484456016697716191624303099683835521939233782390584505763849676573364198388306561033652480971048175488758111144736636640190185417713883213429725379415164862080052393396741667399031632758281193771891210430178563364662790052209648349668663621672614807647401120518076403133998551484399204398325200361951412241887720441234483010617920388630542945062451586033688057992061925968617174491390233664273716567854279453909892176120950383253842037120054072618389794275273311333932588139102552015371447182882116160259277516530183031644054520783191752410514938160605548110059282703060409667276475969749797140136872904654013231613962248971564712815341527356396922068564215026284215874684201258558000033165916019163319759952566031082383620943938948623145286816988139057606627616639594815749554968862963450819772941547102531289115954195402127419754744687573822011699197232836491588776322734503766502102575418226503487579619923510951731702344792411606628965837547432575532404303417689912716247856960760491417279481456633424179644033150732614552508566990237704498608189201159580503580410535170284429946552129635519661513317741471932078145289068540132823</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确定 k = 1000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for k in range(600,1200):</span></span><br><span class="line"><span class="string">    t = factorial(k)</span></span><br><span class="line"><span class="string">    ae2 = int((leak-k) % t)</span></span><br><span class="line"><span class="string">    if(len(bin(ae2)) != 4351):</span></span><br><span class="line"><span class="string">        print(k-1)</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">1000</span></span><br><span class="line">ae2 = <span class="built_in">int</span>((leak-k) % factorial(k))</span><br><span class="line">temp = leak // factorial(k)</span><br><span class="line">a = GCD(ae2,temp)</span><br><span class="line"></span><br><span class="line">e = iroot(ae2//a,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">d = (((leak - k)//a - e**<span class="number">2</span>) // factorial(k) + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#已知e，d分解n</span></span><br><span class="line">t = e*d - <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    s += <span class="number">1</span></span><br><span class="line">    t //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, s):</span><br><span class="line">    c1 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n)*t), n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i, n)*t), n)</span><br><span class="line">    <span class="keyword">if</span> c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span>:</span><br><span class="line">        p = GCD(c1 - <span class="number">1</span>, n)</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(<span class="number">65537</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{gcd_is_always_useful}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="hardrsa"><a href="#hardrsa" class="headerlink" title="hardrsa"></a>hardrsa</h3><p>感谢几位师傅对我提供的帮助，通过这一道题收获了很多。</p>
<p>题目来源：江苏省数据安全竞赛 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> message</span><br><span class="line"></span><br><span class="line">p, q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> msg + long_to_bytes(<span class="built_in">len</span>(msg) &amp; <span class="number">0xff</span>) * (<span class="number">2048</span> // <span class="number">8</span> - <span class="built_in">len</span>(msg) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([</span><br><span class="line">        poly[i] * <span class="built_in">pow</span>(x, i, n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poly))</span><br><span class="line">    ]) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commit</span>(<span class="params">m: <span class="built_in">int</span>, d: <span class="built_in">int</span>, key: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">int</span>):</span><br><span class="line">    sig = <span class="built_in">pow</span>(m, d, n)</span><br><span class="line">    c1 = (sig + <span class="built_in">pow</span>(key, <span class="number">8</span>, n) + <span class="built_in">pow</span>(key, <span class="number">4</span>, n) + <span class="built_in">pow</span>(key, <span class="number">2</span>, n)) % n</span><br><span class="line">    c2 = f(key, poly)</span><br><span class="line">    <span class="keyword">return</span> c1, c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reveal</span>(<span class="params">comm: (<span class="params"><span class="built_in">int</span>, <span class="built_in">int</span></span>), e: <span class="built_in">int</span>, key: <span class="built_in">int</span>, poly: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    c1, c2 = comm</span><br><span class="line">    <span class="keyword">assert</span> f(key, poly) == c2</span><br><span class="line">    sig = (c1 - <span class="built_in">pow</span>(key, <span class="number">8</span>, n) - <span class="built_in">pow</span>(key, <span class="number">4</span>, n) - <span class="built_in">pow</span>(key, <span class="number">2</span>, n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(sig, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part1</span>(<span class="params">msg</span>):</span><br><span class="line">    e = <span class="number">233</span></span><br><span class="line">    <span class="keyword">assert</span> GCD(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(pad(msg))</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;# Part1: RSA-Encrypted Ciphertext\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part2</span>(<span class="params">msg</span>):</span><br><span class="line">    e = getPrime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">assert</span> GCD(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    key = getPrime(<span class="number">1024</span>)</span><br><span class="line">    poly = [randint(n // <span class="number">2</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(msg)</span><br><span class="line">    comm = commit(m, d, key, poly)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;# Part2: RSA-Committed Promise\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;poly = &#125;</span>\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;comm = &#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">part1(message)</span><br><span class="line">part2(message)</span><br></pre></td></tr></table></figure>
<p>数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Part1: RSA-Encrypted Ciphertext</span></span><br><span class="line">e = <span class="number">233</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">c = <span class="number">4236463649246394372490570028773321531426122440354351428997745409269923078428264643984899276198044684405861411922920531424639487584475747440112668094733950281377813868988540407013967573584191516922420060508458881142111648007775541541206593622564564631875373635260315932740995440619035591722675173125322220642392862827996987221780888705796026865917969313975598350208578877195524822778355327253625950282635041414028859491576352297298051077024341409125083650148374909480761558443601847884116325029903499801566422663448734010004472905405209374692154735955178855634936508017264189084568424915164265136679303107745093554391</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Part2: RSA-Committed Promise</span></span><br><span class="line">e = <span class="number">99181398864848350371016820825262886005052515653150198897546275436659368873943</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">poly = [<span class="number">11693140800527031176333218506340138430240732192854115958431704393516665671354696442539228569575338743555295185742126489158430815263152939757778849261704565332700814864041988371030487621611557506812653488873444536543143499111306076278080422306914610758456202844384883419669780999835836102076447921204517046598938140064244383099665415296806730515287813702062130475281955202867695799707516205462251852912274330831232375362037653669046715539164625549785400699583991291522758317569231805551847554593188947041531361947659444681456741424693383958548943092649257246992511287359572983628972516677506780721131000304618999959240</span>, <span class="number">8649833849514355009128561581797540267452805179286553003531347469534976088903045945255322948772127884435044654450320045837146400545547035413423698519877318250595578140049443137749594587635124784776640002144869420735353810166877391696732603701567388813523929688499591774843294322221335666734637085035509293762539158494372418206937167893545676403532672666734540153869114591107560124251452526082108870638702356111887843199439729119638581693415233654435010304861838471514755642714031294943492873471199466178392719343340089957082809543276507257853855309815913146064538017999492250838671852901021723088900839652630087246141</span>, <span class="number">10438652195883831412435505413668253747222376993835057512571018586886172468948369796145782100970559858131410652399919261454018181151110711244715955202406007064700539815605400586293839962095578425689125884220411946405356203770630361655071021743875660757465221991116870667245627142015074048387044977823496726850652712591020608153928488470683315016742274925734216097962308837642472645606961264797331661105479206824511239562468503777960135923781994521205671697654968415294210654160582131094288074290198995839634141037654146239631046959485219534841518635072303135929794463631818179287771643492272214514760725403082404954077</span>, <span class="number">6299797573437298253264628040275849948907328879976403409079992234253896659195171862234483958852183317706433020249500667696777456584466888790659866599735145200280792478137705987287433143791976037155630359309176772317673958151640355448435973240969550879845354695745860375206302178000370970096709147495071090575765018242388707621300316998885753178573503094652529005706228511805022756376570371219075764243214260191102332714962783026379460713478294288812651004299398765770489801066856526467071118037951998756053462219010773133084404686760087508480150118199064293552990969966284945601004840346771690026959557356854894243142</span>, <span class="number">5983820380221904115440358005660480412823344425839483679019674090060688612423646544886814493835896810583739677554610487986153726859924027361158809156736196645803178995096319914672180274662462472664438431485027075620562484665653780178408855146763748596173882017604170478152671447791422988271913561725716787175269110153429606771827175728957339646431861352878283239969487426243742285835160804730331718691578524218241320715981666141098574100230167376734068738383108974392515927882240711793555447542821660698352614753928088082506778754171275154966436158307349089886252792151153113074617130452582559608047038630881997177039</span>, <span class="number">8645965524213201512342533940160639034615963495013466945596780273953897799745861434427630308300521898525016597999525817531163934211570038600077012713829688089842641388807750705270930654414851381582193662566863633088157205775657627097344504719056435375579887356258011212827309329133255360061251120340523712584772477488197868145839887008419529501177350232970834479788126170916738231188284692568626261063508315725550701926154671018704631776622326225119240790109750932269682399309418540027656506064831086635915646225839228991353015865676434534451013307891476809505965003364463706502868834742525815830814492484165778659587</span>, <span class="number">8166140295702705700395932322789090244824428366114951893911644134774959163562810185361333621863609139128772766004899397707351421904667080061768039818505350911041979508989714659275009135159974367690971928143915291585444591471643654394998052988522554930699706249604920467869677602144648519540475773077094544621879816388166112425971849485960827238183936548150306573608653859245355573339051077997289111414512279487536882904628267661230723738630443448632824642827281459881525198877210749057510831197018233179399730814958129875964180438394548470264377690208812256581197996134290095012248199229098363134875105995583143456168</span>, <span class="number">7886150187486607733887128114395381216280632497989629748521639744973030901762862876238518693357844959238094796545062411041606956447558438012468158689781248611833577676585338278147089873855656470245899229225464314602079901728048645256171396517696354087510327916826422932730522688556064550363916637523771395744826680925934243060230500845916621676929436788265600433752247152028066595489876401981088262668869028915433063354318691392248675089923289405167438193023160255479805758334680481491101176946904940583407560870907209114968515837974428072735042388612237381596523708101955987248270337329833158967647159556534902013893</span>]</span><br><span class="line">comm = (<span class="number">9026467857515594907139807322545643350722792398333959966810869076838279879742354562376888810480050803270079309674260152449220680190968011586239815898932783620194546687257066163982003360839627375768650529178687560019057911732404297565185448089372452182330617296119274984700102752558018626083227105916899465707167123429214371669495986051607781832508462509001195586237627932854012820647829936908023798167666909963391041754465967388417732502397794744032988693994711566201865393143230144593516438201799281519569197057042946810458619730130134659584342739598850633062984339223231306255977280483664354044871774659593149033209</span>, <span class="number">5887596182170973664955287957462647377802905573127495764035296813527168813405478740764981971139443147816701320451276508908764320611456709375484716332728626903126128547418401252520849124559671921918551772662755206548324883488334170067283423978156495671895979491847768306791576421069205614999618915580196468910801165217204877300901375945537974466575619851388784172797986385425693707736028155214422059085724499916277733254676564775837649200298391496783417808690237433893136207762575843230800924871422368332950754364751040187058272878178869385694948947692002564148365094951441755961075673329949416511183562799400968841515</span>)</span><br></pre></td></tr></table></figure>
<p>简单梳理一下题目的已知信息，可以表达成以下两个式子：</p>
<script type="math/tex; mode=display">
(pad(m))^{233} \equiv c\quad(mod\;n) \tag{1}</script><script type="math/tex; mode=display">
m^{d_2}+key^8+key^4+key^2 \equiv commit[0] \quad (mod\;n) \tag{2}</script><p>然后还有：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^7poly[i]*key^i \equiv commit[1] \quad (mod\;n) \tag{3}</script><p>首先，对于m的pad操作，只有少于256种可能，因此可以用爆破操作求解。</p>
<p>一个比较朴素的思路是：想办法求解出(2)中的d2，然后求(1)(2)两式的Gröbner基，从而直接解出key与m。但是从已知的信息好像并不能简单有效地得出关于d2的信息，因此这个方法作罢。</p>
<p>但是消元是势在必行的，观察到三个式子均在模n环上，因此主要就要想如何消元。首先，根据(2)(3)两式，可以用resultant消去key，转化成一个关于m^d的单变量多项式，然后由(1)(2)两式求gcd就能得到m。</p>
<p>但是，还是老问题，没有d2怎么求gcd呢？所以无论怎么样，这个d2是绕不开的一个问题，而我们能利用的关于d2信息就只有一条：</p>
<script type="math/tex; mode=display">
e_2*d_2 \equiv 1 \quad (mod\;\phi(n))</script><p>关键就在于怎么利用，因为我们现在有的是一个关于m^d2的模n下的多项式，而并不是一个数字，因此没有办法简单的直接求e2次幂。然后在几位师傅的帮助下，学习了一下伴随矩阵的使用：在sage中，如果拥有一个monic的多项式f(x)，那么可以用companion_matrix函数将其转化为一个伴随矩阵F，并且矩阵F的特征多项式就是f(x)。那你可以想到，在这题目里,我们直接把m^d2看作变量x，那么f(x)有根m^d2，而m^d2既是f(x)的根，也是F的特征值。</p>
<p>而矩阵是可以求幂次的，F^e2次方的特征值就是m^(d2*e2)，那么在模n的环下，该特征值就是m，此时我们再用charpoly函数求F^e2的特征多项式，就得到了一个根为m的多项式了。</p>
<p>那么接下来的工作就很容易，把该多项式和(1)式求解gcd，就能得到(x-m)，就能得到明文m了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Part1: RSA-Encrypted Ciphertext</span></span><br><span class="line">e1 = <span class="number">233</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">c1 = <span class="number">4236463649246394372490570028773321531426122440354351428997745409269923078428264643984899276198044684405861411922920531424639487584475747440112668094733950281377813868988540407013967573584191516922420060508458881142111648007775541541206593622564564631875373635260315932740995440619035591722675173125322220642392862827996987221780888705796026865917969313975598350208578877195524822778355327253625950282635041414028859491576352297298051077024341409125083650148374909480761558443601847884116325029903499801566422663448734010004472905405209374692154735955178855634936508017264189084568424915164265136679303107745093554391</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Part2: RSA-Committed Promise</span></span><br><span class="line">e2 = <span class="number">99181398864848350371016820825262886005052515653150198897546275436659368873943</span></span><br><span class="line">n = <span class="number">11804593083540766953191768473584891632857464298610295673456410319093405751966708262984066641796004658380825990723088997287209884308749055923966759203552497405777188930982989535372734594928432767182748217929177897158889489317608554405915470112027996617864702664597137007278287666634774284031478676422259138168442639629844443754737406734109480041155382192976640499144347256893867447543190494469466088332396851821283556702874066317163371254358756837283841870127393406798300254660201670728912096447184875821681550977470988174485488514169553325962974156396460297399345856735492168813016282687198473612371220123462499438299</span></span><br><span class="line">poly = [<span class="number">11693140800527031176333218506340138430240732192854115958431704393516665671354696442539228569575338743555295185742126489158430815263152939757778849261704565332700814864041988371030487621611557506812653488873444536543143499111306076278080422306914610758456202844384883419669780999835836102076447921204517046598938140064244383099665415296806730515287813702062130475281955202867695799707516205462251852912274330831232375362037653669046715539164625549785400699583991291522758317569231805551847554593188947041531361947659444681456741424693383958548943092649257246992511287359572983628972516677506780721131000304618999959240</span>, <span class="number">8649833849514355009128561581797540267452805179286553003531347469534976088903045945255322948772127884435044654450320045837146400545547035413423698519877318250595578140049443137749594587635124784776640002144869420735353810166877391696732603701567388813523929688499591774843294322221335666734637085035509293762539158494372418206937167893545676403532672666734540153869114591107560124251452526082108870638702356111887843199439729119638581693415233654435010304861838471514755642714031294943492873471199466178392719343340089957082809543276507257853855309815913146064538017999492250838671852901021723088900839652630087246141</span>, <span class="number">10438652195883831412435505413668253747222376993835057512571018586886172468948369796145782100970559858131410652399919261454018181151110711244715955202406007064700539815605400586293839962095578425689125884220411946405356203770630361655071021743875660757465221991116870667245627142015074048387044977823496726850652712591020608153928488470683315016742274925734216097962308837642472645606961264797331661105479206824511239562468503777960135923781994521205671697654968415294210654160582131094288074290198995839634141037654146239631046959485219534841518635072303135929794463631818179287771643492272214514760725403082404954077</span>, <span class="number">6299797573437298253264628040275849948907328879976403409079992234253896659195171862234483958852183317706433020249500667696777456584466888790659866599735145200280792478137705987287433143791976037155630359309176772317673958151640355448435973240969550879845354695745860375206302178000370970096709147495071090575765018242388707621300316998885753178573503094652529005706228511805022756376570371219075764243214260191102332714962783026379460713478294288812651004299398765770489801066856526467071118037951998756053462219010773133084404686760087508480150118199064293552990969966284945601004840346771690026959557356854894243142</span>, <span class="number">5983820380221904115440358005660480412823344425839483679019674090060688612423646544886814493835896810583739677554610487986153726859924027361158809156736196645803178995096319914672180274662462472664438431485027075620562484665653780178408855146763748596173882017604170478152671447791422988271913561725716787175269110153429606771827175728957339646431861352878283239969487426243742285835160804730331718691578524218241320715981666141098574100230167376734068738383108974392515927882240711793555447542821660698352614753928088082506778754171275154966436158307349089886252792151153113074617130452582559608047038630881997177039</span>, <span class="number">8645965524213201512342533940160639034615963495013466945596780273953897799745861434427630308300521898525016597999525817531163934211570038600077012713829688089842641388807750705270930654414851381582193662566863633088157205775657627097344504719056435375579887356258011212827309329133255360061251120340523712584772477488197868145839887008419529501177350232970834479788126170916738231188284692568626261063508315725550701926154671018704631776622326225119240790109750932269682399309418540027656506064831086635915646225839228991353015865676434534451013307891476809505965003364463706502868834742525815830814492484165778659587</span>, <span class="number">8166140295702705700395932322789090244824428366114951893911644134774959163562810185361333621863609139128772766004899397707351421904667080061768039818505350911041979508989714659275009135159974367690971928143915291585444591471643654394998052988522554930699706249604920467869677602144648519540475773077094544621879816388166112425971849485960827238183936548150306573608653859245355573339051077997289111414512279487536882904628267661230723738630443448632824642827281459881525198877210749057510831197018233179399730814958129875964180438394548470264377690208812256581197996134290095012248199229098363134875105995583143456168</span>, <span class="number">7886150187486607733887128114395381216280632497989629748521639744973030901762862876238518693357844959238094796545062411041606956447558438012468158689781248611833577676585338278147089873855656470245899229225464314602079901728048645256171396517696354087510327916826422932730522688556064550363916637523771395744826680925934243060230500845916621676929436788265600433752247152028066595489876401981088262668869028915433063354318691392248675089923289405167438193023160255479805758334680481491101176946904940583407560870907209114968515837974428072735042388612237381596523708101955987248270337329833158967647159556534902013893</span>]</span><br><span class="line">comm = (<span class="number">9026467857515594907139807322545643350722792398333959966810869076838279879742354562376888810480050803270079309674260152449220680190968011586239815898932783620194546687257066163982003360839627375768650529178687560019057911732404297565185448089372452182330617296119274984700102752558018626083227105916899465707167123429214371669495986051607781832508462509001195586237627932854012820647829936908023798167666909963391041754465967388417732502397794744032988693994711566201865393143230144593516438201799281519569197057042946810458619730130134659584342739598850633062984339223231306255977280483664354044871774659593149033209</span>, <span class="number">5887596182170973664955287957462647377802905573127495764035296813527168813405478740764981971139443147816701320451276508908764320611456709375484716332728626903126128547418401252520849124559671921918551772662755206548324883488334170067283423978156495671895979491847768306791576421069205614999618915580196468910801165217204877300901375945537974466575619851388784172797986385425693707736028155214422059085724499916277733254676564775837649200298391496783417808690237433893136207762575843230800924871422368332950754364751040187058272878178869385694948947692002564148365094951441755961075673329949416511183562799400968841515</span>)</span><br><span class="line"></span><br><span class="line">P.&lt;x, y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">x, y = P.gens()</span><br><span class="line">f = <span class="built_in">sum</span>([poly[i] * x^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poly))]) - comm[<span class="number">1</span>]</span><br><span class="line">g = x^<span class="number">2</span> + x^<span class="number">4</span> + x^<span class="number">8</span> + y - comm[<span class="number">0</span>]</span><br><span class="line">h = f.sylvester_matrix(g, x).det().univariate_polynomial().monic()</span><br><span class="line">h_coefficients = h.coefficients()</span><br><span class="line">Hd2 = companion_matrix(h_coefficients)</span><br><span class="line">H = Hd2^e2</span><br><span class="line">final = H.charpoly()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">200</span>,<span class="number">255</span>):</span><br><span class="line">    length = (<span class="number">2048</span> // <span class="number">8</span> - i - <span class="number">1</span>)</span><br><span class="line">    f1 = ((x * <span class="number">256</span>^length + bytes_to_long(long_to_bytes(i) * length))^e1 - c1).univariate_polynomial()</span><br><span class="line">    mm = GCD(final, f1)</span><br><span class="line">    <span class="keyword">if</span> mm <span class="keyword">not</span> <span class="keyword">in</span> ZZ:</span><br><span class="line">        m = <span class="built_in">int</span>(-mm.monic()[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag&#123;07ba38d7a9affba269a613da6d99a7ff&#125;</span></span><br></pre></td></tr></table></figure>
<p>其实很多细节我懂的并不透彻，包括各种sage函数的使用，需要多多学习了。</p>
<p><br></p>
<p><br></p>
<h3 id="easycrt"><a href="#easycrt" class="headerlink" title="easycrt"></a>easycrt</h3><p>题目来源：广东强网杯 2021 个人决赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd,invmod</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n&quot;</span>,n)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + sha1(long_to_bytes(q)).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = getPrime(<span class="number">18</span>)</span><br><span class="line">r2 = getPrime(<span class="number">18</span>)</span><br><span class="line">r3 = getPrime(<span class="number">18</span>)</span><br><span class="line">pad = getPrime(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">d = invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">iq = invmod(q*r2,p*r1)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m = randint(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> m % <span class="number">7</span> == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m&quot;</span>,m)</span><br><span class="line"></span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">dq = d % (q - <span class="number">1</span>)</span><br><span class="line">Sp = <span class="built_in">pow</span>(m + pad, dp, p * r1)</span><br><span class="line">S1 = <span class="built_in">pow</span>(m, dp % (r1 - <span class="number">1</span>), r1)</span><br><span class="line">Sq = <span class="built_in">pow</span>(m, dq, q * r2)</span><br><span class="line">S2 = <span class="built_in">pow</span>(m, dq % (r2 - <span class="number">1</span>), r2)</span><br><span class="line">S = Sq + (q * r2) * (iq * (Sp - Sq) % (p * r1))</span><br><span class="line">c1 = (S - S1 + <span class="number">1</span>) % r1</span><br><span class="line">c2 = (S - S2 + <span class="number">1</span>) % r2</span><br><span class="line">y = (r3 * c1 + (<span class="number">2</span>**<span class="number">18</span> - r3) * c2) // <span class="number">2</span>**<span class="number">18</span></span><br><span class="line"></span><br><span class="line">sig = <span class="built_in">pow</span>(S, y, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig&quot;</span>,sig)</span><br></pre></td></tr></table></figure>
<p>enc.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 15607652517362093645325317106793899509049466286289406123011562305732952834110025278707770877710387511133525615547749067167022163144871246026729711471170089144091842130735468670759804996736436114870014417745362424832770744726487119356277902631543992047543702092569479132696642375458263796132196310174835558347436349470015821172039278202738123606756327018331739326913099131587338291813228001362150294270185257672772964543656446660394264977076202429526267205338019235884610484301330863633308326891900441046466311908648695612469874605299959023321039907455357375512719105021644958752946075704546448277530349374124925552999</span><br><span class="line">sig = 10529383690563626041913943912548148193819837348659016705087283692659198195639818226546674852244543732342882844923086010181839287638468160452876441986475739097061958400475370429389938633409459705321551413680888540996412276373484717577799632143058273282184901897121998551083953391761808538319274041663569149845813852812460215349964039044454715161276326154052689106577168080671792457943959674009099696029742287088741014864890643610109608810518217249714342499311259749863368245284452473571531519289299316677019474225948437231068806941146456877792741550185160112281625929417877458463803652501300748844407304985956111227832</span><br><span class="line">m = 9221389214846452074650198574187733045048782681343858755771769264298997816865330014844850679483076796014601281496675756079954850050104766792742802672859212829451854911463986483312887597249074612447791144976425525708325445215521780736722325242438897188724275411273730095000042905697065812817717123169837477587937321878898881598591204738992809905166463654289137499334014194236642634848110827034366887478823691109550776819273014443942468214983033609722152912395399288856874022406788892463061718806118721777027702827433908594054906653446257493698282318911042247500866249480426304090761922444970044089807749920717682404402</span><br></pre></td></tr></table></figure>
<p>题目的信息很多，完成这一题的关键就是要注意到其中真正有用的几个信息，如下：</p>
<script type="math/tex; mode=display">
S_q = m^{dq} \quad (mod\; r_2q)</script><script type="math/tex; mode=display">
S = S_q + r_2q*(iq*(S_p-S_q) \;mod \;(r_1p))</script><script type="math/tex; mode=display">
sig = S^{y} \quad (mod\;n)</script><p>这几个信息有用在哪里呢？首先，S其实就是对Sp、Sq的中国剩余定理组合，呼应题目crt。不过没看出来也不重要，我们把这几个式子均放在模q下分析：</p>
<script type="math/tex; mode=display">
S_q \equiv m^{dq} \quad (mod\;q)</script><script type="math/tex; mode=display">
S \equiv S_q \quad (mod\;q)</script><script type="math/tex; mode=display">
sig \equiv S^y \quad(mod\;q)</script><p>首先有：</p>
<script type="math/tex; mode=display">
S_q^e \equiv m \quad(mod\;q)</script><p>因此：</p>
<script type="math/tex; mode=display">
sig^e \equiv m^y \quad (mod\;q)</script><p>而注意到y由如下方式产生：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = (r3 * c1 + (<span class="number">2</span>**<span class="number">18</span> - r3) * c2) // <span class="number">2</span>**<span class="number">18</span></span><br></pre></td></tr></table></figure>
<p>其中的几个参数均较小，因此y的数量级大约也就在2^18以内，因此我们可以爆破y，从而有：</p>
<script type="math/tex; mode=display">
sig^e - m^y = kq</script><p>求解该式与n的gcd就能得到q，进而恢复flag。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">15607652517362093645325317106793899509049466286289406123011562305732952834110025278707770877710387511133525615547749067167022163144871246026729711471170089144091842130735468670759804996736436114870014417745362424832770744726487119356277902631543992047543702092569479132696642375458263796132196310174835558347436349470015821172039278202738123606756327018331739326913099131587338291813228001362150294270185257672772964543656446660394264977076202429526267205338019235884610484301330863633308326891900441046466311908648695612469874605299959023321039907455357375512719105021644958752946075704546448277530349374124925552999</span></span><br><span class="line">sig = <span class="number">10529383690563626041913943912548148193819837348659016705087283692659198195639818226546674852244543732342882844923086010181839287638468160452876441986475739097061958400475370429389938633409459705321551413680888540996412276373484717577799632143058273282184901897121998551083953391761808538319274041663569149845813852812460215349964039044454715161276326154052689106577168080671792457943959674009099696029742287088741014864890643610109608810518217249714342499311259749863368245284452473571531519289299316677019474225948437231068806941146456877792741550185160112281625929417877458463803652501300748844407304985956111227832</span></span><br><span class="line">m = <span class="number">9221389214846452074650198574187733045048782681343858755771769264298997816865330014844850679483076796014601281496675756079954850050104766792742802672859212829451854911463986483312887597249074612447791144976425525708325445215521780736722325242438897188724275411273730095000042905697065812817717123169837477587937321878898881598591204738992809905166463654289137499334014194236642634848110827034366887478823691109550776819273014443942468214983033609722152912395399288856874022406788892463061718806118721777027702827433908594054906653446257493698282318911042247500866249480426304090761922444970044089807749920717682404402</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(sig,<span class="number">65537</span>,n)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span>(GCD(c1-<span class="built_in">pow</span>(m,i,n),n) != <span class="number">1</span>):</span><br><span class="line">        q = GCD(c1-<span class="built_in">pow</span>(m,i,n),n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NSSCTF&#123;&quot;</span> + sha1(long_to_bytes(q)).hexdigest() + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;947d9f457b224fb7779b84158ea72861b4e72af3&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="BABY-RSA"><a href="#BABY-RSA" class="headerlink" title="BABY RSA"></a>BABY RSA</h3><p>题目来源：HITCTF 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">4096</span></span><br><span class="line">next_state = getRandomInteger(size // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">size</span>):</span><br><span class="line">    q = getPrime(size)</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = q * k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    g = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(g, q, p) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line">    A = getRandomInteger(size) % q</span><br><span class="line">    B = getRandomInteger(size) % q</span><br><span class="line">    d = getRandomInteger(size) % q</span><br><span class="line">    h = <span class="built_in">pow</span>(g, d, p)</span><br><span class="line">    <span class="keyword">return</span> (g, h, A, B, p, q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">A, B, M</span>):</span><br><span class="line">    <span class="keyword">global</span> next_state</span><br><span class="line">    next_state, ret = (B * next_state + A) % M, next_state</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">pubkey, m</span>):</span><br><span class="line">    g, h, A, B, p, q = pubkey</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt; m &lt;= p</span><br><span class="line">    r = rand(A, B, q)</span><br><span class="line">    e = <span class="number">0xfaab</span></span><br><span class="line">    c1 = (<span class="built_in">pow</span>(m,e,p) * <span class="built_in">pow</span>(h, r, p)) % p</span><br><span class="line">    r = rand(A, B, q)</span><br><span class="line">    c2 = (m * <span class="built_in">pow</span>(h, r, p)) % p</span><br><span class="line">    <span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pubkey= keygen(size)</span><br><span class="line"><span class="built_in">print</span>(pubkey)</span><br><span class="line"></span><br><span class="line">secret = bytes_to_long(<span class="string">&quot;HITCTF2021(xxxxxxxxxxxxxxxxxxx)&quot;</span>)</span><br><span class="line">c1,c2= enc(pubkey, secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pk = (52, </span></span><br><span class="line"><span class="comment">#47782489586021221729935382562238217213800826152327617948974334325027793433971508995399461776417812670604694882926777607105164020070178881963632306169611641854448509182837621758791538269408388860349616761041456174827996858614494726877767399938809515247000929894281600963992080920650256329287847887064428158469516438206831721224607859023980203694210651902538562842945949404149023836218548894116477022953606370852246884414011363477543284815671096832245521762246149180260936985618856296642080245029837974725521906177900378634071571992373478242159162403228753252168867425697897820696887070051128304178291193132322824455442092893684929701869625045112839344191126228806117685809636908190595562295591835629941512331963039016185366202513504464795106031092314892430859175307526232632986110464780357940552264674214665391043812843917461961230679207586174459563057178720743465356337218948534837994061644332424634750340190113117958830588820626581860957277456320434445207368613679418733984291985618038226928033006640791987978775285182325347153201516936002001839296455263977479446850434913069389565277028444638437387429263495729274142916464752814676819557878779855996225208596159171827854923873570163767937947956753277454486339143489103105750331110111L,</span></span><br><span class="line"><span class="comment">#433229619560374735022060612660487139311547277564407316269466855779330930804160973325703376198605206390912154427123102710354958367692760474727012214464298979098489170777185729836132968187705068687678796437447631516334893543456227545790012358063578349956636488453355182971532300478038635153420232589545761194907476691636706445176390661463152150169542241304542401678253873515488446133330974312465916350895130227137954122794991542025930903127027608739905609108321738139103065645651901833223353774916656293079960486497159730921219805951217073283062070931854507016733789164315751827862830668829125950364981217520865411859759718244136420504507997449935455788230060974032741364271601426191469331266168231203426316280988734802654397014768828735251891167507794161264913387252048434549271931367148180980260205843989153008044839641263127846901551223167574691783927938948745126094512037792728067785201012834153473172824948188352810070916677679450209134179624791196123158336411804834221293611075447043002901607162001357780058394706516204775756666576041740010288970758149528406172022049389998133360726123682741312251431519423867620962951022993364287241463507027520966721930799696555390707280246584903566049326608205785466271642132178515338520410658L, </span></span><br><span class="line"><span class="comment">#594494499417894774789048451572687632660208181953899084791149805130704950465573064455173172705283156011806901684972459390817538594318847879599780068410149543731305374894040638491310362570467887919519584736646557258917947483658649575357363123407313011773027073062592473100264464401987309633458687673513776139455296286685115396610808047870099635374955339289799615102534094497730932884838674370338192153202045642565170696704452991192684466848026383861073123033948004049599266417667125680356386669226827901570782628388996520826906941293858994180130505009152517646592286697346622724843482147801718703310671546709185342317509441259927498881276856470161174444209513355803640646947368551446328198695259259829546707119878154837158880677882305548928799964929213106969848547576414765380870575558771867763848114411251654245747231121164090765647221739709450477815688276801154266722035408374135871417564206013020997849375553619152730479571927135850379285559873197371293312934173379820835252091990919727655797413411368987930118553258247264348519581466374312010472449698571319621067244494880512957538208007914329691196084901181642263713183616896210154681618376310287185315262021479758282631576946335858068664109425856174388362174761355148787245515144L, </span></span><br><span class="line"><span class="comment">#261181509476485410165375351178418657075805043256124045823778754055035546150122155335065215645750231604267318872693494310557376958843829685914382636208107544361140482291909865660810395856913449414106045946602124226832733980696161639105193768954092281635195760991693212657816181524313660831938528737461195472275606167593968953647934279724693129491600232382201769523725243272086370087058597321533767924008747705935388941121530345216164771817150616453601212026925759807092457510188966636612860912597984231762129535299227711879953931847880037605415987083573556274570400085013894504645789376654166259691075373526751505971657856429187752015665407876751018316490729668209646098952144838144486106489379202197360745365239628186669447122272538227142855706247593556669905666428363734481409983627496127639634726855140379146669911302677456457202808949896992958886949162850488164457334796828240069980922051762068458877051063958308363343196940785994299643315504146607392461323382470475501119070077564995866998018505817611171892860136485534016608294708527673407517876647349723758712907513973353401204912431800080247493896815299218218930415151745986776831977527196435124521552249406640177674130330651411672455343809240941664288436809369136070604763156723L, </span></span><br><span class="line"><span class="comment">#781980567294866497501123805923409152921571985796778580310714832500106425599168129745704238460330034743315325966148186558555020834861765526689768371880561510063294857161406783415599987595549249742832472894018336008481239463162160596123334637587102639626334613747584469035377788994951080335145295621141303809208401699383140579784234370433212962549701294557490327915345039736785539182810171621358586598828585945914338147070450135377738837775900049262279077924927424572133106317931037834170242253287377939407573458979723688263335125293054004806634691866986695432845509236568546421095177774413671436200824471636980556801370827632298658729537149331589875199074040922783371553748936641151156007453231144303475285524669545469070200964887839003421723671399980708592531935414262678088053843196096190537828523518384368702604524858315737895816793263164649577505835816917629234902199990503712784374018119048109158314524143587749590847895032293396106716513485468884408566836474462501500356497238218550499994067382687458598481617175106389271282319486609800621311007926196777720697327886147764674266204885628982776927834776344964727336572310616726876742447686216871630304048650918084364293803385183867282800430566589645701462385656793820570672943583L)</span></span><br><span class="line"><span class="comment">#c1,c2 = (94439884067875866926510480826480805218086956848743547499198006820458557396798764306362789177343865957780128049481100649740991723046823411381255593998762330282701428367295145704749575923764033888430043419432755523895502809914793389377786178823780078298402526077689075100615167801149188073166609798060195606072633000544828049766057724062947725409167355039403877440527580919770561607036599124342541749265192021823491918944278440530549040290346018294412510920437610359378345321588108996817523300112050660236797578506114472897358316471445079369284771733206616722439988368610144077799745808242486800244677553898369876207696781377538070465563883203111584722721805287175889444151342208592141472448213468221732504380079996468560634932304003913239528756529682825338927264423302712140156109639630352986070846491530710979222740690647201189995078959423441714667664068681190006816257273563900319001844315873583504406793282181337548468252678860728542345494826571860793722889527787190697802307747398283993641414712543326007228545296721676768940364724157476527100408795556913732012808496296586935767075610857696900781575977854898411278115773743046743452254128886824788564219765260031723480676483312846917497210349237445933078576069670523680684713623446L, 36397082263544765924779841921119370016762339442058655416586193728619075025998163340396086334077244844310435402140631243689371206933579011146142036715931618067708305508617210563902014072058872403638202493268214994615135134434419245572034705984431586848768861656760831721539666418749603708776469542844144251059399582543923184073020411373179905155719536662312209785364646479188735299232303697790049147771382959302788060004896713986087257232599766636580823138965201801581260077589060485570410897810958498454358737888682940093471597533949463149992040055832220962541050083923086389598838921222167415555331634007862804183991931445726265293675584802614392692457772587297132115782027787479633548163420352103982803350538152059924978489540395956166707435927694988026192837010341182919501051673735679100778154041581361254807291072654267471473503037873994575370262350787611333206450177404857861689910339996980215797433744385047164909022377659304404477322770853683922772248965438499817404000913895236832920522508813098567854697829563333570746651008308539370730448094601234580689549622502198266967939450827346984012446321546195185770288650359658551649011648788273482810013579385313367223458143686448798406205345442061625590854243243883117300950978940L)</span></span><br></pre></td></tr></table></figure>
<p>题目参数较多，因此需要梳理一下各个参数的产生方式以及各个函数的作用。</p>
<p>首先是参数：</p>
<ul>
<li>p、q均为素数，且有 p = kq+1</li>
<li>选取一个阶为q的数g</li>
<li>随机生成三个小于q的参数A、B、d</li>
<li>计算h=g^d % p，返回参数(g, h, A, B, p, q)</li>
</ul>
<p>然后是函数：</p>
<ul>
<li>rand函数，实现一个LCG功能</li>
<li>enc函数，将flag进行如下加密，并返回c1、c2：</li>
</ul>
<script type="math/tex; mode=display">
c1 \equiv m^eh^r \quad(mod\;p)</script><script type="math/tex; mode=display">
c2 \equiv mh^{Br+A \;(mod\;q)} \quad(mod\;p)</script><p>首先观察到c1、c2中未知的参数一共只有m与r，而m是我们需要求解的flag，因此需要想办法消掉r。而r在指数上并且模了q，所以要先判断出这个模q的作用。</p>
<p>而在参数生成中，我们分析过g是一个阶为q的元素，而h=g^d % p，那么由元素的阶的相关知识可以知道，h的阶为：</p>
<script type="math/tex; mode=display">
\frac{q}{gcd(d,q)}</script><p>而由于q是个素数，因此h也是一个阶为q的素数，所以满足：</p>
<script type="math/tex; mode=display">
h^q \equiv 1 \quad(mod\;p)</script><p>这样说只是为了了解的更清楚一点，实际上只需要将h=g^d代入计算也能发现上式。而这个式子的作用就是消除模q在指数上的影响，如下：</p>
<script type="math/tex; mode=display">
h^{Br+A \;(mod\;q)} \equiv h^{Br+A+kq} \equiv h^{Br+A}*(h^q)^k  \equiv h^{Br+A} \quad (mod\;p)</script><p>所以在消元过程中，我们其实不需要关注q。因此消元分析步骤如下：</p>
<script type="math/tex; mode=display">
c2 \equiv mh^{rB}h^A \quad(mod\;p)</script><script type="math/tex; mode=display">
c1^B \equiv m^{eB}h^{rB} \quad(mod\;p)</script><p>所以：</p>
<script type="math/tex; mode=display">
c1^Bc2^{-1}h^A \equiv m^{eB}h^{rB}*m^{-1}h^{-rB}h^{-A}*h^A \equiv m^{eB-1} \quad (mod\;p)</script><p>因此我们获得了：</p>
<script type="math/tex; mode=display">
m^{eB-1} \quad (mod\;p)</script><p>可以直接RSA解密，但是发现eB-1与p-1有公因子167，因此需要先求解部分逆元后AMM开根。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">(g, h, A, B, p, q) = (<span class="number">52</span>, <span class="number">47782489586021221729935382562238217213800826152327617948974334325027793433971508995399461776417812670604694882926777607105164020070178881963632306169611641854448509182837621758791538269408388860349616761041456174827996858614494726877767399938809515247000929894281600963992080920650256329287847887064428158469516438206831721224607859023980203694210651902538562842945949404149023836218548894116477022953606370852246884414011363477543284815671096832245521762246149180260936985618856296642080245029837974725521906177900378634071571992373478242159162403228753252168867425697897820696887070051128304178291193132322824455442092893684929701869625045112839344191126228806117685809636908190595562295591835629941512331963039016185366202513504464795106031092314892430859175307526232632986110464780357940552264674214665391043812843917461961230679207586174459563057178720743465356337218948534837994061644332424634750340190113117958830588820626581860957277456320434445207368613679418733984291985618038226928033006640791987978775285182325347153201516936002001839296455263977479446850434913069389565277028444638437387429263495729274142916464752814676819557878779855996225208596159171827854923873570163767937947956753277454486339143489103105750331110111</span>,<span class="number">433229619560374735022060612660487139311547277564407316269466855779330930804160973325703376198605206390912154427123102710354958367692760474727012214464298979098489170777185729836132968187705068687678796437447631516334893543456227545790012358063578349956636488453355182971532300478038635153420232589545761194907476691636706445176390661463152150169542241304542401678253873515488446133330974312465916350895130227137954122794991542025930903127027608739905609108321738139103065645651901833223353774916656293079960486497159730921219805951217073283062070931854507016733789164315751827862830668829125950364981217520865411859759718244136420504507997449935455788230060974032741364271601426191469331266168231203426316280988734802654397014768828735251891167507794161264913387252048434549271931367148180980260205843989153008044839641263127846901551223167574691783927938948745126094512037792728067785201012834153473172824948188352810070916677679450209134179624791196123158336411804834221293611075447043002901607162001357780058394706516204775756666576041740010288970758149528406172022049389998133360726123682741312251431519423867620962951022993364287241463507027520966721930799696555390707280246584903566049326608205785466271642132178515338520410658</span>, <span class="number">594494499417894774789048451572687632660208181953899084791149805130704950465573064455173172705283156011806901684972459390817538594318847879599780068410149543731305374894040638491310362570467887919519584736646557258917947483658649575357363123407313011773027073062592473100264464401987309633458687673513776139455296286685115396610808047870099635374955339289799615102534094497730932884838674370338192153202045642565170696704452991192684466848026383861073123033948004049599266417667125680356386669226827901570782628388996520826906941293858994180130505009152517646592286697346622724843482147801718703310671546709185342317509441259927498881276856470161174444209513355803640646947368551446328198695259259829546707119878154837158880677882305548928799964929213106969848547576414765380870575558771867763848114411251654245747231121164090765647221739709450477815688276801154266722035408374135871417564206013020997849375553619152730479571927135850379285559873197371293312934173379820835252091990919727655797413411368987930118553258247264348519581466374312010472449698571319621067244494880512957538208007914329691196084901181642263713183616896210154681618376310287185315262021479758282631576946335858068664109425856174388362174761355148787245515144</span>, <span class="number">261181509476485410165375351178418657075805043256124045823778754055035546150122155335065215645750231604267318872693494310557376958843829685914382636208107544361140482291909865660810395856913449414106045946602124226832733980696161639105193768954092281635195760991693212657816181524313660831938528737461195472275606167593968953647934279724693129491600232382201769523725243272086370087058597321533767924008747705935388941121530345216164771817150616453601212026925759807092457510188966636612860912597984231762129535299227711879953931847880037605415987083573556274570400085013894504645789376654166259691075373526751505971657856429187752015665407876751018316490729668209646098952144838144486106489379202197360745365239628186669447122272538227142855706247593556669905666428363734481409983627496127639634726855140379146669911302677456457202808949896992958886949162850488164457334796828240069980922051762068458877051063958308363343196940785994299643315504146607392461323382470475501119070077564995866998018505817611171892860136485534016608294708527673407517876647349723758712907513973353401204912431800080247493896815299218218930415151745986776831977527196435124521552249406640177674130330651411672455343809240941664288436809369136070604763156723</span>, <span class="number">781980567294866497501123805923409152921571985796778580310714832500106425599168129745704238460330034743315325966148186558555020834861765526689768371880561510063294857161406783415599987595549249742832472894018336008481239463162160596123334637587102639626334613747584469035377788994951080335145295621141303809208401699383140579784234370433212962549701294557490327915345039736785539182810171621358586598828585945914338147070450135377738837775900049262279077924927424572133106317931037834170242253287377939407573458979723688263335125293054004806634691866986695432845509236568546421095177774413671436200824471636980556801370827632298658729537149331589875199074040922783371553748936641151156007453231144303475285524669545469070200964887839003421723671399980708592531935414262678088053843196096190537828523518384368702604524858315737895816793263164649577505835816917629234902199990503712784374018119048109158314524143587749590847895032293396106716513485468884408566836474462501500356497238218550499994067382687458598481617175106389271282319486609800621311007926196777720697327886147764674266204885628982776927834776344964727336572310616726876742447686216871630304048650918084364293803385183867282800430566589645701462385656793820570672943583</span>)</span><br><span class="line">c1,c2 = (<span class="number">94439884067875866926510480826480805218086956848743547499198006820458557396798764306362789177343865957780128049481100649740991723046823411381255593998762330282701428367295145704749575923764033888430043419432755523895502809914793389377786178823780078298402526077689075100615167801149188073166609798060195606072633000544828049766057724062947725409167355039403877440527580919770561607036599124342541749265192021823491918944278440530549040290346018294412510920437610359378345321588108996817523300112050660236797578506114472897358316471445079369284771733206616722439988368610144077799745808242486800244677553898369876207696781377538070465563883203111584722721805287175889444151342208592141472448213468221732504380079996468560634932304003913239528756529682825338927264423302712140156109639630352986070846491530710979222740690647201189995078959423441714667664068681190006816257273563900319001844315873583504406793282181337548468252678860728542345494826571860793722889527787190697802307747398283993641414712543326007228545296721676768940364724157476527100408795556913732012808496296586935767075610857696900781575977854898411278115773743046743452254128886824788564219765260031723480676483312846917497210349237445933078576069670523680684713623446</span>, <span class="number">36397082263544765924779841921119370016762339442058655416586193728619075025998163340396086334077244844310435402140631243689371206933579011146142036715931618067708305508617210563902014072058872403638202493268214994615135134434419245572034705984431586848768861656760831721539666418749603708776469542844144251059399582543923184073020411373179905155719536662312209785364646479188735299232303697790049147771382959302788060004896713986087257232599766636580823138965201801581260077589060485570410897810958498454358737888682940093471597533949463149992040055832220962541050083923086389598838921222167415555331634007862804183991931445726265293675584802614392692457772587297132115782027787479633548163420352103982803350538152059924978489540395956166707435927694988026192837010341182919501051673735679100778154041581361254807291072654267471473503037873994575370262350787611333206450177404857861689910339996980215797433744385047164909022377659304404477322770853683922772248965438499817404000913895236832920522508813098567854697829563333570746651008308539370730448094601234580689549622502198266967939450827346984012446321546195185770288650359658551649011648788273482810013579385313367223458143686448798406205345442061625590854243243883117300950978940</span>)</span><br><span class="line">e = <span class="number">0xfaab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c = pow(m,eB-1,p)</span></span><br><span class="line">c = <span class="built_in">pow</span>(c1,B%q,p)*inverse(c2,p)*<span class="built_in">pow</span>(h,A%q,p) % p</span><br><span class="line">E = e*B-<span class="number">1</span></span><br><span class="line">d = inverse(E//<span class="number">167</span>,p-<span class="number">1</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c1 % p</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, <span class="number">167</span>, p)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(<span class="number">167</span>, p)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, <span class="number">167</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp:</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;HITCTF&quot;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(i))):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(i)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#HITCTF2021&#123;Numb3r_Th30ry_1s_Funny!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="ISITDTU-RSA"><a href="#ISITDTU-RSA" class="headerlink" title="ISITDTU_RSA"></a>ISITDTU_RSA</h3><p>题目来源：ISITDTU CTF 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">401327687854144602104262478345650053155149834850813791388612732559616436344229998525081674131271</span></span><br><span class="line">p2 = <span class="number">500233813775302774885494989064149819654733094475237733501199023993441312997760959607567274704359</span></span><br><span class="line">p3 = <span class="number">969568679903672924738597736880903133415133378800072135853678043226600595571519034043189730269981</span></span><br><span class="line">e1 = <span class="number">398119</span></span><br><span class="line">e2 = <span class="number">283609</span></span><br><span class="line">e3 = <span class="number">272383</span></span><br><span class="line"></span><br><span class="line">c = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e1, p1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e2, p2)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e3, p3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c = 104229015434394780017196823454597012062804737684103834919430099907512793339407667578022877402970</span></span><br></pre></td></tr></table></figure>
<p>题目将flag依次用类似RSA加密的方式连续加密了三次每次使用一个不同的素数ei作为加密指数，使用一个不同的素数pi作为模数。最直接的想法自然就是直接求解解密指数di，然后连续解密三次就能得到明文。</p>
<p>但是，实际操作时发现，任何一个解密指数都不存在，这是因为每一个ei都被pi-1整除，因此无法求解逆元。而这个时候，正常思路来想的话自然马上就会想到AMM算法。</p>
<p>但是直接用AMM算法会遇到一些问题：</p>
<ul>
<li>指数数量级相对较大，可能AMM速度会比较慢</li>
<li>每一次AMM开根会开出ei个根，而下一次进行AMM开根时，需要对上一次AMM开根得到的所有根再进行一次开根。比如第二次开根时，我们需要对第一次AMM得到的272383个根均进行一次AMM算法，在第三次开根时则更多，这个数量级是不可接受的</li>
</ul>
<p>不管怎么样先开一次根试试，实际操作一下会发现，AMM开几十万次方根并得到所有解其实也只需要三四分钟，因此第一个问题并不用特别关心，主要就是要解决第二个问题：如何处理这个三个加密指数相乘的超大复杂度？</p>
<p>要解决这一点需要注意到以下事实，由于：</p>
<script type="math/tex; mode=display">
c1 = m^{e1} \quad(mod\;p1)</script><script type="math/tex; mode=display">
c2 = c1^{e2} \quad(mod\;p2)</script><script type="math/tex; mode=display">
c3 = c2^{e3} \quad(mod\;p3)</script><p>也就是说，在我们AMM算法开出的e3个根中，正确的根需要满足是模p2下的e2次剩余；同理，第二次AMM算法后，正确的根需要满足是模p1下的e1次剩余。</p>
<p>而一个数是否是模p下的k次剩余这个问题，可以通过类似于判断模p下的二次剩余的方法，也就是运用欧拉判别式如下：</p>
<script type="math/tex; mode=display">
a^{\frac{p-1}{k}} \equiv 1 \quad (mod\;p)</script><p>如果一个数a满足上式，那么他就是模p下的k次剩余。那么有了这个判别方式后，对于第一次AMM算法得到的e3个根，我们可以先判断其是否是模p2下的e2次剩余，然后找到符合要求的根，再对其进行AMM算法开e2次根，以此类推，最后由于flag头未知(做出来前不知道这是什么比赛的什么题，别的师傅问我的)，最后一次AMM得到的e1个根中，可以采用判断字节流转成的字符串中没有”\x”来确定是flag串。</p>
<p>那么实际耗时也就是三次独立的AMM算法的总耗时，约10分钟。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">401327687854144602104262478345650053155149834850813791388612732559616436344229998525081674131271</span></span><br><span class="line">p2 = <span class="number">500233813775302774885494989064149819654733094475237733501199023993441312997760959607567274704359</span></span><br><span class="line">p3 = <span class="number">969568679903672924738597736880903133415133378800072135853678043226600595571519034043189730269981</span></span><br><span class="line">e1 = <span class="number">398119</span></span><br><span class="line">e2 = <span class="number">283609</span></span><br><span class="line">e3 = <span class="number">272383</span></span><br><span class="line">c = <span class="number">53439232235483323845772940768628860612955240528996700091904547428796321356639732497361321352956</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">pow</span>(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = <span class="built_in">pow</span>(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = <span class="built_in">pow</span>(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = <span class="built_in">pow</span>(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (<span class="built_in">pow</span>(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  <span class="comment"># use function set() and .add() ensure that the generated elements are not repeated</span></span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp3 = c % p3</span><br><span class="line">mp3 = AMM_rth(cp3, e3, p3)</span><br><span class="line">rt3 = ALL_ROOT2(e3, p3)</span><br><span class="line">amp3 = ALL_Solution(mp3, p3, rt3, cp3, e3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp3:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),(p2-<span class="number">1</span>)//e2,p2)==<span class="number">1</span>):</span><br><span class="line">        c2 = <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3 Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">cp2 = c % p2</span><br><span class="line">mp2 = AMM_rth(cp2, e2, p2)</span><br><span class="line">rt2 = ALL_ROOT2(e2, p2)</span><br><span class="line">amp2 = ALL_Solution(mp2, p2, rt2, cp2, e2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp2:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),(p1-<span class="number">1</span>)//e1,p1)==<span class="number">1</span>):</span><br><span class="line">        c1 = <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2 Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">cp1 = c % p1</span><br><span class="line">mp1 = AMM_rth(cp1, e1, p1)</span><br><span class="line">rt1 = ALL_ROOT2(e1, p1)</span><br><span class="line">amp1 = ALL_Solution(mp1, p1, rt1, cp1, e1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> amp1:</span><br><span class="line">    temp = <span class="built_in">str</span>(long_to_bytes(<span class="built_in">int</span>(i)))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;\\x&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ISITDTU&#123;s0_m4ny_m0dul4r_r00t5&#125;</span></span><br></pre></td></tr></table></figure>
<p>同时注意，正常来说应该把所有符合条件的ei次剩余都进行一次AMM算法，但是这个题实际做下来每次AMM后都确实只有一个根符合要求，因此可以这么写。</p>
<p><br></p>
<p><br></p>
<h3 id="sus"><a href="#sus" class="headerlink" title="sus"></a>sus</h3><p>题目来源：ImaginaryCTF 2023</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apparently, there is something weird happening with the prime generation.</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sus</span>(<span class="params">sz, d</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(sz)</span><br><span class="line">        pp = <span class="built_in">sum</span>([p**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(d)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(pp):</span><br><span class="line">            <span class="keyword">return</span> p, pp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = sus(<span class="number">512</span>, <span class="number">3</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span> * <span class="number">3</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1125214074953003550338693571791155006090796212726975350140792193817691133917160305053542782925680862373280169090301712046464465620409850385467397784321453675396878680853302837289474127359729865584385059201707775238870232263306676727868754652536541637937452062469058451096996211856806586253080405693761350527787379604466148473842686716964601958192702845072731564672276539223958840687948377362736246683236421110649264777630992389514349446404208015326249112846962181797559349629761850980006919766121844428696162839329082145670839314341690501211334703611464066066160436143122967781441535203415038656670887399283874866947000313980542931425158634358276922283935422468847585940180566157146439137197351555650475378438394062212134921921469936079889107953354092227029819250669352732749370070996858744765757449980454966317942024199049138183043402199967786003097786359894608611331234652313102498596516590920508269648305903583314189707679</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">27126515219921985451218320201366564737456358918573497792847882486241545924393718080635287342203823068993908455514036540227753141033250259348250042460824265354495259080135197893797181975792914836927018186710682244471711855070708553557141164725366015684184788037988219652565179002870519189669615988416860357430127767472945833762628172190228773085208896682176968903038031026206396635685564975604545616032008575709303331751883115339943537730056794403071865003610653521994963115230275035006559472462643936356750299150351321395319301955415098283861947785178475071537482868994223452727527403307442567556712365701010481560424826125138571692894677625407372483041209738234171713326474989489802947311918341152810838321622423351767716922856007838074781678539986694993211304216853828611394630793531337147512240710591162375077547224679647786450310708451590432452046103209161611561606066902404405369379357958777252744114825323084960942810</span></span><br></pre></td></tr></table></figure>
<p>最近学习了一下商环，然后偶然发现了这道题，解法很有意思，因此记录一下。</p>
<p>题目加密过程很简单：</p>
<ul>
<li>生成512比特的素数p，并按如下方式生成q，保证q为素数：</li>
</ul>
<script type="math/tex; mode=display">
q = 1+p+p^2</script><ul>
<li>生成512*3比特的素数r，然后计算n=pqr，并按RSA方式加密flag，给出公钥n、e以及密文c，要求还原flag</li>
</ul>
<p>我们的目标肯定是获得n的分解，而n具有如下形式：</p>
<script type="math/tex; mode=display">
n = p(1+p+p^2)r</script><p>第一个想法是，能否直接copper解出模pq下的小根p，但是马上就会发现不行：因为r是一个1536比特的大素数，同时写出的f(x)=x(1+x+x^2)的度也不低，p肯定远远超过了理论小根的上界。</p>
<p>那么就换思路，肯定要利用素数q的特殊生成方式：</p>
<script type="math/tex; mode=display">
q = 1+p+p^2</script><p>看这个形式应该不难与立方差联系起来：</p>
<script type="math/tex; mode=display">
p^3-1 = (p-1)(1+p+p^2) = (p-1)q</script><p>但是接下来怎么用就完全没思路了，然后就只能看wp和请求认识的师傅帮助。最后发现解法对于我来说是真的很有想象力，原wp如下：</p>
<blockquote>
<p>Pick a random polynomial $f(x)=x^3+ax^2+bx+c$, and pick a random element $a$ in $\mathbb{R}=\mathbb{Z}_n[x]/f(x)$. If $f(x)$ is irreducible in $\mathbb{F}_p[x]$ then $\mathbb{K}=\mathbb{F}_p[x]/f(x)=\mathbb{F}_{p^3}$ will be a field with order $p^3-1=(p-1)(p^2+p+1)$.</p>
<p>We raise $a$ to the power of $n=pqr=p(p^2+p+1)r$ then $a^n$ would probably be of order $p-1$, which implies it will be in the form of $u+0x+0x^2$ in $\mathbb{K}$. This means we can take the degree 1 or 2 coefficient of $a^n$ in $\mathbb{R}$ and gcd it with $n$ to get $p$, then we can fully factor $n$ to decrypt the flag.</p>
<p>This is basically the same idea as Pollard’s p-1 or Williams’ p+1 factorization algorithm, but we are doing it in a field with higher degree.</p>
</blockquote>
<p>其实已经讲得非常清楚了，接下来我会对其中一些原理具体说明一下，有不严谨或者错误的地方欢迎各位师傅指出。</p>
<p>首先就是，要利用上立方差公式，我们就要构造一个阶为p^3-1的群，并找某个群中的生成元g，这样就有：</p>
<script type="math/tex; mode=display">
g^n = g^{p(1+p+p^2)r} = (g^{(1+p+p^2)})^{pr}</script><p>我们就可以计算出g^n的阶为：</p>
<script type="math/tex; mode=display">
order(g^n) = \frac{p^3-1}{gcd(n,p^3-1)} = \frac{p^3-1}{1+p+p^2} = p-1</script><p>我们要想办法利用这一点。那么接下来就产生了两个待解决的问题：</p>
<ul>
<li>如何建立一个阶为p^3-1的群？</li>
<li>如何利用g^n的阶为p-1这一条性质？</li>
</ul>
<h4 id="如何建立阶为p-3-1群"><a href="#如何建立阶为p-3-1群" class="headerlink" title="如何建立阶为p^3-1群"></a>如何建立阶为p^3-1群</h4><p>要明白这个问题需要对有限域、多项式环有一定了解。具体说来，我们先定义两个多项式环：</p>
<script type="math/tex; mode=display">
Ring1 = Z_n[x]</script><script type="math/tex; mode=display">
Ring2 = F_p[x]</script><p>以这两个多项式环为基础，我们选择一个度为3的Ring1下的随机多项式f(x)，也就是：</p>
<script type="math/tex; mode=display">
f(x) = x^3 + ax^2 + bx + c</script><p>然后，以这个多项式为基础，我们定义两个多项式商环：</p>
<script type="math/tex; mode=display">
N = Z_n[x]/f(x)</script><script type="math/tex; mode=display">
P = F_p[x]/f(x)</script><p>如果我们随机选择的f(x)在Ring2中不可约，那么我们可以证明，商环P其实就是一个大小为p^3的有限域，也就是：</p>
<script type="math/tex; mode=display">
P = F_p[x]/f(x) = F_{p^3}</script><p>对于他是域，这一点的证明是这样的：</p>
<p><img src="/post/ea445335/image-20231103104427349.png" alt="image-20231103104427349"></p>
<p>而对于这个域大小为p^3，这一点很好想通，其实就是每一项的系数共有p种选择，然后最高是二次项，所以域中共有p^3种不同的元素，因此其大小为p^3。</p>
<p>但是这个域与我们需要的大小为p^3-1的循环群好像还差一点，但其实我们把域中的0去除掉，那么剩下的p^3-1个元素其实就构成了一个乘法循环群，这就是我们所需要的了。</p>
<p>而好像我们没有p，只能构造出模n的多项式商环：</p>
<script type="math/tex; mode=display">
N = Z_n[x]/f(x)</script><p>但是我们要注意到，P环应该是N的子环，这一点我们会在之后用到。</p>
<h4 id="如何利用g-n的阶为p-1"><a href="#如何利用g-n的阶为p-1" class="headerlink" title="如何利用g^n的阶为p-1"></a>如何利用g^n的阶为p-1</h4><p>我们继续在P环下分析，假设我们能取得其上的一个随机元素为生成元g，那么由前面我们知道，g^n的阶为p-1。</p>
<p>然后我们又要用到一个比较重要的性质：</p>
<p><img src="/post/ea445335/image-20231103105216406.png" alt="image-20231103105216406"></p>
<p>也就是说，我们刚才去除0的乘法循环群的阶为p^3-1，那么也就是说，阶为p-1的元素一共也就只有：</p>
<script type="math/tex; mode=display">
\phi(p-1)</script><p>这么多个，然后我们又知道g^n为度最大为2的多项式，也就是：</p>
<script type="math/tex; mode=display">
g^n = ax^2 + bx +c</script><p>而阶为p-1的任意元素t在该循环群中都应当满足：</p>
<script type="math/tex; mode=display">
t^{p-1} = 1</script><p>然后我们又知道，对于任意0&lt;a&lt;p，以下式子在该群中都成立：</p>
<script type="math/tex; mode=display">
(a + 0x + 0x^2)^{p-1} = 1</script><p>而a有p-1种取值，显然大于phi(p-1)，所以g^n其实只能在这样形式的多项式中产生：</p>
<script type="math/tex; mode=display">
a + 0x + 0x^2</script><p>也就是说，g^n均只存在常数项，一次项和二次项系数均为0。而由于P是N的子环，所以我们在N上运算g^n，得到的一次项系数和二次项系数在模n意义下，就应该等于kp。因此我们将g^n的一次项或二次项系数与n求解gcd即可得到p，进而得到n的全部分解，从而求解密文。</p>
<p>exp(搬运原wp中的exp)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">1125214074953003550338693571791155006090796212726975350140792193817691133917160305053542782925680862373280169090301712046464465620409850385467397784321453675396878680853302837289474127359729865584385059201707775238870232263306676727868754652536541637937452062469058451096996211856806586253080405693761350527787379604466148473842686716964601958192702845072731564672276539223958840687948377362736246683236421110649264777630992389514349446404208015326249112846962181797559349629761850980006919766121844428696162839329082145670839314341690501211334703611464066066160436143122967781441535203415038656670887399283874866947000313980542931425158634358276922283935422468847585940180566157146439137197351555650475378438394062212134921921469936079889107953354092227029819250669352732749370070996858744765757449980454966317942024199049138183043402199967786003097786359894608611331234652313102498596516590920508269648305903583314189707679</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">27126515219921985451218320201366564737456358918573497792847882486241545924393718080635287342203823068993908455514036540227753141033250259348250042460824265354495259080135197893797181975792914836927018186710682244471711855070708553557141164725366015684184788037988219652565179002870519189669615988416860357430127767472945833762628172190228773085208896682176968903038031026206396635685564975604545616032008575709303331751883115339943537730056794403071865003610653521994963115230275035006559472462643936356750299150351321395319301955415098283861947785178475071537482868994223452727527403307442567556712365701010481560424826125138571692894677625407372483041209738234171713326474989489802947311918341152810838321622423351767716922856007838074781678539986694993211304216853828611394630793531337147512240710591162375077547224679647786450310708451590432452046103209161611561606066902404405369379357958777252744114825323084960942810</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R = Zmod(n)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Q = R.quo(R.random_element(k))</span><br><span class="line">    pp = gcd(ZZ(<span class="built_in">list</span>(Q.random_element() ^ n)[<span class="number">1</span>]), n)</span><br><span class="line">    <span class="keyword">if</span> pp != <span class="number">1</span>:</span><br><span class="line">        qq = <span class="built_in">sum</span>([pp**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">        rr = n // (pp * qq)</span><br><span class="line">        <span class="keyword">assert</span> n == pp * qq * rr</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi = (pp - <span class="number">1</span>) * (qq - <span class="number">1</span>) * (rr - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#ictf&#123;idk_if_it_solvable_if_q_is_2+p+p^2_instead&#125;</span></span><br></pre></td></tr></table></figure>
<p>中间有些地方阐述的可能会出错，欢迎各位师傅提出。</p>
<p><br></p>
<p><br></p>
<h3 id="Complex-RSA"><a href="#Complex-RSA" class="headerlink" title="Complex_RSA"></a>Complex_RSA</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, totient</span><br><span class="line"><span class="comment"># where totient is a function used to calculate phi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    pad_length = length - <span class="built_in">len</span>(msg) - <span class="number">1</span></span><br><span class="line">    pad_data = os.urandom(pad_length)</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">b&#x27;\x00&#x27;</span> + pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> msg.split(<span class="string">b&quot;\x00&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bits = <span class="number">512</span></span><br><span class="line">p = getPrime(bits)</span><br><span class="line">q = getPrime(bits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">sha_flag = hashlib.sha256(flag).digest()</span><br><span class="line"></span><br><span class="line">m1 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[:<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>:], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">m2 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">phi = totient(p, q)</span><br><span class="line">e = q * inverse(p, phi)</span><br><span class="line">c1 = complex_pow(m1, e, n)</span><br><span class="line">c2 = complex_pow(m2, e, n)</span><br><span class="line"></span><br><span class="line">c1.show()</span><br><span class="line">c2.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698, 9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900]</span></span><br><span class="line"><span class="string">[62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003, 62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520]</span></span><br><span class="line"><span class="string">n = 94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目基于一个复数类，在复数的基础上实现了一次RSA加密。</p>
<p>具体来说，题目的加密流程是：</p>
<ul>
<li>生成两个512比特的素数p、q，计算其乘积n</li>
<li>将flag进行sha256哈希后，分为前后两部分分别作为m1的实部与虚部值</li>
<li>将flag分为前后两部分，并分别填充至127字节，作为m2的实部与虚部值</li>
<li>对m1、m2两个复数分别进行RSA加密，并给出密文</li>
</ul>
<p>值得注意的是，这里的加密指数e是一个特殊值：</p>
<script type="math/tex; mode=display">
e = q*inverse(p,phi)</script><p>那么切入点肯定也就是这个e的取值。首先需要明白一个地方，复数中如何计算欧拉函数？这里先给出结论：</p>
<script type="math/tex; mode=display">
totient(p,q) = (p^2-1)(q^2-1)</script><p>详细说明可以参考这里：</p>
<p><a href="https://nitaj.users.lmno.cnrs.fr/singular1.pdf">singular1.pdf (cnrs.fr)</a></p>
<p>我的理解是，虽然是复数域上的欧拉函数，但欧拉函数值仍然应该代表小于p且与p互素的复数数量。而从0到p的所有复数应该是：</p>
<script type="math/tex; mode=display">
a + bi \quad , \quad a \in[0,p),b \in [0,p)</script><p>显然一共有p^2个复数，所以去除0后，欧拉函数值就是(p^2-1)。</p>
<p>先把这个当作一点预备知识。从这里开始，我们先把这个题目当作整数域看待，看看如何解题(因为方法相通，整数域解出来后迁移到复数域上就好)，我们对加密指数e进行如下推导。</p>
<p>由于有：</p>
<script type="math/tex; mode=display">
e = q*inverse(p,phi)</script><p>所以：</p>
<script type="math/tex; mode=display">
ep \equiv q \quad(mod\;phi)</script><p>两边同乘q，可以得到：</p>
<script type="math/tex; mode=display">
epq \equiv q^2 \quad (mod\;phi)</script><p>即：</p>
<script type="math/tex; mode=display">
en \equiv q^2 \quad (mod\;phi)</script><p>那么我们把这个放在指数上，对c1进行乘方操作：</p>
<script type="math/tex; mode=display">
c_1^{n} \equiv m_1^{en} \equiv m_1^{q^2} \quad(mod\;n)</script><p>转到模q下，由欧拉定理就有：</p>
<script type="math/tex; mode=display">
c_1^n \equiv m_1 \quad(mod\;q)</script><p>然后注意，m1是一个sha256值，小于等于256比特，因此可以算作一个模q下的小根。所以我们可以copper解出m1，然后用c1^n-m1与n求gcd就能得到q，然后就可以用q去解m2了。</p>
<p>而放在复数域里这也是一样。并且由于拆成了实虚部两个部分，每一部分只有128比特的数量级，完全符合copper的界。所以我们只需要取实部或虚部其中一个进行copper就能得到n的分解。</p>
<p>得到n的分解后就可以计算复数域中的phi(n)，然后对复数c2进行RSA解密操作即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getvalue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re, self.im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">c1 = Complex(<span class="number">90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698</span>, <span class="number">9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900</span>)</span><br><span class="line">c2 = Complex(<span class="number">62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003</span>, <span class="number">62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520</span>)</span><br><span class="line">n = <span class="number">94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 get p,q</span></span><br><span class="line">m1 = complex_pow(c1, n, n).getvalue()</span><br><span class="line">n = <span class="number">94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x-m1[<span class="number">0</span>]</span><br><span class="line">f= f.monic()</span><br><span class="line">res = f.small_roots(X=<span class="number">2</span>^<span class="number">130</span>,beta=<span class="number">0.4</span>,epsilon=<span class="number">0.03</span>)</span><br><span class="line">m1_=<span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">q = GCD(m1[<span class="number">0</span>]-m1_,n)</span><br><span class="line">p = n // q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 get flag</span></span><br><span class="line">phi = (p^<span class="number">2</span>-<span class="number">1</span>)*(q^<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line">e = q * inverse(p, phi)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">flag = complex_pow(c2, d ,n).getvalue()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag[<span class="number">0</span>])))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;3ef6db06-b837-11ed-9825-00155dfcdef9&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-其他</title>
    <url>/post/97bbcbc9.html</url>
    <content><![CDATA[<p>该文章主要记录一些特殊的趣题</p>
<span id="more"></span>
<h3 id="Shamir门限"><a href="#Shamir门限" class="headerlink" title="Shamir门限"></a>Shamir门限</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公司使用Shamir门限密钥设计了一个秘密保存方案，将fag保存了起来，最终的设计效果如下密钥总共有<span class="number">9</span>份，拿到任意<span class="number">5</span>个密钥即可解出保存的flag.现在我们知道公共的密钥:</span><br><span class="line">p=<span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">以及如下<span class="number">5</span>个密钥:</span><br><span class="line"><span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span></span><br><span class="line"><span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span></span><br><span class="line"><span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span></span><br><span class="line"><span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span></span><br><span class="line"><span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span></span><br><span class="line">请恢复flag</span><br></pre></td></tr></table></figure>
<p>题目明确说了这是一个Shamir门限方案，先来简单梳理一下Shamir门限方案的基本实施方式，大概分为以下几步:</p>
<p>1、<strong>根据恢复秘密最小人数及秘密消息，生成秘密多项式</strong></p>
<ul>
<li>将秘密消息转化为整数，记为 secret</li>
<li>首先，设置一个需恢复秘密的最小人数 t ，而题目中说”拿到任意5个密钥即可解出保存的flag”，因此t=5</li>
<li>设置一个公钥 p ，作为之后生成的多项式所处的有限域</li>
<li>生成一个 t-1 次的多项式，满足：</li>
</ul>
<script type="math/tex; mode=display">
f(x) = a_{t-1}*x^{t-1}+a_{t-2}*x^{t-2}+...+a_{2}*x^{2}+a_{1}*x^{1}+a_0 \quad(mod\;p)</script><script type="math/tex; mode=display">
其中，a_1、a_2、...、a_{t-2}、a_{t-1}为随机数，a0=secret</script><ul>
<li>因此可以看出，当多项式取 x=0 时，对应的 f(x)=f(0)=a0=secret，即秘密消息</li>
</ul>
<p><br></p>
<p>2、<strong>根据秘密多项式，进行密钥分发</strong></p>
<ul>
<li>设实际参与密钥分发的人数为 n ，则将 1~n(有时也可能是n个不同的随机数)依次代入秘密多项式 f(x)，便得到n组密钥：</li>
</ul>
<script type="math/tex; mode=display">
(1，f(1))、(2,f(2))、...(n-1,f(n-1))、(n,f(n))</script><ul>
<li>将生成的 n 个密钥分发给 n 个人</li>
</ul>
<p><br></p>
<p>3、<strong>销毁秘密多项式</strong></p>
<p><br></p>
<p>至此，Shamir门限方案便实施完成了，这种分法方案涉及到两个数字，一个是需恢复秘密的最小人数 t ，一个是实际参与密钥分发的人数 n ，因此可以称为 (t,n) - 门限方案。</p>
<p>需要注意到的是，在完成密钥分发之后，秘密多项式便随之被销毁了。那么在拥有足够数量的密钥(&gt;=t)的情况下，怎么恢复秘密信息 secret呢？这就需要用到拉格朗日插值公式，我们不妨先把密钥记为:</p>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><p>则插值多项式如下：</p>
<script type="math/tex; mode=display">
f(x) = \sum_{i=1}^{t}[{f(x_i)}*\prod_{j=1,j\neq i}^{t}{\frac{x-x_j}{x_i-x_j}}]\quad(mod\;p)</script><p>直观一点可以展开写成下式：</p>
<script type="math/tex; mode=display">
f(x) = f(x_1)\frac{(x-x_2)(x-x_3)...(x-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x-x_1)(x-x_3)...(x-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x-x_1)(x-x_2)...(x-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><p>观察一下这个多项式的性质：</p>
<ul>
<li>是一个 t-1 次多项式</li>
<li>分发的密钥均是多项式上的点：</li>
</ul>
<script type="math/tex; mode=display">
(x_1，f(x_1))、(x_2,f(x_2))、...(x_{n-1},f(x_{n-1}))、(x_n,f(x_n))</script><ul>
<li>这是因为，代入其中任意一个密钥的横坐标，则只有代入的那一项不为0，而其他全为0，拿 x1 举例：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)\frac{(x_1-x_2)(x_1-x_3)...(x_1-x_t)}{(x1-x_2)(x1-x_3)...(x1-x_t)} + f(x_2)\frac{(x_1-x_1)(x_1-x_3)...(x_1-x_t)}{(x2-x_1)(x2-x_3)...(x2-x_t)} + ... +
f(x_t)\frac{(x_1-x_1)(x_1-x_2)...(x_1-x_{t-1})}{(x_t-x_1)(x_t-x_2)...(x_t-x_{t-1})}
\quad(mod\;p)</script><ul>
<li>即：</li>
</ul>
<script type="math/tex; mode=display">
f(x_1) = f(x_1)*1 + f(x_2)*0 + ... +
f(x_t)*0
\quad(mod\;p)</script><script type="math/tex; mode=display">
所以有 f(x_1) = f(x_1)
\quad(mod\;p)</script><p>所以当有足够多的点( t-1 次多项式需要 t 个点)进行插值时，就可以代入 0 进入插值多项式，解出的常数项即为秘密消息 secret</p>
<p><br></p>
<p>完全了解了Shamir门限方案后再来看这个题，就可以发现密钥数量是完全足够的，但是不清楚5个人具体分到的是9个密钥中的哪一个密钥，因此还需要全排列爆破处理。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x3b9f64aeadae9545d899102c8c1874e3d4f12caf6ded3eb8454c27fd7058ff31a5742aee60b2b7</span></span><br><span class="line">c = [<span class="number">0x13570e530aaa3639e622d02ca8a0f89089ad0ee3ba51edd95490653b684aaeedd3a762938d08b3</span>,<span class="number">0xb583b75e84190f9d081234088b23e6b634110bda167a21bdfb4b5608a65e7283e8531547623d8</span>,<span class="number">0x8d3bbbb28592b1a00885c11633369568fcb8bbfdec3cbf4d8cd5546728ca99f24cbe0ac214a39</span>,<span class="number">0x13816f03e972210516c17b13a008ee8fd9b888839d6e1ce203fd7723f5e8e0443c2c6279c8dab9</span>,<span class="number">0x1553e323763e4c3ba53f6f93e0feb01d6b168fdda30fd87e949664eb4c8f2fd8414e2c14df8f5e</span>]</span><br><span class="line"></span><br><span class="line">m = ([<span class="number">0</span>, c[<span class="number">0</span>]],[<span class="number">0</span>, c[<span class="number">1</span>]],[<span class="number">0</span>, c[<span class="number">2</span>]],[<span class="number">0</span>, c[<span class="number">3</span>]],[<span class="number">0</span>, c[<span class="number">4</span>]])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> permutations(<span class="built_in">range</span>(<span class="number">9</span>),<span class="number">5</span>):</span><br><span class="line">        m[<span class="number">0</span>][<span class="number">0</span>] = i[<span class="number">0</span>]</span><br><span class="line">        m[<span class="number">1</span>][<span class="number">0</span>] = i[<span class="number">1</span>]</span><br><span class="line">        m[<span class="number">2</span>][<span class="number">0</span>] = i[<span class="number">2</span>]</span><br><span class="line">        m[<span class="number">3</span>][<span class="number">0</span>] = i[<span class="number">3</span>]</span><br><span class="line">        m[<span class="number">4</span>][<span class="number">0</span>] = i[<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (</span><br><span class="line">                m[<span class="number">0</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">0</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">1</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">1</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">2</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">2</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">3</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">4</span>][<span class="number">0</span>]) * inverse((m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]) * (m[<span class="number">3</span>][<span class="number">0</span>] - m[<span class="number">4</span>][<span class="number">0</span>]), p) +</span><br><span class="line">                m[<span class="number">4</span>][<span class="number">1</span>] * (<span class="number">0</span> - m[<span class="number">1</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">2</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">3</span>][<span class="number">0</span>]) * (<span class="number">0</span> - m[<span class="number">0</span>][<span class="number">0</span>]) * inverse((m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">1</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">2</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">3</span>][<span class="number">0</span>]) * (m[<span class="number">4</span>][<span class="number">0</span>] - m[<span class="number">0</span>][<span class="number">0</span>]), p)</span><br><span class="line">                ) % p</span><br><span class="line">            temp = <span class="built_in">str</span>(long_to_bytes(r))</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag&#123;b14f4963671a457cf22ec271356e0f78&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><p>题目来源：bricsctf-2023-Quals</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">P = Permutations(<span class="number">256</span>).random_element()</span><br><span class="line"><span class="built_in">print</span>(P**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())])</span><br></pre></td></tr></table></figure>
<p>密文txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span><br><span class="line">[18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span><br></pre></td></tr></table></figure>
<p>题目非常简短，流程如下：</p>
<ul>
<li>将256个元素进行全排列，并随机抽取其中一个排列，记为 P</li>
<li>打印出该排列的平方</li>
<li>将该排列 P 的 sha512 值与flag明文相异或，打印出密文</li>
</ul>
<p>因此，任务就只有一个：根据排列的平方，还原出该排列，并与密文异或就能还原flag</p>
<p>有一个概念一定要先理解清楚，排列的平方是什么意思？用代码可以如下表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C[i] = P[P[i]]</span><br></pre></td></tr></table></figure>
<p>也就是说，一组排列可以看作是一个置换，那么排列的平方就是进行二重置换。</p>
<p>那么怎么还原呢，我们用图的方式来理解，图上一个节点指向另一个节点，代表的就是经过一次置换后，该节点置换到指向节点的位置，比如下面这张图就可以表示一个置换：</p>
<p><strong>(偶数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926104953693.png" alt="image-20230926104953693"></p>
<p>这张图代表：0置换到1、1置换到2、…5置换到0，这很好理解</p>
<p>那么这个置换平方后会是什么样子？很简单，只需要把一个节点指向节点所指向的节点作为新的置换即可，说起来有点绕，还是举个例子：0指向1，1指向2，所以平方后，0指向2，这就很容易明白了。</p>
<p>所以上面的置换平方后会变成如下形式：</p>
<p><img src="/post/97bbcbc9/image-20230926105347447.png" alt="image-20230926105347447"></p>
<p>那么还原的方式就是将两个环并排，然后挨个插入，如下：</p>
<p><img src="/post/97bbcbc9/image-20230926105546460.png" alt="image-20230926105546460"></p>
<p>但是显然，由于插入的相对位置不同，这样还原就可能会得到多个不同的初始置换，而他们平方后都是满足要求的。</p>
<p>上面的例子是偶数个点的情况，想一想奇数个点平方后会如何：</p>
<p><strong>(奇数个点的情况)</strong></p>
<p><img src="/post/97bbcbc9/image-20230926105945860.png" alt="image-20230926105945860"></p>
<p>继续利用<strong>把一个节点指向节点所指向的节点作为新的置换</strong>这一点，可以看出平方后，环并没有裂开，只是交换了位置：</p>
<p><img src="/post/97bbcbc9/image-20230926110200084.png" alt="image-20230926110200084"></p>
<p>仔细想想就能明白，这种形式的还原是唯一的，不会有多种情况。</p>
<p>想清楚置换与图的关系后，回到题目本身来，按如下步骤分析：</p>
<p>1、<strong>首先就要把平方后的排列先转化为若干个环：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印环</span></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">P2 = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(P2[<span class="number">204</span>])</span><br><span class="line">lenlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):</span><br><span class="line">    <span class="built_in">len</span> = <span class="number">1</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    loc = P2[i]</span><br><span class="line">    chain = [loc]</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        t = P2[loc]</span><br><span class="line">        loc = t</span><br><span class="line">        chain.append(loc)</span><br><span class="line">        <span class="built_in">len</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(t == i):</span><br><span class="line">            <span class="comment">#print(i,&quot;,&quot;,len)</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span> == <span class="number">2</span>):</span><br><span class="line">                <span class="built_in">print</span>(chain)</span><br><span class="line">                <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#print(lenlist.count(2))</span></span><br><span class="line"><span class="comment">#2*82 + 75 + 3*3 + 1*8</span></span><br></pre></td></tr></table></figure>
<p>可以发现，平方后的置换可以拆分为 ：</p>
<ul>
<li>2个长为 82 的环</li>
<li>1个长为75的环</li>
<li>3个长为3的环</li>
<li>8个单元环</li>
</ul>
<p><br></p>
<p>2、<strong>接下来就是分析如何还原：</strong></p>
<ul>
<li>对于长为 82 的环，他一定是长为 164 的环拆分而成</li>
<li>长为 75 的环一定是本身长就为 75 的环</li>
<li>3个长为3的环，可能本身就是 3 个长为 3 的环；也可能本身是一个长为 3 的环加上一个长为 6 的环拆分而成</li>
<li>8个单元环，可能本身就是 8 个单元环，也可能是 1-4 个 2 元环加上剩下的单元环</li>
</ul>
<p>因此，要考虑上述的所有可能情况，求出所有符合要求的排列，并与密文异或做爆破。按理来说，一般爆破需要的是flag头，但是由于我并不知道flag头是什么(别的师傅问的)，所以采用全为可见字符来爆破。</p>
<p>复杂度经计算应该是 ：(对哪一部分复杂度不清楚可以问我) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">82*1*4*C(8,2)*C(6,2)*C(4,2)*16</span><br></pre></td></tr></table></figure>
<p>约为一千多万，大概跑五分钟左右可以全部完成。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印环</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = [18, 188, 48, 47, 100, 234, 225, 8, 187, 34, 124, 113, 118, 252, 137, 196, 125, 20, 251, 168, 167, 5, 225, 134, 66, 203, 26, 148, 63, 181, 213, 124, 170, 234, 35, 120, 47, 69, 157, 69, 194]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">P2 = [41, 124, 256, 27, 201, 93, 40, 133, 47, 10, 69, 253, 13, 245, 165, 166, 118, 230, 197, 249, 115, 18, 71, 24, 100, 14, 160, 28, 251, 96, 106, 5, 244, 58, 67, 44, 150, 42, 255, 74, 168, 182, 153, 209, 227, 232, 159, 128, 125, 11, 135, 90, 76, 30, 84, 31, 1, 149, 48, 95, 216, 94, 157, 131, 196, 172, 105, 169, 202, 203, 121, 210, 53, 9, 147, 89, 39, 68, 59, 141, 87, 207, 51, 180, 19, 81, 57, 103, 228, 77, 12, 129, 185, 85, 45, 123, 50, 116, 65, 213, 104, 64, 54, 155, 222, 112, 3, 252, 21, 33, 138, 151, 211, 233, 204, 97, 239, 113, 82, 200, 23, 231, 177, 26, 72, 4, 78, 183, 199, 6, 49, 29, 250, 119, 32, 56, 110, 187, 35, 143, 83, 25, 70, 2, 66, 101, 217, 120, 224, 142, 191, 136, 189, 127, 132, 36, 174, 146, 152, 140, 193, 62, 178, 17, 148, 248, 167, 88, 73, 229, 134, 156, 158, 60, 63, 242, 221, 34, 214, 20, 171, 139, 226, 186, 164, 181, 236, 107, 111, 61, 99, 108, 179, 223, 137, 212, 237, 102, 161, 145, 184, 173, 247, 162, 205, 154, 55, 117, 254, 38, 75, 234, 7, 46, 109, 22, 175, 144, 219, 220, 195, 190, 98, 79, 15, 170, 80, 235, 52, 8, 37, 243, 198, 86, 43, 192, 241, 240, 208, 130, 188, 114, 218, 215, 206, 176, 238, 16, 246, 126, 122, 163, 225, 92, 91, 194]</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    P2[i] -= 1</span></span><br><span class="line"><span class="string">print(P2[204])</span></span><br><span class="line"><span class="string">lenlist = []</span></span><br><span class="line"><span class="string">for i in range(len(P2)):</span></span><br><span class="line"><span class="string">    len = 1</span></span><br><span class="line"><span class="string">    t = 0</span></span><br><span class="line"><span class="string">    loc = P2[i]</span></span><br><span class="line"><span class="string">    chain = [loc]</span></span><br><span class="line"><span class="string">    while(1):</span></span><br><span class="line"><span class="string">        t = P2[loc]</span></span><br><span class="line"><span class="string">        loc = t</span></span><br><span class="line"><span class="string">        chain.append(loc)</span></span><br><span class="line"><span class="string">        len += 1</span></span><br><span class="line"><span class="string">        if(t == i):</span></span><br><span class="line"><span class="string">            #print(i,&quot;,&quot;,len)</span></span><br><span class="line"><span class="string">            if(len == 2):</span></span><br><span class="line"><span class="string">                print(chain)</span></span><br><span class="line"><span class="string">                print(i+1)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">#print(lenlist.count(2))</span></span><br><span class="line"><span class="string">#2*82 + 75 + 3*3 + 1*8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        tt = [0 for k in range(256)]</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            tt[k] = P[P[k]] + 1</span></span><br><span class="line"><span class="string">        for k in range(256):</span></span><br><span class="line"><span class="string">            if(tt[k]!= c[k]):</span></span><br><span class="line"><span class="string">                print(k)</span></span><br><span class="line"><span class="string">        exit()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line">group_size = <span class="number">2</span></span><br><span class="line">num_groups = <span class="number">4</span></span><br><span class="line">all_groupings = <span class="built_in">list</span>(combinations(chain1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_groupings</span>(<span class="params">chain1, group_size, num_groups</span>):</span><br><span class="line">    <span class="keyword">if</span> num_groups == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> [chain1]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> combinations(chain1, group_size):</span><br><span class="line">            remaining_chain1 = [e <span class="keyword">for</span> e <span class="keyword">in</span> chain1 <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> combo]</span><br><span class="line">            <span class="keyword">for</span> rest_grouping <span class="keyword">in</span> generate_groupings(remaining_chain1, group_size, num_groups - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> [<span class="built_in">list</span>(combo)] + rest_grouping</span><br><span class="line"></span><br><span class="line">chain1r = <span class="built_in">list</span>(generate_groupings(chain1, group_size, num_groups))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = [<span class="number">18</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">234</span>, <span class="number">225</span>, <span class="number">8</span>, <span class="number">187</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">118</span>, <span class="number">252</span>, <span class="number">137</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">20</span>, <span class="number">251</span>, <span class="number">168</span>, <span class="number">167</span>, <span class="number">5</span>, <span class="number">225</span>, <span class="number">134</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">181</span>, <span class="number">213</span>, <span class="number">124</span>, <span class="number">170</span>, <span class="number">234</span>, <span class="number">35</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">157</span>, <span class="number">69</span>, <span class="number">194</span>]</span><br><span class="line">c = [<span class="number">41</span>, <span class="number">124</span>, <span class="number">256</span>, <span class="number">27</span>, <span class="number">201</span>, <span class="number">93</span>, <span class="number">40</span>, <span class="number">133</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">253</span>, <span class="number">13</span>, <span class="number">245</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">118</span>, <span class="number">230</span>, <span class="number">197</span>, <span class="number">249</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">24</span>, <span class="number">100</span>, <span class="number">14</span>, <span class="number">160</span>, <span class="number">28</span>, <span class="number">251</span>, <span class="number">96</span>, <span class="number">106</span>, <span class="number">5</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">67</span>, <span class="number">44</span>, <span class="number">150</span>, <span class="number">42</span>, <span class="number">255</span>, <span class="number">74</span>, <span class="number">168</span>, <span class="number">182</span>, <span class="number">153</span>, <span class="number">209</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">149</span>, <span class="number">48</span>, <span class="number">95</span>, <span class="number">216</span>, <span class="number">94</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">105</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">147</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">87</span>, <span class="number">207</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">19</span>, <span class="number">81</span>, <span class="number">57</span>, <span class="number">103</span>, <span class="number">228</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">129</span>, <span class="number">185</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">123</span>, <span class="number">50</span>, <span class="number">116</span>, <span class="number">65</span>, <span class="number">213</span>, <span class="number">104</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">112</span>, <span class="number">3</span>, <span class="number">252</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">138</span>, <span class="number">151</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">97</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">183</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">110</span>, <span class="number">187</span>, <span class="number">35</span>, <span class="number">143</span>, <span class="number">83</span>, <span class="number">25</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">217</span>, <span class="number">120</span>, <span class="number">224</span>, <span class="number">142</span>, <span class="number">191</span>, <span class="number">136</span>, <span class="number">189</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">152</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">178</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">248</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">73</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">242</span>, <span class="number">221</span>, <span class="number">34</span>, <span class="number">214</span>, <span class="number">20</span>, <span class="number">171</span>, <span class="number">139</span>, <span class="number">226</span>, <span class="number">186</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">61</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">179</span>, <span class="number">223</span>, <span class="number">137</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">102</span>, <span class="number">161</span>, <span class="number">145</span>, <span class="number">184</span>, <span class="number">173</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">154</span>, <span class="number">55</span>, <span class="number">117</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">75</span>, <span class="number">234</span>, <span class="number">7</span>, <span class="number">46</span>, <span class="number">109</span>, <span class="number">22</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">79</span>, <span class="number">15</span>, <span class="number">170</span>, <span class="number">80</span>, <span class="number">235</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">243</span>, <span class="number">198</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">192</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">130</span>, <span class="number">188</span>, <span class="number">114</span>, <span class="number">218</span>, <span class="number">215</span>, <span class="number">206</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">16</span>, <span class="number">246</span>, <span class="number">126</span>, <span class="number">122</span>, <span class="number">163</span>, <span class="number">225</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">194</span>]</span><br><span class="line"></span><br><span class="line">chain821 = [<span class="number">193</span>, <span class="number">222</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">96</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">68</span>, <span class="number">201</span>, <span class="number">172</span>, <span class="number">157</span>, <span class="number">145</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">250</span>, <span class="number">121</span>, <span class="number">230</span>, <span class="number">36</span>, <span class="number">149</span>, <span class="number">141</span>, <span class="number">24</span>, <span class="number">99</span>, <span class="number">212</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">46</span>, <span class="number">158</span>, <span class="number">151</span>, <span class="number">135</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">150</span>, <span class="number">190</span>, <span class="number">98</span>, <span class="number">64</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">233</span>, <span class="number">85</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">167</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">53</span>, <span class="number">29</span>, <span class="number">95</span>, <span class="number">122</span>, <span class="number">176</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">136</span>, <span class="number">109</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">108</span>, <span class="number">20</span>, <span class="number">114</span>, <span class="number">203</span>, <span class="number">161</span>, <span class="number">61</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">196</span>, <span class="number">236</span>, <span class="number">240</span>, <span class="number">187</span>, <span class="number">106</span>, <span class="number">2</span>, <span class="number">255</span>]</span><br><span class="line">chain822 = [<span class="number">125</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">159</span>, <span class="number">139</span>, <span class="number">142</span>, <span class="number">69</span>, <span class="number">202</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">5</span>, <span class="number">92</span>, <span class="number">184</span>, <span class="number">163</span>, <span class="number">16</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">210</span>, <span class="number">74</span>, <span class="number">146</span>, <span class="number">216</span>, <span class="number">174</span>, <span class="number">62</span>, <span class="number">156</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">226</span>, <span class="number">79</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">50</span>, <span class="number">134</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">180</span>, <span class="number">170</span>, <span class="number">133</span>, <span class="number">118</span>, <span class="number">81</span>, <span class="number">206</span>, <span class="number">54</span>, <span class="number">83</span>, <span class="number">179</span>, <span class="number">19</span>, <span class="number">248</span>, <span class="number">245</span>, <span class="number">175</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">197</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">130</span>, <span class="number">48</span>, <span class="number">124</span>, <span class="number">71</span>, <span class="number">209</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">181</span>, <span class="number">138</span>, <span class="number">34</span>, <span class="number">66</span>, <span class="number">104</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">60</span>, <span class="number">215</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">229</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">249</span>]</span><br><span class="line">chain75 = [<span class="number">90</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">224</span>, <span class="number">14</span>, <span class="number">164</span>, <span class="number">147</span>, <span class="number">119</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">65</span>, <span class="number">171</span>, <span class="number">155</span>, <span class="number">35</span>, <span class="number">43</span>, <span class="number">208</span>, <span class="number">253</span>, <span class="number">91</span>, <span class="number">128</span>, <span class="number">198</span>, <span class="number">160</span>, <span class="number">192</span>, <span class="number">178</span>, <span class="number">213</span>, <span class="number">45</span>, <span class="number">231</span>, <span class="number">242</span>, <span class="number">217</span>, <span class="number">143</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">153</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">52</span>, <span class="number">75</span>, <span class="number">88</span>, <span class="number">227</span>, <span class="number">234</span>, <span class="number">42</span>, <span class="number">152</span>, <span class="number">188</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">186</span>, <span class="number">235</span>, <span class="number">191</span>, <span class="number">107</span>, <span class="number">251</span>, <span class="number">162</span>, <span class="number">177</span>, <span class="number">33</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">223</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">127</span>, <span class="number">182</span>, <span class="number">225</span>, <span class="number">169</span>, <span class="number">228</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">76</span>, <span class="number">38</span>, <span class="number">254</span>]</span><br><span class="line">chain31 = [<span class="number">15</span>, <span class="number">165</span>, <span class="number">247</span>]</span><br><span class="line">chain32 = [<span class="number">207</span>, <span class="number">116</span>, <span class="number">238</span>]</span><br><span class="line">chain33 = [<span class="number">120</span>, <span class="number">22</span>, <span class="number">70</span>]</span><br><span class="line">chain1 = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">166</span>,<span class="number">204</span>,<span class="number">218</span>,<span class="number">219</span>]</span><br><span class="line"></span><br><span class="line">locdic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain3(四种情况)</span></span><br><span class="line"><span class="comment">#情况1：3个三环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain32r = [<span class="number">207</span>, <span class="number">238</span>, <span class="number">116</span>]</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#情况2:1个三环,1个六环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    chain31r = [<span class="number">15</span>, <span class="number">247</span>, <span class="number">165</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain32[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain31r[i]] = chain31r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain32r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain33[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain32r[i]] = chain32r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    chain33r = [<span class="number">120</span>, <span class="number">70</span>, <span class="number">22</span>]</span><br><span class="line">    chain6r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain6r[j] = chain31[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain6r[j] = chain32[(j//<span class="number">2</span> + <span class="number">0</span>) % <span class="number">6</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        locdic[chain33r[i]] = chain33r[(i+<span class="number">1</span>)%<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        locdic[chain6r[i]] = chain6r[(i+<span class="number">1</span>)%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理chain75(确定)</span></span><br><span class="line">chain75r = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    chain75r[<span class="number">2</span>*i%<span class="number">75</span>] = chain75[i]</span><br><span class="line"><span class="comment">#添加入位置字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    locdic[chain75r[i]] = chain75r[(i+<span class="number">1</span>)%<span class="number">75</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#嗯造剩下两种环的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">82</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="comment">#造一个副本</span></span><br><span class="line">    locdic1 = locdic</span><br><span class="line">    chain164r = [<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            chain164r[j] = chain821[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain164r[j] = chain822[(j//<span class="number">2</span> + i) % <span class="number">82</span>] </span><br><span class="line">    <span class="comment">#添加入位置字典</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">164</span>):</span><br><span class="line">        locdic1[chain164r[i]] = chain164r[(i+<span class="number">1</span>)%<span class="number">164</span>]</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#4个二元环（包含单环情况）</span></span><br><span class="line">    <span class="keyword">for</span> mm <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        ttt = <span class="built_in">bin</span>(mm)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain1r)):</span><br><span class="line">            locdic2 = locdic1</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">0</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">0</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">1</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">2</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">2</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>(ttt[<span class="number">3</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">0</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">                locdic2[chain1r[j][<span class="number">3</span>][<span class="number">1</span>]] = chain1r[j][<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">            P = [locdic2[j]+<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">            </span><br><span class="line">            t = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), n):</span><br><span class="line">                <span class="keyword">if</span>((x^y)&gt;=<span class="number">32</span> <span class="keyword">and</span> (x^y)&lt;=<span class="number">127</span>):</span><br><span class="line">                    t+=<span class="built_in">chr</span>(x^y)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(t) &gt; <span class="number">10</span>):</span><br><span class="line">                <span class="built_in">print</span>(t)</span><br><span class="line">                exit()</span><br><span class="line">                </span><br><span class="line"><span class="comment">#brics+&#123;ab99943f6dae4f20595c8645fcf8289e&#125;</span></span><br></pre></td></tr></table></figure>
<p>脚本比较丑，只能就题论题，不能作为该类求平方根置换的通解。</p>
<p><br></p>
<p><br></p>
<h3 id="prng-加强版"><a href="#prng-加强版" class="headerlink" title="prng(加强版)"></a>prng(加强版)</h3><p>(题目具体名称并不是这个，只是我还没有找到对应题目名，就先用着)</p>
<p>题目来源：江苏省领航杯</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>(<span class="params">n, l</span>):</span><br><span class="line">    bb = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, r = <span class="built_in">divmod</span>(n, l)</span><br><span class="line">        bb.append(r)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> bb[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prng</span>(<span class="params">secret</span>):</span><br><span class="line">	seed = base(secret, <span class="number">5</span>)</span><br><span class="line">	seed = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(seed)]</span><br><span class="line">	length = <span class="built_in">len</span>(seed)</span><br><span class="line">	R = [[ random.randint(<span class="number">0</span>,<span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length**<span class="number">2</span>)]</span><br><span class="line">	S = []</span><br><span class="line">	<span class="keyword">for</span> r <span class="keyword">in</span> R:</span><br><span class="line">		s = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">			s += (r[index] + seed[index]) % <span class="number">5</span></span><br><span class="line">		s %= <span class="number">2</span></span><br><span class="line">		S.append(s)</span><br><span class="line">	<span class="keyword">return</span> R, S</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">R, S = prng(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(<span class="string">f&#x27;R = <span class="subst">&#123;R&#125;</span>\nS = <span class="subst">&#123;S&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>梳理加密流程：</p>
<ul>
<li>将flag转为大整数后，将该整数转为五进制数，并转为列表，作为seed</li>
<li>记列表seed长度为n</li>
<li>生成一个 $ n^2*n$ 的矩阵R，其中每个元素为0-4的随机数</li>
<li>利用R矩阵，对seed矩阵做如下加密：(其中，$ i=1,2…n^2$)</li>
</ul>
<script type="math/tex; mode=display">
s_i=\sum_{j=1}^{n}{(({r_{ij}+seed_i})(mod\;5))} \quad(mod\;2)</script><ul>
<li>将 $ s_i$ 拼接为S向量后，提供R与S，求解明文</li>
</ul>
<p>自己做是一点思路都没有，最终找到了 ZM.J 师傅的一篇wp，发现题目是类似的：</p>
<p><a href="https://zhuanlan.zhihu.com/p/643573246">[CryptoCTF] CryptoCTF 2023 tough分类 团队解题writeup - 知乎 (zhihu.com)</a></p>
<p>于是就可以迁移到这道题目中来：</p>
<p>首先，由于seed中每个数字都是0-4之中的某个数m，我们可以先对其进行编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>此时，我们相当于把一个0-4的数转化为了五个变量组成的一个向量：</p>
<script type="math/tex; mode=display">
m = \left(
 \begin{matrix}
   x_{0} \\
   x_{1} \\
   x_{2} \\
   x_{3}  \\
   x_{4}  \\
  \end{matrix}
  \right)</script><p>其中，每个变量 $ x_i$ 只有0或1两种取值，并且对于任意一个0-4的数m， $ x_i$ 有且仅有一个变量为1，其他均为0</p>
<p>这么做的意义是什么？是让我们能够将这个先模5再模2的没有办法解的线性方程组，变化到一个可以解的形式。</p>
<p>为什么这样变换后就可以解？由加密流程知道，$ r_{ij},seed_i$ 均为0-4之间的数，因此相加后模5模2的结果完全可以用一张表加以表示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>表的含义是，当 r 取 i ，seed 取 j 时，表中第 i 行第 j 列即为$ (r+seed)\;(mod\;5)\;(mod\;2)$ 的值</p>
<p>然后在这里举个简单的例子来看一下如何变换原题目的线性方程到这种形式下：</p>
<p>假设$ s = (2+m_0)+(3+m_1)+(4+m_2) \;(mod\;5)\;(mod\;2)$，</p>
<p>第一步，把每个 $ m_i$ 表示为五个变量的形式：</p>
<script type="math/tex; mode=display">
m_0 = \left(
 \begin{matrix}
   x_{00} \\
   x_{01} \\
   x_{02} \\
   x_{03}  \\
   x_{04}  \\
  \end{matrix}
  \right),
  m_1 = \left(
 \begin{matrix}
   x_{10} \\
   x_{11} \\
   x_{12} \\
   x_{13}  \\
   x_{14}  \\
  \end{matrix}
  \right),
  m_2 = \left(
 \begin{matrix}
   x_{20} \\
   x_{21} \\
   x_{22} \\
   x_{23}  \\
   x_{24}  \\
  \end{matrix}
  \right)</script><p>第二步，把每一个r转化成对应系数矩阵：</p>
<p>比如，r=2时，看上表的取2的行，需要变量1或4取1就能得到1，否则为0；r=3时，看上表的取3的行，需要变量0或3取1就能得到1，否则为0；r=4时，看上表的取4的行，需要变量2或4取1就能得到1，否则为0</p>
<p>这又是什么意思呢？比如 $ (2+1) \;(mod\;5)\;(mod\;2)$，由真值表可知，他就完全等价于下面的形式：</p>
<script type="math/tex; mode=display">
(0,1,0,0,1)*\left(
 \begin{matrix}
   0 \\
   1 \\
   0 \\
   0  \\
   0  \\
  \end{matrix}
  \right) \quad(mod\;2)</script><p>这么做的好处就是：</p>
<ul>
<li>去除了模5的影响</li>
<li>由加法转成了乘法，变成了矩阵可解的形式</li>
</ul>
<p>因此，刚才的等式$ s = (2+m_0)+(3+m_1)+(4+m_2) \;(mod\;5)\;(mod\;2)$就彻底去除了与模5的关系，而只剩下模2下的线性关系与变量，变成了下面这种形式：</p>
<script type="math/tex; mode=display">
s = (0,1,0,0,1)*\left(
 \begin{matrix}
   x_{00} \\
   x_{01} \\
   x_{02} \\
   x_{03}  \\
   x_{04}  \\
  \end{matrix}
  \right)
  + (1,0,0,1,0)*\left(
 \begin{matrix}
   x_{10} \\
   x_{11} \\
   x_{12} \\
   x_{13}  \\
   x_{14}  \\
  \end{matrix}
  \right)
  + (0,0,1,0,1) * \left(
 \begin{matrix}
   x_{20} \\
   x_{21} \\
   x_{22} \\
   x_{23}  \\
   x_{24}  \\
  \end{matrix}
  \right)
  \quad(mod\;2)</script><p>而把这种形式应用于我们需要求解的问题之中，就可以把seed中原本的n个变量转化成5n个变量，因此只需要从n^2个线性方程中拿出5n个线性线性方程即可解得所有的变量取值，再用刚才对m的编码还原即可。</p>
<p>你可能会发现求解后的向量并不全是刚才的编码形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 : (1,0,0,0,0)</span><br><span class="line">1 : (0,1,0,0,0)</span><br><span class="line">2 : (0,0,1,0,0)</span><br><span class="line">3 : (0,0,0,1,0)</span><br><span class="line">4 : (0,0,0,0,1)</span><br></pre></td></tr></table></figure>
<p>而出现了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1,1,1,1,0)</span><br></pre></td></tr></table></figure>
<p>事实上，这是因为我们并没有把刚才说的这一点加入到线性方程组的约束中：</p>
<ul>
<li>对于任意一个0-4的数m， $ x_i$ 有且仅有一个变量为1，其他均为0</li>
</ul>
<p>但是影响不大了，因为你大概也能猜到(1,1,1,1,0)对应的就是不加该限制时4的编码，因此对应还原就好</p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\output4.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(R[<span class="number">0</span>])</span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span> * n):</span><br><span class="line">    a = []</span><br><span class="line">    B.append(S[i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (R[i][j] == <span class="number">0</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> ,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">1</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">2</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">3</span>):</span><br><span class="line">            a.extend([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> (R[i][j] == <span class="number">4</span>):</span><br><span class="line">            a.extend([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    A.append(a)</span><br><span class="line"></span><br><span class="line">A = matrix(GF(<span class="number">2</span>), A)</span><br><span class="line">B = vector(GF(<span class="number">2</span>), B)</span><br><span class="line">x = A.solve_right(B)</span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">0</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">1</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (x[<span class="number">5</span>*i] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">3</span>] == <span class="number">1</span>) <span class="keyword">and</span> (x[<span class="number">5</span>*i+<span class="number">4</span>] == <span class="number">0</span>):</span><br><span class="line">        flag.append(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(flag, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CnHongKe&#123;179bdc38ea135c35f1f973c039a422a7&#125;</span></span><br></pre></td></tr></table></figure>
<p>(有不懂的地方欢迎与我交流！)</p>
<p><br></p>
<p><br></p>
<h3 id="ahead"><a href="#ahead" class="headerlink" title="ahead"></a>ahead</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">S, B</span>):</span><br><span class="line">    L = S[<span class="number">0</span>] ^ S[<span class="number">7</span>] ^ S[<span class="number">38</span>] ^ S[<span class="number">70</span>] ^ S[<span class="number">81</span>] ^ S[<span class="number">96</span>]</span><br><span class="line">    N = S[<span class="number">0</span>] ^ B[<span class="number">0</span>] ^ B[<span class="number">26</span>] ^ B[<span class="number">56</span>] ^ B[<span class="number">91</span>] ^ B[<span class="number">96</span>] ^ (B[<span class="number">3</span>] &amp; B[<span class="number">67</span>]) ^ \</span><br><span class="line">        (B[<span class="number">11</span>] &amp; B[<span class="number">13</span>]) ^ (B[<span class="number">17</span>] &amp; B[<span class="number">18</span>]) ^ (B[<span class="number">27</span>] &amp; B[<span class="number">59</span>]) ^ (B[<span class="number">40</span>] &amp; B[<span class="number">48</span>]) ^ \</span><br><span class="line">        (B[<span class="number">61</span>] &amp; B[<span class="number">65</span>]) ^ (B[<span class="number">68</span>] &amp; B[<span class="number">84</span>]) ^ (B[<span class="number">22</span>] &amp; B[<span class="number">24</span>] &amp; B[<span class="number">25</span>]) ^ \</span><br><span class="line">        (B[<span class="number">70</span>] &amp; B[<span class="number">78</span>] &amp; B[<span class="number">82</span>]) ^ (B[<span class="number">88</span>] &amp; B[<span class="number">92</span>] &amp; B[<span class="number">93</span>] &amp; B[<span class="number">95</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt;= <span class="number">126</span>:</span><br><span class="line">            S[j] = S[j + <span class="number">1</span>]</span><br><span class="line">            B[j] = B[j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            S[<span class="number">127</span>] = L</span><br><span class="line">            B[<span class="number">127</span>] = N</span><br><span class="line">    h = (B[<span class="number">12</span>] &amp; S[<span class="number">8</span>]) ^ (S[<span class="number">13</span>] &amp; S[<span class="number">20</span>]) ^ (B[<span class="number">95</span>] &amp; S[<span class="number">42</span>]) ^ (S[<span class="number">60</span>] &amp; S[<span class="number">79</span>]) ^ \</span><br><span class="line">        (B[<span class="number">12</span>] &amp; B[<span class="number">95</span>] &amp; S[<span class="number">94</span>])</span><br><span class="line">    z = h ^ S[<span class="number">93</span>] ^ B[<span class="number">2</span>] ^ B[<span class="number">15</span>] ^ B[<span class="number">36</span>] ^ B[<span class="number">45</span>] ^ B[<span class="number">64</span>] ^ B[<span class="number">73</span>] ^ B[<span class="number">89</span>]</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">S1 = [randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">B1 = [randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">hint = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        tmp = randint(<span class="number">1</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> hint:</span><br><span class="line">            hint.append(tmp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;S1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line">hint2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hint:</span><br><span class="line">        hint2.append(B1[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;hint2&#125;</span>&quot;</span>)</span><br><span class="line">z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    z.append(gen(S1, B1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    key += <span class="built_in">str</span>(gen(S1, B1))</span><br><span class="line">key = long_to_bytes(<span class="built_in">int</span>(key, <span class="number">2</span>))</span><br><span class="line">iv = urandom(<span class="number">16</span>)</span><br><span class="line">secret = urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(<span class="built_in">bytes</span>(key), AES.MODE_CBC, iv)</span><br><span class="line">enc_secret = aes.encrypt(secret)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;iv.<span class="built_in">hex</span>()&#125;</span>||<span class="subst">&#123;enc_secret.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">input_secret = <span class="built_in">input</span>(<span class="string">&quot;my secret?&quot;</span>).strip().encode()</span><br><span class="line"><span class="keyword">if</span> unhexlify(input_secret) == secret:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>仍然是一个师傅问我的没有靶机的交互题，因此也只说思路。题目看着很复杂，简单梳理一下流程：</p>
<ul>
<li>生成一个初始的S、B，均为长度为128的0、1数组</li>
<li>给出初始S的全部值，以及初始B的88个值</li>
<li>然后以S、B数组为初始值，经过gen函数连续生成128个值作为z数组，并给出z数组</li>
<li>然后继续生成128个值作为AES的key，并加密一个secret，给出密文与iv。如果我们能输入正确的secret就能得到flag</li>
</ul>
<p>那么显然，如果我们有完整的初始B，就可以直接用他的gen函数生成出key，就能解AES。而现在B被隐藏了40个值，但是却给出了包含了128个初始S、B经gen函数生成的值的数组z。而gen函数看着很麻烦，实际上就是一个复杂LFSR的更新过程，所以其实也可以看作是模2下的一些简单运算。</p>
<p>因此，我们把隐去的40个值视作40个变量，实际上就是40个变量、128个方程的解方程问题。</p>
<p>而这种位运算的多变量方程，z3往往是很有效的。我也直接丢给z3就得到了解，本地测试如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">S, B</span>):</span><br><span class="line">    L = S[<span class="number">0</span>] ^ S[<span class="number">7</span>] ^ S[<span class="number">38</span>] ^ S[<span class="number">70</span>] ^ S[<span class="number">81</span>] ^ S[<span class="number">96</span>]</span><br><span class="line">    N = S[<span class="number">0</span>] ^ B[<span class="number">0</span>] ^ B[<span class="number">26</span>] ^ B[<span class="number">56</span>] ^ B[<span class="number">91</span>] ^ B[<span class="number">96</span>] ^ (B[<span class="number">3</span>] &amp; B[<span class="number">67</span>]) ^ \</span><br><span class="line">        (B[<span class="number">11</span>] &amp; B[<span class="number">13</span>]) ^ (B[<span class="number">17</span>] &amp; B[<span class="number">18</span>]) ^ (B[<span class="number">27</span>] &amp; B[<span class="number">59</span>]) ^ (B[<span class="number">40</span>] &amp; B[<span class="number">48</span>]) ^ \</span><br><span class="line">        (B[<span class="number">61</span>] &amp; B[<span class="number">65</span>]) ^ (B[<span class="number">68</span>] &amp; B[<span class="number">84</span>]) ^ (B[<span class="number">22</span>] &amp; B[<span class="number">24</span>] &amp; B[<span class="number">25</span>]) ^ \</span><br><span class="line">        (B[<span class="number">70</span>] &amp; B[<span class="number">78</span>] &amp; B[<span class="number">82</span>]) ^ (B[<span class="number">88</span>] &amp; B[<span class="number">92</span>] &amp; B[<span class="number">93</span>] &amp; B[<span class="number">95</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt;= <span class="number">126</span>:</span><br><span class="line">            S[j] = S[j + <span class="number">1</span>]</span><br><span class="line">            B[j] = B[j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            S[<span class="number">127</span>] = L</span><br><span class="line">            B[<span class="number">127</span>] = N</span><br><span class="line">    h = (B[<span class="number">12</span>] &amp; S[<span class="number">8</span>]) ^ (S[<span class="number">13</span>] &amp; S[<span class="number">20</span>]) ^ (B[<span class="number">95</span>] &amp; S[<span class="number">42</span>]) ^ (S[<span class="number">60</span>] &amp; S[<span class="number">79</span>]) ^ \</span><br><span class="line">        (B[<span class="number">12</span>] &amp; B[<span class="number">95</span>] &amp; S[<span class="number">94</span>])</span><br><span class="line">    z = h ^ S[<span class="number">93</span>] ^ B[<span class="number">2</span>] ^ B[<span class="number">15</span>] ^ B[<span class="number">36</span>] ^ B[<span class="number">45</span>] ^ B[<span class="number">64</span>] ^ B[<span class="number">73</span>] ^ B[<span class="number">89</span>]</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">S1 = [randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">B1 = [randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">S = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">BB = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    S[i] = S1[i]</span><br><span class="line">    BB[i] = B1[i]</span><br><span class="line"></span><br><span class="line">hint = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        tmp = randint(<span class="number">1</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> hint:</span><br><span class="line">            hint.append(tmp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">hint2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hint:</span><br><span class="line">        hint2.append(B1[i])</span><br><span class="line"></span><br><span class="line">z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    z.append(gen(S1, B1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#z3solve</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z3_solve</span>():</span><br><span class="line">    B = [BitVec(<span class="string">f&#x27;B_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">    solver = Solver()</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hint:</span><br><span class="line">            B[i] = hint2[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment">#print(B)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        solver.add(gen(S, B) == z[i])</span><br><span class="line">    <span class="keyword">if</span> solver.check()==sat:</span><br><span class="line">        <span class="built_in">print</span>(solver.model())</span><br><span class="line"></span><br><span class="line">z3_solve()</span><br><span class="line"><span class="built_in">print</span>(BB)</span><br></pre></td></tr></table></figure>
<p>那么还原出B后，用初始S、B先生成z，再生成key就能得到AES密钥，就能解密文了。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-分组密码</title>
    <url>/post/a5bd8c0d.html</url>
    <content><![CDATA[<p>这篇文章主要记录一些分组密码相关的趣题</p>
<span id="more"></span>
<h3 id="EASY-dfa"><a href="#EASY-dfa" class="headerlink" title="EASY_dfa"></a>EASY_dfa</h3><p>最近做到的我觉得相当有意思的一个题，在这里记录一下解题过程</p>
<p>题目来源：川渝网络安全竞赛 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample, choice</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"></span><br><span class="line">logo = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> _______   ________  ________       ___    ___ </span></span><br><span class="line"><span class="string">|\  ___ \ |\   __  \|\   ____\     |\  \  /  /|</span></span><br><span class="line"><span class="string">\ \   __/|\ \  \|\  \ \  \___|_    \ \  \/  / /</span></span><br><span class="line"><span class="string"> \ \  \_|/_\ \   __  \ \_____  \    \ \    / / </span></span><br><span class="line"><span class="string">  \ \  \_|\ \ \  \ \  \|____|\  \    \/  /  /  </span></span><br><span class="line"><span class="string">   \ \_______\ \__\ \__\____\_\  \ __/  / /    </span></span><br><span class="line"><span class="string">    \|_______|\|__|\|__|\_________\\\___/ /    </span></span><br><span class="line"><span class="string">                       \|_________\|___|/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     ________  ________ ________         </span></span><br><span class="line"><span class="string">    |\   ___ \|\  _____\\\   __  \        </span></span><br><span class="line"><span class="string">    \ \  \_|\ \ \  \__/\ \  \|\  \       </span></span><br><span class="line"><span class="string">     \ \  \ \\\ \ \   __\\\ \   __  \      </span></span><br><span class="line"><span class="string">      \ \  \_\\\ \ \  \_| \ \  \ \  \     </span></span><br><span class="line"><span class="string">       \ \_______\ \__\   \ \__\ \__\    </span></span><br><span class="line"><span class="string">         \|_______|\|__|    \|__|\|__|    </span></span><br><span class="line"><span class="string">                                                                                                                                 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_memu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. Encrypt</span></span><br><span class="line"><span class="string">2. Get flag</span></span><br><span class="line"><span class="string">3. Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span>.join([choice(hexdigits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br><span class="line">    s = sha256(plain.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sha256(<span class="subst">&#123;plain[:<span class="number">16</span>]&#125;</span>xxxx) = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">    xxxx = <span class="built_in">input</span>(<span class="string">&quot;plz enter the xxxx: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> xxxx != plain[<span class="number">16</span>:]:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x = rotl(x, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.K = key</span><br><span class="line">        self.S = sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)], <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        B = List2Int(B)</span><br><span class="line">        B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">        T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">        T = Int2List(rev(List2Int(T)))</span><br><span class="line">        T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">        T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>():</span><br><span class="line">    plain = <span class="built_in">input</span>(<span class="string">&quot;plz enter your plaintext: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher = <span class="subst">&#123;C.encrypt(unhexlify(plain))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_Flag</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher = <span class="subst">&#123;f&#125;</span>&quot;</span>)</span><br><span class="line">    plain = <span class="built_in">input</span>(<span class="string">&quot;plz enter your plaintext: &quot;</span>)</span><br><span class="line">    c = C.encrypt(unhexlify(plain))</span><br><span class="line">    <span class="keyword">if</span> c == f:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">memu</span>():</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        E()</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        Get_Flag()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bye~&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proof()</span><br><span class="line">    <span class="built_in">print</span>(logo)</span><br><span class="line">    key = urandom(<span class="number">8</span>)</span><br><span class="line">    C = Enc(key)</span><br><span class="line">    f = C.encrypt(urandom(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sbox: <span class="subst">&#123;C.S&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(_memu)</span><br><span class="line">    alarm(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        memu()</span><br></pre></td></tr></table></figure>
<p>代码略有点长，一步一步来，还是从分析加密流程开始：</p>
<p>首先，要过一个proof，为爆破一个十六进制串的末四位哈希，这个本来没什么好讲的，但是仔细看可以发现题目这里锅了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span>.join([choice(hexdigits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br><span class="line">    s = sha256(plain.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sha256(<span class="subst">&#123;plain[:<span class="number">16</span>]&#125;</span>xxxx) = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">    xxxx = <span class="built_in">input</span>(<span class="string">&quot;plz enter the xxxx: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> xxxx != plain[<span class="number">16</span>:]:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure>
<p>可以看到，他直接print了明文串，因此只需要接受明文串，并把末四个十六进制数发送回去即可通过proof。其实这也没什么，不过是一个小失误。但之所以我要特地讲出来，在这篇wp后面会说明原因。</p>
<p>过了proof后，加密正式开始：</p>
<ul>
<li>生成一个8字节的随机密钥key</li>
<li>用这个key初始化一个Enc对象C</li>
<li>生成一个4字节的随机明文，记作plain，并用Enc对象C进行加密，得到f</li>
<li>给出C中的S盒</li>
<li>给我们10s时间，可以选择进行以下两种操作：</li>
<li><ul>
<li>输入”1”，可以自行构造一组明文进行加密，靶机端会返回加密后的密文</li>
<li>输入”2”，可以输入一个明文，如果输入的明文被加密后与f相等，则核验通过，发放flag</li>
</ul>
</li>
</ul>
<p>这是靶机端需完成的任务的逻辑，再来看看Enc对象具体是怎么加密的，也就是encrypt函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">    T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">    T = Int2List(rev(List2Int(T)))</span><br><span class="line">    T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">    T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>生成一个S盒，是一个(0,256)之间的随机置换</li>
<li>将明文与key的前四个字节作异或，得到T</li>
<li>第二行，做完了题也不知道有什么用，估计是出题没删干净</li>
<li>将T作S盒置换后，调用l函数，得到更新后的T</li>
<li>将T与key的后半段异或，并给出十六进制密文</li>
</ul>
<p>其中，l函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br></pre></td></tr></table></figure>
<p>你应该可以感觉到，如果能够知道l函数的密文，那么这种级别的加密对于z3来说，求解出明文不是难事。</p>
<p>至此，题目加密流程就梳理结束了，接下来进行到分析环节。</p>
<h4 id="思路一：生日攻击"><a href="#思路一：生日攻击" class="headerlink" title="思路一：生日攻击"></a>思路一：生日攻击</h4><p>刚才我特意说，题目的proof锅了，不需要实际爆破，作用就在这里。节省下来的爆破时间给生日攻击提供了一点可能性。</p>
<p>你可以发现，题目实质上就是要求给出正确的4个明文字节。而4个字节一共有2^32次方种可能性，因此我们随便输入四个字节给靶机，也有 $ \frac{1}{2^{32}}$ 的机会成功。而失败了的话，就重新连接靶机，再随便输入四个字节，如此重复。根据生日攻击理论，如果能够反复进行2^32次，我们就有超过50%的几率至少成功攻击一次，那么就能拿到flag。</p>
<p>当然，即使proof锅了，真的要进行2^32次方次的话，可以用tqdm测试一下大概需要600000个小时，仍然是不现实的。但是这确实是个思路，一点办法都没有的时候，可以拼拼运气。</p>
<h4 id="思路二：构造明文"><a href="#思路二：构造明文" class="headerlink" title="思路二：构造明文"></a>思路二：构造明文</h4><p>生日攻击只能说有非常微小的成功的机会。真正要做的话，还是得分析一下加密流程，以及如何构造出可用的明文。</p>
<p>首先要注意到，我们只有10s时间，这是个非常重要的信息。经过我用tqdm测试，我们大概最多能构造30-40组明文让服务器加密。并且，考虑到还需要用构造出的明文信息对f进行解密，实际上来说可能最多只能构造10-20组明文。</p>
<p>这个用处挺大的，直接完全排除了中间相遇攻击、建立字典查找等思路。因此现在的主要目标就是：如何用有限的、少量的明文，去泄露Enc对象C的信息，从而解密密文。</p>
<p>你应该能看出来，如果你能获得密钥key的完整8个字节，那么解密是很容易的，只需要对应异或、逆置换、z3解方程就可以解密出明文。</p>
<p>因此，重心放在求解key上也就是自然而然的思路。很容易想到，如果发送四个字节的”\x00”给靶机端，那么再观察encrypt函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">    T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">    T = Int2List(rev(List2Int(T)))</span><br><span class="line">    T = self.l([self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">    T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(T).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>
<p>那么第一步得到的T其实就是key的前四个字节，在之后也是key的前四个字节进行置换、调用l函数等。</p>
<p>而第二次，考虑发送下面这样的字节串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x00&quot;</span> * <span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以发现，第一部得到的T，前面三个字节并没有受到影响，仍然是key的前三个字节，只有最后一字节的最后一比特取了反。因此，到第三步置换时，前三个字节的置换仍然是不变的，变的只有第四个字节。也就是说，经过这两次明文的发送，l函数输入的参数列表只有最后一个发生了改变！</p>
<p>而我们再看l函数加密过程，为了直观我画个图像：</p>
<p><img src="/post/a5bd8c0d/image-20231007231119071.png" alt="image-20231007231119071"></p>
<p>红色部分代表两次构造的明文在调l函数时的不同量，黄色部分代表得到密文，线条表示该线条与另一线条之间的五个部分异或得到下方的密文。</p>
<p>那么你仔细看这个图，你会发现，第二块密文和第三块密文，对于红色块异或的量是相同的！那么我们将两次服务器返回的密文异或，会发生什么呢？在下面的分析过程中，我们把key的前半部分记作key1，后半部分记作key2.</p>
<p>首先，我们把m经置换后的列表记作P(m)，经l函数后的列表记作l(P(m))，也就是m经第三步变换后，记作(l(P(m)))。那么两次构造明文到第三步前分别是key1、key1’，则有：</p>
<script type="math/tex; mode=display">
c1 \oplus c2 = (l(P(key_1)) \oplus key_2) \oplus (l(P(key_1')) \oplus key_2)</script><p>那么就可以消掉key2，即：</p>
<script type="math/tex; mode=display">
c1 \oplus c2 = l(P(key_1) \oplus l(P(key_1'))</script><p>而根据刚才的画图分析，密文中间两块对红色的异或利用是相同的，因此我们可以单独分析上式的中间两块，得到：</p>
<script type="math/tex; mode=display">
中间两块异或 = 两次明文的不同红色量异或</script><p>这一部分一定要结合图多理解理解，我没有想到讲的特别清楚的办法，如果哪里不明白可以与我交流。</p>
<p>而两次不同的红色量分别是(key1)和(key1^1)经置换得到的最后一字节，而我们拥有这个异或值以及S盒，因此可以反查到所有可能的解。一般来说会有1-4组。</p>
<p>那么通过上述方法，我们就获得了key1的一个字节，而类似的，通过构造下面几组明文并发送，可以通过相同的分析得到key1的剩下三个字节：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span></span><br><span class="line"><span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span></span><br><span class="line"><span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>而有了key1后，我们就可以发送key1作为明文，那么经第一步异或后得到的T就是四个全零字节，那么也就自然的可以得到第三步置换以及加密后的值，再与服务器返回的密文异或就能得到key2.</p>
<p>得到key2后，解密相对来说就很容易了，可以自行逆序实现。</p>
<p>需要注意的是，有一个地方导致我们可能不成功：</p>
<ul>
<li>每次获得的key1的某字节可能有多解</li>
</ul>
<p>但是没关系，我们只需要多与靶机交互几次，直到满足key1的四个字节都是正确解即可。这一段可以用下面的代码本地调试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample, choice</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> hexdigits</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x = rotl(x, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">B</span>):</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">K,cipher</span>):</span><br><span class="line">    T = List2Int(xorl(K[<span class="number">4</span>:],cipher))</span><br><span class="line">    s = Solver() </span><br><span class="line">    B = BitVec(<span class="string">&#x27;B&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s.add(B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>) == T)</span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:    <span class="comment">#检测是否有解</span></span><br><span class="line">        result = <span class="built_in">str</span>(s.model()) </span><br><span class="line">        T = Int2List(<span class="built_in">int</span>(result[<span class="number">5</span>:-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">            T[i] = inv_S[T[i]]</span><br><span class="line">    T = List2Int(xorl(K[:<span class="number">4</span>],T))</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.K = key</span><br><span class="line">        self.S = sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)], <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">self, B: <span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        B = List2Int(B)</span><br><span class="line">        B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">        T = xorl(self.K[:<span class="number">4</span>], plain)</span><br><span class="line">        T = Int2List(rev(List2Int(T)))</span><br><span class="line">        temp = [self.S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T]</span><br><span class="line">        T = self.l(temp)</span><br><span class="line">        T = xorl(self.K[<span class="number">4</span>:], T)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(T)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">m</span>):</span><br><span class="line">    plain = hexlify(m)</span><br><span class="line">    <span class="keyword">return</span> C.encrypt(unhexlify(plain))</span><br><span class="line"></span><br><span class="line">fin = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            key = urandom(<span class="number">8</span>)</span><br><span class="line">            C = Enc(key)</span><br><span class="line">            x = []</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">4</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span>))</span><br><span class="line">            x.append(E(<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span>))</span><br><span class="line">            c = urandom(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">            S = C.S</span><br><span class="line">            inv_S = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                inv_S[S[i]] = i</span><br><span class="line"></span><br><span class="line">            <span class="comment">#获取key</span></span><br><span class="line">            key_prefix = []</span><br><span class="line"></span><br><span class="line">            <span class="comment">#1.获取key[:4]</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                    temp = (xorl(x[<span class="number">0</span>],x[i]))[i-<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">elif</span>(i % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">                    temp = (xorl(x[<span class="number">0</span>],x[i]))[i]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                    t1 = (S[j]&gt;&gt;<span class="number">6</span>) + ((S[j]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                    t2 = (S[j^<span class="number">1</span>]&gt;&gt;<span class="number">6</span>) + ((S[j^<span class="number">1</span>]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">if</span>(t1^t2 == temp):</span><br><span class="line">                        key_prefix.append(inv_S[S[j]])</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            key_prefix = key_prefix[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            key_suffix = Int2List(bytes_to_long(E(long_to_bytes(List2Int(key_prefix)))))</span><br><span class="line">            T = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            temp = l([S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">            key_suffix = xorl(temp, key_suffix)</span><br><span class="line">            key_final = long_to_bytes(List2Int(key_prefix)) + long_to_bytes(List2Int(key_suffix))</span><br><span class="line"></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(decrypt(key_final,E(c)) == c.<span class="built_in">hex</span>()):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    fin += count</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fin//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>可以计算出，平均需要180次左右，能获得一次key1的完全正确的解。运气好的话几组就能出，运气不好接近一千组也有可能，不过没事，交互挂着跑就好。</p>
<p>而本地能正确解密的话，我们就能顺利编写靶机代码了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>): <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorl</span>(<span class="params">x, y</span>): <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: a ^ b, x, y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List2Int</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> | x[<span class="number">1</span>] &lt;&lt; <span class="number">16</span> | x[<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | x[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Int2List</span>(<span class="params">x</span>): <span class="keyword">return</span> [x &gt;&gt; <span class="number">24</span>, (x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, x &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">B</span>):</span><br><span class="line">    B = List2Int(B)</span><br><span class="line">    B = B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> Int2List(B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">K,cipher,inv_S</span>):</span><br><span class="line">    T = List2Int(xorl(K[<span class="number">4</span>:],cipher))</span><br><span class="line">    s = Solver() </span><br><span class="line">    B = BitVec(<span class="string">&#x27;B&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s.add(B ^ rotl(B, <span class="number">2</span>) ^ rotl(B, <span class="number">10</span>) ^ rotl(B, <span class="number">18</span>) ^ rotl(B, <span class="number">24</span>) == T)</span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:    <span class="comment">#检测是否有解</span></span><br><span class="line">        result = <span class="built_in">str</span>(s.model()) </span><br><span class="line">        T = Int2List(<span class="built_in">int</span>(result[<span class="number">5</span>:-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">            T[i] = inv_S[T[i]]</span><br><span class="line">    T = List2Int(xorl(K[:<span class="number">4</span>],T))</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(T).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28579</span>)</span><br><span class="line">                temp = r.recvline().strip().decode()[-<span class="number">4</span>:]</span><br><span class="line">                r.sendline(temp.encode())</span><br><span class="line">                r.recvuntil(<span class="string">b&quot;sbox: &quot;</span>)</span><br><span class="line">                S = <span class="built_in">eval</span>(r.recvline())</span><br><span class="line">                inv_S = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                    inv_S[S[i]] = i</span><br><span class="line"></span><br><span class="line">                x = []</span><br><span class="line">                <span class="comment">#0</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">4</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#1</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)		</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#2</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#3</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">1</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">2</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">                <span class="comment">#4</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(<span class="string">b&quot;\x00&quot;</span>*<span class="number">0</span> + <span class="string">b&quot;\x01&quot;</span>*<span class="number">1</span> +<span class="string">b&quot;\x00&quot;</span>*<span class="number">3</span>))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                x.append(unhexlify(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#获取key</span></span><br><span class="line">                key_prefix = []</span><br><span class="line"></span><br><span class="line">                <span class="comment">#1.获取key[:4]</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        temp = (xorl(x[<span class="number">0</span>],x[i]))[i-<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">elif</span>(i % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">                        temp = (xorl(x[<span class="number">0</span>],x[i]))[i]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">                        t1 = (S[j]&gt;&gt;<span class="number">6</span>) + ((S[j]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                        t2 = (S[j^<span class="number">1</span>]&gt;&gt;<span class="number">6</span>) + ((S[j^<span class="number">1</span>]&amp;<span class="number">0b111111</span>)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">if</span>(t1^t2 == temp):</span><br><span class="line">                            key_prefix.append(inv_S[S[j]])</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                key_prefix = key_prefix[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment">#2.获取key[4:]</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot; plaintext: &quot;</span>)</span><br><span class="line">                r.sendline(hexlify(long_to_bytes(List2Int(key_prefix))))</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                key_suffix = Int2List(bytes_to_long(unhexlify(r.recvline().strip())))</span><br><span class="line">                T = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">                temp = l([S[i] <span class="keyword">for</span> i <span class="keyword">in</span> T])</span><br><span class="line">                key_suffix = xorl(temp, key_suffix)</span><br><span class="line">                key_final = long_to_bytes(List2Int(key_prefix)) + long_to_bytes(List2Int(key_suffix))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#获取flag</span></span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">                r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">                temp = r.recvuntil(<span class="string">b&quot;cipher =&quot;</span>)</span><br><span class="line">                cipher = unhexlify(r.recvline().strip())</span><br><span class="line">                t = decrypt(key_final,cipher,inv_S)</span><br><span class="line">                r.sendline(t)</span><br><span class="line">                temp = r.recvline()</span><br><span class="line">                <span class="built_in">print</span>(temp)</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">b&quot;wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                r.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">getflag()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;4f9d3982-be4b-4c4a-8ca0-db1a69b28b03&#125;</span></span><br></pre></td></tr></table></figure>
<p>就这一题而言，还是有不少不是很好讲清楚的地方，可能我的做法也并不简洁。如果看了这篇文章你有任何想说的，都欢迎与我交流！</p>
<p><br></p>
<p><br></p>
<h3 id="newAES"><a href="#newAES" class="headerlink" title="newAES"></a>newAES</h3><p>题目来源：羊城杯 2023 决赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">SboxOriginal = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Rcon = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    text = <span class="built_in">int</span>(text.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2text</span>(<span class="params">matrix</span>):</span><br><span class="line">    text = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text |= (matrix[i][j] &lt;&lt; (<span class="number">120</span> - <span class="number">8</span> * (<span class="number">4</span> * i + j)))</span><br><span class="line">    <span class="keyword">return</span> text.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master_key, Sbox=SboxOriginal</span>):</span><br><span class="line">        self.Sbox = Sbox</span><br><span class="line">        self.InvSbox = [<span class="number">0</span>]* <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            self.InvSbox[self.Sbox[i]] = i</span><br><span class="line">        self.change_key(master_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_key</span>(<span class="params">self, master_key</span>):</span><br><span class="line">        self.round_keys = text2matrix(master_key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">            self.round_keys.append([])</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                byte = self.round_keys[i - <span class="number">4</span>][<span class="number">0</span>]        \</span><br><span class="line">                     ^ self.Sbox[self.round_keys[i - <span class="number">1</span>][<span class="number">1</span>]]  \</span><br><span class="line">                     ^ Rcon[i // <span class="number">4</span>]</span><br><span class="line">                self.round_keys[i].append(byte)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">                    byte = self.round_keys[i - <span class="number">4</span>][j]    \</span><br><span class="line">                         ^ self.Sbox[self.round_keys[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">4</span>]]</span><br><span class="line">                    self.round_keys[i].append(byte)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    byte = self.round_keys[i - <span class="number">4</span>][j]    \</span><br><span class="line">                         ^ self.round_keys[i - <span class="number">1</span>][j]</span><br><span class="line">                    self.round_keys[i].append(byte)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        self.plain_state = text2matrix(plaintext)</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.plain_state, self.round_keys[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            self.__round_encrypt(self.plain_state, self.round_keys[<span class="number">4</span> * i : <span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        self.__sub_bytes(self.plain_state)</span><br><span class="line">        self.__shift_rows(self.plain_state)</span><br><span class="line">        self.__add_round_key(self.plain_state, self.round_keys[<span class="number">40</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.plain_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        self.cipher_state = text2matrix(ciphertext)</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.cipher_state, self.round_keys[<span class="number">40</span>:])</span><br><span class="line">        self.__inv_shift_rows(self.cipher_state)</span><br><span class="line">        self.__inv_sub_bytes(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.__round_decrypt(self.cipher_state, self.round_keys[<span class="number">4</span> * i : <span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        self.__add_round_key(self.cipher_state, self.round_keys[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add_round_key</span>(<span class="params">self, s, k</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] ^= k[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_encrypt</span>(<span class="params">self, state_matrix, key_matrix</span>):</span><br><span class="line">        self.__sub_bytes(state_matrix)</span><br><span class="line">        self.__shift_rows(state_matrix)</span><br><span class="line">        self.__mix_columns(state_matrix)</span><br><span class="line">        self.__add_round_key(state_matrix, key_matrix)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_decrypt</span>(<span class="params">self, state_matrix, key_matrix</span>):</span><br><span class="line">        self.__add_round_key(state_matrix, key_matrix)</span><br><span class="line">        self.__inv_mix_columns(state_matrix)</span><br><span class="line">        self.__inv_shift_rows(state_matrix)</span><br><span class="line">        self.__inv_sub_bytes(state_matrix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.Sbox[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.InvSbox[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_single_column</span>(<span class="params">self, a</span>):</span><br><span class="line">        t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">        u = a[<span class="number">0</span>]</span><br><span class="line">        a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">        a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">        a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">        a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.__mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">            s[i][<span class="number">0</span>] ^= u</span><br><span class="line">            s[i][<span class="number">1</span>] ^= v</span><br><span class="line">            s[i][<span class="number">2</span>] ^= u</span><br><span class="line">            s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">        self.__mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybox = [<span class="number">105</span>, <span class="number">121</span>, <span class="number">73</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">233</span>, <span class="number">249</span>, <span class="number">201</span>, <span class="number">217</span>, <span class="number">169</span>, <span class="number">185</span>, <span class="number">137</span>, <span class="number">153</span>, <span class="number">104</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">232</span>, <span class="number">248</span>, <span class="number">200</span>, <span class="number">216</span>, <span class="number">168</span>, <span class="number">184</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">107</span>, <span class="number">123</span>, <span class="number">75</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">59</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">235</span>, <span class="number">251</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">171</span>, <span class="number">187</span>, <span class="number">139</span>, <span class="number">155</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">74</span>, <span class="number">90</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">234</span>, <span class="number">250</span>, <span class="number">202</span>, <span class="number">218</span>, <span class="number">170</span>, <span class="number">186</span>, <span class="number">138</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">125</span>, <span class="number">77</span>, <span class="number">93</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">253</span>, <span class="number">205</span>, <span class="number">221</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">141</span>, <span class="number">157</span>, <span class="number">108</span>, <span class="number">124</span>, <span class="number">76</span>, <span class="number">92</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">252</span>, <span class="number">204</span>, <span class="number">220</span>, <span class="number">172</span>, <span class="number">188</span>, <span class="number">140</span>, <span class="number">156</span>, <span class="number">111</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">95</span>, <span class="number">47</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">175</span>, <span class="number">191</span>, <span class="number">143</span>, <span class="number">159</span>, <span class="number">110</span>, <span class="number">126</span>, <span class="number">78</span>, <span class="number">94</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">206</span>, <span class="number">222</span>, <span class="number">174</span>, <span class="number">190</span>, <span class="number">142</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">225</span>, <span class="number">241</span>, <span class="number">193</span>, <span class="number">209</span>, <span class="number">161</span>, <span class="number">177</span>, <span class="number">129</span>, <span class="number">145</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">192</span>, <span class="number">208</span>, <span class="number">160</span>, <span class="number">176</span>, <span class="number">128</span>, <span class="number">144</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">227</span>, <span class="number">243</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">163</span>, <span class="number">179</span>, <span class="number">131</span>, <span class="number">147</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">226</span>, <span class="number">242</span>, <span class="number">194</span>, <span class="number">210</span>, <span class="number">162</span>, <span class="number">178</span>, <span class="number">130</span>, <span class="number">146</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">229</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">181</span>, <span class="number">133</span>, <span class="number">149</span>, <span class="number">100</span>, <span class="number">116</span>, <span class="number">68</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">244</span>, <span class="number">196</span>, <span class="number">212</span>, <span class="number">164</span>, <span class="number">180</span>, <span class="number">132</span>, <span class="number">148</span>, <span class="number">103</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">199</span>, <span class="number">215</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">135</span>, <span class="number">151</span>, <span class="number">102</span>, <span class="number">118</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">230</span>, <span class="number">246</span>, <span class="number">198</span>, <span class="number">214</span>, <span class="number">166</span>, <span class="number">182</span>, <span class="number">134</span>, <span class="number">150</span>]</span><br><span class="line">plaintext = <span class="string">b&quot;I will give you some hint: &quot;</span> + flag</span><br><span class="line">plaintext = pad(plaintext,<span class="number">16</span>,<span class="string">&quot;pkcs7&quot;</span>)</span><br><span class="line">ciphertext = <span class="string">b&quot;&quot;</span> </span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES(key, Sbox=mybox)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(plaintext) &gt; <span class="number">0</span>:</span><br><span class="line">    ciphertext += aes.encrypt(plaintext[:<span class="number">16</span>])</span><br><span class="line">    plaintext = plaintext[<span class="number">16</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;ciphertext.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 26ec146dddda72b791585e5ecbc6a947bd6159d4de35df6c7717cd8eca1acd319f07803d8127f41b7ac7cdadc250ec8bb66f3661d772665a1622ffeba82996551463b738a997cd2c7081894fa9a5246c</span></span><br></pre></td></tr></table></figure>
<p>题目代码不短，不过大部分是AES的具体实现，所以不用管。题目真正有用的信息其实就两点：</p>
<ul>
<li>更换了一个AES的S盒</li>
<li>给了两组明文，以及AES加密后的对应密文</li>
</ul>
<p>第一感觉应该是AES的某一部分作了小改动，然后导致产生了漏洞。但是把S盒换成普通的S盒之后，用自己构造的key，将明文分别用这个AES和cyberchef的AES进行加密，结果是完全一样的！说明这个AES真的就是完整、普通的AES加密，没有改动任何地方。</p>
<p>然后就懵了很久，因为好像没听说过AES还能已知明文攻击。但是题目目的其实已经很清楚了：根据这个更换的S盒以及两组明密文对，对AES进行已知明文攻击。</p>
<p>那肯定就是这个S盒设计的有问题，查阅后发现针对S盒确实有一种差分密码分析方式，然后就学习了一波：</p>
<p><a href="https://blog.csdn.net/weixin_43734797/article/details/124055427">密码分析（一）：差分密码分析-CSDN博客</a></p>
<p>简单说明一下我的理解，在这里我把差分分析的相关概念根据题目具体化一下：</p>
<p><strong>差分：</strong>两组明文的异或值，就是明文差分；同理，两组密文的异或值，就是密文差分。</p>
<p><strong>差分分析的依据：</strong>与密钥异或，不会改变差分</p>
<p>什么叫不会改变差分？我们把AES的行移位、列混淆都先不管，先单独看一下用到S盒的部分，也就是字节代换以及进行代换前的轮密钥加。这样的话，简单画个草图：</p>
<p><img src="/post/a5bd8c0d/image-20231010101627908.png" alt="image-20231010101627908"></p>
<p>那么不会改变差分就体现在下面的式子中：若有</p>
<script type="math/tex; mode=display">
m_1 \oplus m_2 = t</script><p>则：</p>
<script type="math/tex; mode=display">
m_1' \oplus m_2'  = (m_1\oplus roundkey) \oplus (m_2\oplus roundkey) = t</script><p>也就是说，轮密钥其实是对差分没有任何影响的，那么我们怎么利用这个事实进行攻击呢？</p>
<p>再回到刚才加密的那个图，可以看到，m1’经S盒代换后变成c1，m2’经S盒代换后变成c2，那么假设c1,c2的密文差分是r，那么我们就拥有了一个S盒的差分对 (t,r) 。</p>
<p>而S盒是一个字节代换操作，因此输入一共就有一个字节种可能，也就是256种，而对应的，所有可能的(m1,m2)明文对也就有256*256种，因此我们可以根据所有的(m1,m2)，用已知的S盒求出所有的(c1,c2)，从而求出所有明文差分及对应的密文差分，然后建立出一张S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        t[i^j][sbox[i]^sbox[j]] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>那你应该要想到，这种差分对于一个设计良好的S盒来说，要显得很随机，因为S盒的字节代换本身是一个非线性操作，如果随机性不够，那么会让这个S盒有较大的概率暴露线性特征。</p>
<p>这么说可能还是有点抽象，直接列出两种S盒的差分表就直观了，简单打印一下前几行看看：</p>
<p>正常S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>这个题目的S盒的差分表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>能感受到区别了吧，这个题目的S盒的差分表完全就没有任何随机性，明文差分与密文差分完全是固定的！而这个固定的差分就不会受轮密钥加的影响，因此我们完全不需要密钥，把对应密钥的操作剔除掉即可。</p>
<p>也就是说，我们只需要将已知密文与未知密文求差分，然后将这个差分用AES解密(去除轮密钥加)，求出初始的明文差分，然后将这个差分与已知明文再求差分，就能得到未知的明文了。</p>
<p>需要注意的是，由于是对差分进行AES解密，所以用的并不是题目给的S盒，而是由S盒求出的差分S盒。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Rcon = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    text = <span class="built_in">int</span>(text.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2text</span>(<span class="params">matrix</span>):</span><br><span class="line">    text = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text |= (matrix[i][j] &lt;&lt; (<span class="number">120</span> - <span class="number">8</span> * (<span class="number">4</span> * i + j)))</span><br><span class="line">    <span class="keyword">return</span> text.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Sbox</span>):</span><br><span class="line">        self.Sbox = Sbox</span><br><span class="line">        self.InvSbox = [<span class="number">0</span>]* <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            self.InvSbox[self.Sbox[i]] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        self.cipher_state = text2matrix(ciphertext)</span><br><span class="line">        self.__inv_shift_rows(self.cipher_state)</span><br><span class="line">        self.__inv_sub_bytes(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.__round_decrypt(self.cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2text(self.cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__round_decrypt</span>(<span class="params">self, state_matrix</span>):</span><br><span class="line">        self.__inv_mix_columns(state_matrix)</span><br><span class="line">        self.__inv_shift_rows(state_matrix)</span><br><span class="line">        self.__inv_sub_bytes(state_matrix)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_sub_bytes</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                s[i][j] = self.InvSbox[s[i][j]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_shift_rows</span>(<span class="params">self, s</span>):</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_single_column</span>(<span class="params">self, a</span>):</span><br><span class="line">        t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">        u = a[<span class="number">0</span>]</span><br><span class="line">        a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">        a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">        a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">        a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            self.__mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inv_mix_columns</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">            s[i][<span class="number">0</span>] ^= u</span><br><span class="line">            s[i][<span class="number">1</span>] ^= v</span><br><span class="line">            s[i][<span class="number">2</span>] ^= u</span><br><span class="line">            s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">        self.__mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sbox_diff</span>(<span class="params">sbox</span>):          </span><br><span class="line">    t = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            t[i^j][sbox[i]^sbox[j]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    sbox_diff = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> t[i][j] == <span class="number">256</span>:</span><br><span class="line">                sbox_diff[i] = j</span><br><span class="line">    <span class="keyword">return</span> sbox_diff</span><br><span class="line"></span><br><span class="line">sbox = [<span class="number">105</span>, <span class="number">121</span>, <span class="number">73</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">233</span>, <span class="number">249</span>, <span class="number">201</span>, <span class="number">217</span>, <span class="number">169</span>, <span class="number">185</span>, <span class="number">137</span>, <span class="number">153</span>, <span class="number">104</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">232</span>, <span class="number">248</span>, <span class="number">200</span>, <span class="number">216</span>, <span class="number">168</span>, <span class="number">184</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">107</span>, <span class="number">123</span>, <span class="number">75</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">59</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">235</span>, <span class="number">251</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">171</span>, <span class="number">187</span>, <span class="number">139</span>, <span class="number">155</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">74</span>, <span class="number">90</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">234</span>, <span class="number">250</span>, <span class="number">202</span>, <span class="number">218</span>, <span class="number">170</span>, <span class="number">186</span>, <span class="number">138</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">125</span>, <span class="number">77</span>, <span class="number">93</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">237</span>, <span class="number">253</span>, <span class="number">205</span>, <span class="number">221</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">141</span>, <span class="number">157</span>, <span class="number">108</span>, <span class="number">124</span>, <span class="number">76</span>, <span class="number">92</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">252</span>, <span class="number">204</span>, <span class="number">220</span>, <span class="number">172</span>, <span class="number">188</span>, <span class="number">140</span>, <span class="number">156</span>, <span class="number">111</span>, <span class="number">127</span>, <span class="number">79</span>, <span class="number">95</span>, <span class="number">47</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">175</span>, <span class="number">191</span>, <span class="number">143</span>, <span class="number">159</span>, <span class="number">110</span>, <span class="number">126</span>, <span class="number">78</span>, <span class="number">94</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">206</span>, <span class="number">222</span>, <span class="number">174</span>, <span class="number">190</span>, <span class="number">142</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">225</span>, <span class="number">241</span>, <span class="number">193</span>, <span class="number">209</span>, <span class="number">161</span>, <span class="number">177</span>, <span class="number">129</span>, <span class="number">145</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">192</span>, <span class="number">208</span>, <span class="number">160</span>, <span class="number">176</span>, <span class="number">128</span>, <span class="number">144</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">227</span>, <span class="number">243</span>, <span class="number">195</span>, <span class="number">211</span>, <span class="number">163</span>, <span class="number">179</span>, <span class="number">131</span>, <span class="number">147</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">226</span>, <span class="number">242</span>, <span class="number">194</span>, <span class="number">210</span>, <span class="number">162</span>, <span class="number">178</span>, <span class="number">130</span>, <span class="number">146</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">229</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">181</span>, <span class="number">133</span>, <span class="number">149</span>, <span class="number">100</span>, <span class="number">116</span>, <span class="number">68</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">244</span>, <span class="number">196</span>, <span class="number">212</span>, <span class="number">164</span>, <span class="number">180</span>, <span class="number">132</span>, <span class="number">148</span>, <span class="number">103</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">199</span>, <span class="number">215</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">135</span>, <span class="number">151</span>, <span class="number">102</span>, <span class="number">118</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">230</span>, <span class="number">246</span>, <span class="number">198</span>, <span class="number">214</span>, <span class="number">166</span>, <span class="number">182</span>, <span class="number">134</span>, <span class="number">150</span>]</span><br><span class="line">m = <span class="string">b&quot;I will give you some hint: DASCT&quot;</span></span><br><span class="line">ciphertext = <span class="string">b&quot;&quot;</span> </span><br><span class="line">aes = AES(Sbox=get_sbox_diff(sbox))</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;26ec146dddda72b791585e5ecbc6a947bd6159d4de35df6c7717cd8eca1acd319f07803d8127f41b7ac7cdadc250ec8bb66f3661d772665a1622ffeba82996551463b738a997cd2c7081894fa9a5246c&quot;</span></span><br><span class="line">c1 = long_to_bytes(<span class="built_in">int</span>(c[:<span class="number">64</span>],<span class="number">16</span>))</span><br><span class="line">c2 = long_to_bytes(<span class="built_in">int</span>(c[<span class="number">64</span>:],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DASCT&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c2)//<span class="number">16</span>):</span><br><span class="line">    diff1 = xor(c1[:<span class="number">16</span>],c2[<span class="number">16</span>*i:<span class="number">16</span>*i+<span class="number">16</span>])</span><br><span class="line">    temp1 = aes.decrypt(diff1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(xor(temp1,m[:<span class="number">16</span>]))[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;de423c9aa5df7e683bd4b08bbca2a3409c018867&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="aes"><a href="#aes" class="headerlink" title="aes"></a>aes</h3><p>题目来源：EIS 2019</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg, key</span>):</span><br><span class="line">    ctr = Counter.new(<span class="number">128</span>,  initial_value=<span class="built_in">sum</span>(msg))</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CTR, counter=ctr)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    signal.alarm(<span class="number">60</span>)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/ctf/flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read()</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">30</span></span><br><span class="line">    enc_flag = enc(flag, key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the our AES encryption system!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Here is your encrypted flag: <span class="subst">&#123;enc_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Please input your plaintext: &quot;</span>)</span><br><span class="line">            plaintext = <span class="built_in">bytes</span>.fromhex(plaintext)</span><br><span class="line">            ciphertext = enc(plaintext, key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Here is your ciphertext: <span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error!&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye~&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>靶机提供了如下操作：</p>
<ul>
<li>连接上靶机后，开始计时60s</li>
<li>随机生成十六字节作为AES密钥</li>
<li>使用AES_CTR模式对flag进行加密，其中Counter由flag的所有字节和生成，并给出flag的加密值</li>
<li>可以与服务器进行三十次交互，每一次交互中，可以输入一段明文，并获得其AES_CTR模式的加密值，对应Counter仍然由输入明文的字节和产生</li>
</ul>
<p>首先就注意到用了一个平时不怎么见的AES_CTR模式，那么问题肯定也出在这里，先了解一波CTR模式是什么：</p>
<p><a href="https://wumansgy.github.io/2018/11/03/AES的CTR模式加密解密详解/">AES的CTR模式加密解密详解 | Wuman’s Blog (wumansgy.github.io)</a></p>
<p>其核心如下：</p>
<p><img src="/post/a5bd8c0d/image-20231019210651725.png" alt="image-20231019210651725"></p>
<p>可以看到，他的AES加密是作用于Counter而非明文。也就是说，其加密流程是将被AES加密的Counter与明文异或得到密文。</p>
<p>而这道题显然提供了Counter的额外信息，也就是其initial_value是传入明文的字节和。而flag固定为30个字节，因此其和只有256*30种可能性，完全可以爆破。而当我们取的明文值字节和正好等于flag的字节和时，其AES加密的结果相同，因此有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = flag_enc ^ input ^ input_enc</span><br></pre></td></tr></table></figure>
<p>至于限时60s以及限30次，完全不重要，因为可以反复连接靶机而flag不会变。当然注意输入明文长度应与flag一致，均为30。</p>
<p>然而，在NSS上复现本题时，爆破完所有范围依然没有结果，此时打印出传回的flag_enc，发现是45字节，说明题目改动了flag与容器镜像的附件，但是下发的附件忘记改了，因此需要扩大范围至256*45。并且由于改动过flag，那么flag头应该考虑”NSSCTF”。同时，考虑到flag均为可见字符，因此复现时还可以进一步缩小一点范围。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> trange(<span class="number">256</span>//<span class="number">2</span>*<span class="number">3</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28353</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;flag:&quot;</span>)</span><br><span class="line">    flag_enc = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;plaintext: &quot;</span>)</span><br><span class="line">        num = <span class="number">30</span> * count + i</span><br><span class="line">        input1 = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">255</span>):</span><br><span class="line">            num -= <span class="number">255</span></span><br><span class="line">            input1 += <span class="string">b&quot;\xff&quot;</span></span><br><span class="line">        input1 += long_to_bytes(num)</span><br><span class="line">        pad = (<span class="number">45</span>-<span class="built_in">len</span>(input1))*<span class="string">b&quot;\x00&quot;</span></span><br><span class="line">        input1 += pad           </span><br><span class="line">        r.sendline(input1.<span class="built_in">hex</span>())</span><br><span class="line">        r.recvuntil(<span class="string">b&quot;ciphertext:&quot;</span>)</span><br><span class="line">        input_c = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line">        flag = long_to_bytes(bytes_to_long(input_c) ^ bytes_to_long(flag_enc) ^ bytes_to_long(input1))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;NSSCTF&quot;</span> <span class="keyword">in</span> flag):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;b93abc9b-7972-4c46-b13f-5eed06787edc&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-剪枝</title>
    <url>/post/342113ee.html</url>
    <content><![CDATA[<p>该文章主要记录一些深搜剪枝相关的趣题</p>
<span id="more"></span>
<h3 id="首尾剪枝"><a href="#首尾剪枝" class="headerlink" title="首尾剪枝"></a>首尾剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line"><span class="string">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line"><span class="string">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>已知条件：</strong></p>
<ul>
<li>p 与 q 的反方向二进制的异或值，共256bit，记为pxorq</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从两端向中间搜索</p>
</li>
<li><p>每一次搜索，需利用当前 pxorq 两端的bit位。这是因为，pxorq 的当前最高位对应p的最高位及q的最低位，pxorq 的当前最低位对应p的最低位及q的最高位 (其中最高、最低均是对于当前搜索而言)</p>
</li>
<li>如果当前需搜索的最高位为”1”，则对应两种可能：p该位为1，q对应低位为0；p该位为0，q对应低位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p、q未搜索到的位全填0，乘积应小于n</li>
<li>将p、q未搜索到的位全填1，乘积应大于n</li>
<li>p、q 低 k 位乘积再取低 k 位，应与 n 的低 k 位相同</li>
</ul>
<p>如此进行剪枝即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line">n = <span class="number">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line">c = <span class="number">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n//pp0</span><br><span class="line">            phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>flag:</p>
<p><strong>flag{f55a2740-c15d-af88-1815-a1b4aab19ccf}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="特殊剪枝"><a href="#特殊剪枝" class="headerlink" title="特殊剪枝"></a>特殊剪枝</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">q1 = sympy.randprime(<span class="number">2</span> ** <span class="number">1023</span>,<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">a1 = p1 ^ q1</span><br><span class="line">b1 = p1 * q1</span><br><span class="line">c1 = <span class="built_in">pow</span>(bytes_to_long(flag[:<span class="number">19</span>]),e,p1*q1)</span><br><span class="line">p2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">q2 = sympy.randprime(<span class="number">2</span> ** <span class="number">511</span>, <span class="number">2</span> ** <span class="number">512</span>)</span><br><span class="line">a2 = (p2 * q2) ^ (p2 + q2)</span><br><span class="line">b2 = (p2 * q2) ^ (p2 - q2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(bytes_to_long(flag[<span class="number">19</span>:]),e,p2*q2)</span><br><span class="line">f= <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(a2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(b2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c2)+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>题目txt：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br></pre></td></tr></table></figure>
<p>可以明显看出，题目分为两部分，均是利用剪枝：</p>
<h4 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>p1 与 q1 的异或值，共1024bit，记为a1</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从高位向低位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a1 的最高位</p>
</li>
<li>若当前 a1 的最高位为”1”，则对应两种可能：p该位为1，q该位为0；p该位为0，q该位为1。剩下依此类推</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>将p1、q1未搜索到的位全填0，乘积应小于n</li>
<li>将p1、q1未搜索到的位全填1，乘积应大于n</li>
<li>p1 &gt; q1（这是因为，p1和q1肯定一个比另一个大，因此可以减少一半复杂度）</li>
</ul>
<h4 id="第二部分："><a href="#第二部分：" class="headerlink" title="第二部分："></a>第二部分：</h4><p><strong>已知条件：</strong></p>
<ul>
<li>(p2 * q2)与(p2 + q2)的异或值，记为a2</li>
<li>(p2 * q2)与(p2 - q2)的异或值，记为b2</li>
</ul>
<p><strong>搜索方式：</strong></p>
<ul>
<li><p>从低位向高位搜索</p>
</li>
<li><p>每一次搜索，需利用当前 a2、b2 的最低位</p>
</li>
<li>硬搜索当前位的所有四种可能：00、01、10、11</li>
</ul>
<p><strong>剪枝条件：</strong></p>
<ul>
<li>若当前已搜索了 k 位，则需满足：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)</span><br></pre></td></tr></table></figure>
<p>按照此方式就可以递归深搜出p2、q2</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1,剪枝</span></span><br><span class="line">a1=<span class="number">67739512154277162085770157687437441198363095490607019903179640765859289435128844487312739643781929328039885340492248268381181927215444058044731882600621443249379470235583032722854561171610662253187419453432598163528304052508578209017561499836803166110456130462444164049945234353225230736363194196935115979960</span></span><br><span class="line">b1=<span class="number">17185396829856546439605443867156437815015135756541052637907770783830686534153389303291740769607944691156059669175157827203495395745826694347428694508457493991041224390283763876476601200114028282946724348906485066220181559142937065978299071246507281834301352443856315199896106182934770582627129779923357891915723961923663378398066801894395956482176730300442901078199030200112352639266103862753546370851947797706641058966862813099369195689336228579744994641830699890792017097474275824545664085264972274642572927392940910981115837831275773192989084712813373293435228956787629490757407431010258942490818726318175944867633</span></span><br><span class="line">c1=<span class="number">2180773316568266715369209198734610509148388893757598741330158376506447322216176787253641696053169188685408469718202047474660716095850135317790263924418449270019680259700945680062960717565507426032265137192689118286560945331123730529355709043463330231284484658907466172538703301303440062783852136344472063837313195697915205569416630439851250171277336484771753816776835527532090668694986220968152676688392975798850738947165707984817923309381811015047150056144403783079156300625762879231698942313672034730244627530962258121618021680413439757194393609777357848156392150372631861473658135778661768208071991812674187273360</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a1 = <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(a1)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; b1):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; b1):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c1,d,pp*qq))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 硬剪枝</span></span><br><span class="line">a2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774940370836206596205967641213842702547665263659933022253549718321445029287279257463914991950587622466780705329578580061019164231870445205566240956950369224751</span></span><br><span class="line">b2=<span class="number">102834527596695950719979111423985349726489864165244791755647652205679952999516919199218636781810880771255724153293007819995198831162629014290926266777774949520538413350277489291427420271328741830415622921056457371226207219443304838109001023043838810016379140438034881290332449739051404396455209891630254998985</span></span><br><span class="line">c2=<span class="number">46285230821397377383998198689981002335902850753318921384068480704506522918467396194184971163720421808774010121239873784436865080818119851642074388303787396280596526597467664310187113430990219486840906481260493087443528880139543560763852844535689852804877233056126591516506599561944164619603448246607830867682</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q,k</span>):</span><br><span class="line">    mask = <span class="number">2</span>**k-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    t1 = (<span class="built_in">int</span>(p,<span class="number">2</span>)*<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t2 = (<span class="built_in">int</span>(p,<span class="number">2</span>)+<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    t3 = (<span class="built_in">int</span>(p,<span class="number">2</span>)-<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(p,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(q,<span class="number">2</span>))[<span class="number">2</span>:]) == <span class="number">512</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">        d = inverse(e,(pp-<span class="number">1</span>)*(qq-<span class="number">1</span>))</span><br><span class="line">        m = long_to_bytes(<span class="built_in">pow</span>(c2,d,pp*qq))</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(m) &lt; <span class="number">20</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(m)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(((t1^t2)&amp;mask) == (a2&amp;mask) <span class="keyword">and</span> ((t1^t3)&amp;mask) == (b2&amp;mask)):</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">        find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q,k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;1&quot;</span></span><br><span class="line">q = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">find(p,q,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>大概需要十几秒。</p>
<p>flag：</p>
<p><strong>flag{u2w6tnettv2a9fbo5qh73k8082h2q9j3}</strong></p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-古典密码</title>
    <url>/post/165cec8c.html</url>
    <content><![CDATA[<p>该文章主要记录一些古典密码相关的趣题</p>
<span id="more"></span>
<h3 id="Ex-Viginere"><a href="#Ex-Viginere" class="headerlink" title="Ex Viginere?"></a>Ex Viginere?</h3><p>题目来源：MoeCTF 2021</p>
<h4 id="加密流程解读"><a href="#加密流程解读" class="headerlink" title="加密流程解读"></a>加密流程解读</h4><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这难道是维吉尼亚吗？</span><br><span class="line">text is a plain English text which only consists of lowercase letters (without any symbol)</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a, b, text, key, flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> key <span class="keyword">in</span> text</span><br><span class="line"><span class="keyword">assert</span> a * b &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;moectf&#123;&#x27;</span> + key.encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> md5(key.encode()+<span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span>).hexdigest() == <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line"></span><br><span class="line">k1 = []</span><br><span class="line">k2 = []</span><br><span class="line"></span><br><span class="line">sequence = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">n = randint(<span class="number">114514</span>,<span class="number">1919810</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):<span class="comment">#2**16</span></span><br><span class="line">    sequence.append((sequence[-<span class="number">1</span>] + sequence[-<span class="number">2</span>]) % n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    k1.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    k2.append(sequence[randint(<span class="number">0</span>, <span class="number">65536</span>)] % <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span>.join(table[((<span class="built_in">ord</span>(x) - <span class="number">97</span>) * (k1[i % a]) + k2[i % b]) % <span class="number">26</span>] <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(text))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;./cipher&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(c)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>并且给定cipher文件，其中内容为长度为108361的字母文本：</p>
<p><img src="/post/165cec8c/image-20230929101431427.png" alt="image-20230929101431427"></p>
<p>把加密程序一点一点读完，可以提取出以下信息：</p>
<ul>
<li>最终 flag 由 key 组成，其中 key 是被加密的原文中的某个字符串</li>
<li>key 在原文中的位置未知，且长度未知</li>
<li>生成一个随机数 n，作为之后生成 sequence 序列的模数</li>
<li>sequence 序列其实就是模 n 意义下的斐波那契数列，共生成 65536 项</li>
<li>从 sequence 序列中随机选择 a 项并模 26，作为加密所需的 k1 序列</li>
<li>从 sequence 序列中随机选择 b 项并模 26，作为加密所需的 k2 序列</li>
<li>对原文中的每一个字符 m 进行仿射加密得到密文，其中仿射加密的 A 为 k1[i % a]，B 为 k2[i % b]</li>
</ul>
<p>此外还有一些额外信息：</p>
<ul>
<li>一段有关 key 的md5值</li>
<li>a*b &lt; 100</li>
</ul>
<h4 id="引入重合指数"><a href="#引入重合指数" class="headerlink" title="引入重合指数"></a>引入重合指数</h4><p>因为密文很长，所以可以用统计方面的思想来解决题目，因此引入<strong>重合指数</strong>的概念：<strong>重合指数是指字符串中两个随机元素相同的概率。</strong>因此，假如我们仅考虑完全由英文字符组成的文本，那么一个文本的重合指数就按如下方式计算：(重合指数以 In 表示,p(a)表示 a 在文本中出现的频率)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In = p(a)*p(a) + p(b)*p(b) + p(c)*p(c) + ... + p(z)*p(z)</span><br></pre></td></tr></table></figure>
<p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>
<p>那么对于下列两种文本分别计算重合指数，就能看出它们的区别：(文本字符均足够多，符合统计概念)</p>
<p>1、完全随机的英文文本(26个字母均随机生成，因此出现频率相当，均为 1/26)</p>
<p>2、正常的英文文本(26个字符有使用频率上的差别)，一般来说如下：</p>
<p><img src="/post/165cec8c/image-20230930103629784.png" alt="image-20230930103629784"></p>
<p>1、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{(\frac{1}{26})^2} = \frac{1}{26} \approx 0.038</script><p>2、</p>
<script type="math/tex; mode=display">
In = \sum_{i=1}^{26}{p(i)^2}  \approx 0.065</script><p>由此，我们就有了一个区分随机文本与英文文本的重要依据。</p>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><h5 id="part1：找出密钥长度"><a href="#part1：找出密钥长度" class="headerlink" title="part1：找出密钥长度"></a>part1：找出密钥长度</h5><p>重合指数如何应用到题目里呢？首先想明白一点：被同一个密钥(a、b均相同)加密的明文，一定会变成同一个密文。因此我们如果能够找到所有被同一个密钥加密的密文组，那么该密文组的重合指数是符合正常英文文本的(可以仔细想想)</p>
<p>所以我们就需要先由重合指数找到哪些密文是被同一个密钥加密的，实际上这就是在求 gcd(a,b) ,而由题目条件 a*b &lt; 100，因此我们可以很快爆破出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>爆破得到a*b = 77，因此a=7，b=11或a=11，b=7</p>
<h5 id="part2：确定密钥内容"><a href="#part2：确定密钥内容" class="headerlink" title="part2：确定密钥内容"></a>part2：确定密钥内容</h5><p>确定了密钥长度后，现在就需要确定密钥的内容具体是什么，也就是 k1、k2里究竟是什么数字。</p>
<p>首先会发现一个 trick，那就是 sequence 序列的生成根本没什么用，由于最终是在mod 26 下进行计算，因此直接把sequence 当成一个由 0-25 组成的随机序列就可以。那么怎么确定呢，依然是利用重合指数，只是要换一种用法。</p>
<p>先引入一个结论：</p>
<p>假设 $ p1, p2 , p3…, pn$为递减的概率分布( $ p1\geq p2 \geq p3…\geq pn$ )，令$ q1’, q2’ , q3’…, qn’$为 $ q1, q2 , q3…, qn$的任意置换，则当 $ q1’, q2’ , q3’…, qn’$ 恰好也为递减的概率分布时，下式取得最大值：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{26}{pi*qi'}</script><p>这个结论的证明并不复杂，可以自行尝试。</p>
<p>这个结论有什么用呢？我们现在先把密文按长度为 77 分组，并取出每组的第一个字母组成一个新的密文串，那么这个新的密文串的所有字符，都是被k1[0]、k2[0]这个密钥加密的。那么我们爆破的密钥空间大小一共就只有12*26 = 312(参考仿射密码)。</p>
<p>爆破的依据是什么？仍然是重合指数，对于现在被加密的密文，它自身的重合指数是符合0.065的，因为是单表代换；但是加密过后，各个字符的频率发生了错位。比如正常英文文本中频率最高的是 e，而加密后可能变成了 z。那么把正常英文文本的概率分布当作p，把加密文本的概率分布当作q，就能发现可以利用刚才引入的结论来进行爆破了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br></pre></td></tr></table></figure>
<p>之所以只爆破11个而不爆破全部77个，道理也很简单，爆破11个已经能够找出全部的k1、k2了。</p>
<h5 id="part3：爆破md5"><a href="#part3：爆破md5" class="headerlink" title="part3：爆破md5"></a>part3：爆破md5</h5><p>知道了密钥后就很轻松，就是个纯粹的爆破问题了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>完整exp：(记得改一下if条件)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\vscode\cipher&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">table = ascii_lowercase</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj:待分割字符串  #sec:分割长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算重合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * freq[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算与英语字频吻合指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">In_m</span>(<span class="params">c</span>):</span><br><span class="line">    freq = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        freq[table[i]] = c.count(table[i]) / <span class="built_in">len</span>(c)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        index += freq[i] * dic[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 依据重合指数找出a*b=77</span></span><br><span class="line">t = c</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        temp = cut(t,i)</span><br><span class="line">        temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">            temp1[<span class="number">0</span>] += temp[k][<span class="number">0</span>]</span><br><span class="line">        index = In(<span class="string">&quot;&quot;</span>.join(temp1[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;lenkey = &quot;</span>,i,<span class="string">&quot;   In = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 依据与英语字频吻合指数找出具体的k1、k2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> GCD(a,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                temp = cut(t,<span class="number">77</span>)</span><br><span class="line">                temp1 = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>)]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)-<span class="number">1</span>):</span><br><span class="line">                    temp1[i] += temp[k][i]</span><br><span class="line">                m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> temp1[i]:</span><br><span class="line">                    m += table[((table.index(x)-b)*inverse(a,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">                index = In_m(<span class="string">&quot;&quot;</span>.join(m))</span><br><span class="line">                <span class="comment">#print(index)</span></span><br><span class="line">                <span class="keyword">if</span>(index &gt; <span class="number">0.060</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a,<span class="string">&quot;   b = &quot;</span>,b,<span class="string">&quot;,index = &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 爆破密钥md5</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>):</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    k1 = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">    k2 = [<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">        temp = ((table.index(t[i])-k2[i%b])*inverse(k1[i%a],<span class="number">26</span>))%<span class="number">26</span></span><br><span class="line">        m += table[temp]</span><br><span class="line"></span><br><span class="line">    Pad = <span class="string">b&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    MD5 = <span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)-i):</span><br><span class="line">            key = m[j:j+i]</span><br><span class="line">            <span class="keyword">if</span> (md5(key.encode()+Pad).hexdigest() == MD5):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                exit()</span><br><span class="line">                </span><br><span class="line"><span class="comment">#moectf&#123;pieceofchocolate&#125;</span></span><br></pre></td></tr></table></figure>
<p>一个很纯粹的古典密码分析过程，其实是非常有意思也非常有价值的。</p>
<p><br><br></p>
<h3 id="Unstable-time-machine"><a href="#Unstable-time-machine" class="headerlink" title="Unstable_time_machine"></a>Unstable_time_machine</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> totient,mobius</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">secrets=<span class="string">b&#x27;xxx...xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Time_Machine</span>(<span class="params">n</span>):</span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,k+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,j+<span class="number">1</span>):</span><br><span class="line">                ans+=j//i*(totient(i)+mobius(i))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(secrets)):</span><br><span class="line">   c.append(Time_Machine(<span class="number">9999</span>*secrets[i]))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[11827965311995932558558, 436740119853412116456, 41650252425798979676175, 50626127671556204573190, 41650252425798979676175, 60980101311350323854180, 963563059779422880492, 75413523978530416956915, 436740119853412116456, 43341417116799148415475, 86365877055447093121710, 65537436405378983697036, 43341417116799148415475, 40009068720753857066727, 75413523978530416956915, 436740119853412116456, 89280922053913796530170, 63227978177791478672610, 78047807265358355987991, 436740119853412116456, 75413523978530416956915, 63227978177791478672610, 436740119853412116456, 72846494790687055657395, 63227978177791478672610, 56664683419644282294873, 80750509186740318135738, 43341417116799148415475, 436740119853412116456, 58792701246489673616637, 89280922053913796530170, 436740119853412116456, 65537436405378983697036, 78047807265358355987991, 92269143789218304195771, 92269143789218304195771, 56664683419644282294873, 43341417116799148415475, 436740119853412116456, 36872675850292365936996, 48724893081131391463482, 43341417116799148415475, 36872675850292365936996, 41650252425798979676175, 436740119853412116456, 63227978177791478672610, 45083567393314209309726, 436740119853412116456, 75413523978530416956915, 50626127671556204573190, 58792701246489673616637, 43341417116799148415475, 1864884862832210879220, 436740119853412116456, 11827965311995932558558, 436740119853412116456, 43341417116799148415475, 86365877055447093121710, 65537436405378983697036, 43341417116799148415475, 40009068720753857066727, 75413523978530416956915, 436740119853412116456, 75413523978530416956915, 48724893081131391463482, 43341417116799148415475, 436740119853412116456, 65537436405378983697036, 70345565162259426664317, 63227978177791478672610, 46877717850904608344028, 70345565162259426664317, 36872675850292365936996, 58792701246489673616637, 436740119853412116456, 75413523978530416956915, 63227978177791478672610, 436740119853412116456, 70345565162259426664317, 78047807265358355987991, 60980101311350323854180, 436740119853412116456, 45083567393314209309726, 63227978177791478672610, 70345565162259426664317, 436740119853412116456, 89280922053913796530170, 43341417116799148415475, 36872675850292365936996, 70345565162259426664317, 72846494790687055657395, 1561103367493488746697, 8905422223361768646663, 7434854394795874666620, 19766534787409257458523, 8393017568869581586191, 20736491520823134042987, 10000251324957046694310, 95331756776933061303633, 89280922053913796530170, 2210983036628738475708, 78047807265358355987991, 33924401628947906025510, 54594963263249504183781, 60980101311350323854180, 2210983036628738475708, 83522804274246348745272, 33924401628947906025510, 75413523978530416956915, 50626127671556204573190, 58792701246489673616637, 43341417116799148415475, 33924401628947906025510, 40009068720753857066727, 2210983036628738475708, 58792701246489673616637, 65537436405378983697036, 56664683419644282294873, 43341417116799148415475, 86365877055447093121710, 50626127671556204573190, 75413523978530416956915, 89280922053913796530170, 33924401628947906025510, 80750509186740318135738, 43341417116799148415475, 70345565162259426664317, 89280922053913796530170, 33924401628947906025510, 83522804274246348745272, 43341417116799148415475, 2401069164267674760552, 2401069164267674760552, 493945107805384908948, 101685064551886104386625]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目内容很简单，给了一个Time_Machine()函数，然后对secret的每个字节乘上9999，再进行该函数运算，并给出函数值，要求还原secret。</p>
<p>预期解是拟合一个多项式去拟合，从而将函数内部的三层循环用一个拟合后的表达式直接算出，并与secret做对照得到flag。但是既然我将他分类到古典密码中，说明肯定有古典密码的做法，接下来就讲一讲这个做法。</p>
<p>首先要注意到一点，仔细观察这个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Time_Machine</span>(<span class="params">n</span>):</span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,k+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,j+<span class="number">1</span>):</span><br><span class="line">                ans+=j//i*(totient(i)+mobius(i))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>三层循环，每层循环最内部其实都可以看作加上一个正数(mobius函数有可能为-1，但对加和的影响基本可以忽略不计)。也就是说，如果我们只关注Time_Machine()函数的自变量和返回值：</p>
<script type="math/tex; mode=display">
y = T(x)</script><p>那么这个函数有一个很重要的性质：<strong>单调递增</strong></p>
<p>这也就是说，对于secret中的每两个字符，如果第一个字符的ASCII码大于第二个字符，那么其乘9999后的函数值也会大于第二个字符。特殊一点，举几个在这题里面将会用到的一些例子就是：</p>
<script type="math/tex; mode=display">
T(9999*小写字符)  > T(9999*大写字符)</script><script type="math/tex; mode=display">
T(9999*大写字符)  > T(9999*数字)</script><script type="math/tex; mode=display">
T(9999*b)  > T(9999*a)</script><script type="math/tex; mode=display">
T(9999*其他可见字符)  > T(9999*空格)</script><script type="math/tex; mode=display">
T(9999*左右大括号)  > T(9999*其他可见字符)</script><p>那么接下来我们就根据这一点对secret进行分析。</p>
<h4 id="统计频率"><a href="#统计频率" class="headerlink" title="统计频率"></a>统计频率</h4><p>我们首先用如下程序统计出密文中每个数值出现次数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt = [<span class="number">11827965311995932558558</span>, <span class="number">436740119853412116456</span>, <span class="number">41650252425798979676175</span>, <span class="number">50626127671556204573190</span>, <span class="number">41650252425798979676175</span>, <span class="number">60980101311350323854180</span>, <span class="number">963563059779422880492</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">65537436405378983697036</span>, <span class="number">43341417116799148415475</span>, <span class="number">40009068720753857066727</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">89280922053913796530170</span>, <span class="number">63227978177791478672610</span>, <span class="number">78047807265358355987991</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">63227978177791478672610</span>, <span class="number">436740119853412116456</span>, <span class="number">72846494790687055657395</span>, <span class="number">63227978177791478672610</span>, <span class="number">56664683419644282294873</span>, <span class="number">80750509186740318135738</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">58792701246489673616637</span>, <span class="number">89280922053913796530170</span>, <span class="number">436740119853412116456</span>, <span class="number">65537436405378983697036</span>, <span class="number">78047807265358355987991</span>, <span class="number">92269143789218304195771</span>, <span class="number">92269143789218304195771</span>, <span class="number">56664683419644282294873</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">36872675850292365936996</span>, <span class="number">48724893081131391463482</span>, <span class="number">43341417116799148415475</span>, <span class="number">36872675850292365936996</span>, <span class="number">41650252425798979676175</span>, <span class="number">436740119853412116456</span>, <span class="number">63227978177791478672610</span>, <span class="number">45083567393314209309726</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">50626127671556204573190</span>, <span class="number">58792701246489673616637</span>, <span class="number">43341417116799148415475</span>, <span class="number">1864884862832210879220</span>, <span class="number">436740119853412116456</span>, <span class="number">11827965311995932558558</span>, <span class="number">436740119853412116456</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">65537436405378983697036</span>, <span class="number">43341417116799148415475</span>, <span class="number">40009068720753857066727</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">48724893081131391463482</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">65537436405378983697036</span>, <span class="number">70345565162259426664317</span>, <span class="number">63227978177791478672610</span>, <span class="number">46877717850904608344028</span>, <span class="number">70345565162259426664317</span>, <span class="number">36872675850292365936996</span>, <span class="number">58792701246489673616637</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">63227978177791478672610</span>, <span class="number">436740119853412116456</span>, <span class="number">70345565162259426664317</span>, <span class="number">78047807265358355987991</span>, <span class="number">60980101311350323854180</span>, <span class="number">436740119853412116456</span>, <span class="number">45083567393314209309726</span>, <span class="number">63227978177791478672610</span>, <span class="number">70345565162259426664317</span>, <span class="number">436740119853412116456</span>, <span class="number">89280922053913796530170</span>, <span class="number">43341417116799148415475</span>, <span class="number">36872675850292365936996</span>, <span class="number">70345565162259426664317</span>, <span class="number">72846494790687055657395</span>, <span class="number">1561103367493488746697</span>, <span class="number">8905422223361768646663</span>, <span class="number">7434854394795874666620</span>, <span class="number">19766534787409257458523</span>, <span class="number">8393017568869581586191</span>, <span class="number">20736491520823134042987</span>, <span class="number">10000251324957046694310</span>, <span class="number">95331756776933061303633</span>, <span class="number">89280922053913796530170</span>, <span class="number">2210983036628738475708</span>, <span class="number">78047807265358355987991</span>, <span class="number">33924401628947906025510</span>, <span class="number">54594963263249504183781</span>, <span class="number">60980101311350323854180</span>, <span class="number">2210983036628738475708</span>, <span class="number">83522804274246348745272</span>, <span class="number">33924401628947906025510</span>, <span class="number">75413523978530416956915</span>, <span class="number">50626127671556204573190</span>, <span class="number">58792701246489673616637</span>, <span class="number">43341417116799148415475</span>, <span class="number">33924401628947906025510</span>, <span class="number">40009068720753857066727</span>, <span class="number">2210983036628738475708</span>, <span class="number">58792701246489673616637</span>, <span class="number">65537436405378983697036</span>, <span class="number">56664683419644282294873</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">50626127671556204573190</span>, <span class="number">75413523978530416956915</span>, <span class="number">89280922053913796530170</span>, <span class="number">33924401628947906025510</span>, <span class="number">80750509186740318135738</span>, <span class="number">43341417116799148415475</span>, <span class="number">70345565162259426664317</span>, <span class="number">89280922053913796530170</span>, <span class="number">33924401628947906025510</span>, <span class="number">83522804274246348745272</span>, <span class="number">43341417116799148415475</span>, <span class="number">2401069164267674760552</span>, <span class="number">2401069164267674760552</span>, <span class="number">493945107805384908948</span>, <span class="number">101685064551886104386625</span>]</span><br><span class="line">dic = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> tt&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tt:</span><br><span class="line">    dic[i] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>打印出的结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">11827965311995932558558</span>: <span class="number">2</span>, <span class="number">436740119853412116456</span>: <span class="number">18</span>, <span class="number">41650252425798979676175</span>: <span class="number">3</span>, <span class="number">50626127671556204573190</span>: <span class="number">4</span>, <span class="number">60980101311350323854180</span>: <span class="number">3</span>, <span class="number">963563059779422880492</span>: <span class="number">1</span>, <span class="number">75413523978530416956915</span>: <span class="number">9</span>, <span class="number">43341417116799148415475</span>: <span class="number">14</span>, <span class="number">86365877055447093121710</span>: <span class="number">3</span>, <span class="number">65537436405378983697036</span>: <span class="number">5</span>, <span class="number">40009068720753857066727</span>: <span class="number">3</span>, <span class="number">89280922053913796530170</span>: <span class="number">6</span>, <span class="number">63227978177791478672610</span>: <span class="number">7</span>, <span class="number">78047807265358355987991</span>: <span class="number">4</span>, <span class="number">72846494790687055657395</span>: <span class="number">2</span>, <span class="number">56664683419644282294873</span>: <span class="number">3</span>, <span class="number">80750509186740318135738</span>: <span class="number">2</span>, <span class="number">58792701246489673616637</span>: <span class="number">5</span>, <span class="number">92269143789218304195771</span>: </span><br><span class="line"><span class="number">2</span>, <span class="number">36872675850292365936996</span>: <span class="number">4</span>, <span class="number">48724893081131391463482</span>: <span class="number">2</span>, <span class="number">45083567393314209309726</span>: <span class="number">2</span>, <span class="number">1864884862832210879220</span>: <span class="number">1</span>, <span class="number">70345565162259426664317</span>: <span class="number">6</span>, <span class="number">46877717850904608344028</span>: <span class="number">1</span>, <span class="number">1561103367493488746697</span>: <span class="number">1</span>, <span class="number">8905422223361768646663</span>: <span class="number">1</span>, <span class="number">7434854394795874666620</span>: <span class="number">1</span>, <span class="number">19766534787409257458523</span>: <span class="number">1</span>, <span class="number">8393017568869581586191</span>: <span class="number">1</span>, <span class="number">20736491520823134042987</span>: <span class="number">1</span>, <span class="number">10000251324957046694310</span>: <span class="number">1</span>, <span class="number">95331756776933061303633</span>: <span class="number">1</span>, <span class="number">2210983036628738475708</span>: <span class="number">3</span>, <span class="number">33924401628947906025510</span>: <span class="number">5</span>, <span class="number">54594963263249504183781</span>: <span class="number">1</span>, <span class="number">83522804274246348745272</span>: <span class="number">2</span>, <span class="number">2401069164267674760552</span>: <span class="number">2</span>, </span><br><span class="line"><span class="number">493945107805384908948</span>: <span class="number">1</span>, <span class="number">101685064551886104386625</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>同时，打印出字典长度可以看到只有40个可见字符，然后secret长度却为135，说明有多个字符重复出现了，应该可以进行一点语义分析。</p>
<h4 id="数值排序"><a href="#数值排序" class="headerlink" title="数值排序"></a>数值排序</h4><p>然后，为了利用单调性，我们将字典中的键值对按数值顺序排好，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sequence = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(dic.keys()) : </span><br><span class="line">    sequence.append((i, dic[i])) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)):</span><br><span class="line">    <span class="built_in">print</span>(sequence[i],end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<p>每四个一行打印，主要是为了观察的方便，结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">436740119853412116456</span>, <span class="number">18</span>),(<span class="number">493945107805384908948</span>, <span class="number">1</span>),(<span class="number">963563059779422880492</span>, <span class="number">1</span>),(<span class="number">1561103367493488746697</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1864884862832210879220</span>, <span class="number">1</span>),(<span class="number">2210983036628738475708</span>, <span class="number">3</span>),(<span class="number">2401069164267674760552</span>, <span class="number">2</span>),(<span class="number">7434854394795874666620</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">8393017568869581586191</span>, <span class="number">1</span>),(<span class="number">8905422223361768646663</span>, <span class="number">1</span>),(<span class="number">10000251324957046694310</span>, <span class="number">1</span>),(<span class="number">11827965311995932558558</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">19766534787409257458523</span>, <span class="number">1</span>),(<span class="number">20736491520823134042987</span>, <span class="number">1</span>),(<span class="number">33924401628947906025510</span>, <span class="number">5</span>),(<span class="number">36872675850292365936996</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">40009068720753857066727</span>, <span class="number">3</span>),(<span class="number">41650252425798979676175</span>, <span class="number">3</span>),(<span class="number">43341417116799148415475</span>, <span class="number">14</span>),(<span class="number">45083567393314209309726</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">46877717850904608344028</span>, <span class="number">1</span>),(<span class="number">48724893081131391463482</span>, <span class="number">2</span>),(<span class="number">50626127671556204573190</span>, <span class="number">4</span>),(<span class="number">54594963263249504183781</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">56664683419644282294873</span>, <span class="number">3</span>),(<span class="number">58792701246489673616637</span>, <span class="number">5</span>),(<span class="number">60980101311350323854180</span>, <span class="number">3</span>),(<span class="number">63227978177791478672610</span>, <span class="number">7</span>),</span><br><span class="line">(<span class="number">65537436405378983697036</span>, <span class="number">5</span>),(<span class="number">70345565162259426664317</span>, <span class="number">6</span>),(<span class="number">72846494790687055657395</span>, <span class="number">2</span>),(<span class="number">75413523978530416956915</span>, <span class="number">9</span>),</span><br><span class="line">(<span class="number">78047807265358355987991</span>, <span class="number">4</span>),(<span class="number">80750509186740318135738</span>, <span class="number">2</span>),(<span class="number">83522804274246348745272</span>, <span class="number">2</span>),(<span class="number">86365877055447093121710</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">89280922053913796530170</span>, <span class="number">6</span>),(<span class="number">92269143789218304195771</span>, <span class="number">2</span>),(<span class="number">95331756776933061303633</span>, <span class="number">1</span>),(<span class="number">101685064551886104386625</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="词频分析"><a href="#词频分析" class="headerlink" title="词频分析"></a>词频分析</h4><p>根据刚才的数值排序及频率列表，我们很快能确定以下几个字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; &quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这分别是因为：</p>
<ul>
<li>出现频率最高的值在数值排序中也在第一，所以应该是空格</li>
<li>出现频率第二的值根据英语词频，应该是e</li>
<li>大括号的ASCII码很靠后，因此最后两个应该就是左右大括号</li>
</ul>
<p>所以我们第一步可以先手动赋一下这几个字符的初值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic_secret[<span class="number">436740119853412116456</span>] = <span class="string">&quot; &quot;</span></span><br><span class="line">dic_secret[<span class="number">43341417116799148415475</span>] = <span class="string">&quot;e&quot;</span></span><br><span class="line">dic_secret[<span class="number">101685064551886104386625</span>] = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">dic_secret[<span class="number">95331756776933061303633</span>] = <span class="string">&quot;&#123;&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后，我们可以用以下函数将已知的字符代回原secret观察：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">dic_secret</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tt:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(dic_secret[i],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<p>原secret此时如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* ****** e**e** *** ** ****e ** *****e **e** ** ***e* * e**e** **e ******* ** *** *** *e**********&#123;************e******e******e****e***&#125;</span><br></pre></td></tr></table></figure>
<p>同时，我们把已知的几个字符插入数值序列中，就可以直观的看到数值大小顺序，函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">out_unknown</span>(<span class="params">sequence,dic_secret</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="keyword">if</span>(i[<span class="number">0</span>] <span class="keyword">in</span> dic_secret.keys()):</span><br><span class="line">            <span class="built_in">print</span>(dic_secret[i[<span class="number">0</span>]],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*****************e*******************&#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h4><p>首先，由于知道flag头是DASCTF，那么我们其实就又可以确定六个字符，其对应结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* ****** e**e** *** ** ****e ** *****e **e** ** ***e* * e**e** **e ******* ** *** *** *e****DASCTF&#123;************e******e******e****e***&#125;</span><br><span class="line"></span><br><span class="line"> ******ACDF*ST****e*******************&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们又已知，e后面应该全是小写字母了，我们不妨按倒序zyx….给他先排好，函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>)</span><br><span class="line">not_in_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)-<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(sequence[i][<span class="number">0</span>] == <span class="number">43341417116799148415475</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span>(init <span class="keyword">in</span> not_in_list):</span><br><span class="line">        init -= <span class="number">1</span></span><br><span class="line">    dic_secret[sequence[i][<span class="number">0</span>]] = <span class="built_in">chr</span>(init)</span><br><span class="line">    init -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>其中，not_in_list是为了去除接下来观察发现的多余字母，然后查看打印结果进行微调：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* *k*o*t exqe*t ypu tp spmve ny quzzme *je** ph tkne* * exqe*t tje qrpir*n tp ruo hpr ye*rs*DASCTF&#123;y*u*lo*w*tkne***nqmexkty*very*we***&#125;</span><br><span class="line"></span><br><span class="line"> ******ACDF*ST****ehijklmnopqrstuvwxyz&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出有几个单词明显不对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exqe*t ypu spmve tje...</span><br></pre></td></tr></table></figure>
<p>那么就去除q，j这两个不应该出现的字母，重新打印：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>)</span><br><span class="line">not_in_list = [<span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;j&quot;</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)-<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(sequence[i][<span class="number">0</span>] == <span class="number">43341417116799148415475</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span>(init <span class="keyword">in</span> not_in_list):</span><br><span class="line">        init -= <span class="number">1</span></span><br><span class="line">    dic_secret[sequence[i][<span class="number">0</span>]] = <span class="built_in">chr</span>(init)</span><br><span class="line">    init -= <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">* *i*n*t expe*t you to solve my puzzle *he** of time* * expe*t the progr*m to run <span class="keyword">for</span> ye*rs*DASCTF&#123;y*u*kn*w*time***mplexity*very*we***&#125;</span><br><span class="line"></span><br><span class="line"> ******ACDF*ST****efghiklmnoprstuvwxyz&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现这下明显合理多了，我们继续假设e前面的四个是小写字母(其实通过词频也可以看出这四个不会是大写字母)，继续打印观察结果，此时我们把break点调为大写T对应的数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init = <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>)</span><br><span class="line">not_in_list = [<span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;j&quot;</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)-<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(sequence[i][<span class="number">0</span>] == <span class="number">20736491520823134042987</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span>(init <span class="keyword">in</span> not_in_list):</span><br><span class="line">        init -= <span class="number">1</span></span><br><span class="line">    dic_secret[sequence[i][<span class="number">0</span>]] = <span class="built_in">chr</span>(init)</span><br><span class="line">    init -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">* didn*t expect you to solve my puzzle bhebd of time* * expect the progrbm to run <span class="keyword">for</span> yebrs*DASCTF&#123;y*uakn*watimeac*mplexityaveryawe***&#125;</span><br><span class="line"></span><br><span class="line"> ******ACDF*STabcdefghiklmnoprstuvwxyz&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>显然可以判断出b不应该出现，加入到not_in_list中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* didn*t expect you to solve my puzzle ahead of time* * expect the program to run <span class="keyword">for</span> years*DASCTF&#123;y*u`kn*w`time`c*mplexity`very`we***&#125;</span><br><span class="line"></span><br><span class="line"> ******ACDF*ST`acdefghiklmnoprstuvwxyz&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>此时基本上句子已经成型了，从语义已经可以推断剩下的字母，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* didn*t</span><br><span class="line">y*u</span><br></pre></td></tr></table></figure>
<p>三个符号分别对应的是大写I，单引号’，数字0，然后进一步可以由ASCII码表确定最后几个字符，就能得到完整的secret了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">I didn<span class="string">&#x27;t expect you to solve my puzzle ahead of time. I expect the program to run for years,DASCTF&#123;y0u_kn0w_time_c0mplexity_very_we11!&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> !&#x27;</span>,<span class="number">.01</span>ACDFIST_acdefghiklmnoprstuvwxyz&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">out_sequence</span>(<span class="params">sequence</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)):</span><br><span class="line">        <span class="built_in">print</span>(sequence[i],end = <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">dic_secret</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tt:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(dic_secret[i],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out_unknown</span>(<span class="params">sequence,dic_secret</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="keyword">if</span>(i[<span class="number">0</span>] <span class="keyword">in</span> dic_secret.keys()):</span><br><span class="line">            <span class="built_in">print</span>(dic_secret[i[<span class="number">0</span>]],end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">tt = [<span class="number">11827965311995932558558</span>, <span class="number">436740119853412116456</span>, <span class="number">41650252425798979676175</span>, <span class="number">50626127671556204573190</span>, <span class="number">41650252425798979676175</span>, <span class="number">60980101311350323854180</span>, <span class="number">963563059779422880492</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">65537436405378983697036</span>, <span class="number">43341417116799148415475</span>, <span class="number">40009068720753857066727</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">89280922053913796530170</span>, <span class="number">63227978177791478672610</span>, <span class="number">78047807265358355987991</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">63227978177791478672610</span>, <span class="number">436740119853412116456</span>, <span class="number">72846494790687055657395</span>, <span class="number">63227978177791478672610</span>, <span class="number">56664683419644282294873</span>, <span class="number">80750509186740318135738</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">58792701246489673616637</span>, <span class="number">89280922053913796530170</span>, <span class="number">436740119853412116456</span>, <span class="number">65537436405378983697036</span>, <span class="number">78047807265358355987991</span>, <span class="number">92269143789218304195771</span>, <span class="number">92269143789218304195771</span>, <span class="number">56664683419644282294873</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">36872675850292365936996</span>, <span class="number">48724893081131391463482</span>, <span class="number">43341417116799148415475</span>, <span class="number">36872675850292365936996</span>, <span class="number">41650252425798979676175</span>, <span class="number">436740119853412116456</span>, <span class="number">63227978177791478672610</span>, <span class="number">45083567393314209309726</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">50626127671556204573190</span>, <span class="number">58792701246489673616637</span>, <span class="number">43341417116799148415475</span>, <span class="number">1864884862832210879220</span>, <span class="number">436740119853412116456</span>, <span class="number">11827965311995932558558</span>, <span class="number">436740119853412116456</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">65537436405378983697036</span>, <span class="number">43341417116799148415475</span>, <span class="number">40009068720753857066727</span>, <span class="number">75413523978530416956915</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">48724893081131391463482</span>, <span class="number">43341417116799148415475</span>, <span class="number">436740119853412116456</span>, <span class="number">65537436405378983697036</span>, <span class="number">70345565162259426664317</span>, <span class="number">63227978177791478672610</span>, <span class="number">46877717850904608344028</span>, <span class="number">70345565162259426664317</span>, <span class="number">36872675850292365936996</span>, <span class="number">58792701246489673616637</span>, <span class="number">436740119853412116456</span>, <span class="number">75413523978530416956915</span>, <span class="number">63227978177791478672610</span>, <span class="number">436740119853412116456</span>, <span class="number">70345565162259426664317</span>, <span class="number">78047807265358355987991</span>, <span class="number">60980101311350323854180</span>, <span class="number">436740119853412116456</span>, <span class="number">45083567393314209309726</span>, <span class="number">63227978177791478672610</span>, <span class="number">70345565162259426664317</span>, <span class="number">436740119853412116456</span>, <span class="number">89280922053913796530170</span>, <span class="number">43341417116799148415475</span>, <span class="number">36872675850292365936996</span>, <span class="number">70345565162259426664317</span>, <span class="number">72846494790687055657395</span>, <span class="number">1561103367493488746697</span>, <span class="number">8905422223361768646663</span>, <span class="number">7434854394795874666620</span>, <span class="number">19766534787409257458523</span>, <span class="number">8393017568869581586191</span>, <span class="number">20736491520823134042987</span>, <span class="number">10000251324957046694310</span>, <span class="number">95331756776933061303633</span>, <span class="number">89280922053913796530170</span>, <span class="number">2210983036628738475708</span>, <span class="number">78047807265358355987991</span>, <span class="number">33924401628947906025510</span>, <span class="number">54594963263249504183781</span>, <span class="number">60980101311350323854180</span>, <span class="number">2210983036628738475708</span>, <span class="number">83522804274246348745272</span>, <span class="number">33924401628947906025510</span>, <span class="number">75413523978530416956915</span>, <span class="number">50626127671556204573190</span>, <span class="number">58792701246489673616637</span>, <span class="number">43341417116799148415475</span>, <span class="number">33924401628947906025510</span>, <span class="number">40009068720753857066727</span>, <span class="number">2210983036628738475708</span>, <span class="number">58792701246489673616637</span>, <span class="number">65537436405378983697036</span>, <span class="number">56664683419644282294873</span>, <span class="number">43341417116799148415475</span>, <span class="number">86365877055447093121710</span>, <span class="number">50626127671556204573190</span>, <span class="number">75413523978530416956915</span>, <span class="number">89280922053913796530170</span>, <span class="number">33924401628947906025510</span>, <span class="number">80750509186740318135738</span>, <span class="number">43341417116799148415475</span>, <span class="number">70345565162259426664317</span>, <span class="number">89280922053913796530170</span>, <span class="number">33924401628947906025510</span>, <span class="number">83522804274246348745272</span>, <span class="number">43341417116799148415475</span>, <span class="number">2401069164267674760552</span>, <span class="number">2401069164267674760552</span>, <span class="number">493945107805384908948</span>, <span class="number">101685064551886104386625</span>]</span><br><span class="line">dic = &#123;i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> tt&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tt:</span><br><span class="line">    dic[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sequence = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(dic.keys()) : </span><br><span class="line">    sequence.append((i, dic[i])) </span><br><span class="line"><span class="comment">#out_sequence(sequence)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#init</span></span><br><span class="line">dic_secret = &#123;&#125;</span><br><span class="line">dic_secret[<span class="number">436740119853412116456</span>] = <span class="string">&quot; &quot;</span></span><br><span class="line">dic_secret[<span class="number">43341417116799148415475</span>] = <span class="string">&quot;e&quot;</span></span><br><span class="line">dic_secret[<span class="number">101685064551886104386625</span>] = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">dic_secret[<span class="number">95331756776933061303633</span>] = <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">dic_secret[<span class="number">7434854394795874666620</span>] = <span class="string">&quot;A&quot;</span></span><br><span class="line">dic_secret[<span class="number">8393017568869581586191</span>] = <span class="string">&quot;C&quot;</span></span><br><span class="line">dic_secret[<span class="number">8905422223361768646663</span>] = <span class="string">&quot;D&quot;</span></span><br><span class="line">dic_secret[<span class="number">10000251324957046694310</span>] = <span class="string">&quot;F&quot;</span></span><br><span class="line">dic_secret[<span class="number">19766534787409257458523</span>] = <span class="string">&quot;S&quot;</span></span><br><span class="line">dic_secret[<span class="number">20736491520823134042987</span>] = <span class="string">&quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init = <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>)</span><br><span class="line">not_in_list = [<span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;j&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;b&quot;</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sequence)-<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(sequence[i][<span class="number">0</span>] == <span class="number">20736491520823134042987</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span>(init <span class="keyword">in</span> not_in_list):</span><br><span class="line">        init -= <span class="number">1</span></span><br><span class="line">    dic_secret[sequence[i][<span class="number">0</span>]] = <span class="built_in">chr</span>(init)</span><br><span class="line">    init -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#final</span></span><br><span class="line">dic_secret[<span class="number">436740119853412116456</span>] = <span class="string">&quot; &quot;</span></span><br><span class="line">dic_secret[<span class="number">493945107805384908948</span>] = <span class="string">&quot;!&quot;</span></span><br><span class="line">dic_secret[<span class="number">963563059779422880492</span>] = <span class="string">&quot;\&#x27;&quot;</span></span><br><span class="line">dic_secret[<span class="number">1561103367493488746697</span>] = <span class="string">&quot;,&quot;</span></span><br><span class="line">dic_secret[<span class="number">1864884862832210879220</span>] = <span class="string">&quot;.&quot;</span></span><br><span class="line">dic_secret[<span class="number">2210983036628738475708</span>] = <span class="string">&quot;0&quot;</span></span><br><span class="line">dic_secret[<span class="number">2401069164267674760552</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">dic_secret[<span class="number">11827965311995932558558</span>] = <span class="string">&quot;I&quot;</span></span><br><span class="line">dic_secret[<span class="number">33924401628947906025510</span>] = <span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line">output(dic_secret)</span><br><span class="line">out_unknown(sequence,dic_secret)</span><br><span class="line"></span><br><span class="line"><span class="comment">#DASCTF&#123;y0u_kn0w_time_c0mplexity_very_we11!&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-后量子密码</title>
    <url>/post/65473b07.html</url>
    <content><![CDATA[<p>该文章主要记录一些后量子密码相关的趣题</p>
<span id="more"></span>
<h3 id="sound"><a href="#sound" class="headerlink" title="sound"></a>sound</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secert import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params"><span class="built_in">len</span>, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  s = r2_distribution(<span class="built_in">len</span>)</span><br><span class="line">  a = rz_distribution(z, <span class="built_in">len</span>)</span><br><span class="line">  e = gass_distribution(<span class="built_in">len</span>)</span><br><span class="line">  b = poly_add(poly_mul(-a, s, z, poly_mod), -e, z, poly_mod)</span><br><span class="line"></span><br><span class="line">  key = [a, b, s]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, lent, q, t, poly_mod, message</span>):</span><br><span class="line">    lm = []</span><br><span class="line">    mg = <span class="built_in">hex</span>(message)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mg)):</span><br><span class="line">        lm.append(<span class="built_in">ord</span>(mg[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(lm + [<span class="number">0</span>] * (lent - <span class="built_in">len</span>(lm)), dtype=np.int64) % t</span><br><span class="line">    delta = q // t</span><br><span class="line">    delta_m = delta * m % q</span><br><span class="line">    e1 = gass_distribution(lent)</span><br><span class="line">    e2 = gass_distribution(lent)</span><br><span class="line">    u = r2_distribution(lent)</span><br><span class="line">    a = key[<span class="number">0</span>]</span><br><span class="line">    b = key[<span class="number">1</span>]</span><br><span class="line">    c0 = poly_add(poly_add(poly_mul(b, u, q, poly_mod), e1, q, poly_mod), delta_m, q, poly_mod)</span><br><span class="line">    c1 = poly_add(poly_mul(a, u, q, poly_mod), e2, q, poly_mod)</span><br><span class="line"></span><br><span class="line">    c = [c0, c1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">q = <span class="number">2</span>**<span class="number">60</span></span><br><span class="line">t = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">poly_mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line">key = keygen(n, q, poly_mod)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># m = bytes_to_long(&quot;test&quot;)</span></span><br><span class="line"><span class="comment"># c = encrypt(key, n, q, t, poly_mod, m)</span></span><br><span class="line"><span class="comment"># print(&quot;c0 =&quot;, c[0].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;c1 =&quot;, c[1].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;a =&quot;, key[0].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;b =&quot;, key[1].tolist())</span></span><br><span class="line"><span class="comment"># print(&quot;s =&quot;, key[2].tolist())</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c0 = [561582066946621440, 817928620285456128, 42443557674760704, 394102843794633984, 72227332717773568, 670192568490572288, 1124338053013283584, 280137744525874176, 63888555088669696, 208355146401743872, 301595565562120704, 50991331858064384, 686628375362950656, 584548366308243456, 1133668516727752192, 474240047688777728, 985154171217232384, 501564712591768576, 914588095025884160, 746830802337096704, 459209143204393984, 603634479787543552, 69069089375354880, 473248420863702016, 754603248638489600, 883576336602057728, 644743636485886976, 319901457654988800, 89793303522564096, 1090071466212856832, 369690536666460160, 1082593341867948032, 441359938321465344, 496386518207440896, 863575421687413760, 811516483959451648, 205996965699836928, 170811895655694336, 335832012272743424, 402108133996681216, 222897130593269760, 317187616437233664, 202919598933315584, 750395341955145728, 366873741733378048, 117730747288055808, 298767968401977344, 923270470424109056, 1076698083295752192, 926422812303050752, 216450081157644288, 981499274968659968, 349655761329862656, 557140442005530624, 858566688669024256, 1149813151825131520, 553370166035001344, 493722732465334272, 732590954557634560, 1052906163890288640, 1021790009160361984, 796011853108049920, 978483522580508672, 894955797433884672, 203559391733489664, 1062410754780596224, 452371485913219072, 651736133029277696, 313976115776903168, 31756099628290048, 71787963926824960, 1109713454413903872, 1112298691994664960, 539132530906077184, 435437107964127232, 833705546252720128, 928849583016886272, 526205130688186368, 1121288102191632384, 536933088453670912, 924962525849556992, 241106313851269120, 717238131918897152, 452642326250387456, 354673268076457984, 16428317258336256, 1061713751710105600, 1139952509444370432, 146561032291504128, 944139817563172864, 670119880592367616, 424458702156075008, 26734611035709440, 552311974354061312, 252009367779129344, 362515232289822720, 942674829586386944, 444916638598115328, 931633333648844800, 54609902697099264, 831316650858829824, 113431421994166272, 907245098202316800, 89326594807300096, 1016570475364521984, 175954756550047744, 53317212366995456, 49595714294925312, 490302383520435200, 260454924258463744, 713597063793843200, 759813046691484672, 491213271622251520, 861532845783883776, 1001029896578621440, 1017093991719427072, 901303193624896512, 85708980918313472, 1094723859831225856, 978173121944355840, 1074912611780537344, 816683396743236608, 406912122093641728, 326181480111288320, 644075764054597632, 114416502291357696, 543109737210728448, 311623753071517696]</span></span><br><span class="line"><span class="string">c1 = [91790686412574976, 744110810763883904, 864964412801026560, 548689841412167296, 740051294265845504, 57902427994320256, 1068935585666797056, 625707146907438848, 551559740589006848, 233440834921673728, 108552546335437312, 166310503165480448, 267060328550531584, 735758245725702656, 712188529675013632, 386374530222726144, 823764165634433536, 123823217368593408, 1004488834478358528, 177477850679225344, 882498511506926592, 5562190320664577, 1106414131124581376, 327516552070835200, 1028475201394497536, 847983498883162112, 1095687065391010816, 706624008349679616, 204676471898160128, 926864853752850432, 152748692869394432, 326128165710331904, 237842086203092992, 1057799799477599232, 345130623233955840, 790672249565697024, 523310000234446848, 840615312867051520, 924979087214993408, 979878291879419904, 115424422845719552, 884924921252442112, 579700963339163648, 1097673093701288960, 704450636638808064, 556078232166107136, 600772693891751936, 905676852758437888, 33621101477464064, 962348719049031680, 925511116990984192, 722520866171662336, 84706802559584256, 530104859095961600, 586276707214465024, 1037552671549552640, 47697269444673536, 210690498450145280, 65070464261654528, 550494166683250688, 777902097764929536, 490832146778818560, 229195607527737344, 767464696299196416, 237315984854040576, 836604288237121536, 507968614131243008, 1146549269233274880, 947811005289312256, 415029326696218624, 73794452197351424, 1111805188636655616, 574425125131241472, 1077883538301097984, 1093417286225403904, 860646266870226944, 238318354083344384, 200921121541777408, 896691473408880640, 794971973394204672, 128454122568243200, 1048391326124871680, 811035464481740800, 922934079239356416, 1033337101914234880, 253445566297591808, 820899412762693632, 51737950452322304, 115554283493984256, 1013231171511318528, 887144973891745792, 903483706965391360, 1100501053366775808, 691065365527990272, 265415356256839680, 969461346065672192, 719496129535698944, 177295085227089920, 860427351595780096, 125812051803891712, 852658796584968192, 487770283774704640, 1070758201904617472, 696983558330196992, 911281563710520320, 676402547272127488, 240686574930634752, 412323376183429120, 619325898981327872, 551028995171842048, 124379235049986048, 649110127901071360, 453922531021119488, 1022481642604582912, 637680606991188992, 51749356430436352, 388350126415356928, 335267552976254464, 960188628024263168, 1088514924986558976, 1094423617550431488, 451833526251570688, 870461009339176704, 697351158038040832, 536089791190207360, 1118146398557536256, 518612046112251904, 241398597936840704]</span></span><br><span class="line"><span class="string">a = [219983724512243970, 752269838678521187, 480509403910281428, 133185208045420765, 490932722804543133, 372886136396692359, 354557330633882122, 678374399146208018, 960245804475102275, 806115518790255556, 828442613098615970, 544833163224524043, 101022959319030935, 117082421755238805, 461182355875216799, 1056119810024896502, 1082000166040876591, 738717114032361767, 578460771662302172, 21556920074594644, 708384954866463679, 1128876901552996333, 874708202228666633, 1092990784029535155, 705415640472089353, 29671570923717836, 386333436179138094, 279081567858606603, 358852578576320987, 847350768179480795, 817603347707592640, 378977756047386392, 201769345485693076, 1063632060034171765, 1015775208741323787, 365127265851837110, 895275437758090601, 901913451551062231, 86419657119953320, 1149882820426142461, 157964525788076127, 631235061398583563, 470949966047613817, 180994349394944987, 228238609714444899, 73624200469844200, 521149905985689963, 19697681380014322, 233461826565515880, 891353264527116993, 1132362343348330909, 719302772676639611, 816690530086729127, 612858319654028202, 1029240232500231324, 266903296429217560, 66793172770160368, 836559325488504608, 1112595888239841739, 1115401337078198049, 261716078450833148, 235662011088480216, 24855917687216082, 619578281956001818, 589359800577838713, 780827177034370452, 62331996978291742, 757201723755709445, 325754948905836705, 298782045417610682, 958766007892311371, 474147826024027639, 1070490722277174646, 190459580153148093, 575005416421018885, 1120664053122918701, 982594533717886793, 252358471190638150, 869750160966337040, 1014322228871199234, 665558545558521628, 105433885394318337, 377027901347400638, 858616841227650075, 1043520529148794434, 1011002490399424434, 207664442877510988, 871194434207030706, 43210520355326250, 602232789264907632, 474051046305769969, 184712552380050689, 795080413713622552, 69957213032924047, 528473007846250043, 169221743016746138, 455880753546244419, 329225658406843642, 1150659098485422471, 626876298585651008, 490793379497608670, 933534706184661647, 467052917787037730, 1075596724935302342, 633000416730524162, 1090163205445120705, 72568659182243843, 571233962016655997, 1038522694640247261, 1025630622605696194, 553753007953333627, 231471906689387866, 558788723869154294, 673804202648107772, 232283327890481849, 39742925179368561, 135909458983766175, 192124298319965985, 839263496419016075, 162231894553173376, 661693215639557019, 655784289160683355, 1062416543453873451, 319938129595811007, 1002025365666496902, 272017768612866462, 482130564327357100, 982163056351966292]</span></span><br><span class="line"><span class="string">b = [820893636450185216, 1088723008695521024, 563505788571372160, 225792174390707712, 531991982654429312, 676436714054308864, 74314379213871872, 78960436919170688, 744901196366641920, 556510129527018752, 71967857250009600, 714820946954724352, 1047939442957058048, 475133098260006400, 764020773208596992, 495337689359947776, 969475874903125504, 132719289181729792, 301591784012423168, 886113347782835200, 477381121894258688, 843499387721308160, 508541992967101440, 135898603458110464, 373248303372987392, 696522694584843264, 22397882759483392, 867189773938512896, 231922357411858432, 452886634658905088, 337138259452950528, 246330467020038144, 336880752906045440, 712110254503864320, 1109022090563764224, 736941976050098176, 340820746543463424, 319152585759258624, 627473838419951616, 724549720670470144, 941976447076147200, 284306369459089408, 474986938990024704, 169392264058798080, 425082943668336640, 780502226419180544, 534812953559536640, 307991466712799232, 256772641512932352, 954565062645100544, 642433129475169280, 554579429440409600, 492586567437330432, 504243514518411264, 559583345168955392, 1047970717391220736, 354007966625097728, 944087368508420096, 48593600443238400, 412546108591775744, 371798716943661056, 109603610083078144, 912962403831732224, 493593202496430080, 435411737100828672, 416258656632209408, 41271759105748992, 547450588221173760, 1019985813100816384, 1133270880179824640, 416184705628168192, 1002938666972422144, 131467088438026240, 730507494540156928, 1122116292811296768, 179931222600130560, 704668788433995776, 693568343631073280, 159315312318967808, 228151058164389888, 78591434106697728, 1101441417145767936, 1011500470535821312, 103335769958184960, 723984495516817408, 421553904096403456, 1009636649059076096, 880471059436941312, 1017699541008359424, 880891531629418496, 1001214838765556736, 584549630850997248, 63724037422592000, 984435711617449984, 737723590588489728, 235901319105159168, 867142310717528064, 62598429756019712, 135623731618318336, 103508320292760576, 714343001741491200, 384031562306680832, 620521749068774400, 562199194838183936, 137440949282672640, 105902179785320448, 76984505248291840, 81968680790070272, 932887350172256256, 162426306785337344, 248707672736583680, 338911851801801216, 664174993098860032, 590418449833950720, 668934689108922112, 1050363471682760704, 627510981430159872, 157201265188110848, 332191804534742528, 610005938211220480, 789419961205813248, 350516436368000512, 135054071035246848, 1103634020293607168, 851221988945015936, 339941701245870080, 810615510791110656, 1139102409849577472]</span></span><br><span class="line"><span class="string">s = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目给的函数有点多，先理清每个函数具体作用是什么：</p>
<h4 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h4><h5 id="poly-mul"><a href="#poly-mul" class="headerlink" title="poly_mul"></a>poly_mul</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br></pre></td></tr></table></figure>
<p>输入：</p>
<ul>
<li>x、y：多项式系数列表</li>
<li>z：模数</li>
<li>poly_mod：模多项式系数列表</li>
</ul>
<p>具体来说，该函数实现x、y多项式相乘后，每项系数模z，再将整个多项式模poly_mod。</p>
<h5 id="poly-add"><a href="#poly-add" class="headerlink" title="poly_add"></a>poly_add</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br></pre></td></tr></table></figure>
<p>这个函数的输入参数列表与poly_add完全一样，它实现的是x、y多项式相加后，每项系数模z，再将整个多项式模poly_mod。</p>
<h5 id="r2-distribution"><a href="#r2-distribution" class="headerlink" title="r2_distribution"></a>r2_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br></pre></td></tr></table></figure>
<p>该函数生成一个长度为len，元素为0或1的随机数列表</p>
<h5 id="rz-distribution"><a href="#rz-distribution" class="headerlink" title="rz_distribution"></a>rz_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br></pre></td></tr></table></figure>
<p>该函数生成一个长度为len，元素为0-z之间的随机数列表</p>
<h5 id="gass-distribution"><a href="#gass-distribution" class="headerlink" title="gass_distribution"></a>gass_distribution</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br></pre></td></tr></table></figure>
<p>该函数返回一个长度为len，随机数从给定正态分布中抽取的列表，各个参数意义详见：</p>
<p><a href="https://blog.csdn.net/wzy628810/article/details/103807829">numpy.random.normal详解-CSDN博客</a></p>
<p>自己测试一下就可以知道，其实可以认为他就是一个小噪声：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">length = <span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(gass_distribution(length))</span><br><span class="line"></span><br><span class="line">[-<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">4</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span> -<span class="number">2</span>  <span class="number">3</span> -<span class="number">1</span>  <span class="number">3</span> -<span class="number">4</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">3</span> -<span class="number">3</span>  <span class="number">2</span>  <span class="number">2</span>  <span class="number">0</span> -<span class="number">4</span> <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span> -<span class="number">3</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span> -<span class="number">2</span> -<span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">2</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">4</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span> <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">3</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">3</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span>  <span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">2</span> -<span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">1</span>  <span class="number">1</span> <span class="number">2</span>  <span class="number">0</span>  <span class="number">3</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span>  <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>以上就是五个加密需要用到的基本函数，总结一下，其实他就是定义了一个多项式的商环，运算也均在这个商环上进行。而这些随机生成的列表，也就可以看作是这个商环上的多项式系数列表，这个商环如下：</p>
<script type="math/tex; mode=display">
F_q[x]=Z_q[x]/f(x)</script><p>其中，f(x)就是题目中的poly_mod，Zq[x]指模q下的多项式环。</p>
<p>那么从这里开始，本文后续的多项式运算都定义在该商环上。</p>
<p>再看keygen函数，就可以知道几个多项式的关系：</p>
<script type="math/tex; mode=display">
b(x) = -s(x)a(x) - e(x)</script><p>其中，s的系数均为0或1，e的系数为一个正态分布的小噪声，而a、b的系数则应该是由较大的数构成的。</p>
<p>然后对于encrypt函数，其加密流程如下：</p>
<ul>
<li>把flag转为十六进制字符串，然后把每个十六进制字符转为ASCII码，然后在后面填充足够的0使得m也是一个同长度的多项式系数列表(这些东西自己生成数据测试一下就明白了)</li>
<li>定义一个较大的数delta，题目中是2^28，然后将m的多项式系数乘delta。这里就可以想到，对于m来说，只有前面非0的部分乘上了delta而显著变大，后面的填充0是不变的</li>
<li>生成两个满足正态分布的小噪声e1、e2，再生成一个系数均为0或1的随机临时密钥u，计算下面两个多项式作为密文并返回(其中dm表示乘上了delta的m系数列表)：</li>
</ul>
<script type="math/tex; mode=display">
c_0(x) = b(x)u(x) + e_1(x) + dm(x)</script><script type="math/tex; mode=display">
c_1(x) = a(x)u(x) + e_2(x)</script><p>那么加密流程就分析完了，接下来进入解密。</p>
<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>其实见过的话，差不多就能反应过来这其实是RLWE加密，而题目实现的其实就是RLWE的标准加密过程，具体可以参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/348311060">格密码之Ring-LWE (section 1) - 知乎 (zhihu.com)</a></p>
<p>了解了加解密流程的话，会发现其实这个题目已经给好了我们私钥s，而有了私钥s我们就可以用如下方式解密(为了表示方便，多项式后面就不写(x)了)：</p>
<p>由于有：</p>
<script type="math/tex; mode=display">
b = -as+e</script><p>所以：</p>
<script type="math/tex; mode=display">
bu = -asu + eu</script><script type="math/tex; mode=display">
c_0 + s*c_1 = (bu+e_1+dm) + s(au+e_2) = -asu + eu +e_1 +dm+asu +se_2 = dm +(eu+e_1+se_2)</script><p>也就是：</p>
<script type="math/tex; mode=display">
c_0 + s*c_1 = dm +(eu+e_1+se_2)</script><p>可以发现，后面的(eu+e1+se2)仍然是个小噪声，因此我们直接对(c0 + s*c1)模delta，就能得到m。然后有一点需要注意，噪声(eu+e1+se2)可能有负值，而为负值的时候，模delta会导致最终结果小1，需要对应添加回去。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from secert import flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_mul</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polymul(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_add</span>(<span class="params">x, y, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  init_poly = poly.polyadd(x, y)</span><br><span class="line">  res_poly = poly.polydiv(init_poly % z, poly_mod)[<span class="number">1</span>] % z</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r2_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rz_distribution</span>(<span class="params">z, <span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, <span class="built_in">len</span>, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gass_distribution</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params"><span class="built_in">len</span>, z, poly_mod</span>):</span><br><span class="line"></span><br><span class="line">  s = r2_distribution(<span class="built_in">len</span>)</span><br><span class="line">  a = rz_distribution(z, <span class="built_in">len</span>)</span><br><span class="line">  e = gass_distribution(<span class="built_in">len</span>)</span><br><span class="line">  b = poly_add(poly_mul(-a, s, z, poly_mod), -e, z, poly_mod)</span><br><span class="line"></span><br><span class="line">  key = [a, b, s]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, lent, q, t, poly_mod, message</span>):</span><br><span class="line">    lm = []</span><br><span class="line">    mg = <span class="built_in">hex</span>(message)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mg)):</span><br><span class="line">        lm.append(<span class="built_in">ord</span>(mg[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(lm + [<span class="number">0</span>] * (lent - <span class="built_in">len</span>(lm)), dtype=np.int64) % t</span><br><span class="line">    delta = q // t</span><br><span class="line">    delta_m = delta * m % q</span><br><span class="line">    e1 = gass_distribution(lent)</span><br><span class="line">    e2 = gass_distribution(lent)</span><br><span class="line">    u = r2_distribution(lent)</span><br><span class="line">    a = key[<span class="number">0</span>]</span><br><span class="line">    b = key[<span class="number">1</span>]</span><br><span class="line">    c0 = poly_add(poly_add(poly_mul(b, u, q, poly_mod), e1, q, poly_mod), delta_m, q, poly_mod)</span><br><span class="line">    c1 = poly_add(poly_mul(a, u, q, poly_mod), e2, q, poly_mod)</span><br><span class="line"></span><br><span class="line">    c = [c0, c1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">q = <span class="number">2</span>**<span class="number">60</span></span><br><span class="line">t = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">poly_mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c0 = [<span class="number">561582066946621440</span>, <span class="number">817928620285456128</span>, <span class="number">42443557674760704</span>, <span class="number">394102843794633984</span>, <span class="number">72227332717773568</span>, <span class="number">670192568490572288</span>, <span class="number">1124338053013283584</span>, <span class="number">280137744525874176</span>, <span class="number">63888555088669696</span>, <span class="number">208355146401743872</span>, <span class="number">301595565562120704</span>, <span class="number">50991331858064384</span>, <span class="number">686628375362950656</span>, <span class="number">584548366308243456</span>, <span class="number">1133668516727752192</span>, <span class="number">474240047688777728</span>, <span class="number">985154171217232384</span>, <span class="number">501564712591768576</span>, <span class="number">914588095025884160</span>, <span class="number">746830802337096704</span>, <span class="number">459209143204393984</span>, <span class="number">603634479787543552</span>, <span class="number">69069089375354880</span>, <span class="number">473248420863702016</span>, <span class="number">754603248638489600</span>, <span class="number">883576336602057728</span>, <span class="number">644743636485886976</span>, <span class="number">319901457654988800</span>, <span class="number">89793303522564096</span>, <span class="number">1090071466212856832</span>, <span class="number">369690536666460160</span>, <span class="number">1082593341867948032</span>, <span class="number">441359938321465344</span>, <span class="number">496386518207440896</span>, <span class="number">863575421687413760</span>, <span class="number">811516483959451648</span>, <span class="number">205996965699836928</span>, <span class="number">170811895655694336</span>, <span class="number">335832012272743424</span>, <span class="number">402108133996681216</span>, <span class="number">222897130593269760</span>, <span class="number">317187616437233664</span>, <span class="number">202919598933315584</span>, <span class="number">750395341955145728</span>, <span class="number">366873741733378048</span>, <span class="number">117730747288055808</span>, <span class="number">298767968401977344</span>, <span class="number">923270470424109056</span>, <span class="number">1076698083295752192</span>, <span class="number">926422812303050752</span>, <span class="number">216450081157644288</span>, <span class="number">981499274968659968</span>, <span class="number">349655761329862656</span>, <span class="number">557140442005530624</span>, <span class="number">858566688669024256</span>, <span class="number">1149813151825131520</span>, <span class="number">553370166035001344</span>, <span class="number">493722732465334272</span>, <span class="number">732590954557634560</span>, <span class="number">1052906163890288640</span>, <span class="number">1021790009160361984</span>, <span class="number">796011853108049920</span>, <span class="number">978483522580508672</span>, <span class="number">894955797433884672</span>, <span class="number">203559391733489664</span>, <span class="number">1062410754780596224</span>, <span class="number">452371485913219072</span>, <span class="number">651736133029277696</span>, <span class="number">313976115776903168</span>, <span class="number">31756099628290048</span>, <span class="number">71787963926824960</span>, <span class="number">1109713454413903872</span>, <span class="number">1112298691994664960</span>, <span class="number">539132530906077184</span>, <span class="number">435437107964127232</span>, <span class="number">833705546252720128</span>, <span class="number">928849583016886272</span>, <span class="number">526205130688186368</span>, <span class="number">1121288102191632384</span>, <span class="number">536933088453670912</span>, <span class="number">924962525849556992</span>, <span class="number">241106313851269120</span>, <span class="number">717238131918897152</span>, <span class="number">452642326250387456</span>, <span class="number">354673268076457984</span>, <span class="number">16428317258336256</span>, <span class="number">1061713751710105600</span>, <span class="number">1139952509444370432</span>, <span class="number">146561032291504128</span>, <span class="number">944139817563172864</span>, <span class="number">670119880592367616</span>, <span class="number">424458702156075008</span>, <span class="number">26734611035709440</span>, <span class="number">552311974354061312</span>, <span class="number">252009367779129344</span>, <span class="number">362515232289822720</span>, <span class="number">942674829586386944</span>, <span class="number">444916638598115328</span>, <span class="number">931633333648844800</span>, <span class="number">54609902697099264</span>, <span class="number">831316650858829824</span>, <span class="number">113431421994166272</span>, <span class="number">907245098202316800</span>, <span class="number">89326594807300096</span>, <span class="number">1016570475364521984</span>, <span class="number">175954756550047744</span>, <span class="number">53317212366995456</span>, <span class="number">49595714294925312</span>, <span class="number">490302383520435200</span>, <span class="number">260454924258463744</span>, <span class="number">713597063793843200</span>, <span class="number">759813046691484672</span>, <span class="number">491213271622251520</span>, <span class="number">861532845783883776</span>, <span class="number">1001029896578621440</span>, <span class="number">1017093991719427072</span>, <span class="number">901303193624896512</span>, <span class="number">85708980918313472</span>, <span class="number">1094723859831225856</span>, <span class="number">978173121944355840</span>, <span class="number">1074912611780537344</span>, <span class="number">816683396743236608</span>, <span class="number">406912122093641728</span>, <span class="number">326181480111288320</span>, <span class="number">644075764054597632</span>, <span class="number">114416502291357696</span>, <span class="number">543109737210728448</span>, <span class="number">311623753071517696</span>]</span><br><span class="line">c1 = [<span class="number">91790686412574976</span>, <span class="number">744110810763883904</span>, <span class="number">864964412801026560</span>, <span class="number">548689841412167296</span>, <span class="number">740051294265845504</span>, <span class="number">57902427994320256</span>, <span class="number">1068935585666797056</span>, <span class="number">625707146907438848</span>, <span class="number">551559740589006848</span>, <span class="number">233440834921673728</span>, <span class="number">108552546335437312</span>, <span class="number">166310503165480448</span>, <span class="number">267060328550531584</span>, <span class="number">735758245725702656</span>, <span class="number">712188529675013632</span>, <span class="number">386374530222726144</span>, <span class="number">823764165634433536</span>, <span class="number">123823217368593408</span>, <span class="number">1004488834478358528</span>, <span class="number">177477850679225344</span>, <span class="number">882498511506926592</span>, <span class="number">5562190320664577</span>, <span class="number">1106414131124581376</span>, <span class="number">327516552070835200</span>, <span class="number">1028475201394497536</span>, <span class="number">847983498883162112</span>, <span class="number">1095687065391010816</span>, <span class="number">706624008349679616</span>, <span class="number">204676471898160128</span>, <span class="number">926864853752850432</span>, <span class="number">152748692869394432</span>, <span class="number">326128165710331904</span>, <span class="number">237842086203092992</span>, <span class="number">1057799799477599232</span>, <span class="number">345130623233955840</span>, <span class="number">790672249565697024</span>, <span class="number">523310000234446848</span>, <span class="number">840615312867051520</span>, <span class="number">924979087214993408</span>, <span class="number">979878291879419904</span>, <span class="number">115424422845719552</span>, <span class="number">884924921252442112</span>, <span class="number">579700963339163648</span>, <span class="number">1097673093701288960</span>, <span class="number">704450636638808064</span>, <span class="number">556078232166107136</span>, <span class="number">600772693891751936</span>, <span class="number">905676852758437888</span>, <span class="number">33621101477464064</span>, <span class="number">962348719049031680</span>, <span class="number">925511116990984192</span>, <span class="number">722520866171662336</span>, <span class="number">84706802559584256</span>, <span class="number">530104859095961600</span>, <span class="number">586276707214465024</span>, <span class="number">1037552671549552640</span>, <span class="number">47697269444673536</span>, <span class="number">210690498450145280</span>, <span class="number">65070464261654528</span>, <span class="number">550494166683250688</span>, <span class="number">777902097764929536</span>, <span class="number">490832146778818560</span>, <span class="number">229195607527737344</span>, <span class="number">767464696299196416</span>, <span class="number">237315984854040576</span>, <span class="number">836604288237121536</span>, <span class="number">507968614131243008</span>, <span class="number">1146549269233274880</span>, <span class="number">947811005289312256</span>, <span class="number">415029326696218624</span>, <span class="number">73794452197351424</span>, <span class="number">1111805188636655616</span>, <span class="number">574425125131241472</span>, <span class="number">1077883538301097984</span>, <span class="number">1093417286225403904</span>, <span class="number">860646266870226944</span>, <span class="number">238318354083344384</span>, <span class="number">200921121541777408</span>, <span class="number">896691473408880640</span>, <span class="number">794971973394204672</span>, <span class="number">128454122568243200</span>, <span class="number">1048391326124871680</span>, <span class="number">811035464481740800</span>, <span class="number">922934079239356416</span>, <span class="number">1033337101914234880</span>, <span class="number">253445566297591808</span>, <span class="number">820899412762693632</span>, <span class="number">51737950452322304</span>, <span class="number">115554283493984256</span>, <span class="number">1013231171511318528</span>, <span class="number">887144973891745792</span>, <span class="number">903483706965391360</span>, <span class="number">1100501053366775808</span>, <span class="number">691065365527990272</span>, <span class="number">265415356256839680</span>, <span class="number">969461346065672192</span>, <span class="number">719496129535698944</span>, <span class="number">177295085227089920</span>, <span class="number">860427351595780096</span>, <span class="number">125812051803891712</span>, <span class="number">852658796584968192</span>, <span class="number">487770283774704640</span>, <span class="number">1070758201904617472</span>, <span class="number">696983558330196992</span>, <span class="number">911281563710520320</span>, <span class="number">676402547272127488</span>, <span class="number">240686574930634752</span>, <span class="number">412323376183429120</span>, <span class="number">619325898981327872</span>, <span class="number">551028995171842048</span>, <span class="number">124379235049986048</span>, <span class="number">649110127901071360</span>, <span class="number">453922531021119488</span>, <span class="number">1022481642604582912</span>, <span class="number">637680606991188992</span>, <span class="number">51749356430436352</span>, <span class="number">388350126415356928</span>, <span class="number">335267552976254464</span>, <span class="number">960188628024263168</span>, <span class="number">1088514924986558976</span>, <span class="number">1094423617550431488</span>, <span class="number">451833526251570688</span>, <span class="number">870461009339176704</span>, <span class="number">697351158038040832</span>, <span class="number">536089791190207360</span>, <span class="number">1118146398557536256</span>, <span class="number">518612046112251904</span>, <span class="number">241398597936840704</span>]</span><br><span class="line">a = [<span class="number">219983724512243970</span>, <span class="number">752269838678521187</span>, <span class="number">480509403910281428</span>, <span class="number">133185208045420765</span>, <span class="number">490932722804543133</span>, <span class="number">372886136396692359</span>, <span class="number">354557330633882122</span>, <span class="number">678374399146208018</span>, <span class="number">960245804475102275</span>, <span class="number">806115518790255556</span>, <span class="number">828442613098615970</span>, <span class="number">544833163224524043</span>, <span class="number">101022959319030935</span>, <span class="number">117082421755238805</span>, <span class="number">461182355875216799</span>, <span class="number">1056119810024896502</span>, <span class="number">1082000166040876591</span>, <span class="number">738717114032361767</span>, <span class="number">578460771662302172</span>, <span class="number">21556920074594644</span>, <span class="number">708384954866463679</span>, <span class="number">1128876901552996333</span>, <span class="number">874708202228666633</span>, <span class="number">1092990784029535155</span>, <span class="number">705415640472089353</span>, <span class="number">29671570923717836</span>, <span class="number">386333436179138094</span>, <span class="number">279081567858606603</span>, <span class="number">358852578576320987</span>, <span class="number">847350768179480795</span>, <span class="number">817603347707592640</span>, <span class="number">378977756047386392</span>, <span class="number">201769345485693076</span>, <span class="number">1063632060034171765</span>, <span class="number">1015775208741323787</span>, <span class="number">365127265851837110</span>, <span class="number">895275437758090601</span>, <span class="number">901913451551062231</span>, <span class="number">86419657119953320</span>, <span class="number">1149882820426142461</span>, <span class="number">157964525788076127</span>, <span class="number">631235061398583563</span>, <span class="number">470949966047613817</span>, <span class="number">180994349394944987</span>, <span class="number">228238609714444899</span>, <span class="number">73624200469844200</span>, <span class="number">521149905985689963</span>, <span class="number">19697681380014322</span>, <span class="number">233461826565515880</span>, <span class="number">891353264527116993</span>, <span class="number">1132362343348330909</span>, <span class="number">719302772676639611</span>, <span class="number">816690530086729127</span>, <span class="number">612858319654028202</span>, <span class="number">1029240232500231324</span>, <span class="number">266903296429217560</span>, <span class="number">66793172770160368</span>, <span class="number">836559325488504608</span>, <span class="number">1112595888239841739</span>, <span class="number">1115401337078198049</span>, <span class="number">261716078450833148</span>, <span class="number">235662011088480216</span>, <span class="number">24855917687216082</span>, <span class="number">619578281956001818</span>, <span class="number">589359800577838713</span>, <span class="number">780827177034370452</span>, <span class="number">62331996978291742</span>, <span class="number">757201723755709445</span>, <span class="number">325754948905836705</span>, <span class="number">298782045417610682</span>, <span class="number">958766007892311371</span>, <span class="number">474147826024027639</span>, <span class="number">1070490722277174646</span>, <span class="number">190459580153148093</span>, <span class="number">575005416421018885</span>, <span class="number">1120664053122918701</span>, <span class="number">982594533717886793</span>, <span class="number">252358471190638150</span>, <span class="number">869750160966337040</span>, <span class="number">1014322228871199234</span>, <span class="number">665558545558521628</span>, <span class="number">105433885394318337</span>, <span class="number">377027901347400638</span>, <span class="number">858616841227650075</span>, <span class="number">1043520529148794434</span>, <span class="number">1011002490399424434</span>, <span class="number">207664442877510988</span>, <span class="number">871194434207030706</span>, <span class="number">43210520355326250</span>, <span class="number">602232789264907632</span>, <span class="number">474051046305769969</span>, <span class="number">184712552380050689</span>, <span class="number">795080413713622552</span>, <span class="number">69957213032924047</span>, <span class="number">528473007846250043</span>, <span class="number">169221743016746138</span>, <span class="number">455880753546244419</span>, <span class="number">329225658406843642</span>, <span class="number">1150659098485422471</span>, <span class="number">626876298585651008</span>, <span class="number">490793379497608670</span>, <span class="number">933534706184661647</span>, <span class="number">467052917787037730</span>, <span class="number">1075596724935302342</span>, <span class="number">633000416730524162</span>, <span class="number">1090163205445120705</span>, <span class="number">72568659182243843</span>, <span class="number">571233962016655997</span>, <span class="number">1038522694640247261</span>, <span class="number">1025630622605696194</span>, <span class="number">553753007953333627</span>, <span class="number">231471906689387866</span>, <span class="number">558788723869154294</span>, <span class="number">673804202648107772</span>, <span class="number">232283327890481849</span>, <span class="number">39742925179368561</span>, <span class="number">135909458983766175</span>, <span class="number">192124298319965985</span>, <span class="number">839263496419016075</span>, <span class="number">162231894553173376</span>, <span class="number">661693215639557019</span>, <span class="number">655784289160683355</span>, <span class="number">1062416543453873451</span>, <span class="number">319938129595811007</span>, <span class="number">1002025365666496902</span>, <span class="number">272017768612866462</span>, <span class="number">482130564327357100</span>, <span class="number">982163056351966292</span>]</span><br><span class="line">b = [<span class="number">820893636450185216</span>, <span class="number">1088723008695521024</span>, <span class="number">563505788571372160</span>, <span class="number">225792174390707712</span>, <span class="number">531991982654429312</span>, <span class="number">676436714054308864</span>, <span class="number">74314379213871872</span>, <span class="number">78960436919170688</span>, <span class="number">744901196366641920</span>, <span class="number">556510129527018752</span>, <span class="number">71967857250009600</span>, <span class="number">714820946954724352</span>, <span class="number">1047939442957058048</span>, <span class="number">475133098260006400</span>, <span class="number">764020773208596992</span>, <span class="number">495337689359947776</span>, <span class="number">969475874903125504</span>, <span class="number">132719289181729792</span>, <span class="number">301591784012423168</span>, <span class="number">886113347782835200</span>, <span class="number">477381121894258688</span>, <span class="number">843499387721308160</span>, <span class="number">508541992967101440</span>, <span class="number">135898603458110464</span>, <span class="number">373248303372987392</span>, <span class="number">696522694584843264</span>, <span class="number">22397882759483392</span>, <span class="number">867189773938512896</span>, <span class="number">231922357411858432</span>, <span class="number">452886634658905088</span>, <span class="number">337138259452950528</span>, <span class="number">246330467020038144</span>, <span class="number">336880752906045440</span>, <span class="number">712110254503864320</span>, <span class="number">1109022090563764224</span>, <span class="number">736941976050098176</span>, <span class="number">340820746543463424</span>, <span class="number">319152585759258624</span>, <span class="number">627473838419951616</span>, <span class="number">724549720670470144</span>, <span class="number">941976447076147200</span>, <span class="number">284306369459089408</span>, <span class="number">474986938990024704</span>, <span class="number">169392264058798080</span>, <span class="number">425082943668336640</span>, <span class="number">780502226419180544</span>, <span class="number">534812953559536640</span>, <span class="number">307991466712799232</span>, <span class="number">256772641512932352</span>, <span class="number">954565062645100544</span>, <span class="number">642433129475169280</span>, <span class="number">554579429440409600</span>, <span class="number">492586567437330432</span>, <span class="number">504243514518411264</span>, <span class="number">559583345168955392</span>, <span class="number">1047970717391220736</span>, <span class="number">354007966625097728</span>, <span class="number">944087368508420096</span>, <span class="number">48593600443238400</span>, <span class="number">412546108591775744</span>, <span class="number">371798716943661056</span>, <span class="number">109603610083078144</span>, <span class="number">912962403831732224</span>, <span class="number">493593202496430080</span>, <span class="number">435411737100828672</span>, <span class="number">416258656632209408</span>, <span class="number">41271759105748992</span>, <span class="number">547450588221173760</span>, <span class="number">1019985813100816384</span>, <span class="number">1133270880179824640</span>, <span class="number">416184705628168192</span>, <span class="number">1002938666972422144</span>, <span class="number">131467088438026240</span>, <span class="number">730507494540156928</span>, <span class="number">1122116292811296768</span>, <span class="number">179931222600130560</span>, <span class="number">704668788433995776</span>, <span class="number">693568343631073280</span>, <span class="number">159315312318967808</span>, <span class="number">228151058164389888</span>, <span class="number">78591434106697728</span>, <span class="number">1101441417145767936</span>, <span class="number">1011500470535821312</span>, <span class="number">103335769958184960</span>, <span class="number">723984495516817408</span>, <span class="number">421553904096403456</span>, <span class="number">1009636649059076096</span>, <span class="number">880471059436941312</span>, <span class="number">1017699541008359424</span>, <span class="number">880891531629418496</span>, <span class="number">1001214838765556736</span>, <span class="number">584549630850997248</span>, <span class="number">63724037422592000</span>, <span class="number">984435711617449984</span>, <span class="number">737723590588489728</span>, <span class="number">235901319105159168</span>, <span class="number">867142310717528064</span>, <span class="number">62598429756019712</span>, <span class="number">135623731618318336</span>, <span class="number">103508320292760576</span>, <span class="number">714343001741491200</span>, <span class="number">384031562306680832</span>, <span class="number">620521749068774400</span>, <span class="number">562199194838183936</span>, <span class="number">137440949282672640</span>, <span class="number">105902179785320448</span>, <span class="number">76984505248291840</span>, <span class="number">81968680790070272</span>, <span class="number">932887350172256256</span>, <span class="number">162426306785337344</span>, <span class="number">248707672736583680</span>, <span class="number">338911851801801216</span>, <span class="number">664174993098860032</span>, <span class="number">590418449833950720</span>, <span class="number">668934689108922112</span>, <span class="number">1050363471682760704</span>, <span class="number">627510981430159872</span>, <span class="number">157201265188110848</span>, <span class="number">332191804534742528</span>, <span class="number">610005938211220480</span>, <span class="number">789419961205813248</span>, <span class="number">350516436368000512</span>, <span class="number">135054071035246848</span>, <span class="number">1103634020293607168</span>, <span class="number">851221988945015936</span>, <span class="number">339941701245870080</span>, <span class="number">810615510791110656</span>, <span class="number">1139102409849577472</span>]</span><br><span class="line">s = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">_c1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c1)):</span><br><span class="line">   _c1[i] = (q - c1[i]) % q</span><br><span class="line">final = poly_add(c0 , poly_mul(s, c1, q, poly_mod), q, poly_mod)</span><br><span class="line"></span><br><span class="line">temp = (final//(<span class="number">2</span>**<span class="number">28</span>))[:<span class="number">76</span>]</span><br><span class="line">temp1 = (final%(<span class="number">2</span>**<span class="number">28</span>))[:<span class="number">76</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">  <span class="keyword">if</span>(temp1[i] &gt; <span class="number">100000</span>):</span><br><span class="line">    c += <span class="built_in">chr</span>(temp[i]+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    c += <span class="built_in">chr</span>(temp[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;32fd349072a04dab71a3f2c78e24b9c0&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-曲线</title>
    <url>/post/187210a7.html</url>
    <content><![CDATA[<p>该文章主要记录一些曲线相关的趣题</p>
<span id="more"></span>
<h3 id="EdRSA"><a href="#EdRSA" class="headerlink" title="EdRSA"></a>EdRSA</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">gx=bytes_to_long(flag)</span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eG = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(mul(e, G)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (602246821311345089174443402780402388933602410138142480089649941718527311147, 17625197557740535449294773567986004828160284887369041337984750097736030549853)</span></span><br></pre></td></tr></table></figure>
<p>简单看一下题目流程，题目定义了一个有限域上一条曲线的点加和点乘操作，其中曲线形式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br></pre></td></tr></table></figure>
<p>写出表达式如下：</p>
<script type="math/tex; mode=display">
ax^2+y^2 = 1+dx^2y^2\quad(mod\;p)</script><p>搜索一下，发现这是标准型的扭曲爱德华曲线：(Twisted Edwards Curves)</p>
<p><a href="https://lazzzaro.github.io/2021/01/20/crypto-曲线/">曲线 | Lazzaro (lazzzaro.github.io)</a></p>
<p>而仔细核对一下点加与点乘，发现都是完全对的上的。因此问题就转化为，已知Edcurve上的一个e倍点，求解该e倍点对应的原点G的横坐标，即为flag。</p>
<p>想一想，如果这是一条常见形式的椭圆曲线，求解方式是什么？步骤如下：</p>
<ul>
<li>用sage中的order()函数求解出该椭圆曲线的阶n</li>
<li>求出e关于阶n的逆元，记为t</li>
<li>求倍点G=t*(eG)，横坐标即为所求</li>
</ul>
<p>那么再回头，这个求解过程对于Edcurve肯定也是类似的，不过问题就在于，sage中没有办法直接求出Edcurve这种形式的曲线的阶，因此确定思路：</p>
<ul>
<li>将Edcurve通过换元映射，变换为常见的椭圆曲线的形式</li>
<li>求解出对应椭圆曲线的阶，记为s</li>
<li>求倍点G’ = s*(eG’)</li>
<li>将求解出的G’再变换回Edcurve上得到G，其横坐标即为所求</li>
</ul>
<p>因此难点就在于如何通过换元进行曲线映射，这里陈述一下换元过程：<strong>(以下除法均为有限域上除法，即乘逆元)</strong></p>
<p><strong>第一步：</strong>转化为蒙哥马利曲线方程(Montgomery)：</p>
<p>参考：<a href="https://christianepeters.files.wordpress.com/2012/10/20080620-rennes.pdf">Edwards Curves (wordpress.com)</a></p>
<script type="math/tex; mode=display">
x' = \frac{1+y}{1-y}</script><script type="math/tex; mode=display">
y'=\frac{1+y}{x(1-y)}</script><script type="math/tex; mode=display">
B=\frac{4}{a-d}</script><script type="math/tex; mode=display">
A=\frac{2(a+d)}{a-d}</script><p>代入到Edcurve的曲线方程之后，曲线会转化为蒙哥马利曲线，其方程形式如下：</p>
<script type="math/tex; mode=display">
B(y')^2 = (x')^3+A(x')^2+(x')\quad(mod\;p)</script><p><strong>第二步：</strong>转化为椭圆曲线方程(Weierstrass)：</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/Montgomery_curve">Montgomery curve - Wikipedia</a></p>
<script type="math/tex; mode=display">
x'' = \frac{3x'+A}{3B}</script><script type="math/tex; mode=display">
y''=\frac{y'}{B}</script><script type="math/tex; mode=display">
a=\frac{3-A^2}{3B^2}</script><script type="math/tex; mode=display">
b=\frac{2A^3-9A}{27B^3}</script><p>此时蒙哥马利曲线就变成了椭圆曲线方程形式：</p>
<script type="math/tex; mode=display">
(y'')^2 = (x'')^3+a(x'')+b\quad(mod\;p)</script><p>然后求该曲线的阶，从而求解出远原点G，并且重新逆变换回Edcurve，得到的横坐标即为flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">P.&lt;z&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">aa = a</span><br><span class="line">dd = (d*c^<span class="number">4</span>)%p</span><br><span class="line">J = (<span class="number">2</span>*(aa+dd)*inverse(aa-dd,p))%p</span><br><span class="line">K = (<span class="number">4</span>*inverse(aa-dd,p))%p</span><br><span class="line">A = ((<span class="number">3</span>-J^<span class="number">2</span>)*inverse(<span class="number">3</span>*K^<span class="number">2</span>,p))%p</span><br><span class="line">B = ((<span class="number">2</span>*J^<span class="number">3</span>-<span class="number">9</span>*J)*inverse(<span class="number">27</span>*K^<span class="number">3</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  P(z^<span class="number">3</span>+A*z+B).roots():</span><br><span class="line">    alpha = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> P(z^<span class="number">2</span>-(<span class="number">3</span>*alpha^<span class="number">2</span>+A)).roots():</span><br><span class="line">        s = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">        s = inverse(s, p)</span><br><span class="line">        <span class="keyword">if</span> J==alpha*<span class="number">3</span>*s%p:</span><br><span class="line">            Alpha = alpha</span><br><span class="line">            S = s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twist_to_weier</span>(<span class="params">x,y</span>):</span><br><span class="line">    v = x*inverse(c,p)%p</span><br><span class="line">    w = y*inverse(c,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*v^<span class="number">2</span>+w^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*v^<span class="number">2</span>*w^<span class="number">2</span>)%p</span><br><span class="line">    s = (<span class="number">1</span>+w)*inverse(<span class="number">1</span>-w,p)%p</span><br><span class="line">    t = s*inverse(v,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (K*t^<span class="number">2</span>)%p==(s^<span class="number">3</span>+J*s^<span class="number">2</span>+s)%p</span><br><span class="line">    xW = (<span class="number">3</span>*s+J) * inverse(<span class="number">3</span>*K, p) % p</span><br><span class="line">    yW = t * inverse(K, p) % p</span><br><span class="line">    <span class="keyword">assert</span> yW^<span class="number">2</span> % p == (xW^<span class="number">3</span>+A*xW+B) % p</span><br><span class="line">    <span class="keyword">return</span> (xW,yW)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weier_to_twist</span>(<span class="params">x,y</span>):</span><br><span class="line">    xM=S*(x-Alpha)%p</span><br><span class="line">    yM=S*y%p</span><br><span class="line">    <span class="keyword">assert</span> (K*yM^<span class="number">2</span>)%p==(xM^<span class="number">3</span>+J*xM^<span class="number">2</span>+xM)%p</span><br><span class="line">    xe = xM*inverse(yM,p)%p</span><br><span class="line">    ye = (xM-<span class="number">1</span>)*inverse(xM+<span class="number">1</span>,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*xe^<span class="number">2</span>+ye^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*xe^<span class="number">2</span>*ye^<span class="number">2</span>)%p</span><br><span class="line">    xq = xe*c%p</span><br><span class="line">    yq = ye*c%p</span><br><span class="line">    <span class="keyword">assert</span> (a*xq^<span class="number">2</span>+yq^<span class="number">2</span>)%p==c^<span class="number">2</span>*(<span class="number">1</span>+d*xq^<span class="number">2</span>*yq^<span class="number">2</span>)%p</span><br><span class="line">    <span class="keyword">return</span> (xq,yq)</span><br><span class="line"> </span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">order = E.order()</span><br><span class="line">eG = (<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line">eG = twist_to_weier(<span class="number">602246821311345089174443402780402388933602410138142480089649941718527311147</span>, <span class="number">17625197557740535449294773567986004828160284887369041337984750097736030549853</span>)</span><br><span class="line"><span class="comment">#print(eG)</span></span><br><span class="line">eG = E(eG)</span><br><span class="line">t = inverse(e,order)</span><br><span class="line">G = t*eG</span><br><span class="line"><span class="comment">#print(G)</span></span><br><span class="line"><span class="comment">#(36261107889873779109466209751550197981810668464592052789439409682189116521876 , 28177359502202272008748289223947413248814289299639597442379536527477393059697)</span></span><br><span class="line">G = weier_to_twist(<span class="number">36261107889873779109466209751550197981810668464592052789439409682189116521876</span> , <span class="number">28177359502202272008748289223947413248814289299639597442379536527477393059697</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(G[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>DASCTF{y0u_kn0w_edcurv3_w3LL!!}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="EC-Party-I"><a href="#EC-Party-I" class="headerlink" title="EC_Party-I"></a>EC_Party-I</h3><p>题目来源：“华为杯”第二届中国研究生网络安全创新大赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>]==<span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:]==<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin</span>(<span class="params">m</span>):</span><br><span class="line">    m = m+os.urandom(<span class="number">32</span>)</span><br><span class="line">    p = getPrime(<span class="number">384</span>)</span><br><span class="line">    q = getPrime(<span class="number">384</span>)</span><br><span class="line">    Fp = GF(p)</span><br><span class="line">    Fq = GF(q)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">2</span></span><br><span class="line">    a = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">    Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">    En = EllipticCurve(Zmod(n), [a, b])</span><br><span class="line">    ord_p = Ep.order()</span><br><span class="line">    ord_q = Eq.order()</span><br><span class="line"></span><br><span class="line">    xm = bytes_to_long(m)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Gp = Ep.lift_x(Fp(xm))</span><br><span class="line">            Gq = Eq.lift_x(Fq(xm))</span><br><span class="line">            ym = crt([<span class="built_in">int</span>(Gp.xy()[<span class="number">1</span>]),<span class="built_in">int</span>(Gq.xy()[<span class="number">1</span>])],[p,q])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> :</span><br><span class="line">            xm += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    M = En((xm,ym))</span><br><span class="line">    C = e*M</span><br><span class="line">    pk = [a, b, n, C]</span><br><span class="line">    leak = ord_p*ord_q</span><br><span class="line">    <span class="keyword">return</span> pk, leak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rabin(flag))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733, 4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040, 762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543, (19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965, 728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772), 762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>梳理题目加密流程：</p>
<ul>
<li>题目将flag转化成大整数后，转化为基点M的横坐标</li>
<li>生成两个大素数p、q，n=p*q</li>
<li>生成随机数a、b，并以此生成三条椭圆曲线Ep、Eq、En</li>
<li>求出基点M在Ep、Eq上的倍点，并用中国剩余定理求出组合后的纵坐标</li>
<li>给出泄露信息leak=order(Ep)*order(Eq)</li>
</ul>
<p>那么显然如果能获得n的分解，题目就没有难度了，而泄漏的leak就是n的分解的重要依据。其具体原理可以参考：(因为我其实也并没有理解清楚)</p>
<p><a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/HITCON CTF 2022/Chimera/README.md">My-CTF-Challenges/HITCON CTF 2022/Chimera/README.md at master · maple3142/My-CTF-Challenges (github.com)</a></p>
<p>简单来说，就是先获得leak的因式分解：</p>
<p><img src="/post/187210a7/image-20230930114139546.png" alt="image-20230930114139546"></p>
<p>由于leak=order(Ep)*order(Eq)，因此leak乘任何点都应该是En、Ep、Eq的共同O点(无穷远点)，但是将leak挨个除以其因子，再与C点相乘，就可能会产生倍点在Ep上，而不在Eq上的情况，这会使求解关于n的逆元不存在，sage便会在这时抛出一个报错，而在报错信息中就能看到kp以及n的分解：(这是我的理解，如果有不对的地方欢迎师傅指出)</p>
<p><img src="/post/187210a7/image-20230930114719034.png" alt="image-20230930114719034"></p>
<p>这个数字就是kp，与n求gcd即可得到p，也可以在最后一行报错信息中直接看到n的分解。</p>
<p>其实这种分解方式就是<a href="https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization">Lenstra elliptic-curve factorization</a>.的核心原理，但我没有完全理解。</p>
<p>求解出p、q后，就顺势获得了两条曲线，接下来就是如何由曲线上的倍点(2M)求解出原点的问题，一般有两类解法：</p>
<p>1、如果2与曲线阶互素，则可以直接求解2的逆元，将倍点乘上逆元即得原点</p>
<p>2、如果不互素，则可以联立椭圆曲线本身方程及倍点方程，在有限域下求根</p>
<p>而在本题中，2与Eq的阶互素，因此采用第一种解法；与Ep的阶不互素，因此采用第二种解法，第二种解法联立方程过程如下：(记M为(x1,y1),2M为(x2,y2))</p>
<script type="math/tex; mode=display">
y^2=x^3+ax+b\quad(mod\;p)</script><script type="math/tex; mode=display">
x_2=k^2−2x_1\quad(mod\;p)</script><script type="math/tex; mode=display">
k = \frac{3x_1^2 + a}{2y_1}\quad(mod\;p)</script><p>联立上述三式可得方程：</p>
<script type="math/tex; mode=display">
\frac{(3x_1^2+a)^2}{(2y_1)^2} - 2x_1 - x_2 = 0\quad(mod\;p)</script><p>即：</p>
<script type="math/tex; mode=display">
(3x_1^2+a)^2 - 2x_1*4(x_1^3+ax_1+b) - x_2*4(x_1^3+ax_1+b) = 0\quad(mod\;p)</script><p>此时方程中仅有x1一个未知数，在模p下解方程即可，解完后用中国剩余定理将模p与模q下的解组合即得flag。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">a,b,n,C,leak = [<span class="number">138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733</span>, <span class="number">4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040</span>, <span class="number">762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543</span>, (<span class="number">19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965</span>, <span class="number">728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772</span>), <span class="number">762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828</span>]</span><br><span class="line">E = EllipticCurve(Zmod(n),[a,b])</span><br><span class="line">C = E(C)</span><br><span class="line"></span><br><span class="line"><span class="comment">#factordb</span></span><br><span class="line"><span class="comment">#2^2,3^4,13,199,307,647,157259,297617,8452217,411927661365999433,1157516701716180046249,1338688620929080207819,31226697952255326809332037614333,581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span></span><br><span class="line">leak_fac = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">199</span>,<span class="number">307</span>,<span class="number">647</span>,<span class="number">157259</span>,<span class="number">297617</span>,<span class="number">8452217</span>,<span class="number">411927661365999433</span>,<span class="number">1157516701716180046249</span>,<span class="number">1338688620929080207819</span>,<span class="number">31226697952255326809332037614333</span>,<span class="number">581208663471376553417319728009366348095695079579751839149645355600351572890241761173016580183555305805091712621</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in leak_fac:</span></span><br><span class="line"><span class="string">    temp = leak // i * C</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">kp = <span class="number">422522588482185975632147929645103216180089543839772868484032620301855259044079430236142637458472152787337779544279109415705783248825091269039840404202119229567311048216047356951966653331710686649176005328509793328313264251738045723</span></span><br><span class="line">p = GCD(kp,n)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">Ep = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">Eq = EllipticCurve(Zmod(q), [a, b])</span><br><span class="line">ord_p = Ep.order()</span><br><span class="line">ord_q = Eq.order()</span><br><span class="line"><span class="comment">#print(ord_p)</span></span><br><span class="line"><span class="comment">#print(ord_q)</span></span><br><span class="line"></span><br><span class="line">dq = inverse(e,ord_q)</span><br><span class="line">Q = dq*Eq(C)</span><br><span class="line">mq = <span class="built_in">int</span>(Q[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(Ep(C))</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = (<span class="number">3</span>*(x**<span class="number">2</span>)+a)**<span class="number">2</span> - <span class="number">2</span>*x*(<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)) - <span class="built_in">int</span>(C[<span class="number">0</span>])*<span class="number">4</span>*(x**<span class="number">3</span>+a*x+b)</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"></span><br><span class="line">n = [p,q]</span><br><span class="line"><span class="keyword">if</span>(res):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        c = [<span class="built_in">int</span>(i[<span class="number">0</span>]),mq]</span><br><span class="line">        m = crt(c,n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>flag{3crab1n_s0unds_go0d}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="strange-curve"><a href="#strange-curve" class="headerlink" title="strange curve"></a>strange curve</h3><p>题目来源：巅峰极客 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P,Q</span>):</span><br><span class="line">    (x1,y1)=P</span><br><span class="line">    (x2,y2)=Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    x3=(x1+x2)*(<span class="number">1</span>+y1*y2)*invert((<span class="number">1</span>+x1*x2)*(<span class="number">1</span>-y1*y2),p)%p</span><br><span class="line">    y3=(y1+y2)*(<span class="number">1</span>+x1*x2)*invert((<span class="number">1</span>-x1*x2)*(<span class="number">1</span>+y1*y2),p)%p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x3,y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">e,P</span>):</span><br><span class="line">    Q=(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    e=e%p</span><br><span class="line">    <span class="keyword">while</span> e:</span><br><span class="line">        <span class="keyword">if</span> e&amp;<span class="number">1</span>:</span><br><span class="line">            Q=add(Q,P)</span><br><span class="line">        P=add(P,P)</span><br><span class="line">        e&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Legendre</span>(<span class="params">a,p</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>((a%p+p)%p,(p-<span class="number">1</span>)//<span class="number">2</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ts</span>(<span class="params">p</span>):</span><br><span class="line">    p=p-<span class="number">1</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        p=p//<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> count,p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_nonre</span>(<span class="params">p</span>):</span><br><span class="line">    a=random.randint(<span class="number">1</span>,p)</span><br><span class="line">    <span class="keyword">while</span> Legendre(a,p)==<span class="number">1</span>:</span><br><span class="line">        a=random.randint(<span class="number">1</span>,p)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">amm2</span>(<span class="params">a,p</span>):</span><br><span class="line">    t,s=get_ts(p)</span><br><span class="line">    ta=<span class="built_in">pow</span>(get_nonre(p),s,p)</span><br><span class="line">    tb=<span class="built_in">pow</span>(a,s,p)</span><br><span class="line">    h=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,t):</span><br><span class="line">        d=<span class="built_in">pow</span>(tb,<span class="number">2</span>**t-<span class="number">1</span>-i,p)</span><br><span class="line">        <span class="keyword">if</span> d==<span class="number">1</span>:</span><br><span class="line">            k=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k=<span class="number">1</span></span><br><span class="line">        tb=(tb*<span class="built_in">pow</span>(ta,<span class="number">2</span>*k,p))%p</span><br><span class="line">        h=(h*<span class="built_in">pow</span>(ta,k,p))%p</span><br><span class="line">        ta=<span class="built_in">pow</span>(ta,<span class="number">2</span>,p)</span><br><span class="line">    <span class="keyword">return</span> h*<span class="built_in">pow</span>(a,(s+<span class="number">1</span>)//<span class="number">2</span>,p)%p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">a,b,c,p</span>):</span><br><span class="line">    tmpa=<span class="number">1</span></span><br><span class="line">    tmpb=b*inverse(a,p)%p</span><br><span class="line">    tmpc=c*inverse(a,p)%p</span><br><span class="line">    <span class="keyword">assert</span> Legendre(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)==<span class="number">1</span></span><br><span class="line">    res1=(amm2(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="number">2</span>,p))%p</span><br><span class="line">    res2=(-amm2(tmpb**<span class="number">2</span>*inverse(<span class="number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="number">2</span>,p))%p</span><br><span class="line">    <span class="keyword">return</span> (res1,res2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lift</span>(<span class="params">x,a,b,p</span>):</span><br><span class="line">    tmp=b*(x**<span class="number">2</span>-<span class="number">1</span>)*inverse(a*x,p)%p</span><br><span class="line">    <span class="keyword">return</span> solve(<span class="number">1</span>,-tmp,-<span class="number">1</span>,p)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">p=<span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class="line">a=<span class="number">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class="line">b=<span class="number">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class="line">x=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        y=lift(x,a,b,p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a*x*(y**<span class="number">2</span>-<span class="number">1</span>)%p==b*y*(x**<span class="number">2</span>-<span class="number">1</span>)%p</span><br><span class="line"></span><br><span class="line">P=(x,y)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">eP=mul(e,P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;P = <span class="subst">&#123;P&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;eP = <span class="subst">&#123;eP&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class="line"><span class="string">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>非预期解很容易，flag就是P的横坐标，最多再需要爆破一下就行，这里主要讲一下预期解。</p>
<p>我认为题目预期应该是不给P，而只给eP的，因此我就以只有eP这个条件开始解题，分析过程如下：</p>
<p>首先，前面的很多函数先不看，先关注题目给的曲线方程：</p>
<script type="math/tex; mode=display">
ax(y^2-1) \equiv by(x^2-1) \quad(mod\;p)</script><p>而就在前几天的2023 DASCTF CBCTF中，出了一道huff曲线题，而huff曲线的一般形式为：</p>
<script type="math/tex; mode=display">
x(ay^2-1) \equiv y(bx^2-1) \quad(mod\;p)</script><p>可以发现其实很像，我们只需要做以下映射就可以把题目曲线变成一个标准huff曲线：</p>
<script type="math/tex; mode=display">
x' = ax</script><script type="math/tex; mode=display">
y' = by</script><p>那么题目曲线就变成了：</p>
<script type="math/tex; mode=display">
x(\frac{y^2}{b^2}-1) \equiv y(\frac{x^2}{a^2}-1) \quad(mod\;p)</script><p>可以发现这就是个标准huff曲线：</p>
<script type="math/tex; mode=display">
x(a'y^2-1) \equiv y(b'x^2-1) \quad(mod\;p)</script><p>其中：</p>
<script type="math/tex; mode=display">
a' = (b^2)^{-1} \quad(mod\;p)</script><script type="math/tex; mode=display">
b' = (a^2)^{-1} \quad(mod\;p)</script><p>而huff曲线又可以通过如下方式映射为一条Weiestrass Curve，也就是常见的椭圆曲线：</p>
<script type="math/tex; mode=display">
(x,y)→(\frac{b'x-a'y}{y-x},\frac{b'-a'}{y-x})</script><p>该Weiestrass Curve方程如下：</p>
<script type="math/tex; mode=display">
y^2≡x^3+(a'+b')x^2+a'b'x \quad mod \quad p</script><p>映射为这样的曲线后，sage就可以直接求出阶。而映射由于是双射所以不会改变曲线阶，所以我们其实也就求得了原huff曲线的阶，然后就可以求e关于阶的逆元d，就有：</p>
<script type="math/tex; mode=display">
d*eP' = P'</script><p>然后再将第一次映射逆回去就能得到原P点坐标了。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=<span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class="line">a=<span class="number">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class="line">b=<span class="number">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">eP = (<span class="number">8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005</span>,<span class="number">9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">point</span>):</span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    Ex = (b_*x-a_*y) * inverse(y-x,p) % p</span><br><span class="line">    Ey = (b_-a_) * inverse(y-x,p) % p</span><br><span class="line">    <span class="keyword">return</span> (Ex,Ey)</span><br><span class="line"></span><br><span class="line">a_ = inverse(b**<span class="number">2</span>,p)</span><br><span class="line">b_ = inverse(a**<span class="number">2</span>,p)</span><br><span class="line">E = EllipticCurve(GF(p),[<span class="number">0</span>,a_+b_,<span class="number">0</span>,a_*b_,<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print(E.order())</span></span><br><span class="line"></span><br><span class="line">eP_ = (eP[<span class="number">0</span>]*a%p,eP[<span class="number">1</span>]*b%p)</span><br><span class="line">order = <span class="number">9410547699903726871336507117271550134683191140146415131394654141737636910570514004897728229958723858012338384995335419723570802793276851855535834618146832</span></span><br><span class="line">d = inverse(e,order)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CB_curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a_</span><br><span class="line">        self.b = b_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        <span class="keyword">if</span> P == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 =  (x1+x2)*(<span class="number">1</span>+self.a*y1*y2)*inverse((<span class="number">1</span>+self.b*x1*x2)*(<span class="number">1</span>-self.a*y1*y2),self.p)% self.p</span><br><span class="line">        y3 =  (y1+y2)*(<span class="number">1</span>+self.b*x1*x2)*inverse((<span class="number">1</span>-self.b*x1*x2)*(<span class="number">1</span>+self.a*y1*y2),self.p)% self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negG</span>(<span class="params">self,G</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(order-<span class="number">1</span>,G)</span><br><span class="line"></span><br><span class="line">curve = CB_curve()</span><br><span class="line">P_ = curve.mul(d,eP_)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(inverse(a,p)*P_[<span class="number">0</span>] % p)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;b7f209df-1284-4bdf-b030-28197483c47b&#125;</span></span><br></pre></td></tr></table></figure>
<p>CB_curve其实就是huff曲线的实现，偷懒用了出题师傅的(ᕑᗢᓫ∗)˒</p>
<p><br></p>
<p><br></p>
<h3 id="SMM"><a href="#SMM" class="headerlink" title="SMM"></a>SMM</h3><p>题目来源：2023福建省数据安全竞赛</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">msg = pad(flag, <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span></span><br><span class="line">         <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc_table2 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7eece0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7eece0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000001333d7197c5da65ad36ebbb3589634ad6&#x27;</span></span><br><span class="line">         <span class="string">&#x27;00000000000000000000000000000007b81a5934e5b39c8d36f449527767209b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7e22c0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af04915ce0cec3&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TSM2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sk, ecc_table</span>):</span><br><span class="line">        self.ecc_table = ecc_table</span><br><span class="line">        self.n = <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        self.para_len = <span class="built_in">len</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">        self.ecc_a3 = (<span class="built_in">int</span>(ecc_table[<span class="string">&#x27;a&#x27;</span>], base=<span class="number">16</span>) +</span><br><span class="line">                       <span class="number">3</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.pk = self._kg(self.sk, ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, data, K</span>):</span><br><span class="line">        e = data</span><br><span class="line">        d = self.sk</span><br><span class="line">        k = K</span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(k, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        R = ((e + x) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> R == <span class="number">0</span> <span class="keyword">or</span> R + k == <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        d_1 = <span class="built_in">pow</span>(</span><br><span class="line">            d+<span class="number">1</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        S = (d_1*(k + R) - R) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> S == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (R, S)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, Sign, data</span>):</span><br><span class="line">        r = <span class="built_in">int</span>(Sign[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(Sign[self.para_len:<span class="number">2</span> * self.para_len], <span class="number">16</span>)</span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.n</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">        P1 = self._kg(s, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        P2 = self._kg(t, self.pk)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> P1 == P2:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._add_point(P1, P2)</span><br><span class="line">            P1 = self._convert_jacb_to_nor(P1)</span><br><span class="line"> </span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> r == ((e + x) % self.n)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_kg</span>(<span class="params">self, k, Point</span>):</span><br><span class="line">        <span class="keyword">if</span> (k % self.n) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span></span><br><span class="line">        Point = <span class="string">&#x27;%s%s&#x27;</span> % (Point, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        mask_str = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len - <span class="number">1</span>):</span><br><span class="line">            mask_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        mask = <span class="built_in">int</span>(mask_str, <span class="number">16</span>)</span><br><span class="line">        Temp = Point</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len * <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                Temp = self._double_point(Temp)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; mask) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    Temp = self._add_point(Temp, Point)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    Temp = Point</span><br><span class="line">            k = k &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self._convert_jacb_to_nor(Temp)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_double_point</span>(<span class="params">self, Point</span>):</span><br><span class="line">        l = <span class="built_in">len</span>(Point)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        <span class="keyword">if</span> l &lt; self.para_len * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y1 = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l == len_2:</span><br><span class="line">                z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z1 = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T6 = (z1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y1 * y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (x1 - T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (y1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * <span class="number">8</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (x1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * <span class="number">3</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (T6 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (self.ecc_a3 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            z3 = (T3 + T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            x3 = (T3 - T5) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (T5 % <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">                T4 = (T5 + ((T5 + <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)) &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(</span><br><span class="line">                    self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T4 = (T5 + (T5 &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (T1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (x3, y3, z3)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_point</span>(<span class="params">self, P1, P2</span>):</span><br><span class="line">        <span class="keyword">if</span> P1 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P2, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> P2 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        l1 = <span class="built_in">len</span>(P1)</span><br><span class="line">        l2 = <span class="built_in">len</span>(P2)</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt; len_2) <span class="keyword">or</span> (l2 &lt; len_2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X1 = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            Y1 = <span class="built_in">int</span>(P1[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l1 == len_2:</span><br><span class="line">                Z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Z1 = <span class="built_in">int</span>(P1[len_2:], <span class="number">16</span>)</span><br><span class="line">            x2 = <span class="built_in">int</span>(P2[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y2 = <span class="built_in">int</span>(P2[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            T1 = (Z1 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y2 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x2 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T3 - X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 + X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 - Y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Z3 = (Z1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (X1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            X3 = (T5 - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (Y1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T4 - X3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> form % (X3, Y3, Z3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>):</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        x = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">        z = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line">        z_inv = <span class="built_in">pow</span>(</span><br><span class="line">            z, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        z_invSquar = (z_inv * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_invQube = (z_invSquar * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        x_new = (x * z_invSquar) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        y_new = (y * z_invQube) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_new = (z * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> z_new == <span class="number">1</span>:</span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> form % (x_new, y_new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">bits = [<span class="number">40</span>, <span class="number">140</span>]</span><br><span class="line">ecc_table = [ecc_table1, ecc_table2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sk = getrandbits(bits[_])</span><br><span class="line">    key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    msg = aes.encrypt(msg)</span><br><span class="line">    sk = sk % <span class="built_in">int</span>(ecc_table[_][<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    sm2 = TSM2(sk, ecc_table[_])</span><br><span class="line">    pk = sm2.pk</span><br><span class="line">    <span class="built_in">print</span>(pk)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">749180747cd167402449aa2ffdfacd87a3d8ff9a3e00670e9501cefc96c712f16ddca6ba23ed4c9bbbd23bb5d4f16627cd30a82f64a75195c4c3337c17041e89</span></span><br><span class="line"><span class="string">0000000000000000000000000000002030737f5765b0ca638572035d1143a2210000000000000000000000000000001c69be4b4c104fe2c888be4b659620d933</span></span><br><span class="line"><span class="string">b&#x27;\xb6\xe2\xd0\x00\xdb=3\xf2\xc3\x10\x9b\xb7\x04\xb2\t\x92\xed$Z\xf6.\xd8\xdd/\xad\x03M\xaec\xce\xa9Z\x00&#125;\xfd\xe2T\x859\x0b\x1f\xd3\xd4H^\xfa8\xb7&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>特别长的题目，不过其实注意到函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>)</span><br></pre></td></tr></table></figure>
<p>看名字，这个函数的作用应该是把雅可比坐标转换成普通坐标，那么前面的很长的点加、倍乘的实现，估计也就是雅可比坐标下的ECC点运算。</p>
<p>所以其实很长一段代码都可以忽略，其实这个题就是定义了两个ECC，每张ecc_table中，p、a、b就是椭圆曲线方程中的各参数，n是曲线的阶，g是曲线上的一个生成元。</p>
<p>明白了这一点后再看题目主要任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bits = [<span class="number">40</span>, <span class="number">140</span>]</span><br><span class="line">ecc_table = [ecc_table1, ecc_table2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sk = getrandbits(bits[_])</span><br><span class="line">    key = hashlib.md5(<span class="built_in">str</span>(sk).encode()).digest()</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    msg = aes.encrypt(msg)</span><br><span class="line">    sk = sk % <span class="built_in">int</span>(ecc_table[_][<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    sm2 = TSM2(sk, ecc_table[_])</span><br><span class="line">    pk = sm2.pk</span><br><span class="line">    <span class="built_in">print</span>(pk)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>
<p>可以看到，他其实给了两个曲线上各自生成元的sk倍点坐标，sk分别为40bit和140bit，然后他将sk分别作为AES密钥，连续对flag进行两次加密，最后给出密文。那么我们想要得到flag，也就要解出两个sk然后AES解密。</p>
<p>也就是说，我们实际上是要完成两个不同曲线上的DLP问题。而略作测试就会发现：</p>
<ul>
<li>对于曲线一，由于私钥sk仅有40bit，因此可以考虑bsgs</li>
<li>对于曲线二，order=p，因此smart attack解决问题</li>
</ul>
<p>而实际上bsgs也需要一定的时间，耐心一点就好了。</p>
<p>而最后还有一个小细节需要注意：每一次加密中，sk模了曲线阶n，而第二个曲线阶略小于140比特，因此求出DLP后还需要爆破几位才能得到正确sk。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">ecc_table1 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc_table2 = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7eece0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7eece0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gx&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000001333d7197c5da65ad36ebbb3589634ad6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gy&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000007b81a5934e5b39c8d36f449527767209b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af4b7e22c0cec3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;00000000000000000000000000000024c0a1eef669c78f5a60af04915ce0cec3&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ecc1 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">ecc2 = EllipticCurve(GF(<span class="built_in">int</span>(ecc_table2[<span class="string">&#x27;p&#x27;</span>],<span class="number">16</span>)),[<span class="built_in">int</span>(ecc_table2[<span class="string">&#x27;a&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table2[<span class="string">&#x27;b&#x27;</span>],<span class="number">16</span>)])</span><br><span class="line">g1 = ecc1((<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table1[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br><span class="line">g2 = ecc2((<span class="built_in">int</span>(ecc_table2[<span class="string">&#x27;gx&#x27;</span>],<span class="number">16</span>),<span class="built_in">int</span>(ecc_table2[<span class="string">&#x27;gy&#x27;</span>],<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">k1g1 = ecc1(<span class="built_in">int</span>(<span class="string">&quot;749180747cd167402449aa2ffdfacd87a3d8ff9a3e00670e9501cefc96c712f1&quot;</span>,<span class="number">16</span>),<span class="built_in">int</span>(<span class="string">&quot;6ddca6ba23ed4c9bbbd23bb5d4f16627cd30a82f64a75195c4c3337c17041e89&quot;</span>,<span class="number">16</span>))</span><br><span class="line">k2g2 = ecc2(<span class="built_in">int</span>(<span class="string">&quot;2030737f5765b0ca638572035d1143a221&quot;</span>,<span class="number">16</span>),<span class="built_in">int</span>(<span class="string">&quot;1c69be4b4c104fe2c888be4b659620d933&quot;</span>,<span class="number">16</span>))</span><br><span class="line">enc = <span class="string">b&#x27;\xb6\xe2\xd0\x00\xdb=3\xf2\xc3\x10\x9b\xb7\x04\xb2\t\x92\xed$Z\xf6.\xd8\xdd/\xad\x03M\xaec\xce\xa9Z\x00&#125;\xfd\xe2T\x859\x0b\x1f\xd3\xd4H^\xfa8\xb7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 bsgs</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic = &#123;&#125;</span></span><br><span class="line"><span class="string">for b in trange(2**20):</span></span><br><span class="line"><span class="string">    dic[b*g1] = b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cc = dic.keys()</span></span><br><span class="line"><span class="string">for a in trange(464193,2**20):</span></span><br><span class="line"><span class="string">    temp = k1g1 - a*2^20*g1</span></span><br><span class="line"><span class="string">    if(temp in cc):</span></span><br><span class="line"><span class="string">        print(a)</span></span><br><span class="line"><span class="string">        print(dic[temp])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#d = a*2^20+b</span></span><br><span class="line">a = <span class="number">464193</span></span><br><span class="line">b = <span class="number">319430</span></span><br><span class="line">k1 = a*<span class="number">2</span>^<span class="number">20</span>+b</span><br><span class="line"><span class="comment">#print(k1*g1 == k1g1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 smart_attack</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">k2 = <span class="built_in">int</span>(SmartAttack(g2, k2g2, ecc2.order()))</span><br><span class="line"><span class="comment">#print(k2*g2 == k2g2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 AES</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">7</span>):</span><br><span class="line">    temp = k2 + i*g2.order()</span><br><span class="line">    <span class="comment">#print(temp*g2 == k2g2)</span></span><br><span class="line">    key2 = hashlib.md5(<span class="built_in">str</span>(temp).encode()).digest()</span><br><span class="line">    aes2 = AES.new(key2, AES.MODE_ECB)</span><br><span class="line">    dec2 = aes2.decrypt(enc)</span><br><span class="line"></span><br><span class="line">    key1 = hashlib.md5(<span class="built_in">str</span>(k1).encode()).digest()</span><br><span class="line">    aes1 = AES.new(key1, AES.MODE_ECB)</span><br><span class="line">    dec1 = aes1.decrypt(dec2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> dec1):</span><br><span class="line">        <span class="built_in">print</span>(dec1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;609a091e-6666-b7c9-edc2-c721958409e2&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Rosita"><a href="#Rosita" class="headerlink" title="Rosita"></a>Rosita</h3><p>题目来源：巅峰极客 2023</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Problem by rec, without any sleep at all.</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p, a, b, flag</span><br><span class="line"></span><br><span class="line">ECC = EllipticCurve(GF(p), [a, b])</span><br><span class="line">R, E, C = [ECC.random_point() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> m: urandom(<span class="number">8</span>) + m + <span class="string">b&#x27;\x00&#x27;</span> * (ZZ(p).nbits() // <span class="number">8</span> - <span class="built_in">len</span>(m) - <span class="number">8</span> - <span class="number">1</span>)</span><br><span class="line">out = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    m = pad(<span class="built_in">chr</span>(flag[i]).encode())</span><br><span class="line">    nonce = urandom(<span class="number">16</span>)</span><br><span class="line">    sh = sha256(nonce + m).digest()</span><br><span class="line">    </span><br><span class="line">    Q = b2l(m)*R + b2l(nonce)*E + b2l(sh)*C</span><br><span class="line">    out.append(Q.xy())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.tuo&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(out))</span><br></pre></td></tr></table></figure>
<p>题目内容很简短，流程如下：</p>
<ul>
<li>用自定义参数a、b、p生成一条曲线ECC，并在上面随机取了三点R、E、C。曲线参数与REC三点坐标均未知</li>
<li>对flag的每一个字节填充，填充方式为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = <span class="keyword">lambda</span> m: urandom(<span class="number">8</span>) + m + <span class="string">b&#x27;\x00&#x27;</span> * (ZZ(p).nbits() // <span class="number">8</span> - <span class="built_in">len</span>(m) - <span class="number">8</span> - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>每一次加密生成一个临时密钥nonce，并依据nonce与填充后的m计算sh</li>
<li>计算：</li>
</ul>
<script type="math/tex; mode=display">
Q_i = m_i*R + nonce_i*E + sh_i*C</script><ul>
<li>给出所有Qi坐标，要求还原m</li>
</ul>
<h4 id="还原ecc参数"><a href="#还原ecc参数" class="headerlink" title="还原ecc参数"></a>还原ecc参数</h4><p>第一步肯定是要先找到原曲线的a、b、p参数的，这里我采用消元办法，思路如下：</p>
<p>我们知道椭圆曲线的点满足方程：</p>
<script type="math/tex; mode=display">
y^2 = x^3+ax+b \quad(mod\;p)</script><p>而Qi均为曲线上的点，所以我们取其中前四个点的坐标，就有四组方程：</p>
<script type="math/tex; mode=display">
y_1^2 = x_1^3+ax_1+b \quad(mod\;p)</script><script type="math/tex; mode=display">
y_2^2 = x_2^3+ax_2+b \quad(mod\;p)</script><script type="math/tex; mode=display">
y_3^2 = x_3^3+ax_3+b \quad(mod\;p)</script><script type="math/tex; mode=display">
y_4^2 = x_4^3+ax_4+b \quad(mod\;p)</script><p>要求从四组方程中还原a、b、p，其实跟无参数的LCG很像，主要目的就是消元，求gcd得到p，然后再回到模方程中求解a、b。</p>
<p>消元过程如下，我们取前两组方程：</p>
<script type="math/tex; mode=display">
y_1^2 -  x_1^3 =ax_1+b \quad(mod\;p)</script><script type="math/tex; mode=display">
y_2^2 - x_2^3= ax_2+b \quad(mod\;p)</script><p>作差消掉b：</p>
<script type="math/tex; mode=display">
y_1^2 -  x_1^3 - y_2^2 + x_2^3=ax_1 - ax_2 \quad(mod\;p)</script><p>把a单独提出来：</p>
<script type="math/tex; mode=display">
(y_1^2 -  x_1^3 - y_2^2 + x_2^3)(x_1-x_2)^{-1} = a \quad(mod\;p)</script><p>同理，我们取第二三组方程也能得到：</p>
<script type="math/tex; mode=display">
(y_2^2 -  x_2^3 - y_3^2 + x_3^3)(x_2-x_3)^{-1} = a \quad(mod\;p)</script><p>那么作差就有：</p>
<script type="math/tex; mode=display">
(y_1^2 -  x_1^3 - y_2^2 + x_2^3)(x_1-x_2)^{-1} - (y_2^2 -  x_2^3 - y_3^2 + x_3^3)(x_2-x_3)^{-1} = 0 \quad(mod\;p)</script><p>那么同样再取一组求gcd，并消去小因子就能得到p，得到p过后还原ab就很轻松。</p>
<p>当然，有更直接的梭哈办法就是直接定义在ZZ域上，用四个点的方程求Groebner就可以轻松还原a、b、p参数。</p>
<h4 id="Smart-Attack"><a href="#Smart-Attack" class="headerlink" title="Smart Attack"></a>Smart Attack</h4><p>有了参数后我们就有了原曲线，经过观察与测试可以知道这个曲线有一个很特殊的性质：</p>
<script type="math/tex; mode=display">
E.order() = p</script><p>有这个性质的曲线可以用Smart attack轻松解决离散对数问题，那么接下来的思路就是如何利用DLP来转化问题。</p>
<p>那么首先，我们期望还原的是明文的每个字符mi，想要解决这一点就要从Qi的生成方式入手：</p>
<script type="math/tex; mode=display">
Q_i = m_i*R + nonce_i*E + sh_i*C</script><p>给了多组Qi相关的线性等式，可以想到应该是要造格，但是造格之前我们需要想办法把ECC相关的计算式转到数域上，而由于DLP在这个曲线上能用Smart Attack轻松求解，因此我们可以考虑如下方式，将所以Qi的计算式转化到数域上：</p>
<p>令G为曲线E的生成元，则G的阶等于曲线的阶，在这条曲线上也就等于p。然后我们就可以把Q、R、E、C等点均用生成元的倍点表示如下：</p>
<script type="math/tex; mode=display">
Q_i = d_iG</script><script type="math/tex; mode=display">
R = rG,E=eG,C=cG</script><p>代回到Qi的计算式中，就有：</p>
<script type="math/tex; mode=display">
d_iG = m_i*rG + nonce_i*eG + sh_i*cG</script><p>即：</p>
<script type="math/tex; mode=display">
d_iG = (m_i*r + nonce_i*e + sh_i*c)G</script><p>而由于G的阶就是曲线的阶，因此有：</p>
<script type="math/tex; mode=display">
d_i \equiv m_i*r + nonce_i*e + sh_i*c \quad(mod\;order)</script><p>又因为曲线阶就等于p，所以有：</p>
<script type="math/tex; mode=display">
d_i \equiv m_i*r + nonce_i*e + sh_i*c \quad(mod\;p)</script><p>到这里，我们就完全脱离了曲线，而转化为了一个数域上的问题，也就是知道多组上述等式，如何求解mi。</p>
<h4 id="格"><a href="#格" class="headerlink" title="格"></a>格</h4><p>现在我们有多组如下等式：</p>
<script type="math/tex; mode=display">
d_i \equiv m_i*r + nonce_i*e + sh_i*c \quad(mod\;p)</script><p>而注意到m_i的填充方式很奇怪：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = <span class="keyword">lambda</span> m: urandom(<span class="number">8</span>) + m + <span class="string">b&#x27;\x00&#x27;</span> * (ZZ(p).nbits() // <span class="number">8</span> - <span class="built_in">len</span>(m) - <span class="number">8</span> - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>他对flag逐个字节加密，因此len(m)是1，代入我们计算出的p可以得到，这种方式相当于是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad(m) = urandom(<span class="number">8</span>) + m + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">54</span></span><br></pre></td></tr></table></figure>
<p>而尾缀这些b’\x00’，其实也就相当于把(urandom(8) + m)左移54x8位，其实也就是乘2^432，所以上述等式可以进一步写成：</p>
<script type="math/tex; mode=display">
d_i \equiv m_i*2^{432}r + nonce_i*e + sh_i*c \quad(mod\;p)</script><p>我们把这些等式写成模p下的矩阵乘法的形式，便于我们发现格构造的方法：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   m_1 & nonce_1 &sh_1\\
   m_2 & nonce_2 &sh_2\\
   & ...&\\
   m_{72} & nonce_{72} &sh_{72}\\
   m_{73} & nonce_{73} &sh_{73}\\
  \end{matrix}
  \right)_{73*3}
\left(
 \begin{matrix}
   2^{432}r\\
   e\\
   c\\
  \end{matrix}
  \right)_{3*1}
  =
  \left(
 \begin{matrix}
   d_1\\
   d_1\\
   ...\\
   d_{72}\\
   d_{73}\\
  \end{matrix}
  \right)_{73*1}</script><p>而观察到mi均为9字节的短向量，因此应该可以利用格规约。</p>
<p>做到这里就没思路了，这能怎么造格呢？想了好一会儿也没想到。</p>
<p>然后就去找别的师傅的wp，学习到了一种基于正交格的很妙的解法：</p>
<p><a href="https://blog.csdn.net/qq_41626232/article/details/131861414">巅峰极客2023 Crypto Rosita-CSDN博客</a></p>
<p>这个思路就是，我们首先把上述矩阵方程写作：</p>
<script type="math/tex; mode=display">
M_{73*3}
\left(
 \begin{matrix}
   2^{432}r\\
   e\\
   c\\
  \end{matrix}
  \right)_{3*1}
  =
  D_{73*1}
  \quad(mod\;p)</script><p>然后，我们假设有一个kx73的矩阵R满足下式：</p>
<script type="math/tex; mode=display">
R_{k*73}M_{73*3} = 
\left(
 \begin{matrix}
   0&0&0\\
   &...&\\
   0&0&0\\
  \end{matrix}
  \right)_{k*3}
   \quad(mod\;p)</script><p>这也就是说R与M正交，然后把这个R矩阵同时乘在矩阵方程的两侧：</p>
<script type="math/tex; mode=display">
R_{k*73}M_{73*3}
\left(
 \begin{matrix}
   2^{432}r\\
   e\\
   c\\
  \end{matrix}
  \right)_{3*1}
  =
  R_{k*73}D_{73*1}
   \quad(mod\;p)</script><p>显然就有：</p>
<script type="math/tex; mode=display">
R_{k*73}D_{73*1} =
  \left(
 \begin{matrix}
   0\\
   ...\\
   0\\
  \end{matrix}
  \right)_{k*1}
   \quad(mod\;p)</script><p>也就是说，如果R与M正交，那么R一定满足以下几点：</p>
<ul>
<li><p>R与D也正交</p>
</li>
<li><p>M的三列均在R的右核空间中</p>
</li>
<li>M的第一列是R的右核空间中的一个短向量</li>
</ul>
<p>所以我们就要完成以下的对应目标：</p>
<ul>
<li>找到与M正交的矩阵R</li>
<li>对R的右核空间进行规约得到M的第一列</li>
</ul>
<h5 id="找到R"><a href="#找到R" class="headerlink" title="找到R"></a>找到R</h5><p>由于我们没有M，所以要找到与M正交的矩阵的话，只能通过R与D也正交这一关系来找。为此我们构造如下的格来找到R：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   E&D\\
   0&p\\
  \end{matrix}
  \right)</script><p>其中，E是单位矩阵，D是DLP得到的列向量，p是曲线的阶，这里也正好是曲线的模数。</p>
<p>构造这个格是基于：</p>
<script type="math/tex; mode=display">
R_{k*73}D_{73*1} =
  \left(
 \begin{matrix}
   0\\
   ...\\
   0\\
  \end{matrix}
  \right)_{k*1}
   \quad(mod\;p)</script><p>那么我们对R中的任意一行：</p>
<script type="math/tex; mode=display">
(r_1,r_2,...,r_{73})</script><p>都有：</p>
<script type="math/tex; mode=display">
(r_1,r_2,...,r_{73},t)
\left(
 \begin{matrix}
   E&D\\
   0&p\\
  \end{matrix}
  \right)
  =
  (r_1,r_2,...,r_{73},0)</script><p>因此我们就能用LLL规约出若干短向量，只要规约出的最后一个数字为0，就可以作为R的其中一行加入到R中。所以我们可以对格的最后一列配上一个大系数，从而保证规约出0，这样我们就能从中取70行，得到一个70x73的矩阵R。</p>
<h5 id="求解右核"><a href="#求解右核" class="headerlink" title="求解右核"></a>求解右核</h5><p>我们通过刚才的步骤，找到了一个符合要求的70x73的矩阵R，他满足：</p>
<script type="math/tex; mode=display">
R_{70*73}
\left(
 \begin{matrix}
   m_1 & nonce_1 &sh_1\\
   m_2 & nonce_2 &sh_2\\
   & ...&\\
   m_{72} & nonce_{72} &sh_{72}\\
   m_{73} & nonce_{73} &sh_{73}\\
  \end{matrix}
  \right)_{73*3}
= 
\left(
 \begin{matrix}
   0&0&0\\
   &...&\\
   0&0&0\\
  \end{matrix}
  \right)_{70*3}
   \quad(mod\;p)</script><p>而R的右核空间，指的就是满足Rv=0的所有向量v张成的空间，那么显然，<strong>M的三列均在R的右核空间中，并且M的第一列是R的右核空间中的一个短向量。</strong></p>
<p>那么我们就可以按如下方式找到M的第一列：</p>
<ul>
<li>求解R的右核空间</li>
<li>对R的右核空间进行规约</li>
</ul>
<p>找到M的第一列后，依次取最低字节就可以还原flag。</p>
<p>这里可能会有以下几个问题：</p>
<ul>
<li>为什么不取73行？</li>
</ul>
<p>这是因为，取73行后的R矩阵是满秩的，右核空间是0维，而我们需要一个至少一维的右核进行规约。</p>
<ul>
<li>为什么不取更少的比如60、50行？</li>
</ul>
<p>这是因为，少取若干行之后，右核空间维数也会对应增大，高斯启发式期望的短向量长度会显著减小，从而导致我们的目标向量规约不出。经测试取67以下的就规约不出了。</p>
<ul>
<li>为什么不取71、72行？</li>
</ul>
<p>这一点我也暂时不理解，因为既然规约出最后一列为0，就说明该行与D模p下正交，就应该可以作为R的一行才对。但事实上，只有前70行可以作规约，这也就是说，必须是不配大系数也能规约出的正交行，才能作为R中的一行，这我就暂时没有理解到，如果有明白的师傅欢迎与我交流！</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 recover a,b,p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">points</span>):</span><br><span class="line">    (x1,y1),(x2,y2),(x3,y3),(x4,y4) = points</span><br><span class="line">    t1 = (y2**<span class="number">2</span>-y1**<span class="number">2</span>-x2**<span class="number">3</span>+x1**<span class="number">3</span>)</span><br><span class="line">    t2 = (y3**<span class="number">2</span>-y2**<span class="number">2</span>-x3**<span class="number">3</span>+x2**<span class="number">3</span>)</span><br><span class="line">    t3 = (y4**<span class="number">2</span>-y3**<span class="number">2</span>-x4**<span class="number">3</span>+x3**<span class="number">3</span>)</span><br><span class="line">    k1p = t1*(x3-x2) - t2*(x2-x1)</span><br><span class="line">    k2p = t2*(x4-x3) - t3*(x3-x2)</span><br><span class="line">    k3p = t1*(x4-x3) - t3*(x2-x1)</span><br><span class="line">    p = GCD(k1p,k2p)</span><br><span class="line">    p = GCD(p,k3p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">while</span>(p % i == <span class="number">0</span>):</span><br><span class="line">            p //= i</span><br><span class="line">    a = inverse(x2-x1,p)*t1 % p</span><br><span class="line">    b = (y1**<span class="number">2</span>-x1**<span class="number">3</span>-a*x1) % p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a,b,p</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;E:\题\历届赛题\巅峰极客 2023\Rosita\out.tuo&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    points = <span class="built_in">eval</span>(f.read())</span><br><span class="line">a,b,p = calc(points[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Smart&#x27;s attack</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(Zmod(p),[a,b])</span><br><span class="line">G = E.gens()[<span class="number">0</span>]</span><br><span class="line">d = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="built_in">len</span>(points)):</span><br><span class="line">    d.append(SmartAttack(G,E(points[i]),p))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 LLL</span></span><br><span class="line">L = Matrix(ZZ,<span class="number">74</span>,<span class="number">74</span>)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">73</span>):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = d[i]*K</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = p*K</span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line">R = Matrix(ZZ,<span class="number">70</span>,<span class="number">73</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">70</span>):</span><br><span class="line">    R[i] = res[i][:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">bas = R.right_kernel().basis()</span><br><span class="line">bas = Matrix(ZZ,bas)</span><br><span class="line">res = bas.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    flag += long_to_bytes(<span class="built_in">int</span>(i&amp;<span class="number">0xff</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Congratulations! Your flag is: flag&#123;893d041e-c0a2-3145-5320-cdee7d3c87fb&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="ecdh"><a href="#ecdh" class="headerlink" title="ecdh"></a>ecdh</h3><p>题目来源：强网拟态 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.9</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xc483230557557e3d94b7407f3355b8a5b26bda29119babcb8d72b5a19e10e113</span></span><br><span class="line">a = <span class="number">0xb5ecbb93d4e49fe3c93ad770343ec5ab70131151151fcc830f6c658223c92e1d</span></span><br><span class="line">b = <span class="number">0xb0d9363d1828cfa7c2aba27b0d483fe808637adf6e3a0a5bbc6cb53fdd1e4d85</span></span><br><span class="line"></span><br><span class="line">Px = <span class="number">0xe9592b5211516c197f0fd31cf0e28201ea0bcc67f7356d8732ded234045259e3</span></span><br><span class="line">Py = <span class="number">0xe825e2821cc58e97816ca9877b7604b05a9a4bbc03110bc2124be49eb2718c23</span></span><br><span class="line">P = (Px, Py)</span><br><span class="line">zero = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">MENU = <span class="string">rb&#x27;&#x27;&#x27;1.sign</span></span><br><span class="line"><span class="string">2.get flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">p1, p2</span>):</span><br><span class="line">    <span class="keyword">if</span> p1 == zero:</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    <span class="keyword">if</span> p2 == zero:</span><br><span class="line">        <span class="keyword">return</span> p1</span><br><span class="line">    p1x, p1y = p1</span><br><span class="line">    p2x, p2y = p2</span><br><span class="line">    <span class="keyword">if</span> p1x == p2x <span class="keyword">and</span> (p1y != p2y <span class="keyword">or</span> p1y == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> zero</span><br><span class="line">    <span class="keyword">if</span> p1x == p2x:</span><br><span class="line">        tmp = (<span class="number">3</span> * p1x * p1x + a) * invert(<span class="number">2</span> * p1y, p) % p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = (p2y - p1y) * invert(p2x - p1x, p) % p</span><br><span class="line">    x = (tmp * tmp - p1x - p2x) % p</span><br><span class="line">    y = (tmp * (p1x - x) - p1y) % p</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">p, n</span>):</span><br><span class="line">    r = zero</span><br><span class="line">    tmp = p</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            r = add(r, tmp)</span><br><span class="line">        n, tmp = n &gt;&gt; <span class="number">1</span>, add(tmp, tmp)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">1024</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">32</span>))</span><br><span class="line">        alphabet = string.ascii_letters + string.digits</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join(random.choices(alphabet, k=<span class="number">32</span>))</span><br><span class="line">        hash_value = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.send(<span class="string">f&#x27;sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;hash_value&#125;</span>&#x27;</span>.encode())</span><br><span class="line">        nonce = self.recv(prompt=<span class="string">b&#x27;Give me XXXX &gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nonce) != <span class="number">4</span> <span class="keyword">or</span> sha256(nonce + proof[<span class="number">4</span>:].encode()).hexdigest() != hash_value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">            signal.alarm(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.send(<span class="string">b&#x27;\nWrong!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            self.secret = random.randint(<span class="number">0</span>, p)</span><br><span class="line">            Q = mul(P, self.secret)</span><br><span class="line"></span><br><span class="line">            self.send(<span class="string">b&#x27;p: &#x27;</span> + <span class="built_in">str</span>(p).encode())</span><br><span class="line">            self.send(<span class="string">b&#x27;a: &#x27;</span> + <span class="built_in">str</span>(a).encode())</span><br><span class="line">            self.send(<span class="string">b&#x27;P: &#x27;</span> + self.point_to_string(P).encode())</span><br><span class="line">            self.send(<span class="string">b&#x27;Q: &#x27;</span> + self.point_to_string(Q).encode())</span><br><span class="line"></span><br><span class="line">            signal.alarm(<span class="number">300</span>)</span><br><span class="line">		</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">                self.send(MENU, newline=<span class="literal">False</span>)</span><br><span class="line">                choice = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;&gt; &#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                    self.sign()</span><br><span class="line">                <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">                    self.get_flag()</span><br><span class="line">                <span class="keyword">else</span>:                </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            self.send(<span class="string">b&#x27;Bye!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.send(<span class="string">b&#x27;\nTimeout!&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self.send(<span class="string">b&#x27;Something Wrong!&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">point_to_string</span>(<span class="params">p</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;(<span class="subst">&#123;p[<span class="number">0</span>]&#125;</span>, <span class="subst">&#123;p[<span class="number">1</span>]&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self</span>):</span><br><span class="line">        self.send(<span class="string">b&#x27;Give me your key:&#x27;</span>)</span><br><span class="line">        x = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;X &gt; &#x27;</span>))</span><br><span class="line">        y = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;Y &gt; &#x27;</span>))</span><br><span class="line">        point = (x, y)</span><br><span class="line">        result = mul(point, self.secret)</span><br><span class="line">        self.send(<span class="string">b&#x27;result: &#x27;</span> + self.point_to_string(result).encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">int</span>(self.recv(prompt=<span class="string">b&#x27;Give me the secret &gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> s == self.secret:</span><br><span class="line">            self.send(<span class="string">b&#x27;Here is your flag:&#x27;</span>)</span><br><span class="line">            self.send(FLAG)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;wrong.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10002</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>题目代码比较长，但其实主要任务很容易描述：</p>
<ul>
<li>生成一条给定参数的椭圆曲线</li>
<li>生成一个(0,p)之间的随机数当作私钥secret</li>
<li>通过proof后，有45次交互机会。输入1，可以输入一个点的坐标，并获得他的secret倍点坐标；输入2，可以核验secret值，如果输入的值等于secret则得到flag</li>
</ul>
<p>因此目标明确：想办法构造一些点，并利用输入1的交互返回的倍点来求解secret的有关信息。</p>
<p>首先检查题目椭圆曲线的几个参数，可以发现这个曲线并不是易受攻击的椭圆曲线(比如阶光滑、阶为p之类)，那么直接求解DLP肯定是不行的。</p>
<p>然后注意到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.send(<span class="string">b&#x27;p: &#x27;</span> + <span class="built_in">str</span>(p).encode())</span><br><span class="line">self.send(<span class="string">b&#x27;a: &#x27;</span> + <span class="built_in">str</span>(a).encode())</span><br><span class="line">self.send(<span class="string">b&#x27;P: &#x27;</span> + self.point_to_string(P).encode())</span><br><span class="line">self.send(<span class="string">b&#x27;Q: &#x27;</span> + self.point_to_string(Q).encode())</span><br></pre></td></tr></table></figure>
<p>这是通过proof后靶机会发送给我们的信息，可以注意到一个隐晦的提示：为什么不发送参数b给我们？</p>
<p>要知道，参数b其实是题目上面有的。结合题目任务：我们可以输入1，得到自定义的一个点的倍点坐标。紧接着就会注意到：<strong>这里根本没有对输入的点在不在曲线上进行检查。</strong></p>
<p>也就是说，我们完全可以输入一个不在题目曲线上的点，靶机端仍然会照常进行倍点运算并返回给我们倍点坐标。那么如何利用这一点呢？</p>
<p>熟悉倍点计算过程的话应该会知道，倍点的计算其实和参数b没有一点关系，也就是说，我们可以自选一个合适的b’，然后构造一条新的曲线：</p>
<script type="math/tex; mode=display">
E': \quad y^2 = x^3 + ax + b' \quad(mod\;p)</script><p>也就是说，由于倍点与b无关，我们输入给靶机这条曲线上的点的话，靶机计算出来的其实也是这条曲线上的倍点。因此我们现在就可以想办法改变b’，从而找到一条合适的曲线。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>什么样的参数b’才算合适呢，首先能想到的肯定是找到的b’应该使曲线的DLP易求。就比如说，假如我们可以找到b’使得曲线E’的阶是光滑的，那么就可以输入一个E’的生成元，并很轻松地由倍点求解DLP得到secret；又或者我们能找到b’使得E’是anomalous curve，也就是E’.order()=p，那么就可以用Smart Attack攻击等等。</p>
<p>大致思路如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">p = <span class="number">0xc483230557557e3d94b7407f3355b8a5b26bda29119babcb8d72b5a19e10e113</span></span><br><span class="line">a = <span class="number">0xb5ecbb93d4e49fe3c93ad770343ec5ab70131151151fcc830f6c658223c92e1d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    b = i</span><br><span class="line">    temp = factor(EllipticCurve(GF(p), [a, b]).order())</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">    maxp = [<span class="built_in">int</span>(p) <span class="keyword">for</span> p, e <span class="keyword">in</span> temp][-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(maxp &lt; <span class="number">2</span> ^ <span class="number">40</span>):</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<p>但是实际这样做的话，会发现由于order比较大，所以factor执行的很慢，因此很难在短时间内找到一个符合条件的b’。所以要想别的更通用一点的办法，毕竟我们其实有多次交互机会可以用。</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>可以想到用CRT来解题，我们假设取了某个b’，得到的E’的阶order是：</p>
<script type="math/tex; mode=display">
order = p_1^{k_1}p_2^{k_2}...p_n^{k_n}</script><p>其中，因子分解按从小到大的递增顺序排列，那么假设我们用factordb获取到其中的一个小素因子a1。(较小但是又不那么小，比如3347、3517这种)</p>
<p>然后，我们取E’的一个生成元G，G的阶就等于曲线的阶order，然后我们获取以下点：</p>
<script type="math/tex; mode=display">
G_1 = \frac{order}{a_1}*G</script><p>那么G1是a1阶元素，这是因为：</p>
<script type="math/tex; mode=display">
a_1G_1 = a_1*\frac{order}{a_1}*G = order*G = O</script><p>而a1是我们分解order后得到的一个小素因子，那么我们发送G1给靶机得到Q1，然后就可以在(0,a1)内爆破出对应的倍数d1，d1满足：</p>
<script type="math/tex; mode=display">
d_1 = secret \quad(mod\;a_1)</script><p>然后我们改变b，并如此重复多次，就可以CRT得到secret在更大模数下的值。也就是说，我们不断调整b，并选取order的一些小因子去求secret模这些小因子下的结果，只要能使得最后的模数乘积大于p，我们就能得到secret的原本值了。</p>
<p>然后还有一个问题就是限时300s且只有44次输入1的交互，所以选的素因子最佳的就是大小为几千的数，选太大会加长爆破时间，选太小可能会注意不到模数重复，并且可能凑不够256比特。同时proof过的太慢的话可以掐掉重来(不过选的数字恰当的话不会这么紧)。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Pwn4Sage.pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">28</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">33</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 Get parameters</span></span><br><span class="line">r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28809</span>)</span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">b&quot;XXXX &gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">3</span>:])</span><br><span class="line">a = <span class="built_in">int</span>(r.recvline().strip().decode()[<span class="number">3</span>:])</span><br><span class="line">P = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">3</span>:])</span><br><span class="line">Q = <span class="built_in">eval</span>(r.recvline().strip().decode()[<span class="number">3</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 Get secret % num_i</span></span><br><span class="line">B = [(<span class="number">5</span>,<span class="number">12841</span>),(<span class="number">9</span>,<span class="number">9463</span>),(<span class="number">12</span>,<span class="number">1567</span>,<span class="number">2371</span>,<span class="number">5981</span>),(<span class="number">14</span>,<span class="number">7417</span>),(<span class="number">16</span>,<span class="number">3413</span>),(<span class="number">27</span>,<span class="number">4127</span>),(<span class="number">28</span>,<span class="number">9901</span>),(<span class="number">36</span>,<span class="number">8581</span>),(<span class="number">41</span>,<span class="number">5659</span>),(<span class="number">45</span>, <span class="number">5477</span>,<span class="number">7057</span>),(<span class="number">54</span>,<span class="number">1109</span>),(<span class="number">61</span>,<span class="number">409</span>),(<span class="number">64</span>,<span class="number">7243</span>),(<span class="number">66</span>,<span class="number">1049</span>),(<span class="number">67</span>,<span class="number">3469</span>),(<span class="number">68</span>,<span class="number">1979</span>),(<span class="number">69</span>,<span class="number">1987</span>,<span class="number">6967</span>),(<span class="number">73</span>,<span class="number">1873</span>),(<span class="number">77</span>,<span class="number">1153</span>)]</span><br><span class="line">modnum = []</span><br><span class="line">secret = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="built_in">len</span>(B)):</span><br><span class="line">	b = B[i][<span class="number">0</span>]</span><br><span class="line">	E = EllipticCurve(Zmod(p),[a,b])</span><br><span class="line">	order = E.order()</span><br><span class="line">	G = E.gens()[<span class="number">0</span>]</span><br><span class="line">	factors = B[i][<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> factors:</span><br><span class="line">		r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">		r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">		sendG = (order//j)*G</span><br><span class="line">		modnum.append(j)</span><br><span class="line">		sendGx = <span class="built_in">int</span>(sendG[<span class="number">0</span>])</span><br><span class="line">		sendGy = <span class="built_in">int</span>(sendG[<span class="number">1</span>])</span><br><span class="line">		r.sendline(<span class="built_in">str</span>(sendGx).encode())</span><br><span class="line">		r.sendline(<span class="built_in">str</span>(sendGy).encode())</span><br><span class="line"></span><br><span class="line">		r.recvuntil(<span class="string">b&#x27;result: &#x27;</span>)</span><br><span class="line">		temp = <span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line">		Qx = <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">		Qy = <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br><span class="line">		Q = E(Qx,Qy)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">			<span class="keyword">if</span>(k*sendG == Q):</span><br><span class="line">				secret.append(k)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 Get flag using CRT</span></span><br><span class="line">secret1 = crt(modnum,secret)[<span class="number">0</span>]	</span><br><span class="line">r.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;the secret &gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(secret1).encode())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;dabf6daf-d95d-4764-8af0-b5fa9b8dc442&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="Tiny-ECC"><a href="#Tiny-ECC" class="headerlink" title="Tiny ECC"></a>Tiny ECC</h3><p>题目来源：CryptoCTF 2021</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># In the name of Allah</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mini_ecdsa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tonelli_shanks</span>(<span class="params">n, p</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">pow</span>(n, <span class="built_in">int</span>((p-<span class="number">1</span>)//<span class="number">2</span>), p) == <span class="number">1</span>:</span><br><span class="line">			s = <span class="number">1</span></span><br><span class="line">			q = <span class="built_in">int</span>((p-<span class="number">1</span>)//<span class="number">2</span>)</span><br><span class="line">			<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">				<span class="keyword">if</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">					q = q // <span class="number">2</span></span><br><span class="line">					s += <span class="number">1</span></span><br><span class="line">				<span class="keyword">else</span>:</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">			<span class="keyword">if</span> s == <span class="number">1</span>:</span><br><span class="line">				r1 = <span class="built_in">pow</span>(n, <span class="built_in">int</span>((p+<span class="number">1</span>)//<span class="number">4</span>), p)</span><br><span class="line">				r2 = p - r1</span><br><span class="line">				<span class="keyword">return</span> r1, r2</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				z = <span class="number">2</span></span><br><span class="line">				<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">					<span class="keyword">if</span> <span class="built_in">pow</span>(z, <span class="built_in">int</span>((p-<span class="number">1</span>)//<span class="number">2</span>), p) == p - <span class="number">1</span>:</span><br><span class="line">						c = <span class="built_in">pow</span>(z, q, p)</span><br><span class="line">						<span class="keyword">break</span></span><br><span class="line">					<span class="keyword">else</span>:</span><br><span class="line">						z += <span class="number">1</span></span><br><span class="line">				r = <span class="built_in">pow</span>(n, <span class="built_in">int</span>((q+<span class="number">1</span>)//<span class="number">2</span>), p)</span><br><span class="line">				t = <span class="built_in">pow</span>(n, q, p)</span><br><span class="line">				m = s</span><br><span class="line">				<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">					<span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">						r1 = r</span><br><span class="line">						r2 = p - r1</span><br><span class="line">						<span class="keyword">return</span> r1, r2</span><br><span class="line">					<span class="keyword">else</span>:</span><br><span class="line">						i = <span class="number">1</span></span><br><span class="line">						<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">							<span class="keyword">if</span> <span class="built_in">pow</span>(t, <span class="number">2</span>**i, p) == <span class="number">1</span>:</span><br><span class="line">								<span class="keyword">break</span></span><br><span class="line">							<span class="keyword">else</span>:</span><br><span class="line">								i += <span class="number">1</span></span><br><span class="line">						b = <span class="built_in">pow</span>(c, <span class="number">2</span>**(m-i-<span class="number">1</span>), p)</span><br><span class="line">						r = r * b % p</span><br><span class="line">						t = t * b ** <span class="number">2</span> % p</span><br><span class="line">						c = b ** <span class="number">2</span> % p</span><br><span class="line">						m = i</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_point</span>(<span class="params">p, a, b</span>):</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		gx = getRandomRange(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">		n = (gx**<span class="number">3</span> + a*gx + b) % p</span><br><span class="line">		gy = tonelli_shanks(n, p)</span><br><span class="line">		<span class="keyword">if</span> gy == <span class="literal">False</span>:</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> (gx, gy[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">	pr(*args)</span><br><span class="line">	quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">*args</span>):</span><br><span class="line">	s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">	sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sc</span>():</span><br><span class="line">	<span class="keyword">return</span> sys.stdin.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">	border = <span class="string">&quot;+&quot;</span></span><br><span class="line">	pr(border*<span class="number">72</span>)</span><br><span class="line">	pr(border, <span class="string">&quot;  Dual ECC means two elliptic curve with same coefficients over the &quot;</span>, border)</span><br><span class="line">	pr(border, <span class="string">&quot;  different fields or ring! You should calculate the discrete log   &quot;</span>, border)</span><br><span class="line">	pr(border, <span class="string">&quot;  in dual ECCs. So be smart in choosing the first parameters! Enjoy!&quot;</span>, border)</span><br><span class="line">	pr(border*<span class="number">72</span>)</span><br><span class="line"></span><br><span class="line">	bool_coef, bool_prime, nbit = <span class="literal">False</span>, <span class="literal">False</span>, <span class="number">128</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		pr(<span class="string">f&quot;| Options: \n|\t[C]hoose the <span class="subst">&#123;nbit&#125;</span>-bit prime p \n|\t[A]ssign the coefficients \n|\t[S]olve DLP \n|\t[Q]uit&quot;</span>)</span><br><span class="line">		ans = sc().lower()</span><br><span class="line">		<span class="keyword">if</span> ans == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">			pr(<span class="string">&#x27;| send the coefficients a and b separated by comma: &#x27;</span>)</span><br><span class="line">			COEFS = sc()</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				a, b = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> COEFS.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				die(<span class="string">&#x27;| your coefficients are not valid, Bye!!&#x27;</span>)</span><br><span class="line">			<span class="keyword">if</span> a*b == <span class="number">0</span>:</span><br><span class="line">				die(<span class="string">&#x27;| Kidding me?!! a*b should not be zero!!&#x27;</span>)</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				bool_coef = <span class="literal">True</span></span><br><span class="line">		<span class="keyword">elif</span> ans == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">			pr(<span class="string">&#x27;| send your prime: &#x27;</span>)</span><br><span class="line">			p = sc()</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				p = <span class="built_in">int</span>(p)</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				die(<span class="string">&#x27;| your input is not valid :(&#x27;</span>)</span><br><span class="line">			<span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() == nbit <span class="keyword">and</span> isPrime(<span class="number">2</span>*p + <span class="number">1</span>):</span><br><span class="line">				q = <span class="number">2</span>*p + <span class="number">1</span></span><br><span class="line">				bool_prime = <span class="literal">True</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				die(<span class="string">f&#x27;| your integer p is not <span class="subst">&#123;nbit&#125;</span>-bit prime or 2p + 1 is not prime, bye!!&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> ans == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> bool_coef == <span class="literal">False</span>:</span><br><span class="line">				pr(<span class="string">&#x27;| please assign the coefficients.&#x27;</span>)</span><br><span class="line">			<span class="keyword">if</span> bool_prime == <span class="literal">False</span>:</span><br><span class="line">				pr(<span class="string">&#x27;| please choose your prime first.&#x27;</span>)</span><br><span class="line">			<span class="keyword">if</span> bool_prime <span class="keyword">and</span> bool_coef:</span><br><span class="line">				Ep = CurveOverFp(<span class="number">0</span>, a, b, p)</span><br><span class="line">				Eq = CurveOverFp(<span class="number">0</span>, a, b, q)</span><br><span class="line"></span><br><span class="line">				xp, yp = random_point(p, a, b)</span><br><span class="line">				P = Point(xp, yp)</span><br><span class="line"></span><br><span class="line">				xq, yq = random_point(q, a, b)</span><br><span class="line">				Q = Point(xq, yq)</span><br><span class="line"></span><br><span class="line">				k = getRandomRange(<span class="number">1</span>, p &gt;&gt; <span class="number">1</span>)</span><br><span class="line">				kP = Ep.mult(P, k)</span><br><span class="line"></span><br><span class="line">				l = getRandomRange(<span class="number">1</span>, q &gt;&gt; <span class="number">1</span>)</span><br><span class="line">				lQ = Eq.mult(Q, l)</span><br><span class="line">				pr(<span class="string">&#x27;| We know that: &#x27;</span>)</span><br><span class="line">				pr(<span class="string">f&#x27;| P = <span class="subst">&#123;P&#125;</span>&#x27;</span>)</span><br><span class="line">				pr(<span class="string">f&#x27;| k*P = <span class="subst">&#123;kP&#125;</span>&#x27;</span>)</span><br><span class="line">				pr(<span class="string">f&#x27;| Q = <span class="subst">&#123;Q&#125;</span>&#x27;</span>)</span><br><span class="line">				pr(<span class="string">f&#x27;| l*Q = <span class="subst">&#123;lQ&#125;</span>&#x27;</span>)</span><br><span class="line">				pr(<span class="string">&#x27;| send the k and l separated by comma: &#x27;</span>)</span><br><span class="line">				PRIVS = sc()</span><br><span class="line">				<span class="keyword">try</span>:</span><br><span class="line">					priv, qriv = [<span class="built_in">int</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> PRIVS.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">				<span class="keyword">except</span>:</span><br><span class="line">					die(<span class="string">&#x27;| your input is not valid, Bye!!&#x27;</span>)</span><br><span class="line">				<span class="keyword">if</span> priv == k <span class="keyword">and</span> qriv == l:</span><br><span class="line">					die(<span class="string">f&#x27;| Congrats, you got the flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line">				<span class="keyword">else</span>:</span><br><span class="line">					die(<span class="string">&#x27;| sorry, your keys are not correct! Bye!!!&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">			die(<span class="string">&quot;Quitting ...&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			die(<span class="string">&quot;Bye ...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p>题目比较长，但是其实提取出来的任务还是很清楚，靶机提供给了我们三个有用选项：</p>
<ul>
<li>输入a，可以提供ECC的a、b参数，这里要求a、b均不为0</li>
<li>输入c，可以提供ECC的模数p，这里要求p是一个128比特的素数且q=2p+1也是一个素数</li>
<li>在参数均给定后，输入s，题目会用输入的参数生成以下两条曲线：</li>
</ul>
<script type="math/tex; mode=display">
y^2 = x^3 + ax + b \quad(mod\; p)</script><script type="math/tex; mode=display">
y^2 = x^3 + ax + b \quad(mod\; q)</script><ul>
<li>并且，题目会分别取这两条曲线上的随机点P、Q，并生成两个随机数k、l，计算倍点kP、lQ，并给出四个点的坐标。如果能够计算出正确的k、l并提交，我们就能获取flag</li>
</ul>
<p>那么其实也就是解一个离散对数问题，而ECC的所有参数都是我们可以自定义的，那么可操作性非常大。这里我阐述两种思路。</p>
<h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p>最直接的思路就是：直接爆破p、q、a、b，使得两条曲线均光滑，这样我们就可以pohlig-hellman轻松解决DLP。这一部分实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>(<span class="params">nbits</span>):</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        a = getPrime(<span class="number">16</span>)</span><br><span class="line">        b = getPrime(<span class="number">16</span>)</span><br><span class="line">        p = <span class="built_in">int</span>(getPrime(<span class="number">128</span>))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="number">2</span>*p + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(isPrime(q)):</span><br><span class="line">            Ep = EllipticCurve(GF(p),[a,b])</span><br><span class="line">            Eq = EllipticCurve(GF(q),[a,b])</span><br><span class="line">            factorsEp = <span class="built_in">list</span>(factor(Ep.order()))</span><br><span class="line">            factorsEq = <span class="built_in">list</span>(factor(Eq.order()))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">int</span>(factorsEp[-<span class="number">1</span>][<span class="number">0</span>]).bit_length(),<span class="built_in">int</span>(factorsEq[-<span class="number">1</span>][<span class="number">0</span>]).bit_length())</span><br><span class="line">            <span class="keyword">if</span>(factorsEp[-<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="number">2</span>^<span class="number">35</span> <span class="keyword">and</span> factorsEq[-<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="number">2</span>^<span class="number">35</span>):</span><br><span class="line">                <span class="built_in">print</span>(factorsEp)</span><br><span class="line">                <span class="built_in">print</span>(factorsEq)</span><br><span class="line">                <span class="keyword">return</span> a,b,p,q</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>这个方法确实用一小段时间就能找到一组合理值。</p>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p>这个方法我是看maple的博客看到的，原wp指路：</p>
<p><a href="https://blog.maple3142.net/2021/08/01/cryptoctf-2021-writeups/?highlight=crypto#tiny-ecc">Crypto CTF 2021 WriteUps | 廢文集中區 (maple3142.net)</a></p>
<p>也就是说，在输入a、b时，他只检查a、b均不为0.并且他的椭圆曲线实现中不会检查曲线是singular curve(4a^3+27b^2=0)的情况(而sage中会)，所以我们可以令a，b均等于pq，这样两条曲线就分别是：</p>
<script type="math/tex; mode=display">
y^2 = x^3 \quad(mod\;p)</script><script type="math/tex; mode=display">
y^2 = x^3 \quad(mod\;q)</script><p>而这样的singular curve可以作椭圆曲线加法群中的点到有限域中的数的映射：</p>
<script type="math/tex; mode=display">
(x,y) \rightarrow \frac{y}{x}</script><p>因此可以直接求解逆元求解离散对数问题。而其实取其他singular curve的参数，我们同样可以找到映射，但是肯定没有这个这么简单。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Pwn4Sage.pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>(<span class="params">nbits</span>):</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        a = getPrime(<span class="number">16</span>)</span><br><span class="line">        b = getPrime(<span class="number">16</span>)</span><br><span class="line">        p = <span class="built_in">int</span>(getPrime(<span class="number">128</span>))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="number">2</span>*p + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(isPrime(q)):</span><br><span class="line">            Ep = EllipticCurve(GF(p),[a,b])</span><br><span class="line">            Eq = EllipticCurve(GF(q),[a,b])</span><br><span class="line">            factorsEp = <span class="built_in">list</span>(factor(Ep.order()))</span><br><span class="line">            factorsEq = <span class="built_in">list</span>(factor(Eq.order()))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">int</span>(factorsEp[-<span class="number">1</span>][<span class="number">0</span>]).bit_length(),<span class="built_in">int</span>(factorsEq[-<span class="number">1</span>][<span class="number">0</span>]).bit_length())</span><br><span class="line">            <span class="keyword">if</span>(factorsEp[-<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="number">2</span>^<span class="number">35</span> <span class="keyword">and</span> factorsEq[-<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="number">2</span>^<span class="number">35</span>):</span><br><span class="line">                <span class="built_in">print</span>(factorsEp)</span><br><span class="line">                <span class="built_in">print</span>(factorsEq)</span><br><span class="line">                <span class="keyword">return</span> a,b,p,q</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28697</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 send p</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;c&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;prime:&quot;</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(getPrime(<span class="number">128</span>))</span><br><span class="line">    q = <span class="built_in">int</span>(<span class="number">2</span>*p+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(isPrime(q)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">r.sendline(<span class="built_in">str</span>(p).encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 send a,b</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;by comma:&quot;</span>)</span><br><span class="line">a = p*q</span><br><span class="line">b = p*q</span><br><span class="line">r.sendline(<span class="built_in">str</span>(a).encode() + <span class="string">b&quot;,&quot;</span> + <span class="built_in">str</span>(b).encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 get point</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;[Q]uit&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&quot;s&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot; = (&quot;</span>)</span><br><span class="line">P = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + r.recvline().strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">b&quot; = (&quot;</span>)</span><br><span class="line">kP = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + r.recvline().strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">b&quot; = (&quot;</span>)</span><br><span class="line">Q = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + r.recvline().strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">b&quot; = (&quot;</span>)</span><br><span class="line">lQ = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + r.recvline().strip().decode())</span><br><span class="line">r.recvuntil(<span class="string">b&quot;comma: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part4 solveDLP Getflag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mapping</span>(<span class="params">point,prime</span>):</span><br><span class="line">    x = point[<span class="number">0</span>]</span><br><span class="line">    y = point[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> y*inverse(x,prime) % prime</span><br><span class="line">map_P = mapping(P,p)</span><br><span class="line">map_kP = mapping(kP,p)</span><br><span class="line">map_Q = mapping(Q,q)</span><br><span class="line">map_lQ = mapping(lQ,q)</span><br><span class="line"></span><br><span class="line">k = inverse(map_kP,p)*map_P % p</span><br><span class="line">l = inverse(map_lQ,q)*map_Q % q</span><br><span class="line">r.sendline(<span class="built_in">str</span>(k).encode() + <span class="string">b&quot;,&quot;</span> + <span class="built_in">str</span>(l).encode())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;c375f851-5f15-438d-9726-fd20b8903ebe&#125;</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto趣题-随机数</title>
    <url>/post/d5230381.html</url>
    <content><![CDATA[<p>该文章主要记录一些随机数相关的趣题</p>
<span id="more"></span>
<h3 id="WeakRandom"><a href="#WeakRandom" class="headerlink" title="WeakRandom"></a>WeakRandom</h3><p>题目来源：强网拟态 2022</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os, random, hashlib, string</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeakRandom</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed,n,s</span>):</span><br><span class="line">        self.x = seed</span><br><span class="line">        self.n = n</span><br><span class="line">        self.s = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = <span class="built_in">int</span>((self.x ** <span class="number">2</span>) // (<span class="number">10</span> ** (self.s // <span class="number">2</span>))) % self.n</span><br><span class="line">        self.x = x</span><br><span class="line">        high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Give me XXXX:&quot;</span>)</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    alarm(<span class="number">60</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    alarm(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the predict game!&quot;</span>)</span><br><span class="line">    n = <span class="number">10000000000</span></span><br><span class="line">    s = <span class="number">4</span></span><br><span class="line">    seed = os.urandom(<span class="number">4</span>)</span><br><span class="line">    seed = <span class="built_in">int</span>.from_bytes(seed,byteorder = <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    r = WeakRandom(seed,n,s)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x = r.<span class="built_in">next</span>()</span><br><span class="line">            guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please your guess : &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> guess == x:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Fail! The number is <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> count &gt;= <span class="number">20</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;You win! The flag is : <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>题目内容如下：</p>
<ul>
<li>通过proof后，开始限时100s</li>
<li>随机生成4字节作为seed，并初始化一个WeakRandom()对象r</li>
<li>有一百次机会进行随机数猜测，猜错的话，靶机会返回本次的正确值，并生成下一个随机数</li>
<li>一百次中猜对20次就能得到flag</li>
</ul>
<p>那么分析一下这个WeakRandom()如何产生随机数的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WeakRandom</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seed,n,s</span>):</span><br><span class="line">        self.x = seed</span><br><span class="line">        self.n = n</span><br><span class="line">        self.s = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = <span class="built_in">int</span>((self.x ** <span class="number">2</span>) // (<span class="number">10</span> ** (self.s // <span class="number">2</span>))) % self.n</span><br><span class="line">        self.x = x</span><br><span class="line">        high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>可以看到，每次调用next，实现的是以下步骤：</p>
<ul>
<li><p>计算 </p>
<script type="math/tex; mode=display">
x = int(\frac{x^2}{100}) \quad (mod\;n)</script></li>
<li><p>取x的sha256值，并右移16位后取低十六位，作为result高位</p>
</li>
<li><p>取x的低十六位作为result低位</p>
</li>
<li><p>返回result</p>
</li>
</ul>
<p>而每次随机数迭代其实也就是与x有关，所以我们如果能获得某一次的x，就能获得这一次之后的所有result，就能准确预测随机数了。</p>
<p>而由题目知道，每一次的x都会模n，也就是说x其实是一个小于n的数，而由每一次返回的result又可以知道x的低16位，那么x的未知部分其实就只有约 n/(2^16) ，可以计算出这个数的数量级为2^18，在可以爆破的范围内。而爆破的依据就是当次返回result的高位，具体来说就是：</p>
<ul>
<li>先随便给靶机传一个错误的result，得到第一次的正确result</li>
<li>得到的result的低16位也即为x的低16位</li>
<li>爆破x的高18位，爆破方式为：将需爆破的x高位与已知的x低位拼接为完整x，然后用next中high的计算方法计算出对应的high，若计算出的high与实际result高16位相等，则本次x即为可能的解</li>
</ul>
<p>而实际上每一次x可能会有多组解，不过一般也就3、4个，从中随便选一个往后计算随机数就行，如果不对就重新连接靶机再重复上述流程即可。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">	table = string.digits + string.ascii_letters</span><br><span class="line">	temp = r.recvuntil(<span class="string">b&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">	temp = r.recvline()</span><br><span class="line">	suffix = temp[:<span class="number">16</span>].decode()</span><br><span class="line">	hex1 = temp[<span class="number">20</span>:].strip().decode()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">				<span class="keyword">for</span> m <span class="keyword">in</span> table:</span><br><span class="line">					temp1 = i+j+k+m</span><br><span class="line">					<span class="keyword">if</span>(sha256((temp1+suffix).encode()).hexdigest() == hex1):</span><br><span class="line">						r.sendline(temp1.encode())</span><br><span class="line">						<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">x</span>):</span><br><span class="line">    x = <span class="built_in">int</span>((x ** <span class="number">2</span>) // (<span class="number">10</span> ** (s // <span class="number">2</span>))) % n</span><br><span class="line">    high = (<span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">    low = x &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">    result = high &lt;&lt; <span class="number">16</span> | low</span><br><span class="line">    <span class="keyword">return</span> (x,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    r = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>, <span class="number">28469</span>)</span><br><span class="line">    proof_of_work()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#guess</span></span><br><span class="line">    <span class="comment">#part1 get_first_result</span></span><br><span class="line">    r.recvuntil(<span class="string">b&quot;guess : &quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;number is &quot;</span>)</span><br><span class="line">    result = <span class="built_in">int</span>(r.recvline().strip().decode())</span><br><span class="line">    x = result</span><br><span class="line">    n = <span class="number">10000000000</span></span><br><span class="line">    s = <span class="number">4</span></span><br><span class="line">    <span class="built_in">hash</span> = x &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // (<span class="number">2</span>**<span class="number">16</span>)):</span><br><span class="line">        temp = i*(<span class="number">2</span>**<span class="number">16</span>) + (x &amp; (<span class="number">2</span>**<span class="number">16</span>-<span class="number">1</span>))</span><br><span class="line">        high = (<span class="built_in">int</span>(sha256(<span class="built_in">str</span>(temp).encode()).hexdigest(),<span class="number">16</span>) &gt;&gt; <span class="number">16</span>) &amp; (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(high == <span class="built_in">hash</span>):</span><br><span class="line">            x = temp</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2 get_subsequent_result</span></span><br><span class="line">    right = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        x,result = <span class="built_in">next</span>(x)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(result).encode())</span><br><span class="line">        temp = r.recvline()</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&quot;Success!&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp):</span><br><span class="line">            right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(right == <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(r.recvline())</span><br><span class="line">        exit()	</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;b41d8883-e328-48a2-8909-7454d57eee62&#125;</span></span><br></pre></td></tr></table></figure>
<p>而实际上调试过程中可以发现一个非预期解法，测试时，可以发现靶机有时会返回两个很特殊的数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">670760960</span></span><br><span class="line"><span class="number">3587999844</span></span><br></pre></td></tr></table></figure>
<p>这两个数字特殊在哪里呢？一旦某次计算出的结果result是这两个值，那么根据next的计算过程，之后的result一定也会是这两个值。也就是说我们只要反复重连靶机，不断提交这两个数的其中一个，也是有机会拿到flag的，并且从测试过程来看这个机会并不小。</p>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>NSSCTF-2nd-wp-crypto</title>
    <url>/post/39588.html</url>
    <content><![CDATA[<p>这次crypto题目总体难度不大，重点是对一些基础知识的理解运用。</p>
<span id="more"></span>
<h2 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h2><p>题目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length()&lt;<span class="number">200</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">kbits = <span class="number">103</span></span><br><span class="line">m = (m &gt;&gt; kbits) &lt;&lt; kbits</span><br><span class="line">Mod = getPrime(<span class="number">1024</span>)</span><br><span class="line">hint1 = (<span class="number">2021</span>-<span class="number">2023</span>*m) % Mod</span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">2023</span>, Mod)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint1 =&#x27;</span>,hint1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint2 =&#x27;</span>,hint2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = ...</span></span><br><span class="line"><span class="string">c = ...</span></span><br><span class="line"><span class="string">hint1 = ...</span></span><br><span class="line"><span class="string">hint2 = ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有以下信息:</p>
<ul>
<li>m.bit_length()&lt;200 , 说明明文较小</li>
<li>kbits = 103 , m = (m &gt;&gt; kbits) &lt;&lt; kbits , 隐藏了明文低位</li>
<li>hint1 = (2021-2023*m) % Mod</li>
<li>hint2 = pow(2, 2023, Mod)</li>
</ul>
<p>种种都指向coppersmith , 首先看hint2，</p>
<script type="math/tex; mode=display">
hint2  \equiv  2^{2023}  mod(Mod)</script><p>利用同余关系,</p>
<script type="math/tex; mode=display">
2^{2023} - hint2 = k*Mod</script><p>得到Mod的k倍,因此可以利用k*Mod建立环，解出hint1中的小根m，解得m高位后已知高位攻击即可。</p>
<p><br></p>
<p>exp.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">c = ...</span><br><span class="line">hint1 = ...</span><br><span class="line">hint2 = ...</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">kM = <span class="number">2</span>**<span class="number">2023</span>-hint2</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(kM))</span><br><span class="line">f = <span class="number">2023</span>*x + hint1 - <span class="number">2021</span></span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">200</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    mhigh = roots[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">mhigh = <span class="number">1746716778150027565782467891299010283212636160</span></span><br><span class="line">PR.&lt;y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mhigh + y)^<span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">104</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    m = mhigh + roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="number">1746716778150037336346788439252154990602710653</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{Rea1_Si9n3n}</font>

<p><br></p>
<p>(赛中的时候，这题解数比funnyencrypt还多，当时就感觉有点诡异。赛后才发现因为明密文都很小，所以直接开三次根就可以了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h2><p>题目:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✧✡✭</span><br><span class="line">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span><br><span class="line">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span><br><span class="line">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span><br><span class="line">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span><br><span class="line">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span><br><span class="line">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>见过的图形加密中并没有类似这个的，不过翻看一下马上就能发现文件尾部的这一串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span><br></pre></td></tr></table></figure>
<p>前缀肯定是nssctf，是对的上的，猜测是简单的替换密码，写个脚本后交给quipqiup即可</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">✧✡✭</span></span><br><span class="line"><span class="string">✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.</span></span><br><span class="line"><span class="string">✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.</span></span><br><span class="line"><span class="string">✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.</span></span><br><span class="line"><span class="string">✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.</span></span><br><span class="line"><span class="string">✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.</span></span><br><span class="line"><span class="string">✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125; _-,.&#x27;:&quot;</span></span><br><span class="line">list1 = [<span class="string">&#x27;✧&#x27;</span>, <span class="string">&#x27;✡&#x27;</span>, <span class="string">&#x27;✭&#x27;</span>, <span class="string">&#x27;✮&#x27;</span>, <span class="string">&#x27;✣&#x27;</span>, <span class="string">&#x27;✴&#x27;</span>, <span class="string">&#x27;✯&#x27;</span>, <span class="string">&#x27;✤&#x27;</span>, <span class="string">&#x27;✶&#x27;</span>, <span class="string">&#x27;✬&#x27;</span>, <span class="string">&#x27;✱&#x27;</span>, <span class="string">&#x27;✦&#x27;</span>, <span class="string">&#x27;✢&#x27;</span>, <span class="string">&#x27;✥&#x27;</span>, <span class="string">&#x27;✷&#x27;</span>, <span class="string">&#x27;✰&#x27;</span>, <span class="string">&#x27;❂&#x27;</span>, <span class="string">&#x27;✩&#x27;</span>, <span class="string">&#x27;✸&#x27;</span>, <span class="string">&#x27;✲&#x27;</span>, <span class="string">&#x27;✳&#x27;</span>, <span class="string">&#x27;★&#x27;</span>, <span class="string">&#x27;✵&#x27;</span>, <span class="string">&#x27;✫&#x27;</span>, <span class="string">&#x27;✪&#x27;</span>, <span class="string">&#x27;❋&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))</span><br><span class="line"></span><br><span class="line">cfinal = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">if</span>(c[i] <span class="keyword">not</span> <span class="keyword">in</span> table):</span><br><span class="line">        <span class="keyword">if</span>(c[i] == <span class="string">&quot;\n&quot;</span>):</span><br><span class="line">            cfinal.append(c[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ind = list1.index(c[i])</span><br><span class="line">            cfinal.append(table[ind])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cfinal.append(c[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(cfinal))</span><br><span class="line"></span><br><span class="line"><span class="comment">#quipqiup</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">six</span></span><br><span class="line"><span class="string">in the flood of darkness, hope is the light. it brings comfort, faith, and confidence. it gives us guidance when we are lost, and gives support when we are afraid. and the moment we give up hope, we give up our lives. the world we live in is disintegrating into a place of malice and hatred, where we need hope and find it harder. in this world of fear, hope to find better, but easier said than done, the more meaningful life of faith will make life meaningful.</span></span><br><span class="line"><span class="string">sometimes we think of dreams as fantasies - it&#x27;s easy to do when you have money, rent, and work. but you can&#x27;t prepare yourself </span></span><br><span class="line"><span class="string">and jump off the cliff: you should grow your wings first. a little bit toward the dream. step by step. take a step forward. after all, it&#x27;s your mission.</span></span><br><span class="line"><span class="string">keep faith and hope for the future. make your most sincere dreams, and when the opportunities come, they will fight for them. it may take a season or more, but the ending will not change. ambition, best, become a reality. an uncertain future, only one step at a time, the hope can realize the dream of the highest. we must treasure the dream, to protect it a season, let it in the heart quietly germinal.</span></span><br><span class="line"><span class="string">only when you understand the true meaning of life can you live truly. bittersweet as life is, it&#x27;s still wonderful, and it&#x27;s fascinating even in tragedy. if you&#x27;re just alive, try harder and try to live wonderfully.</span></span><br><span class="line"><span class="string">i believe there is a person who brings sunshine into your life. that person may have enough to spread around. but if you really </span></span><br><span class="line"><span class="string">have to wait for someone to bring you the sun and give you a good feeling, then you may have to wait a long time.</span></span><br><span class="line"><span class="string">in a word,i hope you will like cryptography.this is your flag:nssctf&#123;crypto_is_so_interesting_why_don&#x27;t_you_join_us&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{crypto_is_so_interesting_why_don't_you_join_us}</font>

<p>(前缀居然要大写，这就有点坑了。。)</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(flag)</span><br><span class="line">flag1 = flag[:length//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[length//<span class="number">2</span>:]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">p1 = gmpy2.invert(p,q)</span><br><span class="line">q1 = gmpy2.invert(q,p)</span><br><span class="line">c = <span class="built_in">pow</span>(m1,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1=&quot;</span>,p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q1=&quot;</span>,q1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;phi=&quot;</span>,phi)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p1= ...</span></span><br><span class="line"><span class="string">q1= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">phi= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line">hint = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">114514</span>, q, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,hint)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">hint= ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>题目将flag分为两部分分别进行加密，分开来说：</p>
<ul>
<li>第一部分</li>
</ul>
<p>给了p关于q的逆元及q关于p的逆元，hitconctf 2019 quals出过这个题目，具体推导过程参考<a href="[AiDai|HITCON CTF 2019 Quals-Writeup (aidaip.github.io">这一篇</a>](<a href="https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html">https://aidaip.github.io/ctf/2019/10/16/HITCON-CTF-2019-Quals-Writeup.html</a>))</p>
<ul>
<li>第二部分</li>
</ul>
<p>已知：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod n)</script><p>这种题目显然是构造出p或q的倍数，从而与n求gcd得到分解的。对于这个等式，很容易就能想到利用同余性质先化为一下两个等式：</p>
<script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod p)</script><script type="math/tex; mode=display">
hint \equiv (2023*p + 114514)^q  (mod q)</script><p>乍一看应该是第二个等式更加好用，因为可以利用费马小定理消去指数，变形为:</p>
<script type="math/tex; mode=display">
hint \equiv 2023*p + 114514  (mod q)</script><p>但是这里就卡壳了，因为即使利用同余性质把模等式转化为等式，得到的依然含有p，q两个因子，没有办法与n求gcd。</p>
<p>所以考虑利用另一个等式，由于指数q没有办法消掉了，所以只能利用二项式定理展开。又由于mod p的关系，模等式正好只剩下了最后一项，即：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^q  (mod p)</script><p>怎么利用这个等式呢？这个时候需要敏锐一点察觉到费马小定理(也许刚刚拆分出来的另一个式子的变形就是给我们的提示)，由费马小定理我们知道：</p>
<script type="math/tex; mode=display">
a \equiv a^p  (mod p)</script><p>把 $114514^q$ 看作a，就得到：</p>
<script type="math/tex; mode=display">
(114514^q) \equiv (114514^q)^p \equiv 114514^n (mod p)</script><p>所以有：</p>
<script type="math/tex; mode=display">
hint \equiv 114514^n  (mod p)</script><script type="math/tex; mode=display">
hint = 114514^n + k*p</script><p>也就是说，将$(hint - 114514^n)$与n求gcd，即可得到p，进而求解RSA</p>
<p><br></p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">while</span>(b): </span><br><span class="line">    a,b = b, a % b </span><br><span class="line">  <span class="keyword">return</span> a </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysqrt</span>(<span class="params">d</span>):</span><br><span class="line">  st = <span class="number">1</span></span><br><span class="line">  en = <span class="number">10</span>**<span class="number">1300</span></span><br><span class="line">  <span class="keyword">while</span> st&lt;=en:</span><br><span class="line">    mid = (st+en)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid*mid == d: <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">if</span> mid*mid &lt; d: st=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: en=mid-<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    x1, x2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    y1, y2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a2:</span><br><span class="line">        q = a1 // a2</span><br><span class="line">        a1, a2 = a2, a1 - q * a2</span><br><span class="line">        x1, x2 = x2, x1 - q * x2</span><br><span class="line">        y1, y2 = y2, y1 - q * y2</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, a1)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">ipmq= ...</span><br><span class="line">iqmp= ...</span><br><span class="line">phi= ...</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">enc = ...</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">gg = gcd(iqmp-<span class="number">1</span>,ipmq-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = phi // gg</span><br><span class="line">a = (ipmq-<span class="number">1</span>)//gg</span><br><span class="line">b = (iqmp-<span class="number">1</span>)//gg</span><br><span class="line"><span class="comment"># p*a + q*b = c</span></span><br><span class="line">pmod = inverse(a, b)*c%b</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    p = pmod + j*b</span><br><span class="line">    <span class="keyword">if</span> p &gt; (<span class="number">1</span>&lt;&lt;<span class="number">1024</span>): <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isPrime(p): <span class="keyword">continue</span></span><br><span class="line">    q = (c-p*a)//b</span><br><span class="line">    <span class="keyword">assert</span>(p*a+q*b==c)</span><br><span class="line">    <span class="keyword">if</span> (iqmp*q-<span class="number">1</span>)%p == <span class="number">0</span> <span class="keyword">and</span> (ipmq*p-<span class="number">1</span>)%q == <span class="number">0</span>:</span><br><span class="line">        M = <span class="built_in">pow</span>(enc,d,p*q)</span><br><span class="line">        flag += <span class="built_in">str</span>(long_to_bytes(M))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">n= ...</span><br><span class="line">c= ...</span><br><span class="line">hint= ...</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">114514</span>,n,n)</span><br><span class="line">p = GCD(n,hint-h2)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag += <span class="built_in">str</span>(long_to_bytes(m))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>得到flag:</p>
<font size="4" color="red">NSSCTF{e713afa4-fcd8-419f-a1a6-959449b4df5a}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="LatticeLCG"><a href="#LatticeLCG" class="headerlink" title="LatticeLCG"></a>LatticeLCG</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">512</span>)</span><br><span class="line">seed = getPrime(<span class="number">512</span>)</span><br><span class="line">b = bytes_to_long(flag)</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(a,e1,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(a,e2,n)</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 = &quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 = &quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = [getPrime(<span class="number">128</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">out = []</span><br><span class="line">m = getPrime(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    out.append(<span class="built_in">pow</span>(m,i,n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out=&quot;</span>,out)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c1 = ...</span></span><br><span class="line"><span class="string">c2 = ...</span></span><br><span class="line"><span class="string">output1 = ...</span></span><br><span class="line"><span class="string">output2 = ...</span></span><br><span class="line"><span class="string">e= []</span></span><br><span class="line"><span class="string">out= []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>卡了很久，搜了很多格相关问题也没有搜到类似的，打算放弃这个题去睡觉的时候，突然恍然大悟。这里好好阐述一下我的思路，希望能帮助到一些和我一样刚刚接触格的ctfer。</p>
<p>首先，题目很明显的分成了三个部分：</p>
<ul>
<li>共模攻击</li>
<li>LCG求参数</li>
<li>Lattice</li>
</ul>
<p>首先要明确求解顺序。flag以LCG中参数b的形式存在，因此LCG应该是题目的最后一步。并且要想求解出这个LCG的b，是需要知道a与n的值的，在第一部共模攻击中显然是已知n求解a。所以就明确了如下的解题顺序：</p>
<ol>
<li>Lattice求解模数n</li>
<li>共模攻击求解a</li>
<li>LCG恢复参数b，得到flag</li>
</ol>
<p>后面两个步骤非常容易，主要问题就在第一步：<strong>为什么要利用格求解n？</strong> <strong>怎么用格求解n？</strong>下面是我对这个问题的分析：</p>
<p>先来看看给了些什么条件：一个64bit的小量m，依次产生20个128bit的素数对其进行类似RSA的加密，并且给了我们加密指数的列表以及密文的列表。题目满足两个经典条件：<strong>存在小量</strong> ，<strong>提供多个方程组参数</strong>，这样的问题在很多crypto题目中都是用格方法求解的，所以要想到利用格方法(题目的名字虽然说得很明白，但是如果没有，看到这种形式也应该联想到这个方法)</p>
<p>注意到m不变，模数n也不变，同时加密指数互素，这其实很像共模攻击的情景，只是n未知。回想一下在已知模数n的情况下共模攻击的实施方法，不难产生下面这个解题思路：</p>
<p>取20个方程的前三个如下：</p>
<script type="math/tex; mode=display">
out1 \equiv m^{e1} \; (mod\;  n)</script><script type="math/tex; mode=display">
out2 \equiv m^{e2} \; (mod\;  n)</script><script type="math/tex; mode=display">
out3 \equiv m^{e3} \; (mod\;  n)</script><p>因为e1，e2互素，所以存在a，b，使得：</p>
<script type="math/tex; mode=display">
a*e1+b*e2 = 1</script><p>所以可以得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b}\equiv m^{a*e1+b*e2} \equiv m \quad (mod \;n)</script><p>这有什么用呢？我们同样也对2、3两式，1、3两式进行这样的操作，结合上面这个式子能得到三组模等式：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} \equiv m \quad (mod \;n)\qquad--1</script><script type="math/tex; mode=display">
out2^{c}*out3^{d} \equiv m \quad (mod \;n)\qquad--2</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} \equiv m \quad (mod \;n)\qquad--3</script><p>1、2式作差，2、3式作差，就得到：</p>
<script type="math/tex; mode=display">
out1^{a}*out2^{b} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><script type="math/tex; mode=display">
out1^{f}*out3^{g} -out2^{c}*out3^{d}\equiv 0 \quad (mod \;n)</script><p>而现在等式左侧已经没有未知量了(a,b,c,d,f,g均能够通过扩展欧几里得求出)，那么就可以求解他们的gcd得到n。</p>
<p>可以说，想到这个思路的时候我为之一振，可惜实际操作的时候这个方法并不能实施，原因也很简单，我们进行的并非模幂运算，而是普通幂运算，<strong>并且a，b这些指数数量级很大(注意这一点)</strong>，所以是完全没有办法照这个思路解下去的。这时候我也没有想到怎么利用格，所以进度也停滞了，一卡卡到了晚上。</p>
<p>晚上我反复思考的时候，又想到了我刚刚说的那一点，也就是实施不了共模攻击的原因，在于<strong>指数的数量级很大，没有办法幂运算</strong>。我也突然联想到了Lattice中LLL算法的重要应用——求解最短向量。那么一切也就说得通了，之所以给20个素数作为加密指数，就是可以应用于格密码中，克服刚才共模攻击中两两组合时计算出的a，b过大的问题。所以构造格的思路就来了：</p>
<p>因为20个指数e均互素，所以一定存在a1，a2，a3…a20，使得</p>
<script type="math/tex; mode=display">
a1*e1+a2*e2+a3*e3+...a20*e20 = 1</script><p>所以可以列出等式：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
a1 & a2 & a3 ... & a20
\end{matrix}\right] 

*
\left[\begin{matrix}
e1 & 1 & 0 & 0 ... & 0\\
e2 & 0 & 1 & 0 ... & 0\\
e3 & 0 & 0 & 1 ... & 0\\
...\\
e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]

=

\left[\begin{matrix}
1 & a1 & a2 ... & a20
\end{matrix}\right]</script><p>很明显，这个格符合我们的要求，我们只需要从规约出来的短向量中挑出两组，按理来说，我们只需要类似的进行刚才的共模攻击即可。</p>
<p>可是实际操作又遇到了问题，这样规约出来的向量组是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ <span class="number">45</span> -<span class="number">58</span>   <span class="number">5</span> -<span class="number">16</span>  <span class="number">12</span>  -<span class="number">7</span> -<span class="number">27</span>  <span class="number">19</span>   <span class="number">6</span>  <span class="number">14</span>  <span class="number">29</span> -<span class="number">23</span> -<span class="number">36</span>  <span class="number">44</span> -<span class="number">15</span>   <span class="number">1</span>   <span class="number">8</span>  <span class="number">14</span>  -<span class="number">7</span>  <span class="number">11</span>  -<span class="number">9</span>]</span><br><span class="line">[-<span class="number">14</span> -<span class="number">27</span>  <span class="number">20</span>   <span class="number">6</span> -<span class="number">40</span>  <span class="number">20</span> -<span class="number">34</span>  -<span class="number">2</span> -<span class="number">16</span>  <span class="number">51</span>  <span class="number">35</span> -<span class="number">23</span> -<span class="number">51</span>  <span class="number">13</span>   <span class="number">3</span> -<span class="number">21</span>   <span class="number">0</span>  <span class="number">17</span>  <span class="number">11</span>  -<span class="number">7</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">15</span> -<span class="number">36</span> -<span class="number">21</span> -<span class="number">13</span>   <span class="number">6</span>  -<span class="number">7</span>  -<span class="number">1</span> -<span class="number">59</span> -<span class="number">23</span>  <span class="number">42</span> -<span class="number">33</span>  <span class="number">15</span> -<span class="number">30</span>  -<span class="number">4</span>  <span class="number">39</span>  <span class="number">26</span>  <span class="number">41</span>   <span class="number">1</span>  <span class="number">19</span>  <span class="number">10</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">23</span>   <span class="number">4</span>  <span class="number">49</span> -<span class="number">19</span>  <span class="number">22</span>  -<span class="number">9</span>  <span class="number">24</span> -<span class="number">20</span> -<span class="number">20</span>   <span class="number">3</span> -<span class="number">24</span>   <span class="number">4</span> -<span class="number">43</span> -<span class="number">86</span>  <span class="number">40</span>  <span class="number">44</span>  -<span class="number">1</span>  -<span class="number">1</span>  <span class="number">26</span>  <span class="number">25</span>   <span class="number">1</span>]</span><br><span class="line">[ <span class="number">72</span>  <span class="number">15</span> -<span class="number">11</span> -<span class="number">19</span>  <span class="number">26</span> -<span class="number">31</span> -<span class="number">56</span> -<span class="number">25</span>   <span class="number">5</span>  <span class="number">33</span> -<span class="number">27</span> -<span class="number">23</span>  <span class="number">12</span>  <span class="number">22</span>  <span class="number">11</span>  -<span class="number">1</span>  <span class="number">21</span> -<span class="number">17</span>  <span class="number">51</span> -<span class="number">31</span>   <span class="number">9</span>]</span><br><span class="line">[-<span class="number">35</span> -<span class="number">73</span>  -<span class="number">8</span>  <span class="number">19</span> -<span class="number">29</span>  <span class="number">23</span>  -<span class="number">3</span>  <span class="number">20</span> -<span class="number">10</span>  <span class="number">18</span>  <span class="number">46</span>  <span class="number">29</span>  -<span class="number">9</span>  <span class="number">69</span> -<span class="number">30</span>   <span class="number">9</span> -<span class="number">64</span>  <span class="number">13</span>  <span class="number">10</span> -<span class="number">26</span>   <span class="number">3</span>]</span><br><span class="line">[ <span class="number">20</span>  <span class="number">46</span>  <span class="number">12</span>  -<span class="number">3</span>  <span class="number">28</span>  -<span class="number">1</span> -<span class="number">68</span>  <span class="number">15</span>   <span class="number">3</span> -<span class="number">21</span> -<span class="number">48</span> -<span class="number">20</span>  <span class="number">43</span>  <span class="number">54</span>   <span class="number">9</span>  <span class="number">14</span>  -<span class="number">5</span>   <span class="number">0</span> -<span class="number">44</span> -<span class="number">24</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">49</span>   <span class="number">0</span> -<span class="number">10</span>   <span class="number">0</span> -<span class="number">46</span> -<span class="number">47</span>  <span class="number">24</span>  -<span class="number">2</span>  <span class="number">13</span>  <span class="number">10</span>  -<span class="number">3</span>  <span class="number">48</span>  <span class="number">43</span> -<span class="number">28</span>  -<span class="number">3</span>  <span class="number">53</span> -<span class="number">15</span>  -<span class="number">6</span>  <span class="number">31</span> -<span class="number">23</span>  <span class="number">12</span>]</span><br><span class="line">[ -<span class="number">6</span>   <span class="number">0</span>   <span class="number">9</span>  <span class="number">42</span> -<span class="number">49</span> -<span class="number">38</span>   <span class="number">8</span>  <span class="number">12</span>   <span class="number">7</span>  <span class="number">39</span>  <span class="number">30</span> -<span class="number">26</span>  <span class="number">18</span>  <span class="number">37</span>  <span class="number">28</span> -<span class="number">28</span>   <span class="number">8</span>   <span class="number">2</span> -<span class="number">67</span> -<span class="number">21</span> -<span class="number">15</span>]</span><br><span class="line">[-<span class="number">56</span>  <span class="number">23</span>  <span class="number">22</span>  <span class="number">29</span>  -<span class="number">7</span> -<span class="number">19</span>  <span class="number">19</span>  -<span class="number">8</span>   <span class="number">6</span>  <span class="number">35</span>   <span class="number">4</span>  -<span class="number">8</span>  <span class="number">22</span>  -<span class="number">2</span> -<span class="number">44</span> -<span class="number">69</span>  <span class="number">16</span>  -<span class="number">8</span>  -<span class="number">7</span> -<span class="number">45</span>  <span class="number">21</span>]</span><br><span class="line">[-<span class="number">21</span>  <span class="number">16</span>  <span class="number">34</span> -<span class="number">39</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">57</span> -<span class="number">30</span>  -<span class="number">2</span>  -<span class="number">2</span> -<span class="number">36</span>  -<span class="number">9</span>   <span class="number">9</span> -<span class="number">27</span>   <span class="number">8</span> -<span class="number">31</span> -<span class="number">31</span>  <span class="number">32</span>  <span class="number">12</span>  -<span class="number">2</span>  <span class="number">15</span>]</span><br><span class="line">[ -<span class="number">9</span>  -<span class="number">7</span>   <span class="number">6</span>  <span class="number">40</span>  <span class="number">32</span> -<span class="number">49</span> -<span class="number">26</span> -<span class="number">60</span>  <span class="number">17</span>   <span class="number">0</span> -<span class="number">13</span>   <span class="number">7</span>  <span class="number">25</span>  <span class="number">57</span> -<span class="number">19</span>  <span class="number">28</span>  -<span class="number">3</span> -<span class="number">34</span>  <span class="number">11</span> -<span class="number">12</span> -<span class="number">17</span>]</span><br><span class="line">[-<span class="number">30</span> -<span class="number">13</span>  <span class="number">28</span> -<span class="number">42</span>   <span class="number">8</span> -<span class="number">46</span>  <span class="number">56</span>  <span class="number">33</span> -<span class="number">56</span> -<span class="number">40</span> -<span class="number">24</span>   <span class="number">4</span>  <span class="number">10</span>  <span class="number">15</span>  <span class="number">46</span>  <span class="number">50</span> -<span class="number">13</span>  <span class="number">18</span> -<span class="number">21</span>  <span class="number">17</span>  <span class="number">16</span>]</span><br><span class="line">[-<span class="number">17</span> -<span class="number">11</span>  -<span class="number">5</span>  <span class="number">29</span>  <span class="number">14</span>   <span class="number">6</span> -<span class="number">13</span>   <span class="number">4</span>  <span class="number">42</span> -<span class="number">69</span>  <span class="number">30</span>   <span class="number">9</span>   <span class="number">3</span> -<span class="number">37</span>   <span class="number">5</span>   <span class="number">7</span> -<span class="number">17</span>  <span class="number">50</span>   <span class="number">6</span>  <span class="number">14</span> -<span class="number">38</span>]</span><br><span class="line">[ <span class="number">53</span> -<span class="number">12</span>  <span class="number">16</span>  <span class="number">36</span>   <span class="number">1</span>  <span class="number">38</span> -<span class="number">52</span>  <span class="number">25</span> -<span class="number">10</span> -<span class="number">41</span>  -<span class="number">3</span> -<span class="number">37</span>   <span class="number">6</span> -<span class="number">12</span>   <span class="number">1</span>  -<span class="number">4</span> -<span class="number">25</span>  <span class="number">41</span>   <span class="number">5</span>   <span class="number">1</span>  <span class="number">29</span>]</span><br><span class="line">[ -<span class="number">3</span>   <span class="number">1</span>  <span class="number">36</span>  <span class="number">22</span>   <span class="number">7</span>  -<span class="number">5</span> -<span class="number">10</span>  <span class="number">15</span> -<span class="number">10</span> -<span class="number">27</span>  <span class="number">35</span> -<span class="number">60</span> -<span class="number">36</span>   <span class="number">9</span> -<span class="number">57</span>  <span class="number">33</span> -<span class="number">21</span>  <span class="number">43</span>  <span class="number">28</span> -<span class="number">44</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">32</span> -<span class="number">26</span>  <span class="number">18</span>  -<span class="number">9</span>  -<span class="number">5</span>  <span class="number">37</span>  -<span class="number">8</span>   <span class="number">2</span> -<span class="number">36</span> -<span class="number">28</span>  <span class="number">43</span>  <span class="number">10</span> -<span class="number">32</span>  <span class="number">37</span> -<span class="number">24</span> -<span class="number">70</span>  <span class="number">22</span> -<span class="number">35</span>  <span class="number">49</span>  -<span class="number">2</span>  <span class="number">31</span>]</span><br><span class="line">[-<span class="number">33</span>  <span class="number">15</span> -<span class="number">25</span>   <span class="number">1</span> -<span class="number">40</span>   <span class="number">3</span>  -<span class="number">2</span> -<span class="number">32</span>  <span class="number">15</span>   <span class="number">9</span> -<span class="number">20</span> -<span class="number">27</span> -<span class="number">27</span>  <span class="number">35</span>  <span class="number">26</span>  -<span class="number">1</span> -<span class="number">45</span> -<span class="number">12</span>  <span class="number">45</span>  <span class="number">23</span>  <span class="number">36</span>]</span><br><span class="line">[-<span class="number">17</span>   <span class="number">0</span>  <span class="number">18</span> -<span class="number">20</span> -<span class="number">75</span>  -<span class="number">5</span>  <span class="number">55</span>  <span class="number">42</span>  <span class="number">16</span>   <span class="number">8</span> -<span class="number">45</span>   <span class="number">5</span> -<span class="number">24</span> -<span class="number">20</span> -<span class="number">50</span> -<span class="number">11</span>   <span class="number">0</span>  <span class="number">27</span>  <span class="number">40</span>  <span class="number">18</span>   <span class="number">8</span>]</span><br><span class="line">[ <span class="number">11</span>   <span class="number">5</span>  <span class="number">16</span>  <span class="number">37</span>  -<span class="number">2</span>  -<span class="number">6</span>  <span class="number">28</span>  <span class="number">19</span> -<span class="number">21</span>   <span class="number">5</span>  -<span class="number">8</span>  <span class="number">63</span>  -<span class="number">8</span> -<span class="number">21</span>  <span class="number">22</span> -<span class="number">23</span> -<span class="number">57</span>  <span class="number">13</span>  -<span class="number">5</span>  <span class="number">15</span> -<span class="number">39</span>]</span><br></pre></td></tr></table></figure>
<p>第一列并不是我们想要的1，说明第一列是1的向量对比起来长度并不小。再想一下规约的目的，其实很容易就能想通第一列是多少并不重要，重要的是<strong>短向量的第一列相同</strong>(这一点非常容易想通，没理解的话仔细想想)。而要让他们相同，最有效的办法就是让他们均为0，想到这一点后，就可以在格的第一列乘上一个大数K，从而有效的调整一下格，如下：</p>
<script type="math/tex; mode=display">
\left[\begin{matrix}
K*e1 & 1 & 0 & 0 ... & 0\\
K*e2 & 0 & 1 & 0 ... & 0\\
K*e3 & 0 & 0 & 1 ... & 0\\
...\\
K*e20 & 0 & 0 & 0 ... & 1\\
\end{matrix}\right]</script><p>这样一来，最短向量的第一列就不太可能不是0了(因为会对应的扩大K倍，显著地使规约向量变长)，我测试出取100左右即可，然后就可以求解最大公约数(此时还需注意两点小问题：一是规约出的短向量有负数，普通幂运算中会变成分数形式，通分至等式右侧即可；二是求得的公约数仍有可能是k倍的n，需要去除一些小因子)，最终得到n。</p>
<p><br></p>
<p>recovern.ipynb:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e= []</span><br><span class="line">c= []</span><br><span class="line"></span><br><span class="line"><span class="comment">#step1</span></span><br><span class="line">L = Matrix(ZZ, <span class="number">20</span>, <span class="number">21</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    L[i,<span class="number">0</span>] = e[i]*<span class="number">1000</span></span><br><span class="line">    L[i,i+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">L = L.LLL()</span><br><span class="line"></span><br><span class="line">alist1 = L[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">k1nl = <span class="number">1</span></span><br><span class="line">k1nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist1[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k1nr *= c[i]**(-alist1[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k1nl *= c[i]**alist1[i]</span><br><span class="line">k1n = k1nl-k1nr</span><br><span class="line"></span><br><span class="line">alist2 = L[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">k2nl = <span class="number">1</span></span><br><span class="line">k2nr = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span>(alist2[i]&lt;<span class="number">0</span>):</span><br><span class="line">        k2nr *= c[i]**(-alist2[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k2nl *= c[i]**alist2[i]</span><br><span class="line">k2n = k2nl-k2nr</span><br><span class="line"></span><br><span class="line">n = gcd(k1n,k2n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">while</span>(n % i == <span class="number">0</span>):</span><br><span class="line">        n //= i</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查一下n的长度是否为1024bit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<p>后两个问题也就迎刃而解，最终得到flag：</p>
<font size="4" color="red">NSSCTF{407f8832-6ffd-43bf-91a0-6900758cdff7}</font>

<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的说来，对格的应用还不够灵活，还需要加深学习。</p>
<p>如果各位有不懂的地方或者发现了文中的问题，欢迎联系我，一起学习进步。</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-crypto</title>
    <url>/post/445800a5.html</url>
    <content><![CDATA[<p>这次比赛Crypto难度比较基础，手速快才是硬道理。</p>
<span id="more"></span>
<p>Rank：2</p>
<p><img src="/post/445800a5/image-20230911152911874.png" alt="image-20230911152911874"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请尝试解密它。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱</span><br></pre></td></tr></table></figure>
<p>第一层很明显是base100，之后的每一层像哪个base用哪个解密即可：</p>
<p>1、 base100：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z</span><br></pre></td></tr></table></figure>
<p>2、 base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UlhoYUdxZTdaY1FCbXFyaWl5S0ZKaW4yN2ZiWkpTZHhOd2hBVk1wNzRvUWE0VWs2RXVqTlpkTHNvYVpxNHRMUDd3dXk4OGJiSlhlTGJnN2dxR2RkTm15dGs1S1RGdlk3TmpRR0wzenFrQ3BCM3lmUTFTUkY0OU13Z0JjZkFxWjFhNng=</span><br></pre></td></tr></table></figure>
<p>3、base64：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RXhaGqe7ZcQBmqriiyKFJin27fbZJSdxNwhAVMp74oQa4Uk6EujNZdLsoaZq4tLP7wuy88bbJXeLbg7gqGddNmytk5KTFvY7NjQGL3zqkCpB3yfQ1SRF49MwgBcfAqZ1a6x</span><br></pre></td></tr></table></figure>
<p>4、 base58：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">G53XC4LIK5DWQ53UIFSGCUTCJFCGM4DSM5UXOYTILBUXU6TXJ5SUUT2DONHTQZ3GJNCFSUDINRXE6MTEINUXOQLVLI4VU===</span><br></pre></td></tr></table></figure>
<p>5、 base32：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7wqqhWGhwtAdaRbIDfprgiwbhXizzwOeJOCsO8gfKDYPhlnO2dCiwAuZ9Z</span><br></pre></td></tr></table></figure>
<p>6、base62：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;fe853b49-8730-462e-86f5-fc8e9789f077&#125;</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fe853b49-8730-462e-86f5-fc8e9789f077}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">树木新开发了一个加密系统，这个系统会把他的秘密加密很多次然后发送给不同的用户，你能找到其中的漏洞吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p * q</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n3 = p * q</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m,e,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n3 =&quot;</span>,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c3 =&quot;</span>,c3)</span><br></pre></td></tr></table></figure>
<p>经典的广播攻击，思路就是使用中国剩余定理得到$\quad mod \; (n1n2n3)\quad$下的$\quad m^{17}\quad$，再开17次方根即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = </span><br><span class="line">n2 = </span><br><span class="line">n3 = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">c3 = </span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">n = [n1,n2,n3]</span><br><span class="line">c = [c1,c2,c3]</span><br><span class="line">M = crt(n,c)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(M,<span class="number">17</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{fdc0afb5-1c81-46b9-a28a-241f5f64419d}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个题目名充分表现了作者由于学CTF导致吃不上饭，明天就打算跑路的心里想法。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, message</span><br><span class="line"><span class="comment"># message is a Classic English Story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    tmp = (message[i*<span class="number">30</span>:(i+<span class="number">1</span>)*<span class="number">30</span>].encode())</span><br><span class="line">    <span class="built_in">print</span>(binascii.hexlify(strxor(tmp,flag)).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218</span></span><br><span class="line"><span class="comment"># 3769373b66142f31297f291126410e042b01162d59103a0c005221075013</span></span><br><span class="line"><span class="comment"># 37242c202e1e3f743c36371130410c1e2b491a31574406014505291a550e</span></span><br><span class="line"><span class="comment"># 7f6922742e1a213270372e01264105193004532b1f554e120c1e2a145618</span></span><br><span class="line"><span class="comment"># 7d69143c23156d18392b35183141310e3b49213613590003453a291a555d</span></span><br><span class="line"><span class="comment"># 36273731341e297424372454230e0c0f2c49127f005f020245112718545d</span></span><br><span class="line"><span class="comment"># 26396320295b2531227161273c04430f360d533118444e0f0b1d31554615</span></span><br><span class="line"><span class="comment"># 323d6335660c24373b3a2554350f0a063e05533712101905165e66145f19</span></span><br><span class="line"><span class="comment"># 733e222766152220703e27063508074b300f53371e5d40444735291a555d</span></span><br><span class="line"><span class="comment"># 37283a7432146d2d3f2a6d541808171f330c530d12544e360c162f1b565d</span></span><br></pre></td></tr></table></figure>
<p>很明确的一个Many-Time-Pad，也对应了题目名字MTP，预期来说应该是上一个知名MTP脚本求解。</p>
<p>但是其实完全不需要，因为题目给了这样一个提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># message is a Classic English Story</span><br></pre></td></tr></table></figure>
<p>我们又有flag的前六个字符：<strong>SICTF{</strong></p>
<p>那么拿去异或一下就有：</p>
<p><img src="/post/445800a5/image-20230908224043439.png" alt="image-20230908224043439"></p>
<p>合理猜测这是一个Little开头的英语故事，那么由于异或的可逆性，直接把密文搬上明文的位置，来试几个：</p>
<p>Little Prince（小王子）：</p>
<p><img src="/post/445800a5/image-20230908224223829.png" alt="image-20230908224223829"></p>
<p>不太对，换一个，Little Red Riding Hood：</p>
<p><img src="/post/445800a5/image-20230908224336581.png" alt="image-20230908224336581"></p>
<p>这就成了，又可以看出flag串后面应该是wonderful的变形，那么再把flag串搬上来逐个尝试即可：（因为可以变的其实就大小写、以及形近数字，一个字符一个字符增加，试几次就出来了）：</p>
<p><img src="/post/445800a5/image-20230908224509359.png" alt="image-20230908224509359"></p>
<p>flag：</p>
<p><strong>SICTF{MTP_AtTack_is_w0nderFu1}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你知道CopperSmith吗？</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = p &gt;&gt; <span class="number">230</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"><span class="string">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line"><span class="string">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>直白的p高位泄漏，直接解密即可。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line">p4 = <span class="number">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits=pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits,beta=<span class="number">0.4</span>,epsilon = <span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    p= p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    q = n//p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{3f9366ed-b8e4-412f-bbd0-62616a24115c}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">签到题来咯！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = getPrime(<span class="number">10</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c1 = <span class="built_in">pow</span>(<span class="number">114</span>*m+<span class="number">2333</span>,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(<span class="number">514</span>*m+<span class="number">4555</span>,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line"><span class="string">c1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line"><span class="string">c2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>经典的明文相关消息攻击，略做了一点变种。思路如下，列出两个多项式：</p>
<script type="math/tex; mode=display">
(114*x+2333)^{e}\equiv c1\quad (mod\;n)</script><script type="math/tex; mode=display">
(514*x+4555)^{e}\equiv c2\quad (mod\;n)</script><p>又因为明文m显然是两个模多项式的根，因此两个模多项式有公因子：</p>
<script type="math/tex; mode=display">
(x-m)</script><p>因此构造出模n环下的两个多项式，并求公因式即可。至于e是多少，仅需要在指定范围内爆破一下就可以。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line">a1 = <span class="number">114</span></span><br><span class="line">b1 = <span class="number">2333</span></span><br><span class="line">a2 = <span class="number">514</span></span><br><span class="line">b2 = <span class="number">4555</span></span><br><span class="line">elist = [<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (a1*x + b1)^e - c1</span><br><span class="line">    g2 = (a2*x + b2)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> elist:</span><br><span class="line">    m1 = attack(c1, c2, e, n)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&quot;SICTF&quot;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(m1))):</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(m1))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{hhh!!franklin_reiter_is_easy}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个低加密指数攻击为什么打不出来哇？是不是题有问题捏？差评！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag=<span class="string">&quot;SICTF&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m1=((m&gt;&gt;<span class="number">60</span>)&lt;&lt;<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;((m&gt;&gt;60)&lt;&lt;60)=&quot;</span>,m1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line"><span class="string">e= 3</span></span><br><span class="line"><span class="string">c= 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line"><span class="string">((m&gt;&gt;60)&lt;&lt;60)= 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>已知明文高位攻击，直接上脚本。</p>
<p>exp.ipynb：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n= <span class="number">23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181</span></span><br><span class="line">m= <span class="number">11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m + x)^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots()</span><br><span class="line"></span><br><span class="line">m = m + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{2ca8e589-4a31-4909-80f0-9ecfc8f8cb37}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实数学很简单辣！</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">hint2 = getPrime(<span class="number">13</span>)*p+getPrime(<span class="number">256</span>)*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint1 = <span class="subst">&#123;hint1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint2 = <span class="subst">&#123;hint2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line"><span class="string">hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line"><span class="string">hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line"><span class="string">c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意到hint1、hint2的生成过程：</p>
<script type="math/tex; mode=display">
hint1 = a1*p+b1*q</script><script type="math/tex; mode=display">
hint2 = a2*p+b2*q</script><p>而p前的系数a1、a2很小，因此可以先打印出所有13比特的素数存在一张表内，作为a1、a2的所有可能取值，然后如下操作：</p>
<script type="math/tex; mode=display">
a2*hint1-a1*hint2=a2*(a1*p+b1*q) - a1*(a2*p+b2*q)=(a2*b1-a1*b2)*q</script><p>与n求gcd即可得到q，之后进行RSA解密即可。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primelist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>,<span class="number">2</span>**<span class="number">13</span>) <span class="keyword">if</span> isPrime(i)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primelist:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primelist:</span><br><span class="line">        <span class="keyword">if</span>(GCD(hint1*i - hint2*j,n) != <span class="number">1</span>):</span><br><span class="line">            q = GCD(hint1*i - hint2*j,n)</span><br><span class="line">p = n//q</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>flag：</p>
<p><strong>SICTF{452aebb6-9c16-441a-ac42-fc608bf6063f}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>越熟练手速就会越快，继续努力！</p>
]]></content>
      <categories>
        <category>wp-crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023-SICTF-#Round2-wp-misc</title>
    <url>/post/ccf22797.html</url>
    <content><![CDATA[<p>Crypto兼职misc手，浅做点misc娱乐娱乐</p>
<span id="more"></span>
<p><strong>Rank：2</strong></p>
<p><img src="/post/ccf22797/image-20230911152802298.png" alt="image-20230911152802298"></p>
<p><br></p>
<p><br></p>
<h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关注微信公众号并发送&quot;SICTF2023&quot;就可以获得flag辣！</span><br></pre></td></tr></table></figure>
<p>签到题，照着做即可。</p>
<p><img src="/post/ccf22797/image-20230908162949748.png" alt></p>
<p>flag：</p>
<p><strong>SICTF{Welcome_to_SICTF2023_#Round2}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这张颜色很奇怪的图片到底是干什么的呢？</span><br></pre></td></tr></table></figure>
<p>下载题目附件，是一个zip压缩包，解密提示需要密码，但是也并没有别的密码提示，所以第一反应就是伪加密。十六进制打开文件：</p>
<p><img src="/post/ccf22797/image-20230908171507928.png" alt="image-20230908171507928"></p>
<p>将这里的1改为0即可解密压缩包，得到图片：</p>
<p><img src="/post/ccf22797/Pixel_art.png" alt="Pixel_art"></p>
<p>并没有发现如题目描述中所说的奇怪的像素点，在stegsolve中打开，切换各种查看方式也没有什么发现。于是想到LSB隐写，可以发现：</p>
<p><img src="/post/ccf22797/image-20230908171812016.png" alt="image-20230908171812016"></p>
<p>果然藏了东西，保存为png文件后查看：</p>
<p><img src="/post/ccf22797/pixel.png" alt="pixel"></p>
<p>这图也太小了，查看其详细信息，果然发现：</p>
<p><img src="/post/ccf22797/image-20230908171941968.png" alt="image-20230908171941968"></p>
<p>大小仅有20*20，不难想到flag被加密进了像素点里。写一个脚本提取像素点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pixel_data)</span><br></pre></td></tr></table></figure>
<p>打印出来的像素点列表是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">33</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">33</span>, <span class="number">46</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">33</span>, <span class="number">46</span>), (<span class="number">63</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>), (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">63</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>), (<span class="number">33</span>, <span class="number">33</span>, <span class="number">63</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">33</span>), ......, (<span class="number">46</span>, <span class="number">46</span>, <span class="number">33</span>), (<span class="number">46</span>, <span class="number">63</span>, <span class="number">46</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>
<p>那么这三个数字显然有特殊含义，当作ASCII码打印出对应字符发现：分别是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">46-. </span><br><span class="line">33-!</span><br><span class="line">63-?</span><br></pre></td></tr></table></figure>
<p>这三个字符不难对应到Ook加密上，写个完整脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp.png&#x27;</span>)  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">width, height = image.size</span><br><span class="line">pixel_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        pixel = image.getpixel((x, y))</span><br><span class="line">        pixel_data.append(pixel)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pixel_data)):</span><br><span class="line">    <span class="keyword">if</span>(pixel_data[i] == (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pixel_data[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ook&quot;</span>+<span class="built_in">chr</span>(j),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>拿生成的字符串去在线网址解密：</p>
<p><img src="/post/ccf22797/image-20230908172734509.png" alt="image-20230908172734509"></p>
<p>flag：</p>
<p><strong>SICTF{0141ac35-ec19-4cee-a906-22805fdbed77}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻破这个压缩包！</span><br></pre></td></tr></table></figure>
<p>题目给了一个压缩包，首先检查出是真加密，然后尝试ziprello爆破无果，binwalk也没有发现额外文件，那么就只能是深入明文攻击了。</p>
<p>深入明文攻击参考：</p>
<p><a href="https://hasegawaazusa.github.io/zip-crack-note.html#zip-破解">zip压缩包取证笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p>
<p>由参考博客知，进行深入明文攻击需要至少12个已知字节。而由于已知压缩包内为png文件，也就知道文件头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</span><br></pre></td></tr></table></figure>
<p>所以，我们至少知道了16个准确的字节，超过了12个字节，已经满足深入明文攻击的条件了，(多的已知字节可以加快速度)，接下来就使用工具即可。</p>
<p><img src="/post/ccf22797/image-20230909112256733.png" alt="image-20230909112256733"></p>
<p>两步操作分别是：把已知十六进制的字节写入文件key.txt，再进行深入明文攻击即可。跑了接近二十分钟后，出了zip的三段内部密码(上图中最后一行)，直接进行解密即可：</p>
<p><img src="/post/ccf22797/image-20230909112437253.png" alt="image-20230909112437253"></p>
<p>得到图片：</p>
<p><img src="/post/ccf22797/flag1.png" alt="flag1"></p>
<p>十六进制打开末尾即得flag：</p>
<p><img src="/post/ccf22797/image-20230909112540496.png" alt="image-20230909112540496"></p>
<p>flag：</p>
<p><strong>SICTF{3a4998b8-345e-4943-a689-d01e8b08defb}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你为什么还不上号啊？宝！</span><br><span class="line">Hint：你知道CobaltStrike吗？</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量包，导出http流对象，可以发现一个key.zip：</p>
<p><img src="/post/ccf22797/image-20230909142543063.png" alt="image-20230909142543063"></p>
<p>导出该压缩包并解压，得到一个key文件，那现在要做的就是提取出key中的信息，去解密流量中的数据。但是怎么找都没找到这种key文件怎么使用，思路也就暂时停滞了。</p>
<p>直到hint出现，那就直接搜索CobaltStrike，发现一道类似流量分析题，照着一步步做就有了(其中CS_Decrypt中有一个脚本用到M2Crypto库，但是pip不下来，搜索资料发现这个库停止更新很久了，可能python版本对不上，平替为pycryptodome即可)：</p>
<p><a href="https://blog.csdn.net/qq_43264813/article/details/120560209">2021年“绿城杯”网络安全大赛-Misc-流量分析_夜白君的博客-CSDN博客</a></p>
<p>得到flag：</p>
<p><img src="/post/ccf22797/image-20230909142844158.png" alt="image-20230909142844158"></p>
<p>flag：</p>
<p><strong>SICTF{88a39373-e204-43b6-b321-33ac8972fde9}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我就扫码而已啦！为什么要用pwntools？</span><br></pre></td></tr></table></figure>
<p>题目给了一个端口，先用xshell手动交互一下：</p>
<p><img src="/post/ccf22797/image-20230910150031807.png" alt="image-20230910150031807"></p>
<p>可以依稀看出是二维码的定位符，那么思路就是把这些0、1转化为二维码并扫码得到数据，但是粘出来数据想写脚本的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150225007.png" alt="image-20230910150225007"></p>
<p>笑死，vscode右侧的预览直接显示出了二维码的效果，那直接扫码得到数据：</p>
<p><img src="/post/ccf22797/image-20230910150358330.png" alt="image-20230910150358330"></p>
<p>但是上传这串数据的时候发现：</p>
<p><img src="/post/ccf22797/image-20230910150429700.png" alt="image-20230910150429700"></p>
<p>超时了，彳亍，那确实得写脚本自动交互，交互一次后发现靶机端还会发送二维码数据，那应该是要循环一定次数后才会给flag了。</p>
<p>之后就是枯燥的debug时间。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&quot;210.44.151.51&quot;</span>,<span class="number">10468</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    data = <span class="built_in">list</span>(r.recvuntil(<span class="string">b&quot;P&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义图像的宽度和高度（根据数据长度调整）</span></span><br><span class="line">    width = <span class="number">116</span></span><br><span class="line">    height = <span class="number">116</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个空白图像</span></span><br><span class="line">    image = Image.new(<span class="string">&quot;1&quot;</span>, (width, height), color=<span class="number">1</span>)  <span class="comment"># 1表示单色（黑白）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图像的像素访问对象</span></span><br><span class="line">    pixels = image.load()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将01数据填充到图像中</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            index = y * width + x</span><br><span class="line">            <span class="keyword">if</span> index &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[index] == <span class="number">48</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">0</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pixels[x, y] = <span class="number">1</span>  <span class="comment"># 将0写为黑色像素点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图像为文件</span></span><br><span class="line">    image.save(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line">    decocdeQR = decode(Image.<span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>))[<span class="number">0</span>].data</span><br><span class="line">    r.sendline(decocdeQR)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">    temp = r.recvline()</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure>
<p>循环1000次后，靶机端发送flag：</p>
<p><strong>SICTF{d7d23552-d917-4ad4-962c-e415dd5b5b6e}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你好快啊！（flag需要包含SICTF&#123;&#125;）</span><br></pre></td></tr></table></figure>
<p>题目给了一个音频，Audacity打开：</p>
<p><img src="/post/ccf22797/image-20230910150829891.png" alt="image-20230910150829891"></p>
<p>经典的音频隐写摩斯电码，但是敲完摩斯密码，最后得到的uuid少了一位，<del>私聊出题人拿flag即可</del>。</p>
<p><br></p>
<p><br></p>
<h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鲨鱼！嗷呜！</span><br></pre></td></tr></table></figure>
<p>题目给了一个流量文件，追踪tcp流能发现一段php代码：</p>
<p><img src="/post/ccf22797/image-20230910151203093.png" alt="image-20230910151203093"></p>
<p>可以看出，在openssl扩展有效时，这段代码对数据的解密方式为AES_128后base64，并且给了key的值(之后了解到这是很明显的冰蝎的特征)。那么就可以使用cyberchef，对之后的每个tcp流里的base64数据进行恢复：</p>
<p><img src="/post/ccf22797/image-20230910151658797.png" alt="image-20230910151658797"></p>
<p>再把解密出来的密文内部的base64段提取出来，再进行解密，就可以在最底下发现：</p>
<p><img src="/post/ccf22797/image-20230910151851063.png" alt="image-20230910151851063"></p>
<p>可以看出，实际上这段程序就是在执行最下方的cmd命令，然后对回复的数据也进行如上解密，就可以得到命令执行后的对应内容。如此一来，可以得到两个有用的信息：</p>
<p>GronKey.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,50,61,8,9,20,63,41</span><br></pre></td></tr></table></figure>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span><br></pre></td></tr></table></figure>
<p>flag的内容直接提交上去是不对的，因此肯定还需要进行解密，而如何解密就需要用到GronKey.txt，并且按正常思路，GronKey这个名字肯定是个提示。最终搜索到了Gronsfeld密码，解密即可：</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Gronsfeld</span><br><span class="line"></span><br><span class="line">t = [<span class="number">1</span>,<span class="number">50</span>,<span class="number">61</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">41</span>]</span><br><span class="line">temp = <span class="string">&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span></span><br><span class="line"><span class="built_in">print</span> (Gronsfeld(t).decipher(temp))</span><br></pre></td></tr></table></figure>
<p>这里有个比较坑的点：因为我是知道Gronsfeld这个密码的，但是我记得他的密钥只能是0-9的数字，加密原理就是字母加上密钥对应数字(类似于维吉尼亚密码)，所以开始就排除了这个加密方式。之后一直没有搜到其他的Gron开头的加密，卡了很久。后来我搜到了一个Gronsfeld在线加密：</p>
<p><a href="https://www.wishingstarmoye.com/ctf/vigenere">Vigenere / Gronsfeld - 许愿星 (wishingstarmoye.com)</a></p>
<p>可以发现，他确实用了超过10的数字当作密钥，那这到底是怎么加密的呢？我思考了一下，发现他的加密方式应该是：加密时，每个字母右移密钥列表中对应数字的位数；而解密时，每个字母左移密钥列表中对应数字的位数。</p>
<p>举个例子，T左移1位得到S，这很好理解；而G左移50位，其实就是右移2位(因为模26的缘故)，因此得到I。</p>
<p>这样就可以顺利解密了。</p>
<p>flag：</p>
<p><strong>SICTF{SHUMUISAGOODBOYYYYYYYYY}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="还不上号"><a href="#还不上号" class="headerlink" title="还不上号"></a>还不上号</h3><p>题目描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一起上号不？来！我教你怎么写payload！</span><br><span class="line">Hint1：四位爆破,多注意一下细节，除了CS还有一部分</span><br><span class="line">Hint2：压缩包密码为we1l</span><br></pre></td></tr></table></figure>
<p>其实这道题就是Easy_shark和一起上号不的结合，这两个都做出来的话，这题其实难度不大了。</p>
<p>题目给了两个流量包，由名字可以知道一个包对应一半flag。其中，包1形式对应Ez_shark，包2形式对应一起上号不。</p>
<p>从包1入手，可以发现对比起Ez_shark，唯一的区别就是他没有给出AES的key值，因此必须要想办法找出key。而包2正好有个key.zip，进行导出：</p>
<p><img src="/post/ccf22797/image-20230910153507463.png" alt="image-20230910153507463"></p>
<p>得到的key.zip不能直接解压，并且是真加密，同时也没法进行明文攻击，那么就ziprello爆破吧，最后得到密码是we1l(并且后来Hint给了)。</p>
<p>打开key文件：</p>
<p><img src="/post/ccf22797/image-20230910153756977.png" alt="image-20230910153756977"></p>
<p>显然有零宽字符，利用在线网站<a href="http://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters (330k.github.io)</a>进行零宽字符解密：</p>
<p><img src="/post/ccf22797/image-20230910154112768.png" alt="image-20230910154112768"></p>
<p>这里要注意在网页下方勾选该文本中所有存在的零宽字符，不然解密会失败：</p>
<p><img src="/post/ccf22797/image-20230910154140388.png" alt="image-20230910154140388"></p>
<p>因此就得到了AES的key，可以按照Ez_Shark的方式对包1的流量依次进行解密，能得到两个有用信息：</p>
<p>flag.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;79e1755e-08a8-4d</span><br></pre></td></tr></table></figure>
<p>key：</p>
<p><img src="/post/ccf22797/image-20230910154525684.png" alt="image-20230910154525684"></p>
<p>如果做出来一起上号不那道题，那么对这串数据应该很熟悉，这就是<code>.cobaltstrike.beacon_keys</code>形式的密钥文件，将这段内容保存成文件key1.txt，后续的步骤就和前面那道题就一模一样了。</p>
<p>下面详细记录一下步骤(怕我自己忘)：</p>
<p>1、解析key1.txt文件得到private_key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;key1.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    pobj = javaobj.load(fd)</span><br><span class="line">privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">privateKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line">publicKey = (</span><br><span class="line">    <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">    + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">    + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(privateKey.decode())</span><br><span class="line"><span class="built_in">print</span>(publicKey.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(</span></span><br><span class="line"><span class="comment">#     list(</span></span><br><span class="line"><span class="comment">#         map(</span></span><br><span class="line"><span class="comment">#             lambda x: list(map(lambda y: (y[0].name, y[1]), x.items())),</span></span><br><span class="line"><span class="comment">#             a.field_data.values(),</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<p>2、根据private_key以及流量包中cookie解析出AES key和HMAC key：（其他信息有需要，解除掉注释即可，这里只需要AES与HMAC的key）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"> </span><br><span class="line">PRIVATE_KEY = <span class="string">&quot;&quot;&quot;-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0M6FR0Cb9dW52Nd5NTA1JUNAs1</span></span><br><span class="line"><span class="string">thS8iXx6QB+UkN/vRJdfsKS8dnOfNuPuPDCtx26B2j8I1FuTJ1VrrfDkzN585sskmXYronFM98Dx</span></span><br><span class="line"><span class="string">50vHaadOcDcDdBBqi8gC5/D3iKflX6T9pSL/5PVLfN1EIaFsyAS9jpWX2wGNi3C/QPSrAgMBAAEC</span></span><br><span class="line"><span class="string">gYAdNhXeGtH4wkWqOhY8aurL+VvTUZjRanJ6C+/FkXCzUWbRVwVV5xMMeZEDNigRw4BZ2HGvJL+f</span></span><br><span class="line"><span class="string">aMT+o3VMkCYBhGbi2/3RPRgigMG7Aa3LWWtYWsdbw8Mw6aqqbTjDUHrQ1kulMf1JvXJL5LBd+pBA</span></span><br><span class="line"><span class="string">Q8kHaYJRMcmnLsT4NeXOFQJBAMNa2r+phrThTlagMB6bj6vl0IVbDy+TJT2VybCSJ76rPgVUQwtP</span></span><br><span class="line"><span class="string">yX3z7UAjt27mE8KK+k7Jidi0drCEPv5Wo60CQQD3vQbO64fko1dlatkNn095GO9KoCuanrsLs+vY   </span></span><br><span class="line"><span class="string">Ohc0ltk4EhHHmP5hEE6dSMZNASKaN0wSYJ14xjnA+dJWOES3AkEApzyYF4vhLefTUIVBrHIvxFCw   </span></span><br><span class="line"><span class="string">+fjCP1AQiXA5gVcdfzTJm3ZPDtf2/kRbzpTE68M7F0gykFAoGcQj92i/JKy24QJAdyVbA+M07Ro9   </span></span><br><span class="line"><span class="string">qxHzJ+EJmMUMOMjFj8xtStiSQeDWTj2KZLQUBvmmxcnQ9UYN0PUNzjtwA5qhwXccSZoctcjECwJA   </span></span><br><span class="line"><span class="string">Zc0TZgGq/OwgnIyj/1+Q9D0A2eg3aw1k+6Vzkf/DdkuF6+XTkYTlBGiETIK/vm1rCH4NcOCL7eK5   </span></span><br><span class="line"><span class="string">qpA1grg+gg==</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">encode_data = <span class="string">&quot;j+ojKDVPlCr7lT9yzNinkj1DgdkcRaLMT2kL4U+9TvdFBZqGKk7/4WF/W7JhEieC3DoRfngRppMAVHa3yfhp4HZm/ZeNY4bc8rlYL11Q0dXDzpR5JjhqN+hGe9RBqPznoukShgQLhxT/DO7djxE5ROzi6NC52yZAaGPCSeLDyjg=&quot;</span></span><br><span class="line">base64_key = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">private_key = RSA.import_key(PRIVATE_KEY.<span class="built_in">format</span>(base64_key).encode())</span><br><span class="line">cipher = PKCS1_v1_5.new(private_key)</span><br><span class="line">ciphertext = cipher.decrypt(base64.b64decode(encode_data), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isFlag</span>(<span class="params">var, flag</span>):</span><br><span class="line">	<span class="keyword">return</span> (var &amp; flag) == flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toIP</span>(<span class="params">var</span>):</span><br><span class="line">	var2 = (var &amp; -<span class="number">16777216</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">	var4 = (var &amp; <span class="number">16711680</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">	var6 = (var &amp; <span class="number">65280</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">	var8 = var &amp; <span class="number">255</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>(var2) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var4) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var6) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">var0</span>):</span><br><span class="line">	<span class="keyword">if</span> var0 == <span class="number">37</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM037&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">437</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">500</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM500&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">708</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">709</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">710</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">720</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">737</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM737&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">775</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM775&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">850</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM850&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">852</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM852&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">855</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM855&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">857</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM857&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">858</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM00858&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">860</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM860&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">861</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM861&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">862</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM862&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">863</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM863&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">864</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM864&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">865</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM865&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM866&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">869</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM869&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">870</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM870&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">874</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-874&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">875</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM875&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Shift_JIS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-mswin-936&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-windows-949&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Big5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1026</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1026&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1047</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM1047&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1140</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01140&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1141</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01141&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1142</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01142&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1143</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01143&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1144</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01144&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1145</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01145&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1146</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01146&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1147</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01147&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1148</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01148&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1149</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM01149&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1200</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1201</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-16BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1250</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1250&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1251</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1251&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1252</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1252&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1253</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1253&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1254</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1254&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1255</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1255&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1256</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1256&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1257</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1257&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1258</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;windows-1258&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">1361</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-Johab&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRoman&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacArabic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacHebrew&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacGreek&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCyrillic&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacRomania&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10017</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacUkraine&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10021</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacThai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10029</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCentralEurope&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10079</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacIceland&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10081</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacTurkish&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">10082</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-MacCroatian&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32LE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">12001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-32BE&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISO-2022-CN-CNS&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20105</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20106</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20107</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20108</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20127</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;US-ASCII&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20261</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20269</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20273</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM273&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20277</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM277&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20278</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM278&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20280</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM280&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20284</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM284&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20285</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM285&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20290</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM290&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20297</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM297&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20420</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM420&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20423</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20424</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM424&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20833</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20838</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM-Thai&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-R&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20871</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;IBM871&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20880</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20905</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20924</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">20949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21025</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM1025&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21027</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">21866</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;KOI8-U&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28591</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-1&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28592</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28593</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-3&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28594</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-4&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28595</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-5&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28596</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28597</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-7&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28599</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-9&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28603</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-13&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">28605</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-15&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">29001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">38598</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50220</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50221</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP-2&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50222</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50225</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50227</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50229</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50930</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM930&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50931</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50933</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM933&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50935</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM935&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50937</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM937&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">50939</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-IBM939&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51932</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51949</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;EUC-KR&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">51950</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">52936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">54936</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GB18030&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57002</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57003</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57004</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57005</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57006</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57007</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57008</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57009</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57010</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">57011</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65000</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> var0 == <span class="number">65001</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ciphertext[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">b&#x27;\x00\x00\xBE\xEF&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 16</span></span><br><span class="line">	raw_aes_keys = ciphertext[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var9 = ciphertext[<span class="number">24</span>:<span class="number">26</span>]</span><br><span class="line">	var9 = <span class="built_in">int</span>.from_bytes(var9, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var9 = getName(var9)</span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var10 = ciphertext[<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">	var10 = <span class="built_in">int</span>.from_bytes(var10, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var10 = getName(var10)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	<span class="built_in">id</span> = ciphertext[<span class="number">28</span>:<span class="number">32</span>]</span><br><span class="line">	<span class="built_in">id</span> = <span class="built_in">int</span>.from_bytes(<span class="built_in">id</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;Beacon id:&#123;&#125;&quot;.format(id))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	pid = ciphertext[<span class="number">32</span>:<span class="number">36</span>]</span><br><span class="line">	pid = <span class="built_in">int</span>.from_bytes(pid, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;pid:&#123;&#125;&quot;.format(pid))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	port = ciphertext[<span class="number">36</span>:<span class="number">38</span>]</span><br><span class="line">	port = <span class="built_in">int</span>.from_bytes(port, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;port:&#123;&#125;&quot;.format(port))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 1</span></span><br><span class="line">	flag = ciphertext[<span class="number">38</span>:<span class="number">39</span>]</span><br><span class="line">	flag = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment"># print(flag)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">1</span>):</span><br><span class="line">		barch = <span class="string">&quot;&quot;</span></span><br><span class="line">		pid = <span class="string">&quot;&quot;</span></span><br><span class="line">		is64 = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">elif</span> isFlag(flag, <span class="number">2</span>):</span><br><span class="line">		barch = <span class="string">&quot;x64&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		barch = <span class="string">&quot;x86&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">4</span>):</span><br><span class="line">		is64 = <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		is64 = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> isFlag(flag, <span class="number">8</span>):</span><br><span class="line">		bypassuac = <span class="string">&quot;True&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		bypassuac = <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;barch:&quot; + barch)</span></span><br><span class="line">	<span class="comment">#print(&quot;is64:&quot; + is64)</span></span><br><span class="line">	<span class="comment">#print(&quot;bypass:&quot; + bypassuac)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	var_1 = ciphertext[<span class="number">39</span>:<span class="number">40</span>]</span><br><span class="line">	var_2 = ciphertext[<span class="number">40</span>:<span class="number">41</span>]</span><br><span class="line">	var_1 = <span class="built_in">int</span>.from_bytes(var_1, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	var_2 = <span class="built_in">int</span>.from_bytes(var_2, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	windows_var = <span class="built_in">str</span>(var_1) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var_2)</span><br><span class="line">	<span class="comment">#print(&quot;windows var:&quot; + windows_var)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 2</span></span><br><span class="line">	windows_build = ciphertext[<span class="number">41</span>:<span class="number">43</span>]</span><br><span class="line">	windows_build = <span class="built_in">int</span>.from_bytes(windows_build, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment">#print(&quot;windows build:&#123;&#125;&quot;.format(windows_build))</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	x64_P = ciphertext[<span class="number">43</span>:<span class="number">47</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gmh = ciphertext[<span class="number">47</span>:<span class="number">51</span>]</span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	ptr_gpa = ciphertext[<span class="number">51</span>:<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># if (&quot;x64&quot;.equals(this.barch)) &#123;</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.join(var10, this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.join(var10, this.ptr_gpa)</span></span><br><span class="line">	<span class="comment"># &#125;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># this.ptr_gmh = CommonUtils.bswap(this.ptr_gmh)</span></span><br><span class="line">	<span class="comment"># this.ptr_gpa = CommonUtils.bswap(this.ptr_gpa)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 4</span></span><br><span class="line">	intz = ciphertext[<span class="number">55</span>:<span class="number">59</span>]</span><br><span class="line">	intz = <span class="built_in">int</span>.from_bytes(intz, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">	intz = toIP(intz)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> intz == <span class="string">&quot;0.0.0.0&quot;</span>:</span><br><span class="line">		intz = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">	<span class="comment">#print(&quot;host:&quot; + intz)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> var9 == <span class="literal">None</span>:</span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="comment"># ??x-mswin-936</span></span><br><span class="line">		<span class="comment"># ddata = ciphertext[59:len(ciphertext)].decode(var9)</span></span><br><span class="line">		ddata = ciphertext[<span class="number">59</span>:<span class="built_in">len</span>(ciphertext)].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">	ddata = ddata.split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">0</span>:</span><br><span class="line">		computer = ddata[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">1</span>:</span><br><span class="line">		username = ddata[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">2</span>:</span><br><span class="line">		process = ddata[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(&quot;PC name:&quot; + computer)</span></span><br><span class="line">	<span class="comment">#print(&quot;username:&quot; + username)</span></span><br><span class="line">	<span class="comment">#print(&quot;process name:&quot; + process)</span></span><br><span class="line"></span><br><span class="line">	raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">	digest = raw_aes_hash256.digest()</span><br><span class="line">	aes_key = digest[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">	hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;AES key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(aes_key.<span class="built_in">hex</span>()))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;HMAC key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(hmac_key.<span class="built_in">hex</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#print(hexdump.hexdump(ciphertext))</span></span><br></pre></td></tr></table></figure>
<p>3、将流量包中数据写成base64形式：（数据指的是图中蓝色部分，每个tcp流中的流量均试一下即可）</p>
<p><img src="/post/ccf22797/image-20230910155301194.png" alt="image-20230910155301194"></p>
<p>转换为原始数据：</p>
<p><img src="/post/ccf22797/image-20230910155542125.png" alt="image-20230910155542125"></p>
<p>写成base64形式：</p>
<p><img src="/post/ccf22797/image-20230910155529969.png" alt="image-20230910155529969"></p>
<p>4、最终解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;2f793b0251bb6c09bda982cb159cd611&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;e5695e8bf533009cd4a3c950d447b032&quot;</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAwNR1s4ymDHA08b2cCeYKryK3UKJK0G2nKl/svxd3sD2WvktAWL1hS0gvdfXP7XmLpCd3CgYHRMvh9bWGrKW/2ANbWBQEYp1Lv+iIsuBpLdxanTNqAEOnre/71JK8hUKuJ32lY88IsDwgFFjvH0l3lwDOwgtXtOe6mhxvhuxUK8ourv/sii2KGiMOacqaRI2bOtOBcEal00/bBj85FcE+W6PmmGbF0Q9BvUvQmDT9C+J2H12SZqwwAbFGVJwntkDq7Q==&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hexdump.hexdump(dec))</span></span><br></pre></td></tr></table></figure>
<p>可以看到一串base32数据：</p>
<p><img src="/post/ccf22797/image-20230910155718568.png" alt="image-20230910155718568"></p>
<p>解密即得flag后半段：</p>
<p><img src="/post/ccf22797/image-20230910155756436.png" alt="image-20230910155756436"></p>
<p>flag：</p>
<p><strong>SICTF{79e1755e-08a8-4d3d-9385-4c0541549995}</strong></p>
<p><br></p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有些题的具体原理我确实也懂的不是很透彻，欢迎一起交流讨论！</p>
]]></content>
      <categories>
        <category>wp-misc</category>
      </categories>
  </entry>
  <entry>
    <title>Thoughts</title>
    <url>/post/a6ed3bb1.html</url>
    <content><![CDATA[<p>这篇文章的话特殊一点，记录的题目主要满足以下几条：</p>
<ul>
<li>我还没有能解出</li>
<li>搜索不到wp</li>
<li>有一些思路，并且题目本身我觉得比较有趣</li>
</ul>
<p>所以文章命名为Thoughts，对这些题目提供我的一些思路，希望对各位师傅有一些启发最终解决题目。如果其中的题目有师傅解出来了或者能找到wp，欢迎随时联系我！</p>
<span id="more"></span>
<h3 id="DangerousRSA"><a href="#DangerousRSA" class="headerlink" title="DangerousRSA"></a>DangerousRSA</h3><p>题目来源：广东强网杯 2021 个人组</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is very dangerous</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n=<span class="number">1130559951242142418553461557920917245278152787036994964813122956739956040733223190585188299825937660853090732755660557900622564346469528239989519875434612493124663925800482373019421482927567375862528994310090666571233446002163478309309649223886467303834842172338454971591276606602163799133000582891965785243482166772793400065793927508012418516719549212969303944155066541587875789636798394581666621711612432864870236407912486149901575077993702841083287354610398446101725184000000000000000000000000000000149</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zhuanzhuan</span>(<span class="params">n</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">9</span>* zhuanzhuan(n - <span class="number">1</span>) + zhuanzhuan(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">g = <span class="number">1766592252951269548814352411327322447034194093921285273353477875204196603230641896039854934719468650093602325707751568</span></span><br><span class="line"></span><br><span class="line">hint_0=zhuanzhuan(g)%<span class="number">50254221567892101225665855</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">hint_0</span>):</span><br><span class="line">    <span class="comment">#n_1,n_2 both are int   </span></span><br><span class="line">    <span class="keyword">if</span>   (n_1+hint_0)**<span class="number">2</span>+<span class="number">1712463104290490642</span>*n_1+<span class="number">4730060142800357260761833404838169046987798</span>-<span class="number">66666666</span>*n_2**<span class="number">2</span>=<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        d=<span class="number">55607604802787651645008458776960381905274761803290637507632188635838921065681450951091689278291418693230528750002533602907652688436593464630306292523277204515196410606067221890882848225521819884919432609641732036959698443050773592482567332594684068998082886109352105201496925283866221090767083891241755981564899917062843679988341936588610298860835342859782896551931353504004447312763256966682142206683209406463516580194846276027818291321875085607298572702721743561</span>*n_1+n_2-<span class="number">69462057634597116805075535702860983356198049</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> d  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)=encrypt(hint_0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#The n is very dangerous</span></span><br></pre></td></tr></table></figure>
<p>题目加密流程如下：</p>
<ul>
<li>定义一个递归函数zhuanzhuan()，并用一个大数g作为该函数的形参计算函数值后，模一个数作为hint0</li>
<li>以hint0定义了一个关于n1、n2的方程</li>
<li>用n1、n2生成一个加密值d，保证其与RSA得到的密文相等</li>
</ul>
<p>那么其实要解决的就是以下几个问题：</p>
<ul>
<li>计算zhuanzhuan()函数得到hint0</li>
<li>用hint0解方程得到n1、n2，然后得到RSA密文</li>
<li>分解n从而求解RSA明文</li>
</ul>
<h4 id="计算zhuanzhuan-函数"><a href="#计算zhuanzhuan-函数" class="headerlink" title="计算zhuanzhuan()函数"></a>计算zhuanzhuan()函数</h4><p>zhuanzhuan函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zhuanzhuan</span>(<span class="params">n</span>):   </span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> <span class="number">9</span>* zhuanzhuan(n - <span class="number">1</span>) + zhuanzhuan(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>其实就是个加了一项系数的斐波那契，而直接用它进行计算的话，由于g过大，肯定会爆栈，因此要优化一下。</p>
<p>而对斐波那契数列有一种矩阵快速幂计算的办法，当然也就可以用在这个题，具体来说如下。</p>
<p>我们直接把zhuanzhuan(n)叫做f(n)，这样看上去更直接，那么开始我们拥有初值：</p>
<script type="math/tex; mode=display">
f(0) = 0</script><script type="math/tex; mode=display">
f(1) = 1</script><p>而后面的所有项都是基于这两项进行递推的，写成矩阵形式就是：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   f(2)\\
   f(1)\\
  \end{matrix}
  \right)
  =
\left(
 \begin{matrix}
   9&1\\
   1&0\\
  \end{matrix}
  \right)
  \left(
 \begin{matrix}
   f(1)\\
   f(0)\\
  \end{matrix}
  \right)</script><p>同理：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   f(3)\\
   f(2)\\
  \end{matrix}
  \right)
  =
\left(
 \begin{matrix}
   9&1\\
   1&0\\
  \end{matrix}
  \right)
  \left(
 \begin{matrix}
   f(2)\\
   f(1)\\
  \end{matrix}
  \right)
  =
  \left(
 \begin{matrix}
   9&1\\
   1&0\\
  \end{matrix}
  \right)^2
  \left(
 \begin{matrix}
   f(1)\\
   f(0)\\
  \end{matrix}
  \right)</script><p>所以就有通项：</p>
<script type="math/tex; mode=display">
\left(
 \begin{matrix}
   f(n)\\
   f(n-1)\\
  \end{matrix}
  \right)
  =
\left(
 \begin{matrix}
   9&1\\
   1&0\\
  \end{matrix}
  \right)^{n-1}
  \left(
 \begin{matrix}
   f(1)\\
   f(0)\\
  \end{matrix}
  \right)</script><p>而由于hint0最后也要模一个素数，因此完全可以将整个矩阵都定义在模数的有限域下进行计算，所以能用矩阵快速幂计算出f(g)，从而得到hint0。</p>
<h4 id="解方程得到n1、n2"><a href="#解方程得到n1、n2" class="headerlink" title="解方程得到n1、n2"></a>解方程得到n1、n2</h4><p>n1、n2的方程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(n_1+hint_0)**<span class="number">2</span>+<span class="number">1712463104290490642</span>*n_1+<span class="number">4730060142800357260761833404838169046987798</span>-<span class="number">66666666</span>*n_2**<span class="number">2</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>槽点不少，比如这里都不是”==”而是”=”。。。而现在由于我们已经有hint0，所以把他展开再合并同类项能有以下形式：</p>
<script type="math/tex; mode=display">
n_1^2 + tn_1 -Dn_2^2 + c = 0</script><p>然后其实能看出有佩尔方程的雏形，试一下果然发现这几个数都是凑好的，也就是说我们可以把方程写成如下佩尔方程的标准形式：</p>
<script type="math/tex; mode=display">
(n_1+k)^2 -Dn_2^2 = 1</script><p>那么我们可以求解这个佩尔方程得到多组可能的n1、n2，从而得到多个可能的RSA密文。</p>
<p>但是，没能解出来这个题的问题也就在这里，我会在最后一部分展开详述。</p>
<h4 id="分解n"><a href="#分解n" class="headerlink" title="分解n"></a>分解n</h4><p>假设解佩尔方程我们得到了正确的RSA密文，那么现在我们显然是需要获得n的分解才能解出明文的。但是题目里关于n一共就两点信息：</p>
<p>一个是n本身：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="number">1130559951242142418553461557920917245278152787036994964813122956739956040733223190585188299825937660853090732755660557900622564346469528239989519875434612493124663925800482373019421482927567375862528994310090666571233446002163478309309649223886467303834842172338454971591276606602163799133000582891965785243482166772793400065793927508012418516719549212969303944155066541587875789636798394581666621711612432864870236407912486149901575077993702841083287354610398446101725184000000000000000000000000000000149</span></span><br></pre></td></tr></table></figure>
<p>另一个是对n的描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#The n is very dangerous</span></span><br></pre></td></tr></table></figure>
<p>因此n肯定是由于质数选取不当等原因，导致其可用某种方法简单分解。而观察到n的低位为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.....<span class="number">.000000000000000000000000000000149</span></span><br></pre></td></tr></table></figure>
<p>低位由很多0再加上一个149组成，而n的低位也就是pq乘积的低位，并且149是一个质数，那么这也就是说，p、q之中有一个的十进制低位应该是如下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.....<span class="number">.000000000000001</span></span><br></pre></td></tr></table></figure>
<p>那么就可以猜测他是p-1光滑数，事实上也确实可以用pohlig-hellman获得n的分解。</p>
<p>看上去题目好像已经顺利解决了，但是接下来就是问题：</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>问题就出在佩尔方程那一步。我们已知RSA密文是如下方式产生的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="number">55607604802787651645008458776960381905274761803290637507632188635838921065681450951091689278291418693230528750002533602907652688436593464630306292523277204515196410606067221890882848225521819884919432609641732036959698443050773592482567332594684068998082886109352105201496925283866221090767083891241755981564899917062843679988341936588610298860835342859782896551931353504004447312763256966682142206683209406463516580194846276027818291321875085607298572702721743561</span>*n_1+n_2-<span class="number">69462057634597116805075535702860983356198049</span></span><br></pre></td></tr></table></figure>
<p>写直观一点如下：</p>
<script type="math/tex; mode=display">
d = kn_1 + n_2 - t</script><p>这一步本身并没有什么问题，因为k、t肯定是用RSA得到的密文以及佩尔方程的某一组解凑出来的两个正数。那么显然，随着n1、n2增大，得到的密文d也会增大。</p>
<p>而已知：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="built_in">pow</span>(m,e,n)=encrypt(hint_0)</span><br></pre></td></tr></table></figure>
<p>这里也用的是”=”而不是”==”，无力吐槽。。。总之就是说，我们得到的密文应该是在(0,n)范围内的。所以我们需要先找到佩尔方程的最小正整数解，然后逐个解搜索，一直到得到的d不落在(0,n)范围内就退出。</p>
<p>但是问题就在于，求出的一组最小正整数解(n1,n2)得到的d也大于了n？什么情况？</p>
<p>这里简单阐述一下佩尔方程的求解思路，用连分数解决的思路很易懂，如下：</p>
<p>方程基本形式是：</p>
<script type="math/tex; mode=display">
x^2-Dy^2 = 1</script><p>就有：</p>
<script type="math/tex; mode=display">
x^2 = Dy^2 + 1 \approx Dy^2</script><p>所以：</p>
<script type="math/tex; mode=display">
\sqrt{D} \approx \frac{x}{y}</script><p>因此对根号D连分数展开，检验是否有x^2-Dy^2 = 1，第一次得到的就是最小正整数解。正常来说这样解是没什么问题的，但是这题里D=66666666，较大，这样解是不是会因为根号D的精度问题漏解？</p>
<p>然后我找到了这一篇参考文章：</p>
<p><a href="https://blog.csdn.net/wh2124335/article/details/8871535">连分数法解佩尔方程特解_连分数求解pell方程-CSDN博客</a></p>
<p>看了这个文章会发现，一个数的根号如果是无理数，那么这个无理数的连分数其实是可以用一个有循环节的连分数表示的，并且有算法能精确的计算出这个连分数，因为它不需要用到无理数的小数部分。</p>
<p>我照着这个方式实现了一遍根号表示的无理数连分数展开，这里打印连分数的前一百项示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sol_Pell</span>(<span class="params">D</span>):</span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    c = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#init</span></span><br><span class="line">    D_ = <span class="built_in">int</span>(iroot(D,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">    b.append(D_)</span><br><span class="line">    c.append(D-D_**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        a.append((D_ + b[i])//c[i])</span><br><span class="line">        b.append(a[i]*c[i] - b[i])</span><br><span class="line">        c.append((D-b[i+<span class="number">1</span>]**<span class="number">2</span>) // c[i])</span><br><span class="line">    a.insert(<span class="number">0</span>,D_)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">D = <span class="number">66666666</span></span><br><span class="line">sol_Pell(D)</span><br></pre></td></tr></table></figure>
<p>然后与我们常用的连分数求解佩尔方程对比一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">10000</span></span>):</span><br><span class="line">    ring = RealField(<span class="number">1000</span>)</span><br><span class="line">    cf = continued_fraction(sqrt(ring(N)))</span><br><span class="line">    <span class="built_in">print</span>(cf[:<span class="number">100</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>打印结果可以发现，这两种方法对于根号66666666的连分数展开是完全一样的，这也就是说精度已经足够展开得到精确的连分数循环表示。而由于参考文章中的一个定理：</p>
<p><img src="/post/a6ed3bb1/image-20231109091947570.png" alt="image-20231109091947570"></p>
<p>那么也就是说，我们得到的n1、n2的确就是最小正整数解。而既然最小正整数解得到的d都大于n，那么由于d单增，之后迭代得到的其他所有正整数解都肯定大于n，因此肯定都不是正确解。</p>
<p>然后我的思路是：一组正整数解其实对应四组解，比如如果(x,y)是佩尔方程的解的话，那么以下三组肯定也都是佩尔方程的解：</p>
<script type="math/tex; mode=display">
(x,-y),(-x,y),(-x,-y)</script><p>但是显而易见，n1乘了一个大系数，所以要想d落在(0,n)，就只能改变n2为负数试试。但是肯定也能想到杯水车薪，因为n2完全影响不了前面那个大数的比特位数。</p>
<p>那到底哪里出了问题？我猜测了一下是不是n2、n1打反了，因为如果调整位置的话确实就可以刚好落在(0,n)内，但是事实上也出不了结果。</p>
<p>那难道数字打错了或者我还有别的疏忽？这就不得而知了。</p>
<p>总之还是放个exp，毕竟也许代码有点什么错误导致出不了结果，有兴趣的师傅可以看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">1130559951242142418553461557920917245278152787036994964813122956739956040733223190585188299825937660853090732755660557900622564346469528239989519875434612493124663925800482373019421482927567375862528994310090666571233446002163478309309649223886467303834842172338454971591276606602163799133000582891965785243482166772793400065793927508012418516719549212969303944155066541587875789636798394581666621711612432864870236407912486149901575077993702841083287354610398446101725184000000000000000000000000000000149</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">g = <span class="number">1766592252951269548814352411327322447034194093921285273353477875204196603230641896039854934719468650093602325707751568</span></span><br><span class="line">p = <span class="number">50254221567892101225665855</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 factor n</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = <span class="built_in">pow</span>(a, m, n)</span><br><span class="line">    pp = GCD(a-<span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">if</span> pp != <span class="number">1</span> <span class="keyword">and</span> pp != n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    m += <span class="number">1</span></span><br><span class="line">qq = <span class="built_in">int</span>(n // pp)</span><br><span class="line">phi = (pp-<span class="number">1</span>)*(qq-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 Get hint0</span></span><br><span class="line">L = Matrix(Zmod(p),[[<span class="number">9</span>,<span class="number">1</span>],</span><br><span class="line">                    [<span class="number">1</span>,<span class="number">0</span>]]) </span><br><span class="line">init = vector(Zmod(p),[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">hint0 = <span class="built_in">int</span>((L^(g-<span class="number">1</span>)*init)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3 pell</span></span><br><span class="line"><span class="comment">#(n_1+hint_0)**2+1712463104290490642*n_1+4730060142800357260761833404838169046987798-66666666*n_2**2=0:</span></span><br><span class="line">temp = hint0**<span class="number">2</span>+<span class="number">4730060142800357260761833404838169046987798</span>+<span class="number">1</span></span><br><span class="line">k1 = (<span class="number">2</span>*hint0+<span class="number">1712463104290490642</span>)//<span class="number">2</span></span><br><span class="line"><span class="comment">#print(k1**2 == temp)</span></span><br><span class="line"><span class="comment">#(n1+k1)^2 -D*n2^2 = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">10000</span></span>):</span><br><span class="line">    ring = RealField(<span class="number">10000</span>)</span><br><span class="line">    cf = continued_fraction(sqrt(ring(N)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">D = <span class="number">66666666</span></span><br><span class="line">n1_,n2 = solve_pell(D)</span><br><span class="line">n1 = n1_ - k1</span><br><span class="line"><span class="comment">#print((n1+hint0)**2+1712463104290490642*n1+4730060142800357260761833404838169046987798-66666666*n2**2==0)</span></span><br><span class="line">k = <span class="number">55607604802787651645008458776960381905274761803290637507632188635838921065681450951091689278291418693230528750002533602907652688436593464630306292523277204515196410606067221890882848225521819884919432609641732036959698443050773592482567332594684068998082886109352105201496925283866221090767083891241755981564899917062843679988341936588610298860835342859782896551931353504004447312763256966682142206683209406463516580194846276027818291321875085607298572702721743561</span></span><br><span class="line">t = <span class="number">69462057634597116805075535702860983356198049</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part4 Get flag</span></span><br><span class="line">c = k*n1 + n2 - t</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<h3 id="111"><a href="#111" class="headerlink" title="111"></a>111</h3><p>题目来源：暂不明确</p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = %s&quot;</span> % <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %s&quot;</span> % <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line">g = <span class="number">23</span></span><br><span class="line">G = <span class="number">11</span></span><br><span class="line">x = <span class="number">403638639297424424030427248437292930901426348835802538164151760802964623822045794500939051975836868693929980721020252046582234954683741983106400414344716052437631852316722239725845579202592686299335379402696402426374492134051721258686792647746078809606686805108337953402269205238590881513586553277287068954382</span></span><br><span class="line">y = <span class="number">2788042276518515357450960102700140012515982479659057104181173132696595727177169896340844620440016059927182507197941000790257318837349294378321194646380886927861234824905576296807661416166077156207249648372928455517246584917020679149653861285226961170842021388854323284132579306053835679130563246044941718724356142</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(g, <span class="built_in">pow</span>(G, x), n)==<span class="built_in">pow</span>(g, <span class="built_in">pow</span>(G, y), n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 97556864962789127824701383242111068245641430412088446049554987171631796271268013457675328750740703181455093780021347024032292309660522866063731237500797701206940725352099428514342659100771939441946971272319151463476877708240447532346101326328206390117414020245045680514443093718216781806739876823259237682041</span></span><br><span class="line"><span class="comment"># c = 97506619181657974835472296128714598728435343734591865967781506389027493446492338931895061849567882930303570448811849167940548090710640607320028639112831504753106905840969732206394654206682020482058950978096138227623007427344924113713884121137383236661810418984400003458312561214376484805408760046782907944992</span></span><br></pre></td></tr></table></figure>
<p>题目内容很简单，给定x、y，满足：</p>
<script type="math/tex; mode=display">
23^{11^{x}} \equiv 23^{11^{y}} \quad (mod\;n)</script><p>其中n是RSA公钥，题目用e=65537和n加密flag得到密文，要求还原明文。因此我们要做的就是根据x、y的关系式来得到n的分解从而解密RSA。</p>
<p>首先摘掉第一层指数：</p>
<script type="math/tex; mode=display">
11^x \equiv 11^y \quad(mod\; \phi(n))</script><p>然后摘掉第二层指数：</p>
<script type="math/tex; mode=display">
x \equiv y \quad (mod\; \phi(\phi(n)) )</script><p>至于为什么两层分别是23、11，我思考了一下觉得应该没什么特别的意义，应该就是分别取了两个原根。</p>
<p>那么对于摘掉第一层指数的结果，因为有：</p>
<script type="math/tex; mode=display">
k\phi(n) = 11^x - 11^y</script><p>所以如果我们可以计算出11^x-11^y，就可以直接求e关于kphin的逆元从而解密密文。但是x、y太大了，不进行模运算的话，没有办法计算幂次。因此主要还是要想办法从摘掉第二层指数的结果入手。</p>
<p>因为有：</p>
<script type="math/tex; mode=display">
x \equiv y \quad (mod\; \phi(\phi(n)) )</script><p>所以：</p>
<script type="math/tex; mode=display">
y - x = k\phi(\phi(n))</script><p>而我们的目的是找到phin或者phin的倍数，又已知phin等于：</p>
<script type="math/tex; mode=display">
\phi(n) = (p-1)(q-1)</script><p>为了得到phi(phi(n))的表示结果，我们把phin展开为标准素数分解的形式：</p>
<script type="math/tex; mode=display">
\phi(n) = (p-1)(q-1) = p_1^{k_1}p_2^{k_2}...p_n^{k_n}</script><p>那么phi(phi(n))就应该等于：</p>
<script type="math/tex; mode=display">
\phi(\phi(n)) = p_1^{k_1-1}(p_1-1)p_2^{k_2-1}(p_2-1)...p_n^{k_n-1}(p_n-1)</script><p>而现在我们有x、y，就可以计算y-x得到k倍的phi(phi(n))的值，然后可以去factordb上查他的分解：</p>
<p><img src="/post/a6ed3bb1/image-20231114152241975.png" alt="image-20231114152241975"></p>
<p>其中最后那个大数是一个无法进一步分解出因子的合数。而现在，我们是期望通过y-x的因子分解，去找到形如下面这样的素因子幂次：</p>
<script type="math/tex; mode=display">
p_1^{k_1-1}、p_2^{k_2-1}、... p_n^{k_n-1}</script><p>然后就可以通过这些素因子幂次还原phin。但是实际上，基本没有能直接判别的素因子幂次。因此可以认为phi(phi(n))的因子分解应该是如下形式：</p>
<script type="math/tex; mode=display">
\phi(\phi(n)) = (p_1-1)(p_2-1)...(p_n-1)</script><p>以上的分析都是没有仔细考虑2这个因子的，现在我们把2加入进来细化一下思考。首先由于p-1和q-1都是偶数，所以phin就至少含有2^2，且现在我们认为phin的分解中没有素数幂次：</p>
<script type="math/tex; mode=display">
\phi(n) = (p-1)(q-1) = 2^{2+t}p_1p_2...p_n,t \geq0</script><p>更进一步来说，phi(phi(n))的因子分解为：</p>
<script type="math/tex; mode=display">
\phi(\phi(n)) = 2^{1+t}(p_1-1)(p_2-1)...(p_n-1) , t \geq 0</script><p>显然，后面的pi-1也都是偶数，所以可以至少提出一个2，进一步写为：</p>
<script type="math/tex; mode=display">
\phi(\phi(n)) = 2^{1+t+n}\frac{(p_1-1)}{2}\frac{(p_2-1)}{2}...\frac{(p_n-1)}{2} , t \geq 0</script><p>而事实上，我们factordb分解出的结果只含有2^5，所以可以认为phin中除了2以外，最多只有4个其他素因子。而我们的目的就是把这四个素因子全部找到。</p>
<p>怎么找呢？毕竟我们现在只拥有y-x，也就是k倍的phi(phi(n))的因子分解结果：</p>
<p><img src="/post/a6ed3bb1/image-20231114152241975.png" alt="image-20231114152241975"></p>
<p>他其实等价于：</p>
<script type="math/tex; mode=display">
y-x = k\phi(\phi(n)) = k2^{1+t}(p_1-1)(p_2-1)...(p_n-1) , t \geq 0</script><p>那我们可以这样考虑：我们设一个乘积结果final，其初值为1，然后我们遍历factordb分解出的因子的所有可能乘积并对乘积+1，如果说这个结果是素数的话，那么它就有可能是phin的一个素因子，我们就把他乘到final中去。这样得到的final按理来说会包含phin的所有素因子，所以他应该满足：</p>
<script type="math/tex; mode=display">
final = k \phi(n)</script><p>那么我们求e关于final的逆元d，这个d满足下式：</p>
<script type="math/tex; mode=display">
ed \equiv 1 \quad (mod\;k\phi(n))</script><p>对于RSA解密而言正确性如下：</p>
<script type="math/tex; mode=display">
c^d \equiv m^{ed} \equiv m^{1+kk'\phi(n)} \equiv m \quad(mod \; n)</script><p>所以这个d也可以用于RSA解密。</p>
<p>但是事实上这样解密得不到正确结果。我认为问题是出在y-x的最后一个合数因子没有被完全分解，所以会对phin的可能素因子有遗漏。</p>
<p>然后我就在想，如果不能完全覆盖phin的素因子，有没有可能能覆盖到p-1或q-1其中一个的全部素因子？这样我们可以用如下方式来分解n，因为：</p>
<script type="math/tex; mode=display">
2^{k'(p-1)} \equiv 2 \quad(mod\;p)</script><p>所以：</p>
<script type="math/tex; mode=display">
GCD(2^{k'(p-1)} - 2 ,n) = p</script><p>但事实上这样也不行。我也暂时没想到别的好办法，也许23、11真的需要用上？</p>
<p>虽然没能做出来，但还是放一下自己的exp吧，有兴趣的师傅可以看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"><span class="keyword">from</span> factordb.factordb <span class="keyword">import</span> FactorDB</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">g = <span class="number">23</span></span><br><span class="line">G = <span class="number">11</span></span><br><span class="line">x = <span class="number">403638639297424424030427248437292930901426348835802538164151760802964623822045794500939051975836868693929980721020252046582234954683741983106400414344716052437631852316722239725845579202592686299335379402696402426374492134051721258686792647746078809606686805108337953402269205238590881513586553277287068954382</span></span><br><span class="line">y = <span class="number">2788042276518515357450960102700140012515982479659057104181173132696595727177169896340844620440016059927182507197941000790257318837349294378321194646380886927861234824905576296807661416166077156207249648372928455517246584917020679149653861285226961170842021388854323284132579306053835679130563246044941718724356142</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">97556864962789127824701383242111068245641430412088446049554987171631796271268013457675328750740703181455093780021347024032292309660522866063731237500797701206940725352099428514342659100771939441946971272319151463476877708240447532346101326328206390117414020245045680514443093718216781806739876823259237682041</span></span><br><span class="line">c = <span class="number">97506619181657974835472296128714598728435343734591865967781506389027493446492338931895061849567882930303570448811849167940548090710640607320028639112831504753106905840969732206394654206682020482058950978096138227623007427344924113713884121137383236661810418984400003458312561214376484805408760046782907944992</span></span><br><span class="line"></span><br><span class="line">f = FactorDB(y-x)</span><br><span class="line">f.connect()</span><br><span class="line">fs = f.get_factor_list()</span><br><span class="line"><span class="built_in">print</span>(fs)</span><br><span class="line"></span><br><span class="line">t = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="built_in">len</span>(fs)):</span><br><span class="line">    prime = <span class="number">1</span></span><br><span class="line">    binlist = <span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="built_in">len</span>(fs))</span><br><span class="line">    choice = [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> binlist]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fs)):</span><br><span class="line">        <span class="keyword">if</span>(choice[j] == <span class="number">1</span>):</span><br><span class="line">            prime *= fs[j]</span><br><span class="line">    prime += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(isPrime(prime)):</span><br><span class="line">        t *= prime</span><br><span class="line"></span><br><span class="line"><span class="comment">#try to factor p</span></span><br><span class="line">temp = powmod(<span class="number">2</span>,<span class="number">2</span>**<span class="number">10</span>*t,n)-<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(GCD(temp,n))</span><br><span class="line"></span><br><span class="line"><span class="comment">#try to get kphi(n)</span></span><br><span class="line">d = inverse(e, <span class="number">2</span>**<span class="number">10</span>*t)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(powmod(c,d,n)))</span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
]]></content>
      <categories>
        <category>crypto趣题</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(一)</title>
    <url>/post/77e39860.html</url>
    <content><![CDATA[<p>在CNSS 2023的夏令营线上题中找到的一道misc题，看到标题有Crypto，感兴趣就去试了一试，发现确实是道比较有意思的题目，就在此记录一下，同时也开启 <strong>misc趣题</strong> 这一分类。</p>
<span id="more"></span>
<h2 id="🔑-Shino-的-Crypto-梦想"><a href="#🔑-Shino-的-Crypto-梦想" class="headerlink" title="🔑 Shino 的 Crypto 梦想"></a>🔑 Shino 的 Crypto 梦想</h2><p>题目来源：2023-CNSS-Summer</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刚刚接触网络安全不久的 Shino 有一个成为 Crypto 方向专家的梦想，所以他写了一个很安全的加密算法，你可以帮他看看吗？</span><br></pre></td></tr></table></figure>
<p>端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc 47.108.140.140 11037</span><br></pre></td></tr></table></figure>
<p>Hint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、你可能需要pwntools</span><br><span class="line">2、cnss&#123;a-zA-Z0-9_&#125;</span><br><span class="line">   保证&#125;只在 flag 结尾出现一次</span><br><span class="line">   flag 长度不大于 50</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> cipher, key</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encoder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stream = self.randomBox(self._init_box(key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_encrypt</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(c) ^ <span class="built_in">next</span>(self.stream)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_box</span>(<span class="params">self, crypt_key</span>):</span><br><span class="line">        Box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        key_length = <span class="built_in">len</span>(crypt_key)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            index = <span class="built_in">ord</span>(crypt_key[(i % key_length)])</span><br><span class="line">            j = (j + Box[i] + index) % <span class="number">256</span></span><br><span class="line">            Box[i], Box[j] = Box[j], Box[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Box</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomBox</span>(<span class="params">self, S</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i = i + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">            j = j + S[i] &amp; <span class="number">255</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            <span class="keyword">yield</span> S[(S[i] + S[j] &amp; <span class="number">255</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>首先，题目的加密算法是RC4，可以先检查一下有无变种，方法是自己随便使用一组明文和密钥，分别用该程序与在线网站加密，检查结果是否相同。这样操作之后可以发现，结果是完全一样的，这说明本题并没有对RC4进行魔改，也因此解题的思路也就很自然的从开始的解密码转变成了找漏洞。</p>
<p>而要找漏洞的程序段如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoder = Encoder()</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> correct == <span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>先大致理解程序内容：程序需要你输入一串flag值，并将flag值逐个进行RC4加密并检查是否与密文相等，当输入的flag串加密值与密文完全相等时，便通过了检查，程序输出”Correct flag!”。</p>
<p>所以，这么一大段其实就只实现了一个内容：检查你输入的flag和你实际要提交的flag是否相等！可以说，整个程序都是一个障眼法，其实不要这个RC4，直接用以下的代码检查也是一样的：(假设实际flag串名为secret)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;input flag&gt;&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == secret):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Correct flag!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样就行了！所以用这么一大段来核查flag一定有问题。</p>
<p>仔细核查，果然，下面这段代码大有玄机：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag):</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(flag):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这段代码存在以下几个问题：</p>
<ul>
<li>输入的flag串中含有不在table中的项时，会一直跳过直至读到table中的字符为止，但是指数 i 会一直增加。</li>
<li>判断指数 i 过大，依靠的是输入的字符串长度，而不是实际的flag串。</li>
<li>将cipher[i]与encrypt(flag[i])进行比对时，并没有对cipher的指数进行检查。</li>
</ul>
<p>这体现了一个很重要的信息：</p>
<ul>
<li>如果你的输入是正常的错误flag串，他会打印的内容是”Wrong flag!”</li>
<li>如果你的输入是不正常的构造的字符串导致cipher[i]越界了，程序不会正常打印内容，而会报错！</li>
</ul>
<p>举个例子，构造如下两个串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag = &quot;cnss&#123;1234567890abcdefgh&#125;&quot;</span><br><span class="line">flag = chr(0) * 50 + &quot;c&quot;</span><br></pre></td></tr></table></figure>
<p>那么，程序对第两个字符串的处理分别是：</p>
<p>由于第一个串字符均在table中，因此程序仅仅会将每个字符与正确flag进行比对，直到某个字符比对失败时，打印出”Wrong flag!”</p>
<p>而第二个串前五十个字符均是ASCII码为0的字符，是不在table中的，因此程序会先反复执行以下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(flag) <span class="keyword">and</span> flag[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>直至第51个字符”c”，由于”c”在table中，因此会进行比对。此时i=51，而由题目知道，flag长度不大于50，因此这时执行这条语句进行比对时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> cipher[i] != encoder.do_encrypt(flag[i]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong flag!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>cipher[i]是必定越界的！那么程序就会抛出一个异常，而不再是打印”Wrong flag!”了。</p>
<p>这有什么用呢？用处很大。首先我们就可以反复构造如下字符串，发送给靶机端来确定真实flag的正确长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>为什么这样就可以确定长度呢？我们假设flag的正确长度是30，那么发送下面字符串给靶机，靶机的回应都是“异常”而非错误，这是因为cipher数组的下标最多只能取到29，一旦涉及到cipher[30]甚至更多就会产生越界异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">49</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">47</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line">......</span><br><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">30</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>然而发送下一个flag串，也就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">chr</span>(<span class="number">0</span>) * <span class="number">29</span> + <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<p>这时，由于没有越界，程序会回应”Wrong flag!”，而不再抛出异常了。</p>
<p>所以，由上述方式，我们就可以最终确定flag的真实长度是24，之后则可以反复构造下列字符串，并发送给靶机端来逐个核查字符是否正确：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>道理也是相同的，如果i是错误字符，那么核查不通过，程序直接回应”Wrong flag!”，而如果是正确字符，程序则会继续向后读，一直到读到越界的”a”后，抛出越界异常。</p>
<p>得到这个字符为 “1” 后，将他加入”cnss{“串后，继续构造下面字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">	flag = <span class="string">&quot;cnss&#123;1&quot;</span> + i + <span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">100</span> + <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>如此反复发送直至flag串已知的部分长度为24即可。</p>
<p>构造字符串并发送给靶机端需要用到pwntools，同时还有一些小细节需要注意，比如需要发送的是字节流而非字符串流。但是这些慢慢调试程序就好了。</p>
<p>exp.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;&#123;&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line">init = <span class="string">b&#x27;cnss&#123;&#x27;</span></span><br><span class="line">has_find = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(has_find == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        r=remote(<span class="string">&quot;47.108.140.140&quot;</span>,<span class="number">11037</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r.sendline(init + long_to_bytes(<span class="built_in">ord</span>(table[i])) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">100</span> + <span class="string">b&quot;a&quot;</span>)</span><br><span class="line">            temp = r.recvline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">b&quot;Correct&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(init) == <span class="number">23</span>):</span><br><span class="line">                has_find = <span class="number">1</span></span><br><span class="line">                r.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            init += long_to_bytes(<span class="built_in">ord</span>(table[i]))</span><br><span class="line">            <span class="built_in">print</span>(init)</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        r.close()</span><br><span class="line"><span class="built_in">print</span>(init + <span class="string">b&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到flag：</p>
<p><strong>cnss{1nd3X_0Ut_oF_r4nge}</strong></p>
<p><br></p>
<p>确实很有意思！</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
  <entry>
    <title>misc趣题(二)</title>
    <url>/post/d8d20302.html</url>
    <content><![CDATA[<p>又做到了一个包含misc与crypto的综合题，在这里记录一下我对这个问题的思考。</p>
<span id="more"></span>
<h2 id="MISC-3"><a href="#MISC-3" class="headerlink" title="MISC.3"></a>MISC.3</h2><p>题目来源：CISG 2015</p>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文中含有flag这个单词。flag格式为flag&#123;字符串&#125;。</span><br></pre></td></tr></table></figure>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>] - rand()</span><br><span class="line">        plain += <span class="built_in">chr</span>(temp &gt;&gt; <span class="number">22</span>)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;plaintext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    f2 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    data = f1.read()</span><br><span class="line">    <span class="keyword">from</span> secretfile <span class="keyword">import</span> secretkey</span><br><span class="line">    data = encrypt(data,secretkey)</span><br><span class="line">    f2.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>以及一个加密文件ciphertext，由于文件内容较大就不放在这里了。</p>
<p>先梳理一下题目的加密过程：</p>
<ul>
<li>从secretfile里取出secretkey，作为自己的伪随机数生成器的种子</li>
<li>对于明文文件的每一个字符，将他们的ASCII码左移22位，并加上当前rand()生成的伪随机数，得到密文</li>
<li>将密文用pack函数整合，按顺序写入ciphertext里。</li>
</ul>
<p>所以，求解题目的突破口在于求解出密钥。而我搜索到的一篇wp讲了一种不错的思路：</p>
<p><a href="https://geekorz.com/post/cigs2015/">CISG2015 MISC.3解析 (geekorz.com)</a></p>
<p>但是他其中的一句话引发了我的思考：</p>
<p><img src="/post/d8d20302/image-20230913142928566.png" alt="image-20230913142928566"></p>
<p>他说，这个随机数生成算法并不同于普通的LCG，因为他最后一步是按位与运算，而不是模运算，所以就没有采用LCG的思路去求解本题。但是仔细思考就会发现，其实道理是完全一样的：</p>
<ul>
<li>x &amp; 0x3fffffff，表示的是取x的低三十位</li>
<li>x mod (0x3fffffff + 1)，表示的也是取x的低三十位</li>
</ul>
<p>所以，某些按位与运算与模运算其实是等价的！因此我们可以利用下列代码，大大简化求解密钥key的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>():</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = (state * <span class="number">1103515425</span> + <span class="number">54321</span>) &amp; <span class="number">0x3fffffff</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">srand</span>(<span class="params">seed</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    state = seed</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data,key</span>):</span><br><span class="line">    srand(key)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        cipher += pack(<span class="string">&quot;i&quot;</span>,(<span class="built_in">ord</span>(c)&lt;&lt;<span class="number">22</span>) + rand())</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    plain = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">        temp = unpack(<span class="string">&quot;i&quot;</span>,data[i:i+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        plain.append(temp)</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;ciphertext&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    data = decrypt(f1.read())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;j =&quot;</span>,j,<span class="string">&quot;:&quot;</span>,end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        key = ((data[<span class="number">0</span>] - (j&lt;&lt;<span class="number">22</span>)) - <span class="number">54321</span>) * inverse(<span class="number">1103515425</span>,(<span class="number">0x3fffffff</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(key,end = <span class="string">&quot;  &quot;</span>)</span><br><span class="line">        srand(key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">40</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>((i - rand()) &gt;&gt; <span class="number">22</span>),end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>
<p>略微解释一下这段代码：</p>
<ul>
<li>decrypt函数相较于给的附件中的decrypt函数作了简化，仅仅实现了unpack的功能，将密文转化为一个数字列表。</li>
<li>main函数用于爆破正确密钥。</li>
</ul>
<p>如何爆破的呢？我们试想一下第一个密文数字data[0]的生成过程，此处假设第一个明文的ord值为j：</p>
<script type="math/tex; mode=display">
data[0] = (j<<22)+rand()</script><p>而其中rand()生成的值为：</p>
<script type="math/tex; mode=display">
rand() = (state * 1103515425 + 54321) \quad (mod\;0x3fffffff + 1)</script><p>而j仅有256种取值可能(更贴切的说，其实仅需要从可见字符范围内考虑)，因此我们生成所有可能的256个密钥，并解密前面四十个密文观测效果，看看哪个是真正的密钥，观测可知：</p>
<p><img src="/post/d8d20302/image-20230913145528744.png" alt="image-20230913145528744"></p>
<p>可以看出j为105时，解出的密文看上去是正确的形式，因此我们取该密钥解密出全部内容，就得到了正确的文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">+0lpfzK92vRhs6zyLUYE20n65i9s9GHFfw04XTb2BqKed1d35nuQX1hD5JRsou3m7dEEKGBIJCxUeAjPDgeixlQrAoZzFAlt541yJoyXxuEMGwaAqTXQlF+7pB/5S4vnZ85Lap2siP8q/jFYp87z7PXHmJ20opxy8yxnBsRPoWEs8glONXf1H+h4kkdTcCg+HfwGXqYrf0jyFBgAAAABJRU5ErkJggg==|flag is hidden in the above data It is a picture and you should base64decode it.</span><br></pre></td></tr></table></figure>
<p>前面是一个很长的base64段，解码得到：</p>
<p><img src="/post/d8d20302/image-20230913145804385.png" alt="image-20230913145804385"></p>
<p>大功告成！</p>
<p>flag：</p>
<p><strong>flag{tHis_1s_YOUR_flaaaaag}</strong></p>
<p>总结一下，本题最重要的一个点，就是发现模运算与按位与运算的等价性，从而能够使用LCG的解法解决题目。</p>
]]></content>
      <categories>
        <category>misc趣题</category>
      </categories>
  </entry>
</search>
